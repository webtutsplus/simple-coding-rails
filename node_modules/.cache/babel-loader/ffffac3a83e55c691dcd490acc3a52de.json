{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport PropTypes from 'prop-types';\nimport { isInViewport } from '../../utilities/viewport';\nimport { useKeyboardShortcuts } from './useKeyboardShortcuts';\nvar NAVIGATION_UP_KEY = 'KeyK';\nvar NAVIGATION_DOWN_KEY = 'KeyJ';\nvar DIRECTIONS = {\n  UP: 'up',\n  DOWN: 'down'\n};\n/**\n * Hook that registers a global key shortcut for 'j' and 'k' to navigate up and down in a list of items\n *\n * @example\n * useListNavigation(\n *   \".crayons-story\",\n *   \"a[id^=article-link-]\",\n *   \"div.paged-stories,div.substories\",\n * )\n *\n * Note:\n * To avoid conflicts, only one of these should be called per page.\n *\n * Note on waterfalls:\n * In the next example, the waterfall container would be 'div.paged-stories':\n * <article />\n * <article />\n * <div class=\"paged-stories\">\n *   <!-- level 1 -->\n *   <article />\n *   <article />\n *   <div class=\"paged-stories\">\n *     <!-- level 2 -->\n *     <article />\n *     <article />\n *   </div>\n * </div>\n *\n * @param {string} itemSelector - The selector for the highest level container of an item\n * @param {string} focusableSelector - The selector for the element that should be focused on\n * @param {string} waterfallItemContainerSelector - The selector for the waterfall item container if the list uses a waterfall structure at any point\n */\n\nexport function useListNavigation(itemSelector, focusableSelector, waterfallItemContainerSelector) {\n  var _useKeyboardShortcuts;\n\n  function navigateInDirection(direction) {\n    navigate(itemSelector, focusableSelector, waterfallItemContainerSelector, direction);\n  }\n\n  useKeyboardShortcuts((_useKeyboardShortcuts = {}, _defineProperty(_useKeyboardShortcuts, NAVIGATION_UP_KEY, function () {\n    return navigateInDirection(DIRECTIONS.UP);\n  }), _defineProperty(_useKeyboardShortcuts, NAVIGATION_DOWN_KEY, function () {\n    return navigateInDirection(DIRECTIONS.DOWN);\n  }), _useKeyboardShortcuts), window, {\n    timeout: 0\n  });\n}\n/**\n * Calls a hook that registers global key event listeners for 'j' and 'k' to navigate up and down in a list of items\n *\n * @example\n * <ListNavigation\n *   itemSelector=\".crayons-story\"\n *   focusableSelector=\"a[id^=article-link-]\"\n *   waterfallItemContainerSelector=\"div.paged-stories,div.substories\"\n * />\n *\n * Note:\n * To avoid conflicts, only one of these should be called per page.\n *\n * Note on waterfalls:\n * In the next example, the waterfall container would be 'div.paged-stories':\n * <article />\n * <article />\n * <div class=\"paged-stories\">\n *   <!-- level 1 -->\n *   <article />\n *   <article />\n *   <div class=\"paged-stories\">\n *     <!-- level 2 -->\n *     <article />\n *     <article />\n *   </div>\n * </div>\n *\n * @param {string} itemSelector - The selector for the highest level container of an item\n * @param {string} focusableSelector - The selector for the element that should be focused on\n * @param {string} waterfallItemContainerSelector - The selector for the waterfall item container if the list uses a waterfall structure at any point\n */\n\nexport function ListNavigation(_ref) {\n  var itemSelector = _ref.itemSelector,\n      focusableSelector = _ref.focusableSelector,\n      waterfallItemContainerSelector = _ref.waterfallItemContainerSelector;\n  useListNavigation(itemSelector, focusableSelector, waterfallItemContainerSelector);\n  return null;\n}\nListNavigation.propTypes = {\n  itemSelector: PropTypes.string.isRequired,\n  focusableSelector: PropTypes.string.isRequired,\n  waterfallItemContainerSelector: PropTypes.string\n};\n/**\n * Focuses on the next/previous element depending on the navigation direction\n *\n * @param {string} itemSelector - The selector for the highest level container of an item\n * @param {string} focusableSelector - The selector for the element that should be focused on\n * @param {string} waterfallItemContainerSelector - The selector for the waterfall item container if the list uses a waterfall structure at any point\n * @param {string} direction - The navigation direction (up or down)\n */\n\nfunction navigate(itemSelector, focusableSelector, waterfallItemContainerSelector, direction) {\n  var _document$activeEleme, _nextContainer;\n\n  var closestContainer = (_document$activeEleme = document.activeElement) === null || _document$activeEleme === void 0 ? void 0 : _document$activeEleme.closest(itemSelector);\n  var nextContainer;\n\n  if (!closestContainer) {\n    nextContainer = getFirstVisibleElement(itemSelector);\n  }\n\n  if (!nextContainer) {\n    var getElementCallback = direction === DIRECTIONS.UP ? getPreviousElement : getNextElement;\n    nextContainer = getElementCallback(closestContainer, itemSelector, waterfallItemContainerSelector);\n  }\n\n  var nextFocusable = (_nextContainer = nextContainer) === null || _nextContainer === void 0 ? void 0 : _nextContainer.querySelector(focusableSelector);\n\n  if (nextFocusable) {\n    nextFocusable.focus();\n\n    if (!isInViewport(nextFocusable, 64)) {\n      window.scrollTo({\n        top: nextContainer.offsetTop - 64\n      });\n    }\n  }\n}\n/**\n * Gets the next element of a list that matches a selector\n *\n * @param {object} element - The current element\n * @param {string} itemSelector - The selector for the highest level container of an item\n * @param {string} waterfallItemContainerSelector - The selector for the waterfall item container if the list uses a waterfall structure at any point\n *\n * @returns {object} The next element to focus on\n */\n\n\nfunction getNextElement(element, itemSelector, waterfallItemContainerSelector) {\n  var sibling = element === null || element === void 0 ? void 0 : element.nextElementSibling;\n\n  if (sibling && !sibling.matches(\"\".concat(itemSelector, \",\").concat(waterfallItemContainerSelector))) {\n    return sibling.nextElementSibling;\n  }\n\n  return sibling;\n}\n/**\n * Gets the previous element of a list that matches a selector\n *\n * @param {object} element - The current element\n * @param {string} itemSelector - The selector for the highest level container of an item\n * @param {string} waterfallItemContainerSelector - The selector for the waterfall item container if the list uses a waterfall structure at any point\n *\n * @returns {object} The previous element to focus on\n */\n\n\nfunction getPreviousElement(element, itemSelector, waterfallItemContainerSelector) {\n  if (!element) {\n    return null;\n  }\n\n  var sibling = element.previousElementSibling;\n\n  if (!sibling && waterfallItemContainerSelector) {\n    var _element$closest;\n\n    // reached the top of a waterfall level\n    sibling = (_element$closest = element.closest(waterfallItemContainerSelector)) === null || _element$closest === void 0 ? void 0 : _element$closest.previousElementSibling;\n  }\n\n  if (sibling && !sibling.matches(itemSelector)) {\n    return sibling.previousElementSibling;\n  }\n\n  return sibling;\n}\n/**\n * Gets the first visible element that matches a selector\n *\n * @param {string} selector - The CSS selector\n *\n * @returns {object} The first visible element\n */\n\n\nfunction getFirstVisibleElement(selector) {\n  var elements = document.querySelectorAll(selector);\n  return Array.prototype.find.call(elements, function (element) {\n    return isInViewport(element);\n  });\n}","map":{"version":3,"sources":["/Users/nmadhab/hobby/forem/app/javascript/shared/components/useListNavigation.js"],"names":["PropTypes","isInViewport","useKeyboardShortcuts","NAVIGATION_UP_KEY","NAVIGATION_DOWN_KEY","DIRECTIONS","UP","DOWN","useListNavigation","itemSelector","focusableSelector","waterfallItemContainerSelector","navigateInDirection","direction","navigate","window","timeout","ListNavigation","propTypes","string","isRequired","closestContainer","document","activeElement","closest","nextContainer","getFirstVisibleElement","getElementCallback","getPreviousElement","getNextElement","nextFocusable","querySelector","focus","scrollTo","top","offsetTop","element","sibling","nextElementSibling","matches","previousElementSibling","selector","elements","querySelectorAll","Array","prototype","find","call"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport { isInViewport } from '../../utilities/viewport';\nimport { useKeyboardShortcuts } from './useKeyboardShortcuts';\n\nconst NAVIGATION_UP_KEY = 'KeyK';\nconst NAVIGATION_DOWN_KEY = 'KeyJ';\n\nconst DIRECTIONS = {\n  UP: 'up',\n  DOWN: 'down',\n};\n\n/**\n * Hook that registers a global key shortcut for 'j' and 'k' to navigate up and down in a list of items\n *\n * @example\n * useListNavigation(\n *   \".crayons-story\",\n *   \"a[id^=article-link-]\",\n *   \"div.paged-stories,div.substories\",\n * )\n *\n * Note:\n * To avoid conflicts, only one of these should be called per page.\n *\n * Note on waterfalls:\n * In the next example, the waterfall container would be 'div.paged-stories':\n * <article />\n * <article />\n * <div class=\"paged-stories\">\n *   <!-- level 1 -->\n *   <article />\n *   <article />\n *   <div class=\"paged-stories\">\n *     <!-- level 2 -->\n *     <article />\n *     <article />\n *   </div>\n * </div>\n *\n * @param {string} itemSelector - The selector for the highest level container of an item\n * @param {string} focusableSelector - The selector for the element that should be focused on\n * @param {string} waterfallItemContainerSelector - The selector for the waterfall item container if the list uses a waterfall structure at any point\n */\nexport function useListNavigation(\n  itemSelector,\n  focusableSelector,\n  waterfallItemContainerSelector,\n) {\n  function navigateInDirection(direction) {\n    navigate(\n      itemSelector,\n      focusableSelector,\n      waterfallItemContainerSelector,\n      direction,\n    );\n  }\n\n  useKeyboardShortcuts(\n    {\n      [NAVIGATION_UP_KEY]: () => navigateInDirection(DIRECTIONS.UP),\n      [NAVIGATION_DOWN_KEY]: () => navigateInDirection(DIRECTIONS.DOWN),\n    },\n    window,\n    { timeout: 0 },\n  );\n}\n\n/**\n * Calls a hook that registers global key event listeners for 'j' and 'k' to navigate up and down in a list of items\n *\n * @example\n * <ListNavigation\n *   itemSelector=\".crayons-story\"\n *   focusableSelector=\"a[id^=article-link-]\"\n *   waterfallItemContainerSelector=\"div.paged-stories,div.substories\"\n * />\n *\n * Note:\n * To avoid conflicts, only one of these should be called per page.\n *\n * Note on waterfalls:\n * In the next example, the waterfall container would be 'div.paged-stories':\n * <article />\n * <article />\n * <div class=\"paged-stories\">\n *   <!-- level 1 -->\n *   <article />\n *   <article />\n *   <div class=\"paged-stories\">\n *     <!-- level 2 -->\n *     <article />\n *     <article />\n *   </div>\n * </div>\n *\n * @param {string} itemSelector - The selector for the highest level container of an item\n * @param {string} focusableSelector - The selector for the element that should be focused on\n * @param {string} waterfallItemContainerSelector - The selector for the waterfall item container if the list uses a waterfall structure at any point\n */\nexport function ListNavigation({\n  itemSelector,\n  focusableSelector,\n  waterfallItemContainerSelector,\n}) {\n  useListNavigation(\n    itemSelector,\n    focusableSelector,\n    waterfallItemContainerSelector,\n  );\n\n  return null;\n}\n\nListNavigation.propTypes = {\n  itemSelector: PropTypes.string.isRequired,\n  focusableSelector: PropTypes.string.isRequired,\n  waterfallItemContainerSelector: PropTypes.string,\n};\n\n/**\n * Focuses on the next/previous element depending on the navigation direction\n *\n * @param {string} itemSelector - The selector for the highest level container of an item\n * @param {string} focusableSelector - The selector for the element that should be focused on\n * @param {string} waterfallItemContainerSelector - The selector for the waterfall item container if the list uses a waterfall structure at any point\n * @param {string} direction - The navigation direction (up or down)\n */\nfunction navigate(\n  itemSelector,\n  focusableSelector,\n  waterfallItemContainerSelector,\n  direction,\n) {\n  const closestContainer = document.activeElement?.closest(itemSelector);\n\n  let nextContainer;\n  if (!closestContainer) {\n    nextContainer = getFirstVisibleElement(itemSelector);\n  }\n  if (!nextContainer) {\n    const getElementCallback =\n      direction === DIRECTIONS.UP ? getPreviousElement : getNextElement;\n\n    nextContainer = getElementCallback(\n      closestContainer,\n      itemSelector,\n      waterfallItemContainerSelector,\n    );\n  }\n\n  const nextFocusable = nextContainer?.querySelector(focusableSelector);\n  if (nextFocusable) {\n    nextFocusable.focus();\n    if (!isInViewport(nextFocusable, 64)) {\n      window.scrollTo({ top: nextContainer.offsetTop - 64 });\n    }\n  }\n}\n\n/**\n * Gets the next element of a list that matches a selector\n *\n * @param {object} element - The current element\n * @param {string} itemSelector - The selector for the highest level container of an item\n * @param {string} waterfallItemContainerSelector - The selector for the waterfall item container if the list uses a waterfall structure at any point\n *\n * @returns {object} The next element to focus on\n */\nfunction getNextElement(element, itemSelector, waterfallItemContainerSelector) {\n  const sibling = element?.nextElementSibling;\n  if (\n    sibling &&\n    !sibling.matches(`${itemSelector},${waterfallItemContainerSelector}`)\n  ) {\n    return sibling.nextElementSibling;\n  }\n  return sibling;\n}\n\n/**\n * Gets the previous element of a list that matches a selector\n *\n * @param {object} element - The current element\n * @param {string} itemSelector - The selector for the highest level container of an item\n * @param {string} waterfallItemContainerSelector - The selector for the waterfall item container if the list uses a waterfall structure at any point\n *\n * @returns {object} The previous element to focus on\n */\nfunction getPreviousElement(\n  element,\n  itemSelector,\n  waterfallItemContainerSelector,\n) {\n  if (!element) {\n    return null;\n  }\n\n  let sibling = element.previousElementSibling;\n  if (!sibling && waterfallItemContainerSelector) {\n    // reached the top of a waterfall level\n    sibling = element.closest(waterfallItemContainerSelector)\n      ?.previousElementSibling;\n  }\n\n  if (sibling && !sibling.matches(itemSelector)) {\n    return sibling.previousElementSibling;\n  }\n\n  return sibling;\n}\n\n/**\n * Gets the first visible element that matches a selector\n *\n * @param {string} selector - The CSS selector\n *\n * @returns {object} The first visible element\n */\nfunction getFirstVisibleElement(selector) {\n  const elements = document.querySelectorAll(selector);\n  return Array.prototype.find.call(elements, (element) =>\n    isInViewport(element),\n  );\n}\n"]},"metadata":{},"sourceType":"module"}