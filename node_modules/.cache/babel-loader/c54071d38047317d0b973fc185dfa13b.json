{"ast":null,"code":"/**\n * @file Manages logic to validate file uploads client-side. In general, the\n * validations work by looping over input form fields with a type of file and\n * checking the size and format of the files upload by the user.\n */\n\n/**\n * An object containing the top level MIME type as the key and the max file\n * size in MB for the value. To use a different value than these defaults,\n * simply add a data-max-file-mb attribute to the input form field with the\n * max file size in MB. If that attribute is found, it takes priority over these\n * defaults.\n *\n * @constant {Object.<string, number>}\n */\nvar MAX_FILE_SIZE_MB = Object.freeze({\n  image: 25,\n  video: 50\n});\n/**\n * Permitted file types using the top level MIME type (i.e. image for\n * image/png). To specify permitted file types, simply add a\n * data-permitted-file-types attribute to the input form field as an Array of\n * strings specifying the top level MIME types that are permitted.\n *\n * @constant {string[]}\n */\n\nvar PERMITTED_FILE_TYPES = ['image'];\n/**\n * The maximum length of the file name to prevent errors on the backend when a\n * file name is too long.\n *\n * @constant {number}\n */\n\nvar MAX_FILE_NAME_LENGTH = 250;\n/**\n * Removes any pre-existing error messages from the DOM related to file\n * validation.\n *\n * @param {HTMLElement} fileInput - An input form field with type of file\n */\n\nfunction removeErrorMessage(fileInput) {\n  var errorMessage = fileInput.parentNode.querySelector('div.file-upload-error');\n\n  if (errorMessage) {\n    errorMessage.remove();\n  }\n}\n/**\n * Adds error messages in the form of a div with red text.\n *\n * @param {HTMLElement} fileInput - An input form field with type of file\n * @param {string} msg - The error message to be displayed to the user\n *\n * @returns {HTMLElement} The error element that was added to the DOM\n */\n\n\nfunction addErrorMessage(fileInput, msg) {\n  var fileInputField = fileInput;\n  var error = document.createElement('div');\n  error.style.color = 'red';\n  error.innerHTML = msg;\n  error.classList.add('file-upload-error');\n  fileInputField.parentNode.append(error);\n}\n/**\n * Handles errors for files that are too large.\n *\n * @param {object} fileSizeErrorHandler - A custom function to be ran after the default error handling\n * @param {HTMLElement} fileInput - An input form field with type of file\n * @param {number} fileSizeMb - The size of the file in MB\n * @param {?number} maxFileSizeMb - The max file size limit in MB\n */\n\n\nfunction handleFileSizeError(fileSizeErrorHandler, fileInput, fileSizeMb, maxFileSizeMb) {\n  var fileInputField = fileInput;\n  fileInputField.value = null;\n\n  if (fileSizeErrorHandler) {\n    fileSizeErrorHandler();\n  } else {\n    var errorMessage = \"File size too large (\".concat(fileSizeMb, \" MB).\"); // If a user uploads a file type that we haven't defined a max size limit for then maxFileSizeMb\n    // could be NaN\n\n    if (maxFileSizeMb >= 0) {\n      errorMessage += \" The limit is \".concat(maxFileSizeMb, \" MB.\");\n    }\n\n    addErrorMessage(fileInput, errorMessage);\n  }\n}\n/**\n * Handles errors for files that are not a valid format.\n *\n * @param {object} fileSizeErrorHandler - A custom function to be ran after the default error handling\n * @param {HTMLElement} fileInput - An input form field with type of file\n * @param {string} fileType - The top level file type (i.e. image for image/png)\n * @param {string[]} permittedFileTypes - The top level file types (i.e. image for image/png) that are permitted\n */\n\n\nfunction handleFileTypeError(fileTypeErrorHandler, fileInput, fileType, permittedFileTypes) {\n  var fileInputField = fileInput;\n  fileInputField.value = null;\n\n  if (fileTypeErrorHandler) {\n    fileTypeErrorHandler();\n  } else {\n    var errorMessage = \"Invalid file format (\".concat(fileType, \"). Only \").concat(permittedFileTypes.join(', '), \" files are permitted.\");\n    addErrorMessage(fileInput, errorMessage);\n  }\n}\n/**\n * Handles errors for files with names that are too long.\n *\n * @param {object} fileNameLengthErrorHandler - A custom function to be ran after the default error handling\n * @param {HTMLElement} fileInput - An input form field with type of file\n * @param {number} maxFileNameLength - The max number of characters permitted for a file name\n */\n\n\nfunction handleFileNameLengthError(fileNameLengthErrorHandler, fileInput, maxFileNameLength) {\n  var fileInputField = fileInput;\n  fileInputField.value = null;\n\n  if (fileNameLengthErrorHandler) {\n    fileNameLengthErrorHandler();\n  } else {\n    var errorMessage = \"File name is too long. It can't be longer than \".concat(maxFileNameLength, \" characters.\");\n    addErrorMessage(fileInput, errorMessage);\n  }\n}\n/**\n * Validates the file size and handles the error if it's invalid.\n *\n * @external File\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/File File}\n *\n * @param {File} file - The file attached by the user\n * @param {string} fileType - The top level file type (i.e. image for image/png)\n * @param {HTMLElement} fileInput - An input form field with type of file\n *\n * @returns {Boolean} Returns false if the file is too big. Otherwise, returns true.\n */\n\n\nfunction validateFileSize(file, fileType, fileInput) {\n  var maxFileSizeMb = fileInput.dataset.maxFileSizeMb;\n  var fileSizeErrorHandler = fileInput.dataset.fileSizeErrorHandler;\n  var fileSizeMb = (file.size / (1024 * 1024)).toFixed(2);\n  maxFileSizeMb = Number(maxFileSizeMb || MAX_FILE_SIZE_MB[fileType]);\n  var isValidFileSize = fileSizeMb <= maxFileSizeMb;\n\n  if (!isValidFileSize) {\n    handleFileSizeError(fileSizeErrorHandler, fileInput, fileSizeMb, maxFileSizeMb);\n  }\n\n  return isValidFileSize;\n}\n/**\n * Validates the file type and handles the error if it's invalid.\n *\n * @external File\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/File File}\n *\n * @param {File} file - The file attached by the user\n * @param {string} fileType - The top level file type (i.e. image for image/png)\n * @param {HTMLElement} fileInput - An input form field with type of file\n *\n * @returns {Boolean} Returns false if the files is an invalid format. Otherwise, returns true.\n */\n\n\nfunction validateFileType(file, fileType, fileInput) {\n  var permittedFileTypes = fileInput.dataset.permittedFileTypes;\n\n  if (permittedFileTypes) {\n    permittedFileTypes = JSON.parse(permittedFileTypes);\n  }\n\n  permittedFileTypes = permittedFileTypes || PERMITTED_FILE_TYPES;\n  var fileTypeErrorHandler = fileInput.dataset.fileTypeErrorHandler;\n  var isValidFileType = permittedFileTypes.includes(fileType);\n\n  if (!isValidFileType) {\n    handleFileTypeError(fileTypeErrorHandler, fileInput, fileType, permittedFileTypes);\n  }\n\n  return isValidFileType;\n}\n/**\n * Validates the length of the file name and handles the error if it's invalid.\n *\n * @external File\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/File File}\n *\n * @param {File} file - The file attached by the user\n * @param {HTMLElement} fileInput - An input form field with type of file\n *\n * @returns {Boolean} Returns false if the file name is too long. Otherwise, returns true.\n */\n\n\nfunction validateFileNameLength(file, fileInput) {\n  var maxFileNameLength = fileInput.dataset.maxFileNameLength;\n  maxFileNameLength = Number(maxFileNameLength || MAX_FILE_NAME_LENGTH);\n  var fileNameLengthErrorHandler = fileInput.dataset.fileNameLengthErrorHandler;\n  var isValidFileNameLength = file.name.length <= maxFileNameLength;\n\n  if (!isValidFileNameLength) {\n    handleFileNameLengthError(fileNameLengthErrorHandler, fileInput, maxFileNameLength);\n  }\n\n  return isValidFileNameLength;\n}\n/**\n * This is the core function to handle validations of uploaded files. It loops\n * through all the uploaded files for the given fileInput and checks the file\n * size, file format, and file name length. If a file fails a validation, the\n * error is handled.\n *\n * @param {HTMLElement} fileInput - An input form field with type of file\n *\n * @returns {Boolean} Returns false if any files failed validations. Otherwise, returns true.\n */\n\n\nfunction validateFileInput(fileInput) {\n  var isValidFileInput = true;\n  removeErrorMessage(fileInput);\n  var files = Array.from(fileInput.files);\n\n  for (var i = 0; i < files.length; i += 1) {\n    var file = files[i];\n    var fileType = file.type.split('/')[0];\n    var isValidFileSize = validateFileSize(file, fileType, fileInput);\n\n    if (!isValidFileSize) {\n      isValidFileInput = false;\n      break;\n    }\n\n    var isValidFileType = validateFileType(file, fileType, fileInput);\n\n    if (!isValidFileType) {\n      isValidFileInput = false;\n      break;\n    }\n\n    var isValidFileNameLength = validateFileNameLength(file, fileInput);\n\n    if (!isValidFileNameLength) {\n      isValidFileInput = false;\n      break;\n    }\n  }\n\n  return isValidFileInput;\n}\n/**\n * This function is designed to be exported in areas where we are doing more\n * custom implementations of file uploading using Preact. It can then be used\n * in Preact event handlers. It loops through all file input fields on the DOM\n * and validates any attached files.\n *\n * @returns {Boolean} Returns false if any files failed validations. Otherwise, returns true.\n */\n\n\nexport function validateFileInputs() {\n  var validFileInputs = true;\n  var fileInputs = document.querySelectorAll('input[type=\"file\"]');\n\n  for (var i = 0; i < fileInputs.length; i += 1) {\n    var fileInput = fileInputs[i];\n    var validFileInput = validateFileInput(fileInput);\n\n    if (!validFileInput) {\n      validFileInputs = false;\n      break;\n    }\n  }\n\n  return validFileInputs;\n} // This is written so that it works automagically by just including this pack\n// in a view.\n\nvar fileInputs = document.querySelectorAll('input[type=\"file\"]');\nfileInputs.forEach(function (fileInput) {\n  fileInput.addEventListener('change', function () {\n    validateFileInput(fileInput);\n  });\n});","map":{"version":3,"sources":["/Users/nmadhab/hobby/forem/app/javascript/packs/validateFileInputs.js"],"names":["MAX_FILE_SIZE_MB","Object","freeze","image","video","PERMITTED_FILE_TYPES","MAX_FILE_NAME_LENGTH","removeErrorMessage","fileInput","errorMessage","parentNode","querySelector","remove","addErrorMessage","msg","fileInputField","error","document","createElement","style","color","innerHTML","classList","add","append","handleFileSizeError","fileSizeErrorHandler","fileSizeMb","maxFileSizeMb","value","handleFileTypeError","fileTypeErrorHandler","fileType","permittedFileTypes","join","handleFileNameLengthError","fileNameLengthErrorHandler","maxFileNameLength","validateFileSize","file","dataset","size","toFixed","Number","isValidFileSize","validateFileType","JSON","parse","isValidFileType","includes","validateFileNameLength","isValidFileNameLength","name","length","validateFileInput","isValidFileInput","files","Array","from","i","type","split","validateFileInputs","validFileInputs","fileInputs","querySelectorAll","validFileInput","forEach","addEventListener"],"mappings":"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","sourcesContent":["/**\n * @file Manages logic to validate file uploads client-side. In general, the\n * validations work by looping over input form fields with a type of file and\n * checking the size and format of the files upload by the user.\n */\n\n/**\n * An object containing the top level MIME type as the key and the max file\n * size in MB for the value. To use a different value than these defaults,\n * simply add a data-max-file-mb attribute to the input form field with the\n * max file size in MB. If that attribute is found, it takes priority over these\n * defaults.\n *\n * @constant {Object.<string, number>}\n */\nconst MAX_FILE_SIZE_MB = Object.freeze({\n  image: 25,\n  video: 50,\n});\n\n/**\n * Permitted file types using the top level MIME type (i.e. image for\n * image/png). To specify permitted file types, simply add a\n * data-permitted-file-types attribute to the input form field as an Array of\n * strings specifying the top level MIME types that are permitted.\n *\n * @constant {string[]}\n */\nconst PERMITTED_FILE_TYPES = ['image'];\n\n/**\n * The maximum length of the file name to prevent errors on the backend when a\n * file name is too long.\n *\n * @constant {number}\n */\nconst MAX_FILE_NAME_LENGTH = 250;\n\n/**\n * Removes any pre-existing error messages from the DOM related to file\n * validation.\n *\n * @param {HTMLElement} fileInput - An input form field with type of file\n */\nfunction removeErrorMessage(fileInput) {\n  const errorMessage = fileInput.parentNode.querySelector(\n    'div.file-upload-error',\n  );\n\n  if (errorMessage) {\n    errorMessage.remove();\n  }\n}\n\n/**\n * Adds error messages in the form of a div with red text.\n *\n * @param {HTMLElement} fileInput - An input form field with type of file\n * @param {string} msg - The error message to be displayed to the user\n *\n * @returns {HTMLElement} The error element that was added to the DOM\n */\nfunction addErrorMessage(fileInput, msg) {\n  const fileInputField = fileInput;\n  const error = document.createElement('div');\n  error.style.color = 'red';\n  error.innerHTML = msg;\n  error.classList.add('file-upload-error');\n\n  fileInputField.parentNode.append(error);\n}\n\n/**\n * Handles errors for files that are too large.\n *\n * @param {object} fileSizeErrorHandler - A custom function to be ran after the default error handling\n * @param {HTMLElement} fileInput - An input form field with type of file\n * @param {number} fileSizeMb - The size of the file in MB\n * @param {?number} maxFileSizeMb - The max file size limit in MB\n */\nfunction handleFileSizeError(\n  fileSizeErrorHandler,\n  fileInput,\n  fileSizeMb,\n  maxFileSizeMb,\n) {\n  const fileInputField = fileInput;\n  fileInputField.value = null;\n\n  if (fileSizeErrorHandler) {\n    fileSizeErrorHandler();\n  } else {\n    let errorMessage = `File size too large (${fileSizeMb} MB).`;\n\n    // If a user uploads a file type that we haven't defined a max size limit for then maxFileSizeMb\n    // could be NaN\n    if (maxFileSizeMb >= 0) {\n      errorMessage += ` The limit is ${maxFileSizeMb} MB.`;\n    }\n\n    addErrorMessage(fileInput, errorMessage);\n  }\n}\n\n/**\n * Handles errors for files that are not a valid format.\n *\n * @param {object} fileSizeErrorHandler - A custom function to be ran after the default error handling\n * @param {HTMLElement} fileInput - An input form field with type of file\n * @param {string} fileType - The top level file type (i.e. image for image/png)\n * @param {string[]} permittedFileTypes - The top level file types (i.e. image for image/png) that are permitted\n */\nfunction handleFileTypeError(\n  fileTypeErrorHandler,\n  fileInput,\n  fileType,\n  permittedFileTypes,\n) {\n  const fileInputField = fileInput;\n  fileInputField.value = null;\n\n  if (fileTypeErrorHandler) {\n    fileTypeErrorHandler();\n  } else {\n    const errorMessage = `Invalid file format (${fileType}). Only ${permittedFileTypes.join(\n      ', ',\n    )} files are permitted.`;\n    addErrorMessage(fileInput, errorMessage);\n  }\n}\n\n/**\n * Handles errors for files with names that are too long.\n *\n * @param {object} fileNameLengthErrorHandler - A custom function to be ran after the default error handling\n * @param {HTMLElement} fileInput - An input form field with type of file\n * @param {number} maxFileNameLength - The max number of characters permitted for a file name\n */\nfunction handleFileNameLengthError(\n  fileNameLengthErrorHandler,\n  fileInput,\n  maxFileNameLength,\n) {\n  const fileInputField = fileInput;\n  fileInputField.value = null;\n\n  if (fileNameLengthErrorHandler) {\n    fileNameLengthErrorHandler();\n  } else {\n    const errorMessage = `File name is too long. It can't be longer than ${maxFileNameLength} characters.`;\n    addErrorMessage(fileInput, errorMessage);\n  }\n}\n\n/**\n * Validates the file size and handles the error if it's invalid.\n *\n * @external File\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/File File}\n *\n * @param {File} file - The file attached by the user\n * @param {string} fileType - The top level file type (i.e. image for image/png)\n * @param {HTMLElement} fileInput - An input form field with type of file\n *\n * @returns {Boolean} Returns false if the file is too big. Otherwise, returns true.\n */\nfunction validateFileSize(file, fileType, fileInput) {\n  let { maxFileSizeMb } = fileInput.dataset;\n\n  const { fileSizeErrorHandler } = fileInput.dataset;\n\n  const fileSizeMb = (file.size / (1024 * 1024)).toFixed(2);\n  maxFileSizeMb = Number(maxFileSizeMb || MAX_FILE_SIZE_MB[fileType]);\n\n  const isValidFileSize = fileSizeMb <= maxFileSizeMb;\n\n  if (!isValidFileSize) {\n    handleFileSizeError(\n      fileSizeErrorHandler,\n      fileInput,\n      fileSizeMb,\n      maxFileSizeMb,\n    );\n  }\n\n  return isValidFileSize;\n}\n\n/**\n * Validates the file type and handles the error if it's invalid.\n *\n * @external File\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/File File}\n *\n * @param {File} file - The file attached by the user\n * @param {string} fileType - The top level file type (i.e. image for image/png)\n * @param {HTMLElement} fileInput - An input form field with type of file\n *\n * @returns {Boolean} Returns false if the files is an invalid format. Otherwise, returns true.\n */\nfunction validateFileType(file, fileType, fileInput) {\n  let { permittedFileTypes } = fileInput.dataset;\n\n  if (permittedFileTypes) {\n    permittedFileTypes = JSON.parse(permittedFileTypes);\n  }\n\n  permittedFileTypes = permittedFileTypes || PERMITTED_FILE_TYPES;\n\n  const { fileTypeErrorHandler } = fileInput.dataset;\n\n  const isValidFileType = permittedFileTypes.includes(fileType);\n\n  if (!isValidFileType) {\n    handleFileTypeError(\n      fileTypeErrorHandler,\n      fileInput,\n      fileType,\n      permittedFileTypes,\n    );\n  }\n\n  return isValidFileType;\n}\n\n/**\n * Validates the length of the file name and handles the error if it's invalid.\n *\n * @external File\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/File File}\n *\n * @param {File} file - The file attached by the user\n * @param {HTMLElement} fileInput - An input form field with type of file\n *\n * @returns {Boolean} Returns false if the file name is too long. Otherwise, returns true.\n */\nfunction validateFileNameLength(file, fileInput) {\n  let { maxFileNameLength } = fileInput.dataset;\n\n  maxFileNameLength = Number(maxFileNameLength || MAX_FILE_NAME_LENGTH);\n\n  const { fileNameLengthErrorHandler } = fileInput.dataset;\n\n  const isValidFileNameLength = file.name.length <= maxFileNameLength;\n\n  if (!isValidFileNameLength) {\n    handleFileNameLengthError(\n      fileNameLengthErrorHandler,\n      fileInput,\n      maxFileNameLength,\n    );\n  }\n\n  return isValidFileNameLength;\n}\n\n/**\n * This is the core function to handle validations of uploaded files. It loops\n * through all the uploaded files for the given fileInput and checks the file\n * size, file format, and file name length. If a file fails a validation, the\n * error is handled.\n *\n * @param {HTMLElement} fileInput - An input form field with type of file\n *\n * @returns {Boolean} Returns false if any files failed validations. Otherwise, returns true.\n */\nfunction validateFileInput(fileInput) {\n  let isValidFileInput = true;\n\n  removeErrorMessage(fileInput);\n  const files = Array.from(fileInput.files);\n\n  for (let i = 0; i < files.length; i += 1) {\n    const file = files[i];\n    const fileType = file.type.split('/')[0];\n\n    const isValidFileSize = validateFileSize(file, fileType, fileInput);\n\n    if (!isValidFileSize) {\n      isValidFileInput = false;\n      break;\n    }\n\n    const isValidFileType = validateFileType(file, fileType, fileInput);\n\n    if (!isValidFileType) {\n      isValidFileInput = false;\n      break;\n    }\n\n    const isValidFileNameLength = validateFileNameLength(file, fileInput);\n\n    if (!isValidFileNameLength) {\n      isValidFileInput = false;\n      break;\n    }\n  }\n\n  return isValidFileInput;\n}\n\n/**\n * This function is designed to be exported in areas where we are doing more\n * custom implementations of file uploading using Preact. It can then be used\n * in Preact event handlers. It loops through all file input fields on the DOM\n * and validates any attached files.\n *\n * @returns {Boolean} Returns false if any files failed validations. Otherwise, returns true.\n */\nexport function validateFileInputs() {\n  let validFileInputs = true;\n  const fileInputs = document.querySelectorAll('input[type=\"file\"]');\n\n  for (let i = 0; i < fileInputs.length; i += 1) {\n    const fileInput = fileInputs[i];\n    const validFileInput = validateFileInput(fileInput);\n\n    if (!validFileInput) {\n      validFileInputs = false;\n      break;\n    }\n  }\n\n  return validFileInputs;\n}\n\n// This is written so that it works automagically by just including this pack\n// in a view.\nconst fileInputs = document.querySelectorAll('input[type=\"file\"]');\n\nfileInputs.forEach((fileInput) => {\n  fileInput.addEventListener('change', () => {\n    validateFileInput(fileInput);\n  });\n});\n"]},"metadata":{},"sourceType":"module"}