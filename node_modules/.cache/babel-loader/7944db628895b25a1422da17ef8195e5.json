{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { h, Component } from 'preact';\nimport { SingleRepo } from './singleRepo';\nimport { request } from '@utilities/http';\nexport var GithubRepos = /*#__PURE__*/function (_Component) {\n  _inherits(GithubRepos, _Component);\n\n  var _super = _createSuper(GithubRepos);\n\n  function GithubRepos() {\n    var _this;\n\n    _classCallCheck(this, GithubRepos);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      repos: [],\n      error: false,\n      errorMessage: ''\n    });\n\n    return _this;\n  }\n\n  _createClass(GithubRepos, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getGithubRepos();\n    }\n  }, {\n    key: \"getGithubRepos\",\n    value: function () {\n      var _getGithubRepos = _asyncToGenerator(function* () {\n        try {\n          var response = yield request('/github_repos');\n\n          if (response.ok) {\n            var repositories = yield response.json();\n            this.setState({\n              repos: repositories\n            });\n          } else {\n            throw new Error(response.statusText);\n          }\n        } catch (error) {\n          Honeybadger.notify(error);\n          this.setState({\n            error: true,\n            errorMessage: error.toString()\n          });\n        }\n      });\n\n      function getGithubRepos() {\n        return _getGithubRepos.apply(this, arguments);\n      }\n\n      return getGithubRepos;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          repos = _this$state.repos,\n          error = _this$state.error,\n          errorMessage = _this$state.errorMessage;\n\n      if (error) {\n        return h(\"div\", {\n          className: \"github-repos github-repos-errored\",\n          role: \"alert\"\n        }, \"An error occurred: \", errorMessage);\n      }\n\n      var allRepos = repos.map(function (repo) {\n        return h(SingleRepo, {\n          githubIdCode: repo.github_id_code,\n          name: repo.name,\n          fork: repo.fork,\n          featured: repo.featured\n        });\n      });\n\n      if (allRepos.length > 0) {\n        return h(\"div\", {\n          className: \"github-repos\",\n          \"data-testid\": \"github-repos-list\"\n        }, allRepos);\n      }\n\n      return h(\"div\", {\n        title: \"Loading GitHub repositories\",\n        className: \"github-repos loading-repos\"\n      });\n    }\n  }]);\n\n  return GithubRepos;\n}(Component);\nGithubRepos.displayName = 'GitHub Repositories Wrapper';","map":{"version":3,"sources":["/Users/nmadhab/hobby/forem/app/javascript/githubRepos/githubRepos.jsx"],"names":["h","Component","SingleRepo","request","GithubRepos","repos","error","errorMessage","getGithubRepos","response","ok","repositories","json","setState","Error","statusText","Honeybadger","notify","toString","state","allRepos","map","repo","github_id_code","name","fork","featured","length","displayName"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,CAAT,EAAYC,SAAZ,QAA6B,QAA7B;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,OAAT,QAAwB,iBAAxB;AAEA,WAAaC,WAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA,4DACU;AACNC,MAAAA,KAAK,EAAE,EADD;AAENC,MAAAA,KAAK,EAAE,KAFD;AAGNC,MAAAA,YAAY,EAAE;AAHR,KADV;;AAAA;AAAA;;AAAA;AAAA;AAAA,wCAOsB;AAClB,WAAKC,cAAL;AACD;AATH;AAAA;AAAA;AAAA,2DAWyB;AACrB,YAAI;AACF,cAAMC,QAAQ,SAASN,OAAO,CAAC,eAAD,CAA9B;;AACA,cAAIM,QAAQ,CAACC,EAAb,EAAiB;AACf,gBAAMC,YAAY,SAASF,QAAQ,CAACG,IAAT,EAA3B;AACA,iBAAKC,QAAL,CAAc;AAAER,cAAAA,KAAK,EAAEM;AAAT,aAAd;AACD,WAHD,MAGO;AACL,kBAAM,IAAIG,KAAJ,CAAUL,QAAQ,CAACM,UAAnB,CAAN;AACD;AACF,SARD,CAQE,OAAOT,KAAP,EAAc;AACdU,UAAAA,WAAW,CAACC,MAAZ,CAAmBX,KAAnB;AACA,eAAKO,QAAL,CAAc;AAAEP,YAAAA,KAAK,EAAE,IAAT;AAAeC,YAAAA,YAAY,EAAED,KAAK,CAACY,QAAN;AAA7B,WAAd;AACD;AACF,OAxBH;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,6BA0BW;AAAA,wBACgC,KAAKC,KADrC;AAAA,UACCd,KADD,eACCA,KADD;AAAA,UACQC,KADR,eACQA,KADR;AAAA,UACeC,YADf,eACeA,YADf;;AAEP,UAAID,KAAJ,EAAW;AACT,eACE;AAAK,UAAA,SAAS,EAAC,mCAAf;AAAmD,UAAA,IAAI,EAAC;AAAxD,kCACsBC,YADtB,CADF;AAKD;;AAED,UAAMa,QAAQ,GAAGf,KAAK,CAACgB,GAAN,CAAU,UAACC,IAAD;AAAA,eACzB,EAAC,UAAD;AACE,UAAA,YAAY,EAAEA,IAAI,CAACC,cADrB;AAEE,UAAA,IAAI,EAAED,IAAI,CAACE,IAFb;AAGE,UAAA,IAAI,EAAEF,IAAI,CAACG,IAHb;AAIE,UAAA,QAAQ,EAAEH,IAAI,CAACI;AAJjB,UADyB;AAAA,OAAV,CAAjB;;AASA,UAAIN,QAAQ,CAACO,MAAT,GAAkB,CAAtB,EAAyB;AACvB,eACE;AAAK,UAAA,SAAS,EAAC,cAAf;AAA8B,yBAAY;AAA1C,WACGP,QADH,CADF;AAKD;;AACD,aACE;AACE,QAAA,KAAK,EAAC,6BADR;AAEE,QAAA,SAAS,EAAC;AAFZ,QADF;AAMD;AA1DH;;AAAA;AAAA,EAAiCnB,SAAjC;AA6DAG,WAAW,CAACwB,WAAZ,GAA0B,6BAA1B","sourcesContent":["import { h, Component } from 'preact';\nimport { SingleRepo } from './singleRepo';\nimport { request } from '@utilities/http';\n\nexport class GithubRepos extends Component {\n  state = {\n    repos: [],\n    error: false,\n    errorMessage: '',\n  };\n\n  componentDidMount() {\n    this.getGithubRepos();\n  }\n\n  async getGithubRepos() {\n    try {\n      const response = await request('/github_repos');\n      if (response.ok) {\n        const repositories = await response.json();\n        this.setState({ repos: repositories });\n      } else {\n        throw new Error(response.statusText);\n      }\n    } catch (error) {\n      Honeybadger.notify(error);\n      this.setState({ error: true, errorMessage: error.toString() });\n    }\n  }\n\n  render() {\n    const { repos, error, errorMessage } = this.state;\n    if (error) {\n      return (\n        <div className=\"github-repos github-repos-errored\" role=\"alert\">\n          An error occurred: {errorMessage}\n        </div>\n      );\n    }\n\n    const allRepos = repos.map((repo) => (\n      <SingleRepo\n        githubIdCode={repo.github_id_code}\n        name={repo.name}\n        fork={repo.fork}\n        featured={repo.featured}\n      />\n    ));\n\n    if (allRepos.length > 0) {\n      return (\n        <div className=\"github-repos\" data-testid=\"github-repos-list\">\n          {allRepos}\n        </div>\n      );\n    }\n    return (\n      <div\n        title=\"Loading GitHub repositories\"\n        className=\"github-repos loading-repos\"\n      />\n    );\n  }\n}\n\nGithubRepos.displayName = 'GitHub Repositories Wrapper';\n"]},"metadata":{},"sourceType":"module"}