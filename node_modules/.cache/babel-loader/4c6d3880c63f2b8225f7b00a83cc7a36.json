{"ast":null,"code":"function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar isFullScreenModeCodeOn = false;\nvar screenScroll = 0;\nvar fullScreenWindow = document.getElementsByClassName('js-fullscreen-code')[0];\nvar body = document.body;\n\nfunction setAfterFullScreenScrollPosition() {\n  window.scrollTo(0, screenScroll);\n}\n\nfunction getBeforeFullScreenScrollPosition() {\n  screenScroll = window.scrollY;\n}\n\nfunction onPressEscape(event) {\n  if (event.key == 'Escape') {\n    fullScreenModeControl(event);\n  }\n}\n\nfunction listenToKeyboardForEscape(listen) {\n  if (listen) {\n    document.body.addEventListener('keyup', onPressEscape);\n  } else {\n    document.body.removeEventListener('keyup', onPressEscape);\n  }\n}\n\nfunction toggleOverflowForDocument(overflow) {\n  if (overflow) {\n    body.style.overflow = 'hidden';\n  } else {\n    body.style.overflow = '';\n  }\n}\n\nfunction addFullScreenModeControl(elements) {\n  if (elements) {\n    var _iterator = _createForOfIteratorHelper(elements),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var element = _step.value;\n        element.addEventListener('click', fullScreenModeControl);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n}\n\nfunction removeFullScreenModeControl(elements) {\n  if (elements) {\n    var _iterator2 = _createForOfIteratorHelper(elements),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var element = _step2.value;\n        element.removeEventListener('click', fullScreenModeControl);\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  }\n}\n\nfunction fullScreenModeControl(event) {\n  var codeBlock = event.currentTarget.closest('.js-code-highlight') ? event.currentTarget.closest('.js-code-highlight').cloneNode(true) : null;\n  var codeBlockControls = codeBlock ? codeBlock.getElementsByClassName('js-fullscreen-code-action') : null;\n\n  if (isFullScreenModeCodeOn) {\n    toggleOverflowForDocument(false);\n    setAfterFullScreenScrollPosition();\n    listenToKeyboardForEscape(false);\n    removeFullScreenModeControl(codeBlockControls);\n    fullScreenWindow.classList.remove('is-open');\n    fullScreenWindow.removeChild(fullScreenWindow.childNodes[0]);\n    isFullScreenModeCodeOn = false;\n  } else {\n    toggleOverflowForDocument(true);\n    getBeforeFullScreenScrollPosition();\n    listenToKeyboardForEscape(true);\n    codeBlock.classList.add('is-fullscreen');\n    fullScreenWindow.appendChild(codeBlock);\n    fullScreenWindow.classList.add('is-open');\n    addFullScreenModeControl(codeBlockControls);\n    isFullScreenModeCodeOn = true;\n  }\n}\n\nexport default addFullScreenModeControl;","map":{"version":3,"sources":["/Users/nmadhab/hobby/forem/app/javascript/utilities/codeFullscreenModeSwitcher.js"],"names":["isFullScreenModeCodeOn","screenScroll","fullScreenWindow","document","getElementsByClassName","body","setAfterFullScreenScrollPosition","window","scrollTo","getBeforeFullScreenScrollPosition","scrollY","onPressEscape","event","key","fullScreenModeControl","listenToKeyboardForEscape","listen","addEventListener","removeEventListener","toggleOverflowForDocument","overflow","style","addFullScreenModeControl","elements","element","removeFullScreenModeControl","codeBlock","currentTarget","closest","cloneNode","codeBlockControls","classList","remove","removeChild","childNodes","add","appendChild"],"mappings":"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","sourcesContent":["let isFullScreenModeCodeOn = false;\nlet screenScroll = 0;\nconst fullScreenWindow = document.getElementsByClassName(\n  'js-fullscreen-code',\n)[0];\nconst body = document.body;\n\nfunction setAfterFullScreenScrollPosition() {\n  window.scrollTo(0, screenScroll);\n}\n\nfunction getBeforeFullScreenScrollPosition() {\n  screenScroll = window.scrollY;\n}\n\nfunction onPressEscape(event) {\n  if (event.key == 'Escape') {\n    fullScreenModeControl(event);\n  }\n}\n\nfunction listenToKeyboardForEscape(listen) {\n  if (listen) {\n    document.body.addEventListener('keyup', onPressEscape);\n  } else {\n    document.body.removeEventListener('keyup', onPressEscape);\n  }\n}\n\nfunction toggleOverflowForDocument(overflow) {\n  if (overflow) {\n    body.style.overflow = 'hidden';\n  } else {\n    body.style.overflow = '';\n  }\n}\n\nfunction addFullScreenModeControl(elements) {\n  if (elements) {\n    for (let element of elements) {\n      element.addEventListener('click', fullScreenModeControl);\n    }\n  }\n}\n\nfunction removeFullScreenModeControl(elements) {\n  if (elements) {\n    for (let element of elements) {\n      element.removeEventListener('click', fullScreenModeControl);\n    }\n  }\n}\n\nfunction fullScreenModeControl(event) {\n  const codeBlock = event.currentTarget.closest('.js-code-highlight')\n    ? event.currentTarget.closest('.js-code-highlight').cloneNode(true)\n    : null;\n  const codeBlockControls = codeBlock\n    ? codeBlock.getElementsByClassName('js-fullscreen-code-action')\n    : null;\n\n  if (isFullScreenModeCodeOn) {\n    toggleOverflowForDocument(false);\n    setAfterFullScreenScrollPosition();\n    listenToKeyboardForEscape(false);\n    removeFullScreenModeControl(codeBlockControls);\n\n    fullScreenWindow.classList.remove('is-open');\n    fullScreenWindow.removeChild(fullScreenWindow.childNodes[0]);\n\n    isFullScreenModeCodeOn = false;\n  } else {\n    toggleOverflowForDocument(true);\n    getBeforeFullScreenScrollPosition();\n    listenToKeyboardForEscape(true);\n    codeBlock.classList.add('is-fullscreen');\n    fullScreenWindow.appendChild(codeBlock);\n    fullScreenWindow.classList.add('is-open');\n\n    addFullScreenModeControl(codeBlockControls);\n\n    isFullScreenModeCodeOn = true;\n  }\n}\n\nexport default addFullScreenModeControl;\n"]},"metadata":{},"sourceType":"module"}