{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { request } from '../../utilities/http';\n/**\n * This function will get all details of the chat channel accrding to the membership role.\n *\n * @param {number} chatChannelMembershipId Current User chat channel membership ID\n */\n\nexport function getChannelDetails(_x) {\n  return _getChannelDetails.apply(this, arguments);\n}\n/**\n * This function is used to update the notification settings.\n *\n * @param {number} membershipId Current user Chat Channel membership Id.\n * @param {boolean} notificationBadge Boolean value for the notification\n */\n\nfunction _getChannelDetails() {\n  _getChannelDetails = _asyncToGenerator(function* (chatChannelMembershipId) {\n    var response = yield request(\"/chat_channel_memberships/chat_channel_info/\".concat(chatChannelMembershipId));\n    return response.json();\n  });\n  return _getChannelDetails.apply(this, arguments);\n}\n\nexport function updatePersonalChatChannelNotificationSettings(_x2, _x3) {\n  return _updatePersonalChatChannelNotificationSettings.apply(this, arguments);\n}\n/**\n * This function is used to reject chat channel joining request & pending requests.\n *\n * @param { number } channelId Active Chat Channel ID\n * @param { number } membershipId Requested user membership Id\n * @param { string } membershipStatus Requested user membership status\n */\n\nfunction _updatePersonalChatChannelNotificationSettings() {\n  _updatePersonalChatChannelNotificationSettings = _asyncToGenerator(function* (membershipId, notificationBadge) {\n    var response = yield request(\"/chat_channel_memberships/update_membership/\".concat(membershipId), {\n      method: 'PATCH',\n      body: {\n        chat_channel_membership: {\n          show_global_badge_notification: notificationBadge\n        }\n      }\n    });\n    return response.json();\n  });\n  return _updatePersonalChatChannelNotificationSettings.apply(this, arguments);\n}\n\nexport function rejectChatChannelJoiningRequest(_x4, _x5, _x6) {\n  return _rejectChatChannelJoiningRequest.apply(this, arguments);\n}\n/**\n *\n * @param {number} channelId Active chat channel Id\n * @param {number} membershipId Chat channel joining request membership id\n */\n\nfunction _rejectChatChannelJoiningRequest() {\n  _rejectChatChannelJoiningRequest = _asyncToGenerator(function* (channelId, membershipId, membershipStatus) {\n    var response = yield request(\"/chat_channel_memberships/remove_membership\", {\n      method: 'POST',\n      body: {\n        status: membershipStatus || 'pending',\n        chat_channel_id: channelId,\n        membership_id: membershipId\n      }\n    });\n    return response.json();\n  });\n  return _rejectChatChannelJoiningRequest.apply(this, arguments);\n}\n\nexport function acceptChatChannelJoiningRequest(_x7, _x8) {\n  return _acceptChatChannelJoiningRequest.apply(this, arguments);\n}\n\nfunction _acceptChatChannelJoiningRequest() {\n  _acceptChatChannelJoiningRequest = _asyncToGenerator(function* (channelId, membershipId) {\n    var response = yield request(\"/chat_channel_memberships/add_membership\", {\n      method: 'POST',\n      body: {\n        chat_channel_id: channelId,\n        membership_id: membershipId,\n        chat_channel_membership: {\n          user_action: 'accept'\n        }\n      }\n    });\n    return response.json();\n  });\n  return _acceptChatChannelJoiningRequest.apply(this, arguments);\n}\n\nexport function updateChatChannelDescription(_x9, _x10, _x11) {\n  return _updateChatChannelDescription.apply(this, arguments);\n}\n/**\n * Send Active chat channel invitation\n *\n * @param {numner} channelId Active chat channel\n * @param {string} invitationUsernames UserNames coma seprated\n */\n\nfunction _updateChatChannelDescription() {\n  _updateChatChannelDescription = _asyncToGenerator(function* (channelId, description, discoverable) {\n    var response = yield request(\"/chat_channels/update_channel/\".concat(channelId), {\n      method: 'PATCH',\n      body: {\n        chat_channel: {\n          description: description,\n          discoverable: discoverable\n        }\n      },\n      credentials: 'same-origin'\n    });\n    return response.json();\n  });\n  return _updateChatChannelDescription.apply(this, arguments);\n}\n\nexport function sendChatChannelInvitation(_x12, _x13) {\n  return _sendChatChannelInvitation.apply(this, arguments);\n}\n/**\n * This function is used to leave the chat channel.\n *\n * @param {number} membershipId Current User Chat channel membership id\n */\n\nfunction _sendChatChannelInvitation() {\n  _sendChatChannelInvitation = _asyncToGenerator(function* (channelId, invitationUsernames) {\n    var response = yield request(\"/chat_channel_memberships/create_membership_request\", {\n      method: 'POST',\n      body: {\n        chat_channel_membership: {\n          chat_channel_id: channelId,\n          invitation_usernames: invitationUsernames\n        }\n      }\n    });\n    return response.json();\n  });\n  return _sendChatChannelInvitation.apply(this, arguments);\n}\n\nexport function leaveChatChannelMembership(_x14) {\n  return _leaveChatChannelMembership.apply(this, arguments);\n}\n/**\n * This function is used to update the membership role\n *  @param {number} membershipId selected User Chat channel membership id\n *  @param {number} chatChannelId Current chat chaneel id\n *  @param {string} role updated role for the membership\n */\n\nfunction _leaveChatChannelMembership() {\n  _leaveChatChannelMembership = _asyncToGenerator(function* (membershipId) {\n    var response = yield request(\"/chat_channel_memberships/leave_membership/\".concat(membershipId), {\n      method: 'PATCH'\n    });\n    return response.json();\n  });\n  return _leaveChatChannelMembership.apply(this, arguments);\n}\n\nexport function updateMembershipRole(_x15, _x16, _x17) {\n  return _updateMembershipRole.apply(this, arguments);\n}\n/**\n * Create Chat Channel\n * @param {string} channelName\n * @param {string} userNames\n */\n\nfunction _updateMembershipRole() {\n  _updateMembershipRole = _asyncToGenerator(function* (membershipId, chatChannelId, role) {\n    var response = yield request(\"/chat_channel_memberships/update_membership_role/\".concat(chatChannelId), {\n      method: 'PATCH',\n      body: {\n        chat_channel_membership: {\n          chat_channel_id: chatChannelId,\n          membership_id: membershipId,\n          role: role\n        }\n      }\n    });\n    return response.json();\n  });\n  return _updateMembershipRole.apply(this, arguments);\n}\n\nexport function createChannel(_x18, _x19) {\n  return _createChannel.apply(this, arguments);\n}\n\nfunction _createChannel() {\n  _createChannel = _asyncToGenerator(function* (channelName, userNames) {\n    var response = yield request(\"/create_channel\", {\n      method: 'POST',\n      body: {\n        chat_channel: {\n          channel_name: channelName,\n          invitation_usernames: userNames\n        }\n      }\n    });\n    return response.json();\n  });\n  return _createChannel.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/nmadhab/hobby/forem/app/javascript/chat/actions/chat_channel_setting_actions.js"],"names":["request","getChannelDetails","chatChannelMembershipId","response","json","updatePersonalChatChannelNotificationSettings","membershipId","notificationBadge","method","body","chat_channel_membership","show_global_badge_notification","rejectChatChannelJoiningRequest","channelId","membershipStatus","status","chat_channel_id","membership_id","acceptChatChannelJoiningRequest","user_action","updateChatChannelDescription","description","discoverable","chat_channel","credentials","sendChatChannelInvitation","invitationUsernames","invitation_usernames","leaveChatChannelMembership","updateMembershipRole","chatChannelId","role","createChannel","channelName","userNames","channel_name"],"mappings":"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","sourcesContent":["import { request } from '../../utilities/http';\n\n/**\n * This function will get all details of the chat channel accrding to the membership role.\n *\n * @param {number} chatChannelMembershipId Current User chat channel membership ID\n */\nexport async function getChannelDetails(chatChannelMembershipId) {\n  const response = await request(\n    `/chat_channel_memberships/chat_channel_info/${chatChannelMembershipId}`,\n  );\n\n  return response.json();\n}\n\n/**\n * This function is used to update the notification settings.\n *\n * @param {number} membershipId Current user Chat Channel membership Id.\n * @param {boolean} notificationBadge Boolean value for the notification\n */\nexport async function updatePersonalChatChannelNotificationSettings(\n  membershipId,\n  notificationBadge,\n) {\n  const response = await request(\n    `/chat_channel_memberships/update_membership/${membershipId}`,\n    {\n      method: 'PATCH',\n      body: {\n        chat_channel_membership: {\n          show_global_badge_notification: notificationBadge,\n        },\n      },\n    },\n  );\n\n  return response.json();\n}\n\n/**\n * This function is used to reject chat channel joining request & pending requests.\n *\n * @param { number } channelId Active Chat Channel ID\n * @param { number } membershipId Requested user membership Id\n * @param { string } membershipStatus Requested user membership status\n */\nexport async function rejectChatChannelJoiningRequest(\n  channelId,\n  membershipId,\n  membershipStatus,\n) {\n  const response = await request(\n    `/chat_channel_memberships/remove_membership`,\n    {\n      method: 'POST',\n      body: {\n        status: membershipStatus || 'pending',\n        chat_channel_id: channelId,\n        membership_id: membershipId,\n      },\n    },\n  );\n\n  return response.json();\n}\n\n/**\n *\n * @param {number} channelId Active chat channel Id\n * @param {number} membershipId Chat channel joining request membership id\n */\nexport async function acceptChatChannelJoiningRequest(channelId, membershipId) {\n  const response = await request(`/chat_channel_memberships/add_membership`, {\n    method: 'POST',\n    body: {\n      chat_channel_id: channelId,\n      membership_id: membershipId,\n      chat_channel_membership: {\n        user_action: 'accept',\n      },\n    },\n  });\n\n  return response.json();\n}\n\nexport async function updateChatChannelDescription(\n  channelId,\n  description,\n  discoverable,\n) {\n  const response = await request(`/chat_channels/update_channel/${channelId}`, {\n    method: 'PATCH',\n    body: { chat_channel: { description, discoverable } },\n    credentials: 'same-origin',\n  });\n\n  return response.json();\n}\n\n/**\n * Send Active chat channel invitation\n *\n * @param {numner} channelId Active chat channel\n * @param {string} invitationUsernames UserNames coma seprated\n */\nexport async function sendChatChannelInvitation(\n  channelId,\n  invitationUsernames,\n) {\n  const response = await request(\n    `/chat_channel_memberships/create_membership_request`,\n    {\n      method: 'POST',\n      body: {\n        chat_channel_membership: {\n          chat_channel_id: channelId,\n          invitation_usernames: invitationUsernames,\n        },\n      },\n    },\n  );\n\n  return response.json();\n}\n\n/**\n * This function is used to leave the chat channel.\n *\n * @param {number} membershipId Current User Chat channel membership id\n */\nexport async function leaveChatChannelMembership(membershipId) {\n  const response = await request(\n    `/chat_channel_memberships/leave_membership/${membershipId}`,\n    {\n      method: 'PATCH',\n    },\n  );\n\n  return response.json();\n}\n\n/**\n * This function is used to update the membership role\n *  @param {number} membershipId selected User Chat channel membership id\n *  @param {number} chatChannelId Current chat chaneel id\n *  @param {string} role updated role for the membership\n */\nexport async function updateMembershipRole(membershipId, chatChannelId, role) {\n  const response = await request(\n    `/chat_channel_memberships/update_membership_role/${chatChannelId}`,\n    {\n      method: 'PATCH',\n      body: {\n        chat_channel_membership: {\n          chat_channel_id: chatChannelId,\n          membership_id: membershipId,\n          role,\n        },\n      },\n    },\n  );\n\n  return response.json();\n}\n\n/**\n * Create Chat Channel\n * @param {string} channelName\n * @param {string} userNames\n */\n\nexport async function createChannel(channelName, userNames) {\n  const response = await request(`/create_channel`, {\n    method: 'POST',\n    body: {\n      chat_channel: {\n        channel_name: channelName,\n        invitation_usernames: userNames,\n      },\n    },\n  });\n\n  return response.json();\n}\n"]},"metadata":{},"sourceType":"module"}