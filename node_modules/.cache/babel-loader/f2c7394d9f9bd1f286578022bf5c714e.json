{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { h, Component } from 'preact';\nimport PropTypes from 'prop-types';\nimport { Button, ButtonGroup, Dropdown, FormField, RadioButton } from '@crayons';\nexport var COMMENT_SUBSCRIPTION_TYPE = Object.freeze({\n  ALL: 'all_comments',\n  TOP: 'top_level_comments',\n  AUTHOR: 'only_author_comments',\n  NOT_SUBSCRIBED: 'not_subscribed'\n});\nexport var CommentSubscription = /*#__PURE__*/function (_Component) {\n  _inherits(CommentSubscription, _Component);\n\n  var _super = _createSuper(CommentSubscription);\n\n  function CommentSubscription(props) {\n    var _this;\n\n    _classCallCheck(this, CommentSubscription);\n\n    var subscriptionType = props.subscriptionType;\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"dropdownPlacementHandler\", function () {\n      var element = _this.dropdownElement.base; // Reset the top before doing any calculations\n\n      element.style.bottom = '';\n\n      var _element$getBoundingC = element.getBoundingClientRect(),\n          dropDownBottom = _element$getBoundingC.bottom;\n\n      var _this$buttonGroupElem = _this.buttonGroupElement.base.getBoundingClientRect(),\n          height = _this$buttonGroupElem.height;\n\n      if (Math.sign(dropDownBottom) === -1 || dropDownBottom > window.innerHeight) {\n        // The 4 pixels is the box shadow from the drop down.\n        element.style.bottom = \"\".concat(height + 4, \"px\");\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"commentSubscriptionClick\", function (event) {\n      _this.setState({\n        subscriptionType: event.target.value\n      });\n    });\n\n    var subscribed = subscriptionType && (subscriptionType.length > 0 && subscriptionType) !== COMMENT_SUBSCRIPTION_TYPE.NOT_SUBSCRIBED;\n    var initialState = {\n      subscriptionType: subscribed ? subscriptionType : COMMENT_SUBSCRIPTION_TYPE.ALL,\n      subscribed: subscribed,\n      showOptions: false\n    };\n    _this.state = initialState;\n    return _this;\n  }\n\n  _createClass(CommentSubscription, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var showOptions = this.state.showOptions;\n\n      if (showOptions) {\n        window.addEventListener('scroll', this.dropdownPlacementHandler);\n        this.dropdownPlacementHandler();\n      } else {\n        window.removeEventListener('scroll', this.dropdownPlacementHandler);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener('scroll', this.dropdownPlacementHandler);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          showOptions = _this$state.showOptions,\n          subscriptionType = _this$state.subscriptionType,\n          subscribed = _this$state.subscribed;\n      var _this$props = this.props,\n          onSubscribe = _this$props.onSubscribe,\n          onUnsubscribe = _this$props.onUnsubscribe,\n          _this$props$positionT = _this$props.positionType,\n          positionType = _this$props$positionT === void 0 ? 'relative' : _this$props$positionT;\n\n      var CogIcon = function CogIcon() {\n        return h(\"svg\", {\n          xmlns: \"http://www.w3.org/2000/svg\",\n          width: \"24\",\n          height: \"24\",\n          role: \"img\",\n          \"aria-labelledby\": \"ai2ols8ka2ohfp0z568lj68ic2du21s\",\n          className: \"crayons-icon\"\n        }, h(\"title\", {\n          id: \"ai2ols8ka2ohfp0z568lj68ic2du21s\"\n        }, \"Preferences\"), h(\"path\", {\n          d: \"M12 1l9.5 5.5v11L12 23l-9.5-5.5v-11L12 1zm0 2.311L4.5 7.653v8.694l7.5 4.342 7.5-4.342V7.653L12 3.311zM12 16a4 4 0 110-8 4 4 0 010 8zm0-2a2 2 0 100-4 2 2 0 000 4z\"\n        }));\n      };\n\n      return h(\"div\", {\n        className: positionType\n      }, h(ButtonGroup, {\n        ref: function ref(element) {\n          _this2.buttonGroupElement = element;\n        }\n      }, h(Button, {\n        variant: \"outlined\",\n        onClick: function onClick(_event) {\n          if (subscribed) {\n            onUnsubscribe(COMMENT_SUBSCRIPTION_TYPE.NOT_SUBSCRIBED);\n\n            _this2.setState({\n              subscriptionType: COMMENT_SUBSCRIPTION_TYPE.ALL\n            });\n          } else {\n            onSubscribe(subscriptionType);\n          }\n\n          _this2.setState({\n            subscribed: !subscribed\n          });\n        }\n      }, subscribed ? 'Unsubscribe' : 'Subscribe'), subscribed && h(Button, {\n        \"data-testid\": \"subscription-settings\",\n        variant: \"outlined\",\n        icon: CogIcon,\n        contentType: \"icon\",\n        onClick: function onClick(_event) {\n          _this2.setState({\n            showOptions: !showOptions\n          });\n        }\n      })), subscribed && h(Dropdown, {\n        \"data-testid\": \"subscriptions-panel\",\n        \"aria-hidden\": !showOptions,\n        className: showOptions ? \"inline-block right-4 left-4 s:right-0 s:left-auto\".concat(positionType === 'relative' ? ' w-full' : '') : null,\n        ref: function ref(element) {\n          _this2.dropdownElement = element;\n        }\n      }, h(\"div\", {\n        className: \"crayons-fields mb-5\"\n      }, h(FormField, {\n        variant: \"radio\"\n      }, h(RadioButton, {\n        id: \"subscribe-all\",\n        name: \"subscribe_comments\",\n        value: COMMENT_SUBSCRIPTION_TYPE.ALL,\n        checked: subscriptionType === COMMENT_SUBSCRIPTION_TYPE.ALL,\n        onClick: this.commentSubscriptionClick\n      }), h(\"label\", {\n        htmlFor: \"subscribe-all\",\n        className: \"crayons-field__label\"\n      }, \"All comments\", h(\"p\", {\n        className: \"crayons-field__description\"\n      }, \"You\\u2019ll receive notifications for all new comments.\"))), h(FormField, {\n        variant: \"radio\"\n      }, h(RadioButton, {\n        id: \"subscribe-toplevel\",\n        name: \"subscribe_comments\",\n        value: COMMENT_SUBSCRIPTION_TYPE.TOP,\n        onClick: this.commentSubscriptionClick,\n        checked: subscriptionType === COMMENT_SUBSCRIPTION_TYPE.TOP\n      }), h(\"label\", {\n        htmlFor: \"subscribe-toplevel\",\n        className: \"crayons-field__label\"\n      }, \"Top-level comments\", h(\"p\", {\n        className: \"crayons-field__description\"\n      }, \"You\\u2019ll receive notifications only for all new top-level comments.\"))), h(FormField, {\n        variant: \"radio\"\n      }, h(RadioButton, {\n        id: \"subscribe-author\",\n        name: \"subscribe_comments\",\n        value: COMMENT_SUBSCRIPTION_TYPE.AUTHOR,\n        onClick: this.commentSubscriptionClick,\n        checked: subscriptionType === COMMENT_SUBSCRIPTION_TYPE.AUTHOR\n      }), h(\"label\", {\n        htmlFor: \"subscribe-author\",\n        className: \"crayons-field__label\"\n      }, \"Post author comments\", h(\"p\", {\n        className: \"crayons-field__description\"\n      }, \"You\\u2019ll receive notifications only if post author sends a new comment.\")))), h(Button, {\n        className: \"w-100\",\n        onClick: function onClick(_event) {\n          _this2.setState(function (prevState) {\n            onSubscribe(prevState.subscriptionType);\n            return _objectSpread(_objectSpread({}, prevState), {}, {\n              showOptions: false\n            });\n          });\n        }\n      }, \"Done\")));\n    }\n  }]);\n\n  return CommentSubscription;\n}(Component);\nCommentSubscription.displayName = 'CommentSubscription';\nCommentSubscription.propTypes = {\n  positionType: PropTypes.oneOf(['absolute', 'relative', 'static']).isRequired,\n  onSubscribe: PropTypes.func.isRequired,\n  onUnsubscribe: PropTypes.func.isRequired,\n  subscriptionType: PropTypes.oneOf(Object.entries(COMMENT_SUBSCRIPTION_TYPE).map(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        value = _ref2[1];\n\n    return value;\n  })).isRequired\n};","map":{"version":3,"sources":["/Users/nmadhab/hobby/forem/app/javascript/CommentSubscription/CommentSubscription.jsx"],"names":["h","Component","PropTypes","Button","ButtonGroup","Dropdown","FormField","RadioButton","COMMENT_SUBSCRIPTION_TYPE","Object","freeze","ALL","TOP","AUTHOR","NOT_SUBSCRIBED","CommentSubscription","props","subscriptionType","element","dropdownElement","base","style","bottom","getBoundingClientRect","dropDownBottom","buttonGroupElement","height","Math","sign","window","innerHeight","event","setState","target","value","subscribed","length","initialState","showOptions","state","addEventListener","dropdownPlacementHandler","removeEventListener","onSubscribe","onUnsubscribe","positionType","CogIcon","_event","commentSubscriptionClick","prevState","displayName","propTypes","oneOf","isRequired","func","entries","map"],"mappings":"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","sourcesContent":["import { h, Component } from 'preact';\nimport PropTypes from 'prop-types';\nimport {\n  Button,\n  ButtonGroup,\n  Dropdown,\n  FormField,\n  RadioButton,\n} from '@crayons';\n\nexport const COMMENT_SUBSCRIPTION_TYPE = Object.freeze({\n  ALL: 'all_comments',\n  TOP: 'top_level_comments',\n  AUTHOR: 'only_author_comments',\n  NOT_SUBSCRIBED: 'not_subscribed',\n});\n\nexport class CommentSubscription extends Component {\n  constructor(props) {\n    const { subscriptionType } = props;\n    super(props);\n\n    const subscribed =\n      subscriptionType &&\n      (subscriptionType.length > 0 && subscriptionType) !==\n        COMMENT_SUBSCRIPTION_TYPE.NOT_SUBSCRIBED;\n\n    const initialState = {\n      subscriptionType: subscribed\n        ? subscriptionType\n        : COMMENT_SUBSCRIPTION_TYPE.ALL,\n      subscribed,\n      showOptions: false,\n    };\n\n    this.state = initialState;\n  }\n\n  componentDidUpdate() {\n    const { showOptions } = this.state;\n\n    if (showOptions) {\n      window.addEventListener('scroll', this.dropdownPlacementHandler);\n      this.dropdownPlacementHandler();\n    } else {\n      window.removeEventListener('scroll', this.dropdownPlacementHandler);\n    }\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('scroll', this.dropdownPlacementHandler);\n  }\n\n  dropdownPlacementHandler = () => {\n    const { base: element } = this.dropdownElement;\n\n    // Reset the top before doing any calculations\n    element.style.bottom = '';\n\n    const { bottom: dropDownBottom } = element.getBoundingClientRect();\n    const { height } = this.buttonGroupElement.base.getBoundingClientRect();\n\n    if (\n      Math.sign(dropDownBottom) === -1 ||\n      dropDownBottom > window.innerHeight\n    ) {\n      // The 4 pixels is the box shadow from the drop down.\n      element.style.bottom = `${height + 4}px`;\n    }\n  };\n\n  commentSubscriptionClick = (event) => {\n    this.setState({\n      subscriptionType: event.target.value,\n    });\n  };\n\n  render() {\n    const { showOptions, subscriptionType, subscribed } = this.state;\n    const {\n      onSubscribe,\n      onUnsubscribe,\n      positionType = 'relative',\n    } = this.props;\n\n    const CogIcon = () => (\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"24\"\n        height=\"24\"\n        role=\"img\"\n        aria-labelledby=\"ai2ols8ka2ohfp0z568lj68ic2du21s\"\n        className=\"crayons-icon\"\n      >\n        <title id=\"ai2ols8ka2ohfp0z568lj68ic2du21s\">Preferences</title>\n        <path d=\"M12 1l9.5 5.5v11L12 23l-9.5-5.5v-11L12 1zm0 2.311L4.5 7.653v8.694l7.5 4.342 7.5-4.342V7.653L12 3.311zM12 16a4 4 0 110-8 4 4 0 010 8zm0-2a2 2 0 100-4 2 2 0 000 4z\" />\n      </svg>\n    );\n\n    return (\n      <div className={positionType}>\n        <ButtonGroup\n          ref={(element) => {\n            this.buttonGroupElement = element;\n          }}\n        >\n          <Button\n            variant=\"outlined\"\n            onClick={(_event) => {\n              if (subscribed) {\n                onUnsubscribe(COMMENT_SUBSCRIPTION_TYPE.NOT_SUBSCRIBED);\n                this.setState({\n                  subscriptionType: COMMENT_SUBSCRIPTION_TYPE.ALL,\n                });\n              } else {\n                onSubscribe(subscriptionType);\n              }\n\n              this.setState({ subscribed: !subscribed });\n            }}\n          >\n            {subscribed ? 'Unsubscribe' : 'Subscribe'}\n          </Button>\n          {subscribed && (\n            <Button\n              data-testid=\"subscription-settings\"\n              variant=\"outlined\"\n              icon={CogIcon}\n              contentType=\"icon\"\n              onClick={(_event) => {\n                this.setState({ showOptions: !showOptions });\n              }}\n            />\n          )}\n        </ButtonGroup>\n        {subscribed && (\n          <Dropdown\n            data-testid=\"subscriptions-panel\"\n            aria-hidden={!showOptions}\n            className={\n              showOptions\n                ? `inline-block right-4 left-4 s:right-0 s:left-auto${\n                    positionType === 'relative' ? ' w-full' : ''\n                  }`\n                : null\n            }\n            ref={(element) => {\n              this.dropdownElement = element;\n            }}\n          >\n            <div className=\"crayons-fields mb-5\">\n              <FormField variant=\"radio\">\n                <RadioButton\n                  id=\"subscribe-all\"\n                  name=\"subscribe_comments\"\n                  value={COMMENT_SUBSCRIPTION_TYPE.ALL}\n                  checked={subscriptionType === COMMENT_SUBSCRIPTION_TYPE.ALL}\n                  onClick={this.commentSubscriptionClick}\n                />\n                <label htmlFor=\"subscribe-all\" className=\"crayons-field__label\">\n                  All comments\n                  <p className=\"crayons-field__description\">\n                    You’ll receive notifications for all new comments.\n                  </p>\n                </label>\n              </FormField>\n\n              <FormField variant=\"radio\">\n                <RadioButton\n                  id=\"subscribe-toplevel\"\n                  name=\"subscribe_comments\"\n                  value={COMMENT_SUBSCRIPTION_TYPE.TOP}\n                  onClick={this.commentSubscriptionClick}\n                  checked={subscriptionType === COMMENT_SUBSCRIPTION_TYPE.TOP}\n                />\n                <label\n                  htmlFor=\"subscribe-toplevel\"\n                  className=\"crayons-field__label\"\n                >\n                  Top-level comments\n                  <p className=\"crayons-field__description\">\n                    You’ll receive notifications only for all new top-level\n                    comments.\n                  </p>\n                </label>\n              </FormField>\n\n              <FormField variant=\"radio\">\n                <RadioButton\n                  id=\"subscribe-author\"\n                  name=\"subscribe_comments\"\n                  value={COMMENT_SUBSCRIPTION_TYPE.AUTHOR}\n                  onClick={this.commentSubscriptionClick}\n                  checked={\n                    subscriptionType === COMMENT_SUBSCRIPTION_TYPE.AUTHOR\n                  }\n                />\n                <label\n                  htmlFor=\"subscribe-author\"\n                  className=\"crayons-field__label\"\n                >\n                  Post author comments\n                  <p className=\"crayons-field__description\">\n                    You’ll receive notifications only if post author sends a new\n                    comment.\n                  </p>\n                </label>\n              </FormField>\n            </div>\n\n            <Button\n              className=\"w-100\"\n              onClick={(_event) => {\n                this.setState((prevState) => {\n                  onSubscribe(prevState.subscriptionType);\n\n                  return { ...prevState, showOptions: false };\n                });\n              }}\n            >\n              Done\n            </Button>\n          </Dropdown>\n        )}\n      </div>\n    );\n  }\n}\n\nCommentSubscription.displayName = 'CommentSubscription';\n\nCommentSubscription.propTypes = {\n  positionType: PropTypes.oneOf(['absolute', 'relative', 'static']).isRequired,\n  onSubscribe: PropTypes.func.isRequired,\n  onUnsubscribe: PropTypes.func.isRequired,\n  subscriptionType: PropTypes.oneOf(\n    Object.entries(COMMENT_SUBSCRIPTION_TYPE).map(([, value]) => value),\n  ).isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}