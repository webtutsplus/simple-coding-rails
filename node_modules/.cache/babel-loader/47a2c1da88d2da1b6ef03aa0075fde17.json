{"ast":null,"code":"function loadFunctionality() {\n  if (!document.getElementById('notification-subscriptions-area')) {\n    return;\n  }\n\n  var notifiableId = document.getElementById('notification-subscriptions-area').dataset.notifiableId;\n  var notifiableType = document.getElementById('notification-subscriptions-area').dataset.notifiableType;\n  var userStatus = document.body.getAttribute('data-user-status');\n\n  if (userStatus === 'logged-in') {\n    fetch(\"/notification_subscriptions/\".concat(notifiableType, \"/\").concat(notifiableId), {\n      headers: {\n        Accept: 'application/json',\n        'X-CSRF-Token': window.csrfToken,\n        'Content-Type': 'application/json'\n      },\n      credentials: 'same-origin'\n    }).then(function (response) {\n      return response.json();\n    }).then(function (result) {\n      document.getElementById(\"notification-subscription-label_\".concat(result.config)).classList.add('selected'); // checkbox.checked = result;\n    });\n  }\n\n  var updateStatus = function updateStatus() {};\n\n  if (userStatus === 'logged-out') {\n    updateStatus = function updateStatus() {\n      // Disabled because showModal() is globally defined in asset pipeline\n      // eslint-disable-next-line no-undef\n      showModal('notification-subscription');\n    };\n  } else {\n    updateStatus = function updateStatus(target) {\n      var payload = '';\n      var shouldUnsubscribeToNotifications = target.classList.contains('selected') || target.classList.contains('selected-emoji');\n      var allButtons = document.getElementsByClassName('notification-subscription-label');\n\n      for (var i = 0; i < allButtons.length; i += 1) {\n        allButtons[i].classList.remove('selected');\n      }\n\n      if (shouldUnsubscribeToNotifications) {\n        var unsubscribeButton = allButtons.namedItem('unsubscribe');\n        unsubscribeButton.classList.add('selected');\n        payload = unsubscribeButton.dataset.payload;\n      } else {\n        target.classList.add('selected');\n        payload = target.dataset.payload;\n      }\n\n      fetch(\"/notification_subscriptions/\".concat(notifiableType, \"/\").concat(notifiableId), {\n        method: 'POST',\n        headers: {\n          Accept: 'application/json',\n          'X-CSRF-Token': window.csrfToken,\n          'Content-Type': 'application/json'\n        },\n        credentials: 'same-origin',\n        body: JSON.stringify({\n          config: payload // notifiable params are passed via URL\n\n        })\n      });\n    };\n  }\n\n  var subscriptionButtons = document.getElementsByClassName('notification-subscription-label');\n\n  for (var i = 0; i < subscriptionButtons.length; i += 1) {\n    subscriptionButtons[i].addEventListener('click', function (e) {\n      e.preventDefault();\n      updateStatus(e.target);\n\n      if (typeof window.sendHapticMessage !== 'undefined') {\n        window.sendHapticMessage('medium');\n      }\n    });\n    subscriptionButtons[i].addEventListener('keydown', function (e) {\n      if (e.key === 'Enter') {\n        updateStatus(e.target);\n      }\n    });\n  }\n}\n\nwindow.InstantClick.on('change', function () {\n  loadFunctionality();\n});\nloadFunctionality();","map":{"version":3,"sources":["/Users/nmadhab/hobby/forem/app/javascript/packs/notificationSubscriptionHandler.js"],"names":["loadFunctionality","document","getElementById","notifiableId","dataset","notifiableType","userStatus","body","getAttribute","fetch","headers","Accept","window","csrfToken","credentials","then","response","json","result","config","classList","add","updateStatus","showModal","target","payload","shouldUnsubscribeToNotifications","contains","allButtons","getElementsByClassName","i","length","remove","unsubscribeButton","namedItem","method","JSON","stringify","subscriptionButtons","addEventListener","e","preventDefault","sendHapticMessage","key","InstantClick","on"],"mappings":"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","sourcesContent":["function loadFunctionality() {\n  if (!document.getElementById('notification-subscriptions-area')) {\n    return;\n  }\n  const { notifiableId } = document.getElementById(\n    'notification-subscriptions-area',\n  ).dataset;\n  const { notifiableType } = document.getElementById(\n    'notification-subscriptions-area',\n  ).dataset;\n\n  const userStatus = document.body.getAttribute('data-user-status');\n\n  if (userStatus === 'logged-in') {\n    fetch(`/notification_subscriptions/${notifiableType}/${notifiableId}`, {\n      headers: {\n        Accept: 'application/json',\n        'X-CSRF-Token': window.csrfToken,\n        'Content-Type': 'application/json',\n      },\n      credentials: 'same-origin',\n    })\n      .then((response) => response.json())\n      .then((result) => {\n        document\n          .getElementById(`notification-subscription-label_${result.config}`)\n          .classList.add('selected');\n        // checkbox.checked = result;\n      });\n  }\n\n  let updateStatus = () => {};\n\n  if (userStatus === 'logged-out') {\n    updateStatus = () => {\n      // Disabled because showModal() is globally defined in asset pipeline\n      // eslint-disable-next-line no-undef\n      showModal('notification-subscription');\n    };\n  } else {\n    updateStatus = (target) => {\n      let payload = '';\n      const shouldUnsubscribeToNotifications =\n        target.classList.contains('selected') ||\n        target.classList.contains('selected-emoji');\n      const allButtons = document.getElementsByClassName(\n        'notification-subscription-label',\n      );\n      for (let i = 0; i < allButtons.length; i += 1) {\n        allButtons[i].classList.remove('selected');\n      }\n      if (shouldUnsubscribeToNotifications) {\n        const unsubscribeButton = allButtons.namedItem('unsubscribe');\n        unsubscribeButton.classList.add('selected');\n        ({ payload } = unsubscribeButton.dataset);\n      } else {\n        target.classList.add('selected');\n        ({ payload } = target.dataset);\n      }\n      fetch(`/notification_subscriptions/${notifiableType}/${notifiableId}`, {\n        method: 'POST',\n        headers: {\n          Accept: 'application/json',\n          'X-CSRF-Token': window.csrfToken,\n          'Content-Type': 'application/json',\n        },\n        credentials: 'same-origin',\n        body: JSON.stringify({\n          config: payload,\n          // notifiable params are passed via URL\n        }),\n      });\n    };\n  }\n\n  const subscriptionButtons = document.getElementsByClassName(\n    'notification-subscription-label',\n  );\n\n  for (let i = 0; i < subscriptionButtons.length; i += 1) {\n    subscriptionButtons[i].addEventListener('click', (e) => {\n      e.preventDefault();\n      updateStatus(e.target);\n      if (typeof window.sendHapticMessage !== 'undefined') {\n        window.sendHapticMessage('medium');\n      }\n    });\n    subscriptionButtons[i].addEventListener('keydown', (e) => {\n      if (e.key === 'Enter') {\n        updateStatus(e.target);\n      }\n    });\n  }\n}\n\nwindow.InstantClick.on('change', () => {\n  loadFunctionality();\n});\n\nloadFunctionality();\n"]},"metadata":{},"sourceType":"module"}