{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nimport { h, Component } from 'preact';\nimport PropTypes from 'prop-types';\n\nvar Navigation = /*#__PURE__*/function (_Component) {\n  _inherits(Navigation, _Component);\n\n  var _super = _createSuper(Navigation);\n\n  function Navigation() {\n    _classCallCheck(this, Navigation);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Navigation, [{\n    key: \"createStepper\",\n\n    /**\n     * A function to render the progress stepper within the `Navigation` component.\n     * By default, it does not show the stepper for the first slide (the `IntroSlide` component).\n     * It builds a list of `<span>` elements correseponding to the slides, and adds an \"active\"\n     * class to any slide that has already been seen or is currently being seen.\n     *\n     * @returns {String} The HTML markup for the stepper.\n     */\n    value: function createStepper() {\n      var _this$props = this.props,\n          currentSlideIndex = _this$props.currentSlideIndex,\n          slidesCount = _this$props.slidesCount;\n\n      if (currentSlideIndex === 0) {\n        return '';\n      }\n\n      var stepsList = []; // We do not show the stepper on the IntroSlide so we start with `i = 1`.\n\n      for (var i = 1; i < slidesCount; i += 1) {\n        var active = i <= currentSlideIndex;\n        stepsList.push(h(\"span\", {\n          \"class\": \"dot \".concat(active ? 'active' : '')\n        }));\n      }\n\n      return h(\"div\", {\n        \"data-testid\": \"stepper\",\n        \"class\": \"stepper\"\n      }, stepsList);\n    }\n    /**\n     * A function to render the text for the \"next-button\" within the `Navigation` component.\n     * By default, it renders \"Continue\" for every slide.\n     * If the slide can be skipped, it renders \"Skip for now\".\n     * On the final slide, it renders \"Finish\".\n     *\n     * @returns {String} The HTML markup for the stepper.\n     */\n\n  }, {\n    key: \"buttonText\",\n    value: function buttonText() {\n      var _this$props2 = this.props,\n          canSkip = _this$props2.canSkip,\n          currentSlideIndex = _this$props2.currentSlideIndex,\n          slidesCount = _this$props2.slidesCount;\n\n      if (slidesCount - 1 === currentSlideIndex) {\n        return 'Finish';\n      }\n\n      if (canSkip) {\n        return 'Skip for now';\n      }\n\n      return 'Continue';\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          next = _this$props3.next,\n          prev = _this$props3.prev,\n          hideNext = _this$props3.hideNext,\n          hidePrev = _this$props3.hidePrev,\n          disabled = _this$props3.disabled,\n          canSkip = _this$props3.canSkip,\n          className = _this$props3.className;\n      return h(\"nav\", {\n        \"class\": \"onboarding-navigation\".concat(className && className.length > 0 ? \" \".concat(className) : '')\n      }, h(\"div\", {\n        \"class\": \"navigation-content\".concat(className && className.length > 0 ? \" \".concat(className) : '')\n      }, !hidePrev && h(\"div\", {\n        \"class\": \"back-button-container\"\n      }, h(\"button\", {\n        onClick: prev,\n        \"data-testid\": \"back-button\",\n        \"class\": \"back-button\",\n        type: \"button\",\n        \"aria-label\": \"Back to previous onboarding step\"\n      }, h(\"svg\", {\n        width: \"24\",\n        height: \"24\",\n        fill: \"none\",\n        \"class\": \"crayons-icon\",\n        xmlns: \"http://www.w3.org/2000/svg\"\n      }, h(\"path\", {\n        d: \"M7.828 11H20v2H7.828l5.364 5.364-1.414 1.414L4 12l7.778-7.778 1.414 1.414L7.828 11z\"\n      })))), this.createStepper(), !hideNext && h(\"button\", {\n        disabled: disabled,\n        onClick: next,\n        \"class\": \"next-button\".concat(canSkip ? ' skip-for-now' : ''),\n        type: \"button\"\n      }, this.buttonText())));\n    }\n  }]);\n\n  return Navigation;\n}(Component);\n\nNavigation.propTypes = {\n  disabled: PropTypes.bool,\n  canSkip: PropTypes.bool,\n  \"class\": PropTypes.string,\n  prev: PropTypes.func.isRequired,\n  next: PropTypes.string.isRequired,\n  hideNext: PropTypes.bool,\n  hidePrev: PropTypes.bool,\n  slidesCount: PropTypes.number.isRequired,\n  currentSlideIndex: PropTypes.number.isRequired\n};\nNavigation.defaultProps = {\n  disabled: false,\n  canSkip: false,\n  hideNext: false,\n  hidePrev: false,\n  \"class\": ''\n};\nexport default Navigation;","map":{"version":3,"sources":["/Users/nmadhab/hobby/forem/app/javascript/onboarding/components/Navigation.jsx"],"names":["h","Component","PropTypes","Navigation","props","currentSlideIndex","slidesCount","stepsList","i","active","push","canSkip","next","prev","hideNext","hidePrev","disabled","className","length","createStepper","buttonText","propTypes","bool","string","func","isRequired","number","defaultProps"],"mappings":"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","sourcesContent":["import { h, Component } from 'preact';\nimport PropTypes from 'prop-types';\n\nclass Navigation extends Component {\n  /**\n   * A function to render the progress stepper within the `Navigation` component.\n   * By default, it does not show the stepper for the first slide (the `IntroSlide` component).\n   * It builds a list of `<span>` elements correseponding to the slides, and adds an \"active\"\n   * class to any slide that has already been seen or is currently being seen.\n   *\n   * @returns {String} The HTML markup for the stepper.\n   */\n  createStepper() {\n    const { currentSlideIndex, slidesCount } = this.props;\n    if (currentSlideIndex === 0) {\n      return '';\n    }\n\n    const stepsList = [];\n\n    // We do not show the stepper on the IntroSlide so we start with `i = 1`.\n    for (let i = 1; i < slidesCount; i += 1) {\n      const active = i <= currentSlideIndex;\n\n      stepsList.push(<span class={`dot ${active ? 'active' : ''}`} />);\n    }\n    return (\n      <div data-testid=\"stepper\" class=\"stepper\">\n        {stepsList}\n      </div>\n    );\n  }\n\n  /**\n   * A function to render the text for the \"next-button\" within the `Navigation` component.\n   * By default, it renders \"Continue\" for every slide.\n   * If the slide can be skipped, it renders \"Skip for now\".\n   * On the final slide, it renders \"Finish\".\n   *\n   * @returns {String} The HTML markup for the stepper.\n   */\n  buttonText() {\n    const { canSkip, currentSlideIndex, slidesCount } = this.props;\n    if (slidesCount - 1 === currentSlideIndex) {\n      return 'Finish';\n    }\n    if (canSkip) {\n      return 'Skip for now';\n    }\n\n    return 'Continue';\n  }\n\n  render() {\n    const {\n      next,\n      prev,\n      hideNext,\n      hidePrev,\n      disabled,\n      canSkip,\n      className,\n    } = this.props;\n    return (\n      <nav\n        class={`onboarding-navigation${\n          className && className.length > 0 ? ` ${className}` : ''\n        }`}\n      >\n        <div\n          class={`navigation-content${\n            className && className.length > 0 ? ` ${className}` : ''\n          }`}\n        >\n          {!hidePrev && (\n            <div class=\"back-button-container\">\n              <button\n                onClick={prev}\n                data-testid=\"back-button\"\n                class=\"back-button\"\n                type=\"button\"\n                aria-label=\"Back to previous onboarding step\"\n              >\n                <svg\n                  width=\"24\"\n                  height=\"24\"\n                  fill=\"none\"\n                  class=\"crayons-icon\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path d=\"M7.828 11H20v2H7.828l5.364 5.364-1.414 1.414L4 12l7.778-7.778 1.414 1.414L7.828 11z\" />\n                </svg>\n              </button>\n            </div>\n          )}\n\n          {this.createStepper()}\n\n          {!hideNext && (\n            <button\n              disabled={disabled}\n              onClick={next}\n              class={`next-button${canSkip ? ' skip-for-now' : ''}`}\n              type=\"button\"\n            >\n              {this.buttonText()}\n            </button>\n          )}\n        </div>\n      </nav>\n    );\n  }\n}\n\nNavigation.propTypes = {\n  disabled: PropTypes.bool,\n  canSkip: PropTypes.bool,\n  class: PropTypes.string,\n  prev: PropTypes.func.isRequired,\n  next: PropTypes.string.isRequired,\n  hideNext: PropTypes.bool,\n  hidePrev: PropTypes.bool,\n  slidesCount: PropTypes.number.isRequired,\n  currentSlideIndex: PropTypes.number.isRequired,\n};\n\nNavigation.defaultProps = {\n  disabled: false,\n  canSkip: false,\n  hideNext: false,\n  hidePrev: false,\n  class: '',\n};\n\nexport default Navigation;\n"]},"metadata":{},"sourceType":"module"}