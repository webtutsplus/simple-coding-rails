{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { h, Component } from 'preact';\nimport PropTypes from 'prop-types';\nimport { getChannelDetails, updatePersonalChatChannelNotificationSettings, rejectChatChannelJoiningRequest, acceptChatChannelJoiningRequest, updateChatChannelDescription, sendChatChannelInvitation, leaveChatChannelMembership, updateMembershipRole } from '../actions/chat_channel_setting_actions';\nimport { addSnackbarItem } from '../../Snackbar';\nimport ManageActiveMembership from './MembershipManager/ManageActiveMembership';\nimport ChatChannelSettingsSection from './ChatChannelSettingsSection';\n\nvar ChatChannelSettings = /*#__PURE__*/function (_Component) {\n  _inherits(ChatChannelSettings, _Component);\n\n  var _super = _createSuper(ChatChannelSettings);\n\n  function ChatChannelSettings(props) {\n    var _this;\n\n    _classCallCheck(this, ChatChannelSettings);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"updateChannelDetails\", function () {\n      var activeMembershipId = _this.props.activeMembershipId;\n      getChannelDetails(activeMembershipId).then(function (response) {\n        if (response.success) {\n          var result = response.result;\n\n          _this.setState({\n            chatChannel: result.chat_channel,\n            activeMemberships: result.memberships.active,\n            pendingMemberships: result.memberships.pending,\n            requestedMemberships: result.memberships.requested,\n            currentMembership: result.current_membership,\n            channelDescription: result.chat_channel.description,\n            channelDiscoverable: result.chat_channel.discoverable,\n            showGlobalBadgeNotification: result.current_membership.show_global_badge_notification,\n            invitationLink: result.invitation_link\n          });\n        } else {\n          _this.setState({\n            successMessages: null,\n            errorMessages: response.message\n          });\n        }\n      })[\"catch\"](function (error) {\n        _this.setState({\n          successMessages: null,\n          errorMessages: error.message\n        });\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleDescriptionChange\", function (e) {\n      var description = e.target.value;\n\n      _this.setState({\n        channelDescription: description\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handlePersonChannelSetting\", function (e) {\n      var status = e.target.checked;\n\n      _this.setState({\n        showGlobalBadgeNotification: status\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"updateCurrentMembershipNotificationSettings\", /*#__PURE__*/_asyncToGenerator(function* () {\n      var _this$state = _this.state,\n          currentMembership = _this$state.currentMembership,\n          showGlobalBadgeNotification = _this$state.showGlobalBadgeNotification;\n      var response = yield updatePersonalChatChannelNotificationSettings(currentMembership.id, showGlobalBadgeNotification);\n      var message = response.message;\n\n      if (response.success) {\n        _this.setState(function (prevState) {\n          return {\n            errorMessages: null,\n            successMessages: response.message,\n            currentMembership: _objectSpread(_objectSpread({}, prevState.currentMembership), {}, {\n              show_global_badge_notification: showGlobalBadgeNotification\n            })\n          };\n        });\n      } else {\n        _this.setState({\n          successMessages: null,\n          errorMessages: response.message,\n          showGlobalBadgeNotification: currentMembership.show_global_badge_notification\n        });\n      }\n\n      addSnackbarItem({\n        message: message\n      });\n    }));\n\n    _defineProperty(_assertThisInitialized(_this), \"chatChannelRemoveMembership\", /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(function* (membershipId, membershipStatus) {\n        var chatChannel = _this.state.chatChannel;\n        var response = yield rejectChatChannelJoiningRequest(chatChannel.id, membershipId, membershipStatus);\n        return response;\n      });\n\n      return function (_x, _x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"filterMemberships\", function (memberships, membershipId) {\n      var filteredMembership = memberships.filter(function (membership) {\n        return membership.membership_id !== Number(membershipId);\n      });\n      return filteredMembership;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"removeMembership\", /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator(function* (e) {\n        var _e$target$dataset = e.target.dataset,\n            membershipId = _e$target$dataset.membershipId,\n            membershipStatus = _e$target$dataset.membershipStatus;\n        var response = yield _this.chatChannelRemoveMembership(membershipId, membershipStatus);\n        var message = response.message;\n\n        _this.updateMemberships(membershipId, response, membershipStatus);\n\n        addSnackbarItem({\n          message: message\n        });\n      });\n\n      return function (_x3) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"updateMemberships\", function (membershipId, response, membershipStatus) {\n      if (response.success) {\n        _this.updateChannelDetails();\n\n        _this.setState(function (prevState) {\n          return {\n            errorMessages: null,\n            successMessages: response.message,\n            activeMemberships: membershipStatus === 'active' ? _this.filterMemberships(prevState.activeMemberships, membershipId) : prevState.activeMemberships,\n            pendingMemberships: membershipStatus === 'pending' ? _this.filterMemberships(prevState.pendingMemberships, membershipId) : prevState.pendingMemberships,\n            requestedMemberships: membershipStatus === 'joining_request' ? _this.filterMemberships(prevState.requestedMemberships, membershipId) : prevState.requestedMembership\n          };\n        });\n      } else {\n        _this.setState({\n          successMessages: null,\n          errorMessages: response.message\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"chatChannelAcceptMembership\", /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator(function* (e) {\n        var chatChannel = _this.state.chatChannel;\n        var membershipId = e.target.dataset.membershipId;\n        var response = yield acceptChatChannelJoiningRequest(chatChannel.id, membershipId);\n        var message = response.message;\n\n        if (response.success) {\n          _this.setState(function (prevState) {\n            var filteredRequestedMemberships = prevState.requestedMemberships.filter(function (requestedMembership) {\n              return requestedMembership.membership_id !== Number(membershipId);\n            });\n            var updatedActiveMembership = [].concat(_toConsumableArray(prevState.activeMemberships), [response.membership]);\n            return {\n              errorMessages: null,\n              successMessages: response.message,\n              requestedMemberships: filteredRequestedMemberships,\n              activeMemberships: updatedActiveMembership\n            };\n          });\n        } else {\n          _this.setState({\n            successMessages: null,\n            errorMessages: response.message\n          });\n        }\n\n        addSnackbarItem({\n          message: message\n        });\n      });\n\n      return function (_x4) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"handleChannelDiscoverableStatus\", function (e) {\n      var status = e.target.checked;\n\n      _this.setState({\n        channelDiscoverable: status\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleChannelDescriptionChanges\", /*#__PURE__*/_asyncToGenerator(function* () {\n      var _this$state2 = _this.state,\n          chatChannel = _this$state2.chatChannel,\n          channelDescription = _this$state2.channelDescription,\n          channelDiscoverable = _this$state2.channelDiscoverable;\n      var id = chatChannel.id;\n      var response = yield updateChatChannelDescription(id, channelDescription, channelDiscoverable);\n      var message = response.message;\n\n      if (response.success) {\n        _this.updateChannelDetails();\n\n        _this.setState(function (prevState) {\n          return {\n            errorMessages: null,\n            successMessages: response.message,\n            chatChannel: _objectSpread(_objectSpread({}, prevState), {}, {\n              description: channelDescription,\n              discoverable: channelDiscoverable\n            })\n          };\n        });\n      } else {\n        _this.setState({\n          successMessages: null,\n          errorMessages: response.message,\n          channelDiscoverable: chatChannel.discoverable\n        });\n      }\n\n      addSnackbarItem({\n        message: message\n      });\n    }));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleInvitationUsernames\", function (e) {\n      var invitationUsernameValue = e.target.value;\n\n      _this.setState({\n        invitationUsernames: invitationUsernameValue\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleChannelInvitations\", /*#__PURE__*/_asyncToGenerator(function* () {\n      var _this$state3 = _this.state,\n          invitationUsernames = _this$state3.invitationUsernames,\n          chatChannel = _this$state3.chatChannel;\n      var id = chatChannel.id;\n      var response = yield sendChatChannelInvitation(id, invitationUsernames);\n      var message = response.message;\n\n      if (response.success) {\n        _this.updateChannelDetails();\n\n        _this.setState({\n          errorMessages: null,\n          successMessages: response.message,\n          invitationUsernames: null\n        });\n      } else {\n        _this.setState({\n          successMessages: null,\n          errorMessages: response.message\n        });\n      }\n\n      addSnackbarItem({\n        message: message\n      });\n    }));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleleaveChannelMembership\", /*#__PURE__*/_asyncToGenerator(function* () {\n      // eslint-disable-next-line no-restricted-globals\n      var actionStatus = confirm('Are you absolutely sure you want to leave this channel? This action is permanent.');\n      var currentMembership = _this.state.currentMembership;\n\n      if (actionStatus) {\n        var response = yield leaveChatChannelMembership(currentMembership.id);\n        var message = response.message;\n\n        if (response.success) {\n          _this.setState({\n            successMessages: message,\n            errorMessages: null\n          });\n\n          _this.props.handleLeavingChannel(currentMembership.id);\n        } else {\n          _this.setState({\n            successMessages: null,\n            errorMessages: response.message\n          });\n        }\n\n        addSnackbarItem({\n          message: message\n        });\n      }\n    }));\n\n    _defineProperty(_assertThisInitialized(_this), \"toggleScreens\", function () {\n      var _this$state4 = _this.state,\n          displaySettings = _this$state4.displaySettings,\n          displayMembershipManager = _this$state4.displayMembershipManager;\n\n      _this.setState({\n        displaySettings: !displaySettings,\n        displayMembershipManager: !displayMembershipManager\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleUpdateMembershipRole\", /*#__PURE__*/function () {\n      var _ref8 = _asyncToGenerator(function* (e) {\n        var _e$target$dataset2 = e.target.dataset,\n            membershipId = _e$target$dataset2.membershipId,\n            role = _e$target$dataset2.role;\n        var chatChannel = _this.state.chatChannel;\n        var response = yield updateMembershipRole(membershipId, chatChannel.id, role);\n        var message = response.message;\n\n        if (response.success) {\n          _this.updateChannelDetails();\n\n          _this.setState(function (prevState) {\n            var activeMemberships = prevState.activeMemberships;\n            var updatedActiveMemberships = activeMemberships.map(function (activeMembership) {\n              if (activeMembership.membership_id === Number(membershipId)) {\n                return _objectSpread(_objectSpread({}, activeMembership), {}, {\n                  role: role\n                });\n              }\n\n              return activeMembership;\n            });\n            return _objectSpread(_objectSpread({}, prevState), {}, {\n              activeMemberships: updatedActiveMemberships,\n              errorMessages: null,\n              successMessages: response.message\n            });\n          });\n        } else {\n          _this.setState({\n            successMessages: null,\n            errorMessages: response.message\n          });\n        }\n\n        addSnackbarItem({\n          message: message\n        });\n      });\n\n      return function (_x5) {\n        return _ref8.apply(this, arguments);\n      };\n    }());\n\n    _this.state = {\n      successMessages: null,\n      errorMessages: null,\n      activeMemberships: [],\n      pendingMemberships: [],\n      requestedMemberships: [],\n      chatChannel: null,\n      currentMembership: null,\n      activeMembershipId: null,\n      channelDescription: null,\n      channelDiscoverable: null,\n      invitationUsernames: null,\n      showGlobalBadgeNotification: null,\n      displaySettings: true,\n      displayMembershipManager: false,\n      invitationLink: null\n    };\n    return _this;\n  }\n\n  _createClass(ChatChannelSettings, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.updateChannelDetails();\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps() {\n      var activeMembershipId = this.props.activeMembershipId;\n      this.setState({\n        activeMembershipId: activeMembershipId\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state5 = this.state,\n          chatChannel = _this$state5.chatChannel,\n          currentMembership = _this$state5.currentMembership,\n          activeMemberships = _this$state5.activeMemberships,\n          pendingMemberships = _this$state5.pendingMemberships,\n          requestedMemberships = _this$state5.requestedMemberships,\n          channelDescription = _this$state5.channelDescription,\n          channelDiscoverable = _this$state5.channelDiscoverable,\n          invitationUsernames = _this$state5.invitationUsernames,\n          showGlobalBadgeNotification = _this$state5.showGlobalBadgeNotification,\n          displaySettings = _this$state5.displaySettings,\n          invitationLink = _this$state5.invitationLink;\n\n      if (!chatChannel) {\n        return null;\n      }\n\n      return h(\"div\", {\n        className: \"activechatchannel__activeArticle channel_settings\"\n      }, h(\"div\", {\n        className: \"p-4\"\n      }, displaySettings ? h(ChatChannelSettingsSection, {\n        channelDiscoverable: channelDiscoverable,\n        updateCurrentMembershipNotificationSettings: this.updateCurrentMembershipNotificationSettings,\n        handleleaveChannelMembership: this.handleleaveChannelMembership,\n        handlePersonChannelSetting: this.handlePersonChannelSetting,\n        handleChannelDescriptionChanges: this.handleChannelDescriptionChanges,\n        handleChannelDiscoverableStatus: this.handleChannelDiscoverableStatus,\n        handleDescriptionChange: this.handleDescriptionChange,\n        handleChannelInvitations: this.handleChannelInvitations,\n        handleInvitationUsernames: this.handleInvitationUsernames,\n        toggleScreens: this.toggleScreens,\n        removeMembership: this.removeMembership,\n        chatChannelAcceptMembership: this.chatChannelAcceptMembership,\n        channelDescription: channelDescription,\n        chatChannel: chatChannel,\n        currentMembership: currentMembership,\n        activeMemberships: activeMemberships,\n        pendingMemberships: pendingMemberships,\n        requestedMemberships: requestedMemberships,\n        invitationUsernames: invitationUsernames,\n        showGlobalBadgeNotification: showGlobalBadgeNotification\n      }) : h(ManageActiveMembership, {\n        activeMemberships: activeMemberships,\n        currentMembership: currentMembership,\n        chatChannel: chatChannel,\n        invitationLink: invitationLink,\n        removeMembership: this.removeMembership,\n        handleUpdateMembershipRole: this.handleUpdateMembershipRole\n      })));\n    }\n  }]);\n\n  return ChatChannelSettings;\n}(Component);\n\n_defineProperty(ChatChannelSettings, \"propTypes\", {\n  handleLeavingChannel: PropTypes.func.isRequired,\n  activeMembershipId: PropTypes.number.isRequired\n});\n\nexport { ChatChannelSettings as default };","map":{"version":3,"sources":["/Users/nmadhab/hobby/forem/app/javascript/chat/ChatChannelSettings/ChatChannelSettings.jsx"],"names":["h","Component","PropTypes","getChannelDetails","updatePersonalChatChannelNotificationSettings","rejectChatChannelJoiningRequest","acceptChatChannelJoiningRequest","updateChatChannelDescription","sendChatChannelInvitation","leaveChatChannelMembership","updateMembershipRole","addSnackbarItem","ManageActiveMembership","ChatChannelSettingsSection","ChatChannelSettings","props","activeMembershipId","then","response","success","result","setState","chatChannel","chat_channel","activeMemberships","memberships","active","pendingMemberships","pending","requestedMemberships","requested","currentMembership","current_membership","channelDescription","description","channelDiscoverable","discoverable","showGlobalBadgeNotification","show_global_badge_notification","invitationLink","invitation_link","successMessages","errorMessages","message","error","e","target","value","status","checked","state","id","prevState","membershipId","membershipStatus","filteredMembership","filter","membership","membership_id","Number","dataset","chatChannelRemoveMembership","updateMemberships","updateChannelDetails","filterMemberships","requestedMembership","filteredRequestedMemberships","updatedActiveMembership","invitationUsernameValue","invitationUsernames","actionStatus","confirm","handleLeavingChannel","displaySettings","displayMembershipManager","role","updatedActiveMemberships","map","activeMembership","updateCurrentMembershipNotificationSettings","handleleaveChannelMembership","handlePersonChannelSetting","handleChannelDescriptionChanges","handleChannelDiscoverableStatus","handleDescriptionChange","handleChannelInvitations","handleInvitationUsernames","toggleScreens","removeMembership","chatChannelAcceptMembership","handleUpdateMembershipRole","func","isRequired","number"],"mappings":"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","sourcesContent":["import { h, Component } from 'preact';\nimport PropTypes from 'prop-types';\n\nimport {\n  getChannelDetails,\n  updatePersonalChatChannelNotificationSettings,\n  rejectChatChannelJoiningRequest,\n  acceptChatChannelJoiningRequest,\n  updateChatChannelDescription,\n  sendChatChannelInvitation,\n  leaveChatChannelMembership,\n  updateMembershipRole,\n} from '../actions/chat_channel_setting_actions';\n\nimport { addSnackbarItem } from '../../Snackbar';\nimport ManageActiveMembership from './MembershipManager/ManageActiveMembership';\nimport ChatChannelSettingsSection from './ChatChannelSettingsSection';\n\nexport default class ChatChannelSettings extends Component {\n  static propTypes = {\n    handleLeavingChannel: PropTypes.func.isRequired,\n    activeMembershipId: PropTypes.number.isRequired,\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      successMessages: null,\n      errorMessages: null,\n      activeMemberships: [],\n      pendingMemberships: [],\n      requestedMemberships: [],\n      chatChannel: null,\n      currentMembership: null,\n      activeMembershipId: null,\n      channelDescription: null,\n      channelDiscoverable: null,\n      invitationUsernames: null,\n      showGlobalBadgeNotification: null,\n      displaySettings: true,\n      displayMembershipManager: false,\n      invitationLink: null,\n    };\n  }\n\n  componentDidMount() {\n    this.updateChannelDetails();\n  }\n\n  componentWillReceiveProps() {\n    const { activeMembershipId } = this.props;\n    this.setState({\n      activeMembershipId,\n    });\n  }\n\n  updateChannelDetails = () => {\n    const { activeMembershipId } = this.props;\n\n    getChannelDetails(activeMembershipId)\n      .then((response) => {\n        if (response.success) {\n          const { result } = response;\n          this.setState({\n            chatChannel: result.chat_channel,\n            activeMemberships: result.memberships.active,\n            pendingMemberships: result.memberships.pending,\n            requestedMemberships: result.memberships.requested,\n            currentMembership: result.current_membership,\n            channelDescription: result.chat_channel.description,\n            channelDiscoverable: result.chat_channel.discoverable,\n            showGlobalBadgeNotification:\n              result.current_membership.show_global_badge_notification,\n            invitationLink: result.invitation_link,\n          });\n        } else {\n          this.setState({\n            successMessages: null,\n            errorMessages: response.message,\n          });\n        }\n      })\n      .catch((error) => {\n        this.setState({\n          successMessages: null,\n          errorMessages: error.message,\n        });\n      });\n  };\n\n  handleDescriptionChange = (e) => {\n    const description = e.target.value;\n    this.setState({\n      channelDescription: description,\n    });\n  };\n\n  handlePersonChannelSetting = (e) => {\n    const status = e.target.checked;\n    this.setState({\n      showGlobalBadgeNotification: status,\n    });\n  };\n\n  updateCurrentMembershipNotificationSettings = async () => {\n    const { currentMembership, showGlobalBadgeNotification } = this.state;\n    const response = await updatePersonalChatChannelNotificationSettings(\n      currentMembership.id,\n      showGlobalBadgeNotification,\n    );\n    const { message } = response;\n    if (response.success) {\n      this.setState((prevState) => {\n        return {\n          errorMessages: null,\n          successMessages: response.message,\n          currentMembership: {\n            ...prevState.currentMembership,\n            show_global_badge_notification: showGlobalBadgeNotification,\n          },\n        };\n      });\n    } else {\n      this.setState({\n        successMessages: null,\n        errorMessages: response.message,\n        showGlobalBadgeNotification:\n          currentMembership.show_global_badge_notification,\n      });\n    }\n    addSnackbarItem({ message });\n  };\n\n  chatChannelRemoveMembership = async (membershipId, membershipStatus) => {\n    const { chatChannel } = this.state;\n    const response = await rejectChatChannelJoiningRequest(\n      chatChannel.id,\n      membershipId,\n      membershipStatus,\n    );\n    return response;\n  };\n\n  filterMemberships = (memberships, membershipId) => {\n    const filteredMembership = memberships.filter(\n      (membership) => membership.membership_id !== Number(membershipId),\n    );\n    return filteredMembership;\n  };\n\n  removeMembership = async (e) => {\n    const { membershipId, membershipStatus } = e.target.dataset;\n    const response = await this.chatChannelRemoveMembership(\n      membershipId,\n      membershipStatus,\n    );\n    const { message } = response;\n    this.updateMemberships(membershipId, response, membershipStatus);\n    addSnackbarItem({ message });\n  };\n\n  updateMemberships = (membershipId, response, membershipStatus) => {\n    if (response.success) {\n      this.updateChannelDetails();\n      this.setState((prevState) => {\n        return {\n          errorMessages: null,\n          successMessages: response.message,\n          activeMemberships:\n            membershipStatus === 'active'\n              ? this.filterMemberships(\n                  prevState.activeMemberships,\n                  membershipId,\n                )\n              : prevState.activeMemberships,\n          pendingMemberships:\n            membershipStatus === 'pending'\n              ? this.filterMemberships(\n                  prevState.pendingMemberships,\n                  membershipId,\n                )\n              : prevState.pendingMemberships,\n          requestedMemberships:\n            membershipStatus === 'joining_request'\n              ? this.filterMemberships(\n                  prevState.requestedMemberships,\n                  membershipId,\n                )\n              : prevState.requestedMembership,\n        };\n      });\n    } else {\n      this.setState({\n        successMessages: null,\n        errorMessages: response.message,\n      });\n    }\n  };\n\n  chatChannelAcceptMembership = async (e) => {\n    const { chatChannel } = this.state;\n    const { membershipId } = e.target.dataset;\n    const response = await acceptChatChannelJoiningRequest(\n      chatChannel.id,\n      membershipId,\n    );\n    const { message } = response;\n    if (response.success) {\n      this.setState((prevState) => {\n        const filteredRequestedMemberships = prevState.requestedMemberships.filter(\n          (requestedMembership) =>\n            requestedMembership.membership_id !== Number(membershipId),\n        );\n        const updatedActiveMembership = [\n          ...prevState.activeMemberships,\n          response.membership,\n        ];\n        return {\n          errorMessages: null,\n          successMessages: response.message,\n          requestedMemberships: filteredRequestedMemberships,\n          activeMemberships: updatedActiveMembership,\n        };\n      });\n    } else {\n      this.setState({\n        successMessages: null,\n        errorMessages: response.message,\n      });\n    }\n    addSnackbarItem({ message });\n  };\n\n  handleChannelDiscoverableStatus = (e) => {\n    const status = e.target.checked;\n    this.setState({\n      channelDiscoverable: status,\n    });\n  };\n\n  handleChannelDescriptionChanges = async () => {\n    const { chatChannel, channelDescription, channelDiscoverable } = this.state;\n    const { id } = chatChannel;\n    const response = await updateChatChannelDescription(\n      id,\n      channelDescription,\n      channelDiscoverable,\n    );\n    const { message } = response;\n\n    if (response.success) {\n      this.updateChannelDetails();\n      this.setState((prevState) => {\n        return {\n          errorMessages: null,\n          successMessages: response.message,\n          chatChannel: {\n            ...prevState,\n            description: channelDescription,\n            discoverable: channelDiscoverable,\n          },\n        };\n      });\n    } else {\n      this.setState({\n        successMessages: null,\n        errorMessages: response.message,\n        channelDiscoverable: chatChannel.discoverable,\n      });\n    }\n    addSnackbarItem({ message });\n  };\n\n  handleInvitationUsernames = (e) => {\n    const invitationUsernameValue = e.target.value;\n    this.setState({\n      invitationUsernames: invitationUsernameValue,\n    });\n  };\n\n  handleChannelInvitations = async () => {\n    const { invitationUsernames, chatChannel } = this.state;\n    const { id } = chatChannel;\n    const response = await sendChatChannelInvitation(id, invitationUsernames);\n    const { message } = response;\n    if (response.success) {\n      this.updateChannelDetails();\n      this.setState({\n        errorMessages: null,\n        successMessages: response.message,\n        invitationUsernames: null,\n      });\n    } else {\n      this.setState({\n        successMessages: null,\n        errorMessages: response.message,\n      });\n    }\n    addSnackbarItem({ message });\n  };\n\n  handleleaveChannelMembership = async () => {\n    // eslint-disable-next-line no-restricted-globals\n    const actionStatus = confirm(\n      'Are you absolutely sure you want to leave this channel? This action is permanent.',\n    );\n    const { currentMembership } = this.state;\n    if (actionStatus) {\n      const response = await leaveChatChannelMembership(currentMembership.id);\n      const { message } = response;\n      if (response.success) {\n        this.setState({\n          successMessages: message,\n          errorMessages: null,\n        });\n        this.props.handleLeavingChannel(currentMembership.id);\n      } else {\n        this.setState({\n          successMessages: null,\n          errorMessages: response.message,\n        });\n      }\n      addSnackbarItem({ message });\n    }\n  };\n\n  toggleScreens = () => {\n    const { displaySettings, displayMembershipManager } = this.state;\n\n    this.setState({\n      displaySettings: !displaySettings,\n      displayMembershipManager: !displayMembershipManager,\n    });\n  };\n\n  handleUpdateMembershipRole = async (e) => {\n    const { membershipId, role } = e.target.dataset;\n    const { chatChannel } = this.state;\n    const response = await updateMembershipRole(\n      membershipId,\n      chatChannel.id,\n      role,\n    );\n    const { message } = response;\n    if (response.success) {\n      this.updateChannelDetails();\n      this.setState((prevState) => {\n        const { activeMemberships } = prevState;\n        const updatedActiveMemberships = activeMemberships.map(\n          (activeMembership) => {\n            if (activeMembership.membership_id === Number(membershipId)) {\n              return { ...activeMembership, role };\n            }\n            return activeMembership;\n          },\n        );\n        return {\n          ...prevState,\n          activeMemberships: updatedActiveMemberships,\n          errorMessages: null,\n          successMessages: response.message,\n        };\n      });\n    } else {\n      this.setState({\n        successMessages: null,\n        errorMessages: response.message,\n      });\n    }\n\n    addSnackbarItem({ message });\n  };\n\n  render() {\n    const {\n      chatChannel,\n      currentMembership,\n      activeMemberships,\n      pendingMemberships,\n      requestedMemberships,\n      channelDescription,\n      channelDiscoverable,\n      invitationUsernames,\n      showGlobalBadgeNotification,\n      displaySettings,\n      invitationLink,\n    } = this.state;\n\n    if (!chatChannel) {\n      return null;\n    }\n\n    return (\n      <div className=\"activechatchannel__activeArticle channel_settings\">\n        <div className=\"p-4\">\n          {displaySettings ? (\n            <ChatChannelSettingsSection\n              channelDiscoverable={channelDiscoverable}\n              updateCurrentMembershipNotificationSettings={\n                this.updateCurrentMembershipNotificationSettings\n              }\n              handleleaveChannelMembership={this.handleleaveChannelMembership}\n              handlePersonChannelSetting={this.handlePersonChannelSetting}\n              handleChannelDescriptionChanges={\n                this.handleChannelDescriptionChanges\n              }\n              handleChannelDiscoverableStatus={\n                this.handleChannelDiscoverableStatus\n              }\n              handleDescriptionChange={this.handleDescriptionChange}\n              handleChannelInvitations={this.handleChannelInvitations}\n              handleInvitationUsernames={this.handleInvitationUsernames}\n              toggleScreens={this.toggleScreens}\n              removeMembership={this.removeMembership}\n              chatChannelAcceptMembership={this.chatChannelAcceptMembership}\n              channelDescription={channelDescription}\n              chatChannel={chatChannel}\n              currentMembership={currentMembership}\n              activeMemberships={activeMemberships}\n              pendingMemberships={pendingMemberships}\n              requestedMemberships={requestedMemberships}\n              invitationUsernames={invitationUsernames}\n              showGlobalBadgeNotification={showGlobalBadgeNotification}\n            />\n          ) : (\n            <ManageActiveMembership\n              activeMemberships={activeMemberships}\n              currentMembership={currentMembership}\n              chatChannel={chatChannel}\n              invitationLink={invitationLink}\n              removeMembership={this.removeMembership}\n              handleUpdateMembershipRole={this.handleUpdateMembershipRole}\n            />\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}