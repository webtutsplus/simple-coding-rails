{"ast":null,"code":"function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport { cloneElement } from 'preact';\nimport { useEffect, useRef, useState } from 'preact/hooks';\n/**\n * A custom Preact hook used to attach drag and drop functionality to a DOM element.\n * @example\n * function SomeComponent(props) {\n *   const { setElement } = useDragAndDrop({\n *     onDrop: someDropHandler,\n *     onDragOver: someDragOverHandler,\n *     onDragExit: someDragExitHandler\n *   });\n *\n *  const someDomRef = useRef(null);\n *\n *  useEffect(() => {\n *    if (someDomRef.current) {\n *      setElement(someDomRef.current);\n *    }\n *  });\n *\n *  return <textarea ref={someDomRef}>I'm a text area</textarea>;\n * };\n *\n * @param {object} props\n * @param {Function} props.onDragOver The handler that runs when the dragover event is fired.\n * @param {Function} props.onDragExit The handler that runs when the dragexit/dragleave events are fired.\n * @param {Function} props.onDrop The handler that runs when the drop event is fired.\n */\n\nexport function useDragAndDrop(_ref) {\n  var onDragOver = _ref.onDragOver,\n      onDragExit = _ref.onDragExit,\n      onDrop = _ref.onDrop;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      element = _useState2[0],\n      setElement = _useState2[1];\n\n  useEffect(function () {\n    if (!element) {\n      return;\n    }\n\n    var noDragAndDropHandler = function noDragAndDropHandler(event) {\n      return event.preventDefault();\n    };\n\n    document.addEventListener('dragover', noDragAndDropHandler);\n    document.addEventListener('drop', noDragAndDropHandler);\n    element.addEventListener('dragover', onDragOver);\n    element.addEventListener('dragexit', onDragExit);\n    element.addEventListener('dragleave', onDragExit);\n    element.addEventListener('drop', onDrop);\n    return function () {\n      document.removeEventListener('dragover', noDragAndDropHandler);\n      document.removeEventListener('drop', noDragAndDropHandler);\n      element.removeEventListener('dragover', onDragOver);\n      element.removeEventListener('dragexit', onDragExit);\n      element.removeEventListener('dragleave', onDragExit);\n      element.removeEventListener('drop', onDrop);\n    };\n  }, [element, onDragOver, onDragExit, onDrop]);\n  return {\n    setElement: setElement\n  };\n}\n/**\n * Registers drag and drop events for the child element that is wrapped by this component.\n *\n * @example\n * <DragAndDropZone\n *     onDragOver={someDragOverHandler}\n *     onDragExit={someDragExitHandler}\n *     onDrop={someDropHandler}\n *     >\n *    <textarea>I'm a text area</textarea>\n * <DragAndDropZone>\n *\n * @param {object} props\n * @param {JSX.Element} props.children The React element that will register it's DOM counterpart with drag and drop events.\n * @param {Function} props.onDragOver The handler that runs when the dragover event is fired.\n * @param {Function} props.onDragExit The handler that runs when the dragexit/dragleave events are fired.\n * @param {Function} props.onDrop The handler that runs when the drop event is fired.\n */\n\nexport function DragAndDropZone(_ref2) {\n  var children = _ref2.children,\n      onDragOver = _ref2.onDragOver,\n      onDragExit = _ref2.onDragExit,\n      onDrop = _ref2.onDrop;\n\n  if (!children) {\n    throw new Error('The <DragAndDropZone /> component children prop is null or was not specified.');\n  }\n\n  var _useDragAndDrop = useDragAndDrop({\n    onDragOver: onDragOver,\n    onDragExit: onDragExit,\n    onDrop: onDrop\n  }),\n      setElement = _useDragAndDrop.setElement;\n\n  var dropZoneRef = useRef(null);\n\n  if (dropZoneRef.current) {\n    setElement(dropZoneRef.current);\n  }\n\n  return cloneElement(children, {\n    ref: dropZoneRef\n  });\n}","map":{"version":3,"sources":["/Users/nmadhab/hobby/forem/app/javascript/utilities/dragAndDrop.js"],"names":["cloneElement","useEffect","useRef","useState","useDragAndDrop","onDragOver","onDragExit","onDrop","element","setElement","noDragAndDropHandler","event","preventDefault","document","addEventListener","removeEventListener","DragAndDropZone","children","Error","dropZoneRef","current","ref"],"mappings":"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","sourcesContent":["import { cloneElement } from 'preact';\nimport { useEffect, useRef, useState } from 'preact/hooks';\n\n/**\n * A custom Preact hook used to attach drag and drop functionality to a DOM element.\n * @example\n * function SomeComponent(props) {\n *   const { setElement } = useDragAndDrop({\n *     onDrop: someDropHandler,\n *     onDragOver: someDragOverHandler,\n *     onDragExit: someDragExitHandler\n *   });\n *\n *  const someDomRef = useRef(null);\n *\n *  useEffect(() => {\n *    if (someDomRef.current) {\n *      setElement(someDomRef.current);\n *    }\n *  });\n *\n *  return <textarea ref={someDomRef}>I'm a text area</textarea>;\n * };\n *\n * @param {object} props\n * @param {Function} props.onDragOver The handler that runs when the dragover event is fired.\n * @param {Function} props.onDragExit The handler that runs when the dragexit/dragleave events are fired.\n * @param {Function} props.onDrop The handler that runs when the drop event is fired.\n */\nexport function useDragAndDrop({ onDragOver, onDragExit, onDrop }) {\n  const [element, setElement] = useState(null);\n\n  useEffect(() => {\n    if (!element) {\n      return;\n    }\n\n    const noDragAndDropHandler = (event) => event.preventDefault();\n\n    document.addEventListener('dragover', noDragAndDropHandler);\n    document.addEventListener('drop', noDragAndDropHandler);\n\n    element.addEventListener('dragover', onDragOver);\n    element.addEventListener('dragexit', onDragExit);\n    element.addEventListener('dragleave', onDragExit);\n    element.addEventListener('drop', onDrop);\n\n    return () => {\n      document.removeEventListener('dragover', noDragAndDropHandler);\n      document.removeEventListener('drop', noDragAndDropHandler);\n\n      element.removeEventListener('dragover', onDragOver);\n      element.removeEventListener('dragexit', onDragExit);\n      element.removeEventListener('dragleave', onDragExit);\n      element.removeEventListener('drop', onDrop);\n    };\n  }, [element, onDragOver, onDragExit, onDrop]);\n\n  return { setElement };\n}\n\n/**\n * Registers drag and drop events for the child element that is wrapped by this component.\n *\n * @example\n * <DragAndDropZone\n *     onDragOver={someDragOverHandler}\n *     onDragExit={someDragExitHandler}\n *     onDrop={someDropHandler}\n *     >\n *    <textarea>I'm a text area</textarea>\n * <DragAndDropZone>\n *\n * @param {object} props\n * @param {JSX.Element} props.children The React element that will register it's DOM counterpart with drag and drop events.\n * @param {Function} props.onDragOver The handler that runs when the dragover event is fired.\n * @param {Function} props.onDragExit The handler that runs when the dragexit/dragleave events are fired.\n * @param {Function} props.onDrop The handler that runs when the drop event is fired.\n */\nexport function DragAndDropZone({ children, onDragOver, onDragExit, onDrop }) {\n  if (!children) {\n    throw new Error(\n      'The <DragAndDropZone /> component children prop is null or was not specified.',\n    );\n  }\n\n  const { setElement } = useDragAndDrop({ onDragOver, onDragExit, onDrop });\n  const dropZoneRef = useRef(null);\n\n  if (dropZoneRef.current) {\n    setElement(dropZoneRef.current);\n  }\n\n  return cloneElement(children, {\n    ref: dropZoneRef,\n  });\n}\n"]},"metadata":{},"sourceType":"module"}