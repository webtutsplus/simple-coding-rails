{"ast":null,"code":"import { h, createRef } from 'preact';\nimport { useEffect } from 'preact/hooks';\nimport PropTypes from 'prop-types';\nimport { defaultChannelPropTypes } from '../../common-prop-types/channel-list-prop-type';\nimport ChannelImage from './ChannelImage';\nimport { Button } from '@crayons';\n/**\n * Render the channel button\n * @param {object} props\n * \n * @component\n * \n * @example\n * \n * <ChannelButton \n *  channel={channel}\n    newMessagesIndicator={newMessagesIndicator}\n    otherClassname={otherClassname}\n    handleSwitchChannel={handleSwitchChannel}\n    isUnopened={isUnopened}\n * />\n *\n */\n\nexport default function ChannelButton(props) {\n  var buttonRef = createRef();\n  var _props$isActiveChanne = props.isActiveChannel,\n      isActiveChannel = _props$isActiveChanne === void 0 ? false : _props$isActiveChanne;\n  useEffect(function () {\n    if (isActiveChannel) {\n      buttonRef.current.click();\n    }\n  }, [isActiveChannel, buttonRef]);\n  var channel = props.channel,\n      handleSwitchChannel = props.handleSwitchChannel,\n      otherClassname = props.otherClassname,\n      newMessagesIndicator = props.newMessagesIndicator,\n      isUnopened = props.isUnopened,\n      discoverableChannel = props.discoverableChannel,\n      triggerActiveContent = props.triggerActiveContent;\n  return h(Button, {\n    ref: buttonRef,\n    key: channel.id,\n    className: discoverableChannel ? 'chatchanneltab chatchanneltab--inactive crayons-btn--ghost' : \"chatchanneltab \".concat(otherClassname, \" chatchanneltab--\").concat(newMessagesIndicator, \" crayons-btn--ghost\"),\n    onClick: discoverableChannel ? triggerActiveContent : handleSwitchChannel,\n    \"data-content\": \"sidecar-channel-request\",\n    \"data-channel-id\": channel.chat_channel_id,\n    \"data-channel-slug\": channel.channel_modified_slug,\n    \"data-channel-status\": channel.status,\n    \"data-channel-name\": channel.channel_name\n  }, h(ChannelImage, {\n    channel: channel,\n    newMessagesIndicator: newMessagesIndicator,\n    discoverableChannel: discoverableChannel\n  }), isUnopened ? h(\"span\", {\n    className: \"crayons-indicator crayons-indicator--accent crayons-indicator--bullet\"\n  }) : null, channel.channel_name);\n}\nChannelButton.propTypes = {\n  channel: defaultChannelPropTypes,\n  discoverableChannel: PropTypes.bool,\n  handleSwitchChannel: PropTypes.func,\n  triggerActiveContent: PropTypes.func,\n  newMessagesIndicator: PropTypes.string,\n  otherClassname: PropTypes.string,\n  isUnopened: PropTypes.string\n};\nChannelButton.defaultProps = {\n  otherClassname: '',\n  isUnopened: '',\n  newMessagesIndicator: '',\n  discoverableChannel: false,\n  handleSwitchChannel: null,\n  triggerActiveContent: null\n};","map":{"version":3,"sources":["/Users/nmadhab/hobby/forem/app/javascript/chat/components/ChannelButton.jsx"],"names":["h","createRef","useEffect","PropTypes","defaultChannelPropTypes","ChannelImage","Button","ChannelButton","props","buttonRef","isActiveChannel","current","click","channel","handleSwitchChannel","otherClassname","newMessagesIndicator","isUnopened","discoverableChannel","triggerActiveContent","id","chat_channel_id","channel_modified_slug","status","channel_name","propTypes","bool","func","string","defaultProps"],"mappings":"AAAA,SAASA,CAAT,EAAYC,SAAZ,QAA6B,QAA7B;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,uBAAT,QAAwC,gDAAxC;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAASC,MAAT,QAAuB,UAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC3C,MAAMC,SAAS,GAAGR,SAAS,EAA3B;AAD2C,8BAEPO,KAFO,CAEnCE,eAFmC;AAAA,MAEnCA,eAFmC,sCAEjB,KAFiB;AAI3CR,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIQ,eAAJ,EAAqB;AACnBD,MAAAA,SAAS,CAACE,OAAV,CAAkBC,KAAlB;AACD;AACF,GAJQ,EAIN,CAACF,eAAD,EAAkBD,SAAlB,CAJM,CAAT;AAJ2C,MAWzCI,OAXyC,GAkBvCL,KAlBuC,CAWzCK,OAXyC;AAAA,MAYzCC,mBAZyC,GAkBvCN,KAlBuC,CAYzCM,mBAZyC;AAAA,MAazCC,cAbyC,GAkBvCP,KAlBuC,CAazCO,cAbyC;AAAA,MAczCC,oBAdyC,GAkBvCR,KAlBuC,CAczCQ,oBAdyC;AAAA,MAezCC,UAfyC,GAkBvCT,KAlBuC,CAezCS,UAfyC;AAAA,MAgBzCC,mBAhByC,GAkBvCV,KAlBuC,CAgBzCU,mBAhByC;AAAA,MAiBzCC,oBAjByC,GAkBvCX,KAlBuC,CAiBzCW,oBAjByC;AAoB3C,SACE,EAAC,MAAD;AACE,IAAA,GAAG,EAAEV,SADP;AAEE,IAAA,GAAG,EAAEI,OAAO,CAACO,EAFf;AAGE,IAAA,SAAS,EACPF,mBAAmB,GACf,4DADe,4BAEGH,cAFH,8BAEqCC,oBAFrC,wBAJvB;AAQE,IAAA,OAAO,EAAEE,mBAAmB,GAAGC,oBAAH,GAA0BL,mBARxD;AASE,oBAAa,yBATf;AAUE,uBAAiBD,OAAO,CAACQ,eAV3B;AAWE,yBAAmBR,OAAO,CAACS,qBAX7B;AAYE,2BAAqBT,OAAO,CAACU,MAZ/B;AAaE,yBAAmBV,OAAO,CAACW;AAb7B,KAeE,EAAC,YAAD;AACE,IAAA,OAAO,EAAEX,OADX;AAEE,IAAA,oBAAoB,EAAEG,oBAFxB;AAGE,IAAA,mBAAmB,EAAEE;AAHvB,IAfF,EAoBGD,UAAU,GACT;AAAM,IAAA,SAAS,EAAC;AAAhB,IADS,GAEP,IAtBN,EAuBGJ,OAAO,CAACW,YAvBX,CADF;AA2BD;AAEDjB,aAAa,CAACkB,SAAd,GAA0B;AACxBZ,EAAAA,OAAO,EAAET,uBADe;AAExBc,EAAAA,mBAAmB,EAAEf,SAAS,CAACuB,IAFP;AAGxBZ,EAAAA,mBAAmB,EAAEX,SAAS,CAACwB,IAHP;AAIxBR,EAAAA,oBAAoB,EAAEhB,SAAS,CAACwB,IAJR;AAKxBX,EAAAA,oBAAoB,EAAEb,SAAS,CAACyB,MALR;AAMxBb,EAAAA,cAAc,EAAEZ,SAAS,CAACyB,MANF;AAOxBX,EAAAA,UAAU,EAAEd,SAAS,CAACyB;AAPE,CAA1B;AAUArB,aAAa,CAACsB,YAAd,GAA6B;AAC3Bd,EAAAA,cAAc,EAAE,EADW;AAE3BE,EAAAA,UAAU,EAAE,EAFe;AAG3BD,EAAAA,oBAAoB,EAAE,EAHK;AAI3BE,EAAAA,mBAAmB,EAAE,KAJM;AAK3BJ,EAAAA,mBAAmB,EAAE,IALM;AAM3BK,EAAAA,oBAAoB,EAAE;AANK,CAA7B","sourcesContent":["import { h, createRef } from 'preact';\nimport { useEffect } from 'preact/hooks';\nimport PropTypes from 'prop-types';\nimport { defaultChannelPropTypes } from '../../common-prop-types/channel-list-prop-type';\nimport ChannelImage from './ChannelImage';\nimport { Button } from '@crayons';\n\n/**\n * Render the channel button\n * @param {object} props\n * \n * @component\n * \n * @example\n * \n * <ChannelButton \n *  channel={channel}\n    newMessagesIndicator={newMessagesIndicator}\n    otherClassname={otherClassname}\n    handleSwitchChannel={handleSwitchChannel}\n    isUnopened={isUnopened}\n * />\n *\n */\nexport default function ChannelButton(props) {\n  const buttonRef = createRef();\n  const { isActiveChannel = false } = props;\n\n  useEffect(() => {\n    if (isActiveChannel) {\n      buttonRef.current.click();\n    }\n  }, [isActiveChannel, buttonRef]);\n\n  const {\n    channel,\n    handleSwitchChannel,\n    otherClassname,\n    newMessagesIndicator,\n    isUnopened,\n    discoverableChannel,\n    triggerActiveContent,\n  } = props;\n\n  return (\n    <Button\n      ref={buttonRef}\n      key={channel.id}\n      className={\n        discoverableChannel\n          ? 'chatchanneltab chatchanneltab--inactive crayons-btn--ghost'\n          : `chatchanneltab ${otherClassname} chatchanneltab--${newMessagesIndicator} crayons-btn--ghost`\n      }\n      onClick={discoverableChannel ? triggerActiveContent : handleSwitchChannel}\n      data-content=\"sidecar-channel-request\"\n      data-channel-id={channel.chat_channel_id}\n      data-channel-slug={channel.channel_modified_slug}\n      data-channel-status={channel.status}\n      data-channel-name={channel.channel_name}\n    >\n      <ChannelImage\n        channel={channel}\n        newMessagesIndicator={newMessagesIndicator}\n        discoverableChannel={discoverableChannel}\n      />\n      {isUnopened ? (\n        <span className=\"crayons-indicator crayons-indicator--accent crayons-indicator--bullet\" />\n      ) : null}\n      {channel.channel_name}\n    </Button>\n  );\n}\n\nChannelButton.propTypes = {\n  channel: defaultChannelPropTypes,\n  discoverableChannel: PropTypes.bool,\n  handleSwitchChannel: PropTypes.func,\n  triggerActiveContent: PropTypes.func,\n  newMessagesIndicator: PropTypes.string,\n  otherClassname: PropTypes.string,\n  isUnopened: PropTypes.string,\n};\n\nChannelButton.defaultProps = {\n  otherClassname: '',\n  isUnopened: '',\n  newMessagesIndicator: '',\n  discoverableChannel: false,\n  handleSwitchChannel: null,\n  triggerActiveContent: null,\n};\n"]},"metadata":{},"sourceType":"module"}