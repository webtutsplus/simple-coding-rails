{"ast":null,"code":"import { addSnackbarItem } from '../../Snackbar';\nimport { processImageUpload } from '../actions';\n/**\n * Determines if at least one type of drag and drop datum type matches the data transfer type to match.\n *\n * @param {string[]} types An array of data transfer types.\n * @param {string} dataTransferType The data transfer type to match.\n */\n\nexport function matchesDataTransferType() {\n  var types = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var dataTransferType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'Files';\n  return types.some(function (type) {\n    return type === dataTransferType;\n  });\n} // TODO: Document functions\n\nexport function handleImageDrop(handleImageSuccess, handleImageFailure) {\n  return function (event) {\n    event.preventDefault();\n\n    if (!matchesDataTransferType(event.dataTransfer.types)) {\n      return;\n    }\n\n    event.currentTarget.closest('.drop-area').classList.remove('drop-area--active');\n    var files = event.dataTransfer.files;\n\n    if (files.length > 1) {\n      addSnackbarItem({\n        message: 'Only one image can be dropped at a time.',\n        addCloseButton: true\n      });\n      return;\n    }\n\n    processImageUpload(files, handleImageSuccess, handleImageFailure);\n  };\n}\n/**\n * Dragover handler for the editor\n *\n * @param {DragEvent} event the drag event.\n */\n\nexport function onDragOver(event) {\n  event.preventDefault();\n  event.currentTarget.closest('.drop-area').classList.add('drop-area--active');\n}\n/**\n * DragExit handler for the editor\n *\n * @param {DragEvent} event the drag event.\n */\n\nexport function onDragExit(event) {\n  event.preventDefault();\n  event.currentTarget.closest('.drop-area').classList.remove('drop-area--active');\n}\n/**\n * Handler for when image upload fails.\n *\n * @param {Error} error an error\n * @param {string} error.message an error message\n */\n\nexport function handleImageFailure(_ref) {\n  var message = _ref.message;\n  addSnackbarItem({\n    message: message,\n    addCloseButton: true\n  });\n}","map":{"version":3,"sources":["/Users/nmadhab/hobby/forem/app/javascript/article-form/components/dragAndDropHelpers.js"],"names":["addSnackbarItem","processImageUpload","matchesDataTransferType","types","dataTransferType","some","type","handleImageDrop","handleImageSuccess","handleImageFailure","event","preventDefault","dataTransfer","currentTarget","closest","classList","remove","files","length","message","addCloseButton","onDragOver","add","onDragExit"],"mappings":"AAAA,SAASA,eAAT,QAAgC,gBAAhC;AACA,SAASC,kBAAT,QAAmC,YAAnC;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,uBAAT,GAGL;AAAA,MAFAC,KAEA,uEAFQ,EAER;AAAA,MADAC,gBACA,uEADmB,OACnB;AACA,SAAOD,KAAK,CAACE,IAAN,CAAW,UAACC,IAAD;AAAA,WAAUA,IAAI,KAAKF,gBAAnB;AAAA,GAAX,CAAP;AACD,C,CAED;;AACA,OAAO,SAASG,eAAT,CAAyBC,kBAAzB,EAA6CC,kBAA7C,EAAiE;AACtE,SAAO,UAAUC,KAAV,EAAiB;AACtBA,IAAAA,KAAK,CAACC,cAAN;;AAEA,QAAI,CAACT,uBAAuB,CAACQ,KAAK,CAACE,YAAN,CAAmBT,KAApB,CAA5B,EAAwD;AACtD;AACD;;AAEDO,IAAAA,KAAK,CAACG,aAAN,CACGC,OADH,CACW,YADX,EAEGC,SAFH,CAEaC,MAFb,CAEoB,mBAFpB;AAPsB,QAWdC,KAXc,GAWJP,KAAK,CAACE,YAXF,CAWdK,KAXc;;AAatB,QAAIA,KAAK,CAACC,MAAN,GAAe,CAAnB,EAAsB;AACpBlB,MAAAA,eAAe,CAAC;AACdmB,QAAAA,OAAO,EAAE,0CADK;AAEdC,QAAAA,cAAc,EAAE;AAFF,OAAD,CAAf;AAIA;AACD;;AAEDnB,IAAAA,kBAAkB,CAACgB,KAAD,EAAQT,kBAAR,EAA4BC,kBAA5B,CAAlB;AACD,GAtBD;AAuBD;AAED;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASY,UAAT,CAAoBX,KAApB,EAA2B;AAChCA,EAAAA,KAAK,CAACC,cAAN;AACAD,EAAAA,KAAK,CAACG,aAAN,CAAoBC,OAApB,CAA4B,YAA5B,EAA0CC,SAA1C,CAAoDO,GAApD,CAAwD,mBAAxD;AACD;AAED;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,UAAT,CAAoBb,KAApB,EAA2B;AAChCA,EAAAA,KAAK,CAACC,cAAN;AACAD,EAAAA,KAAK,CAACG,aAAN,CACGC,OADH,CACW,YADX,EAEGC,SAFH,CAEaC,MAFb,CAEoB,mBAFpB;AAGD;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASP,kBAAT,OAAyC;AAAA,MAAXU,OAAW,QAAXA,OAAW;AAC9CnB,EAAAA,eAAe,CAAC;AACdmB,IAAAA,OAAO,EAAPA,OADc;AAEdC,IAAAA,cAAc,EAAE;AAFF,GAAD,CAAf;AAID","sourcesContent":["import { addSnackbarItem } from '../../Snackbar';\nimport { processImageUpload } from '../actions';\n\n/**\n * Determines if at least one type of drag and drop datum type matches the data transfer type to match.\n *\n * @param {string[]} types An array of data transfer types.\n * @param {string} dataTransferType The data transfer type to match.\n */\nexport function matchesDataTransferType(\n  types = [],\n  dataTransferType = 'Files',\n) {\n  return types.some((type) => type === dataTransferType);\n}\n\n// TODO: Document functions\nexport function handleImageDrop(handleImageSuccess, handleImageFailure) {\n  return function (event) {\n    event.preventDefault();\n\n    if (!matchesDataTransferType(event.dataTransfer.types)) {\n      return;\n    }\n\n    event.currentTarget\n      .closest('.drop-area')\n      .classList.remove('drop-area--active');\n\n    const { files } = event.dataTransfer;\n\n    if (files.length > 1) {\n      addSnackbarItem({\n        message: 'Only one image can be dropped at a time.',\n        addCloseButton: true,\n      });\n      return;\n    }\n\n    processImageUpload(files, handleImageSuccess, handleImageFailure);\n  };\n}\n\n/**\n * Dragover handler for the editor\n *\n * @param {DragEvent} event the drag event.\n */\nexport function onDragOver(event) {\n  event.preventDefault();\n  event.currentTarget.closest('.drop-area').classList.add('drop-area--active');\n}\n\n/**\n * DragExit handler for the editor\n *\n * @param {DragEvent} event the drag event.\n */\nexport function onDragExit(event) {\n  event.preventDefault();\n  event.currentTarget\n    .closest('.drop-area')\n    .classList.remove('drop-area--active');\n}\n\n/**\n * Handler for when image upload fails.\n *\n * @param {Error} error an error\n * @param {string} error.message an error message\n */\nexport function handleImageFailure({ message }) {\n  addSnackbarItem({\n    message,\n    addCloseButton: true,\n  });\n}\n"]},"metadata":{},"sourceType":"module"}