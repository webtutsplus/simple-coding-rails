{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { request } from '../utilities/http/request';\n/**\n * Gets the comment subscription status for a given article.\n *\n * @param {number} articleId\n *\n * @returns {string} The subscription status.\n */\n\nexport function getCommentSubscriptionStatus(_x) {\n  return _getCommentSubscriptionStatus.apply(this, arguments);\n}\n/**\n * Set's the subscription status for a given article.\n *\n * @param {number} articleId\n * @param {string} subscriptionType\n *\n * @returns {string} A friendly message in regards to subscription status.\n */\n\nfunction _getCommentSubscriptionStatus() {\n  _getCommentSubscriptionStatus = _asyncToGenerator(function* (articleId) {\n    try {\n      var response = yield request(\"/notification_subscriptions/Article/\".concat(articleId));\n      var subscriptionStatus = yield response.json();\n      return subscriptionStatus;\n    } catch (error) {\n      return new Error('An error occurred, please try again');\n    }\n  });\n  return _getCommentSubscriptionStatus.apply(this, arguments);\n}\n\nexport function setCommentSubscriptionStatus(_x2, _x3) {\n  return _setCommentSubscriptionStatus.apply(this, arguments);\n}\n\nfunction _setCommentSubscriptionStatus() {\n  _setCommentSubscriptionStatus = _asyncToGenerator(function* (articleId, subscriptionType) {\n    var message;\n\n    try {\n      var response = yield request(\"/notification_subscriptions/Article/\".concat(articleId), {\n        method: 'POST',\n        body: JSON.stringify({\n          config: subscriptionType\n        })\n      }); // true means you're subscribed, false means unsubscribed\n\n      var subscribed = yield response.json();\n\n      if (typeof subscribed !== 'boolean') {\n        message = 'An error occurred, please try again';\n        return message;\n      }\n\n      message = 'You have been unsubscribed from comments for this post';\n\n      if (subscribed) {\n        message = \"You have been subscribed to \".concat(subscriptionType.replace(/_/g, ' '));\n      }\n    } catch (error) {\n      message = 'An error occurred, please try again';\n    }\n\n    return message;\n  });\n  return _setCommentSubscriptionStatus.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/nmadhab/hobby/forem/app/javascript/CommentSubscription/commentSubscriptionUtilities.jsx"],"names":["request","getCommentSubscriptionStatus","articleId","response","subscriptionStatus","json","error","Error","setCommentSubscriptionStatus","subscriptionType","message","method","body","JSON","stringify","config","subscribed","replace"],"mappings":";;;;AAAA,SAASA,OAAT,QAAwB,2BAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,gBAAsBC,4BAAtB;AAAA;AAAA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;oDArBO,WAA4CC,SAA5C,EAAuD;AAC5D,QAAI;AACF,UAAMC,QAAQ,SAASH,OAAO,+CACWE,SADX,EAA9B;AAIA,UAAME,kBAAkB,SAASD,QAAQ,CAACE,IAAT,EAAjC;AAEA,aAAOD,kBAAP;AACD,KARD,CAQE,OAAOE,KAAP,EAAc;AACd,aAAO,IAAIC,KAAJ,CAAU,qCAAV,CAAP;AACD;AACF,G;;;;AAUD,gBAAsBC,4BAAtB;AAAA;AAAA;;;oDAAO,WACLN,SADK,EAELO,gBAFK,EAGL;AACA,QAAIC,OAAJ;;AAEA,QAAI;AACF,UAAMP,QAAQ,SAASH,OAAO,+CACWE,SADX,GAE5B;AACES,QAAAA,MAAM,EAAE,MADV;AAEEC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEC,UAAAA,MAAM,EAAEN;AAAV,SAAf;AAFR,OAF4B,CAA9B,CADE,CASF;;AACA,UAAMO,UAAU,SAASb,QAAQ,CAACE,IAAT,EAAzB;;AAEA,UAAI,OAAOW,UAAP,KAAsB,SAA1B,EAAqC;AACnCN,QAAAA,OAAO,GAAG,qCAAV;AAEA,eAAOA,OAAP;AACD;;AAEDA,MAAAA,OAAO,GAAG,wDAAV;;AAEA,UAAIM,UAAJ,EAAgB;AACdN,QAAAA,OAAO,yCAAkCD,gBAAgB,CAACQ,OAAjB,CACvC,IADuC,EAEvC,GAFuC,CAAlC,CAAP;AAID;AACF,KA1BD,CA0BE,OAAOX,KAAP,EAAc;AACdI,MAAAA,OAAO,GAAG,qCAAV;AACD;;AAED,WAAOA,OAAP;AACD,G","sourcesContent":["import { request } from '../utilities/http/request';\n\n/**\n * Gets the comment subscription status for a given article.\n *\n * @param {number} articleId\n *\n * @returns {string} The subscription status.\n */\nexport async function getCommentSubscriptionStatus(articleId) {\n  try {\n    const response = await request(\n      `/notification_subscriptions/Article/${articleId}`,\n    );\n\n    const subscriptionStatus = await response.json();\n\n    return subscriptionStatus;\n  } catch (error) {\n    return new Error('An error occurred, please try again');\n  }\n}\n\n/**\n * Set's the subscription status for a given article.\n *\n * @param {number} articleId\n * @param {string} subscriptionType\n *\n * @returns {string} A friendly message in regards to subscription status.\n */\nexport async function setCommentSubscriptionStatus(\n  articleId,\n  subscriptionType,\n) {\n  let message;\n\n  try {\n    const response = await request(\n      `/notification_subscriptions/Article/${articleId}`,\n      {\n        method: 'POST',\n        body: JSON.stringify({ config: subscriptionType }),\n      },\n    );\n\n    // true means you're subscribed, false means unsubscribed\n    const subscribed = await response.json();\n\n    if (typeof subscribed !== 'boolean') {\n      message = 'An error occurred, please try again';\n\n      return message;\n    }\n\n    message = 'You have been unsubscribed from comments for this post';\n\n    if (subscribed) {\n      message = `You have been subscribed to ${subscriptionType.replace(\n        /_/g,\n        ' ',\n      )}`;\n    }\n  } catch (error) {\n    message = 'An error occurred, please try again';\n  }\n\n  return message;\n}\n"]},"metadata":{},"sourceType":"module"}