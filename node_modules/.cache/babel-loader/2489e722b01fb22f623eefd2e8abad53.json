{"ast":null,"code":"import { h } from 'preact';\nimport PropTypes from 'prop-types';\nimport Textarea from 'preact-textarea-autosize';\nimport { useEffect, useRef } from 'preact/hooks';\nimport { Toolbar } from './Toolbar';\nimport { handleImageDrop, handleImageFailure, onDragOver, onDragExit } from './dragAndDropHelpers';\nimport { useDragAndDrop } from '@utilities/dragAndDrop';\n\nfunction handleImageSuccess(textAreaRef) {\n  return function (response) {\n    // Function is within the component to be able to access\n    // textarea ref.\n    var editableBodyElement = textAreaRef.current.base;\n    var links = response.links,\n        image = response.image;\n    var altText = image[0].name.replace(/\\.[^.]+$/, '');\n    var markdownImageLink = \"![\".concat(altText, \"](\").concat(links[0], \")\\n\");\n    var selectionStart = editableBodyElement.selectionStart,\n        selectionEnd = editableBodyElement.selectionEnd,\n        value = editableBodyElement.value;\n    var before = value.substring(0, selectionStart);\n    var after = value.substring(selectionEnd, value.length);\n    editableBodyElement.value = \"\".concat(before + markdownImageLink, \" \").concat(after);\n    editableBodyElement.selectionStart = selectionStart + markdownImageLink.length;\n    editableBodyElement.selectionEnd = editableBodyElement.selectionStart; // Dispatching a new event so that linkstate, https://github.com/developit/linkstate,\n    // the function used to create the onChange prop gets called correctly.\n\n    editableBodyElement.dispatchEvent(new Event('input'));\n  };\n}\n\nexport var EditorBody = function EditorBody(_ref) {\n  var onChange = _ref.onChange,\n      defaultValue = _ref.defaultValue,\n      switchHelpContext = _ref.switchHelpContext,\n      version = _ref.version;\n  var textAreaRef = useRef(null);\n\n  var _useDragAndDrop = useDragAndDrop({\n    onDrop: handleImageDrop(handleImageSuccess(textAreaRef), handleImageFailure),\n    onDragOver: onDragOver,\n    onDragExit: onDragExit\n  }),\n      setElement = _useDragAndDrop.setElement;\n\n  useEffect(function () {\n    if (textAreaRef.current) {\n      setElement(textAreaRef.current.base);\n    }\n  });\n  return h(\"div\", {\n    \"data-testid\": \"article-form__body\",\n    className: \"crayons-article-form__body drop-area text-padding\"\n  }, h(Toolbar, {\n    version: version\n  }), h(Textarea, {\n    className: \"crayons-textfield crayons-textfield--ghost crayons-article-form__body__field\",\n    id: \"article_body_markdown\",\n    \"aria-label\": \"Post Content\",\n    placeholder: \"Write your post content here...\",\n    value: defaultValue,\n    onInput: onChange,\n    onFocus: function onFocus(_event) {\n      switchHelpContext(_event);\n    },\n    name: \"body_markdown\",\n    ref: textAreaRef\n  }));\n};\nEditorBody.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  defaultValue: PropTypes.string.isRequired,\n  switchHelpContext: PropTypes.func.isRequired,\n  version: PropTypes.string.isRequired\n};\nEditorBody.displayName = 'EditorBody';","map":{"version":3,"sources":["/Users/nmadhab/hobby/forem/app/javascript/article-form/components/EditorBody.jsx"],"names":["h","PropTypes","Textarea","useEffect","useRef","Toolbar","handleImageDrop","handleImageFailure","onDragOver","onDragExit","useDragAndDrop","handleImageSuccess","textAreaRef","response","editableBodyElement","current","base","links","image","altText","name","replace","markdownImageLink","selectionStart","selectionEnd","value","before","substring","after","length","dispatchEvent","Event","EditorBody","onChange","defaultValue","switchHelpContext","version","onDrop","setElement","_event","propTypes","func","isRequired","string","displayName"],"mappings":"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","sourcesContent":["import { h } from 'preact';\nimport PropTypes from 'prop-types';\nimport Textarea from 'preact-textarea-autosize';\nimport { useEffect, useRef } from 'preact/hooks';\nimport { Toolbar } from './Toolbar';\nimport {\n  handleImageDrop,\n  handleImageFailure,\n  onDragOver,\n  onDragExit,\n} from './dragAndDropHelpers';\nimport { useDragAndDrop } from '@utilities/dragAndDrop';\n\nfunction handleImageSuccess(textAreaRef) {\n  return function (response) {\n    // Function is within the component to be able to access\n    // textarea ref.\n    const editableBodyElement = textAreaRef.current.base;\n    const { links, image } = response;\n    const altText = image[0].name.replace(/\\.[^.]+$/, '');\n    const markdownImageLink = `![${altText}](${links[0]})\\n`;\n    const { selectionStart, selectionEnd, value } = editableBodyElement;\n    const before = value.substring(0, selectionStart);\n    const after = value.substring(selectionEnd, value.length);\n\n    editableBodyElement.value = `${before + markdownImageLink} ${after}`;\n    editableBodyElement.selectionStart =\n      selectionStart + markdownImageLink.length;\n    editableBodyElement.selectionEnd = editableBodyElement.selectionStart;\n\n    // Dispatching a new event so that linkstate, https://github.com/developit/linkstate,\n    // the function used to create the onChange prop gets called correctly.\n    editableBodyElement.dispatchEvent(new Event('input'));\n  };\n}\n\nexport const EditorBody = ({\n  onChange,\n  defaultValue,\n  switchHelpContext,\n  version,\n}) => {\n  const textAreaRef = useRef(null);\n  const { setElement } = useDragAndDrop({\n    onDrop: handleImageDrop(\n      handleImageSuccess(textAreaRef),\n      handleImageFailure,\n    ),\n    onDragOver,\n    onDragExit,\n  });\n\n  useEffect(() => {\n    if (textAreaRef.current) {\n      setElement(textAreaRef.current.base);\n    }\n  });\n\n  return (\n    <div\n      data-testid=\"article-form__body\"\n      className=\"crayons-article-form__body drop-area text-padding\"\n    >\n      <Toolbar version={version} />\n\n      <Textarea\n        className=\"crayons-textfield crayons-textfield--ghost crayons-article-form__body__field\"\n        id=\"article_body_markdown\"\n        aria-label=\"Post Content\"\n        placeholder=\"Write your post content here...\"\n        value={defaultValue}\n        onInput={onChange}\n        onFocus={(_event) => {\n          switchHelpContext(_event);\n        }}\n        name=\"body_markdown\"\n        ref={textAreaRef}\n      />\n    </div>\n  );\n};\n\nEditorBody.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  defaultValue: PropTypes.string.isRequired,\n  switchHelpContext: PropTypes.func.isRequired,\n  version: PropTypes.string.isRequired,\n};\n\nEditorBody.displayName = 'EditorBody';\n"]},"metadata":{},"sourceType":"module"}