{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { request } from '../../utilities/http';\n/**\n *\n * @param {channelId} channelId\n * @param {membershipId} membershipId\n */\n\nexport function rejectJoiningRequest(_x, _x2) {\n  return _rejectJoiningRequest.apply(this, arguments);\n}\n/**\n * This function is responsible for the Accept joining request for channel\n * @param {number} channelId\n * @param {number} membershipId\n */\n\nfunction _rejectJoiningRequest() {\n  _rejectJoiningRequest = _asyncToGenerator(function* (channelId, membershipId) {\n    var response = yield request(\"/chat_channel_memberships/remove_membership\", {\n      method: 'POST',\n      body: {\n        status: 'pending',\n        chat_channel_id: channelId,\n        membership_id: membershipId\n      },\n      credentials: 'same-origin'\n    });\n    return response.json();\n  });\n  return _rejectJoiningRequest.apply(this, arguments);\n}\n\nexport function acceptJoiningRequest(_x3, _x4) {\n  return _acceptJoiningRequest.apply(this, arguments);\n}\n\nfunction _acceptJoiningRequest() {\n  _acceptJoiningRequest = _asyncToGenerator(function* (channelId, membershipId) {\n    var response = yield request(\"/chat_channel_memberships/add_membership\", {\n      method: 'POST',\n      body: {\n        chat_channel_id: channelId,\n        membership_id: membershipId,\n        chat_channel_membership: {\n          user_action: 'accept'\n        }\n      },\n      credentials: 'same-origin'\n    });\n    return response.json();\n  });\n  return _acceptJoiningRequest.apply(this, arguments);\n}\n\nexport function sendChannelRequest(id, successCb, failureCb) {\n  request(\"/join_chat_channel\", {\n    method: 'POST',\n    body: {\n      chat_channel_membership: {\n        chat_channel_id: id\n      }\n    },\n    credentials: 'same-origin'\n  }).then(function (response) {\n    return response.json();\n  }).then(successCb)[\"catch\"](failureCb);\n}\n/**\n * This function will get all the request realted to user and channel\n */\n\nexport function getChannelRequestInfo() {\n  return _getChannelRequestInfo.apply(this, arguments);\n}\n/**\n * This function handle user action on chat channel invitations\n *\n * @param {number} membershipId\n * @param {string} userAction\n */\n\nfunction _getChannelRequestInfo() {\n  _getChannelRequestInfo = _asyncToGenerator(function* () {\n    var response = yield request(\"/channel_request_info/\", {\n      method: 'GET',\n      credentials: 'same-origin'\n    });\n    return response.json();\n  });\n  return _getChannelRequestInfo.apply(this, arguments);\n}\n\nexport function updateMembership(_x5, _x6) {\n  return _updateMembership.apply(this, arguments);\n}\n/**\n *\n * @param {string} feedback_message\n * @param {string} type_of_feedback\n * @param {string} category\n * @param {string} reported_url\n */\n\nfunction _updateMembership() {\n  _updateMembership = _asyncToGenerator(function* (membershipId, userAction) {\n    var response = yield request(\"/chat_channel_memberships/\".concat(membershipId), {\n      method: 'PUT',\n      credentials: 'same-origin',\n      body: {\n        chat_channel_membership: {\n          user_action: userAction\n        }\n      }\n    });\n    return response.json();\n  });\n  return _updateMembership.apply(this, arguments);\n}\n\nexport function reportAbuse(_x7, _x8, _x9, _x10) {\n  return _reportAbuse.apply(this, arguments);\n}\n/**\n * Blocks a user with the given ID from using Connect\n *\n * @param {number} userId\n *\n *\n */\n\nfunction _reportAbuse() {\n  _reportAbuse = _asyncToGenerator(function* (feedback_message, feedback_type, category, offender_id) {\n    var response = yield request('/feedback_messages', {\n      method: 'POST',\n      body: {\n        feedback_message: {\n          message: feedback_message,\n          feedback_type: feedback_type,\n          category: category,\n          offender_id: offender_id\n        }\n      }\n    });\n    return response.json();\n  });\n  return _reportAbuse.apply(this, arguments);\n}\n\nexport function blockUser(_x11) {\n  return _blockUser.apply(this, arguments);\n}\n\nfunction _blockUser() {\n  _blockUser = _asyncToGenerator(function* (userId) {\n    var response = yield request('/user_blocks', {\n      method: 'POST',\n      body: {\n        user_block: {\n          blocked_id: userId\n        }\n      }\n    });\n    return response.json();\n  });\n  return _blockUser.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/nmadhab/hobby/forem/app/javascript/chat/actions/requestActions.js"],"names":["request","rejectJoiningRequest","channelId","membershipId","response","method","body","status","chat_channel_id","membership_id","credentials","json","acceptJoiningRequest","chat_channel_membership","user_action","sendChannelRequest","id","successCb","failureCb","then","getChannelRequestInfo","updateMembership","userAction","reportAbuse","feedback_message","feedback_type","category","offender_id","message","blockUser","userId","user_block","blocked_id"],"mappings":"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","sourcesContent":["import { request } from '../../utilities/http';\n\n/**\n *\n * @param {channelId} channelId\n * @param {membershipId} membershipId\n */\nexport async function rejectJoiningRequest(channelId, membershipId) {\n  const response = await request(\n    `/chat_channel_memberships/remove_membership`,\n    {\n      method: 'POST',\n      body: {\n        status: 'pending',\n        chat_channel_id: channelId,\n        membership_id: membershipId,\n      },\n      credentials: 'same-origin',\n    },\n  );\n\n  return response.json();\n}\n\n/**\n * This function is responsible for the Accept joining request for channel\n * @param {number} channelId\n * @param {number} membershipId\n */\n\nexport async function acceptJoiningRequest(channelId, membershipId) {\n  const response = await request(`/chat_channel_memberships/add_membership`, {\n    method: 'POST',\n    body: {\n      chat_channel_id: channelId,\n      membership_id: membershipId,\n      chat_channel_membership: {\n        user_action: 'accept',\n      },\n    },\n    credentials: 'same-origin',\n  });\n\n  return response.json();\n}\n\nexport function sendChannelRequest(id, successCb, failureCb) {\n  request(`/join_chat_channel`, {\n    method: 'POST',\n    body: {\n      chat_channel_membership: {\n        chat_channel_id: id,\n      },\n    },\n    credentials: 'same-origin',\n  })\n    .then((response) => response.json())\n    .then(successCb)\n    .catch(failureCb);\n}\n\n/**\n * This function will get all the request realted to user and channel\n */\n\nexport async function getChannelRequestInfo() {\n  const response = await request(`/channel_request_info/`, {\n    method: 'GET',\n    credentials: 'same-origin',\n  });\n\n  return response.json();\n}\n\n/**\n * This function handle user action on chat channel invitations\n *\n * @param {number} membershipId\n * @param {string} userAction\n */\n\nexport async function updateMembership(membershipId, userAction) {\n  const response = await request(`/chat_channel_memberships/${membershipId}`, {\n    method: 'PUT',\n    credentials: 'same-origin',\n    body: {\n      chat_channel_membership: {\n        user_action: userAction,\n      },\n    },\n  });\n\n  return response.json();\n}\n\n/**\n *\n * @param {string} feedback_message\n * @param {string} type_of_feedback\n * @param {string} category\n * @param {string} reported_url\n */\nexport async function reportAbuse(\n  feedback_message,\n  feedback_type,\n  category,\n  offender_id,\n) {\n  const response = await request('/feedback_messages', {\n    method: 'POST',\n    body: {\n      feedback_message: {\n        message: feedback_message,\n        feedback_type,\n        category,\n        offender_id,\n      },\n    },\n  });\n\n  return response.json();\n}\n\n/**\n * Blocks a user with the given ID from using Connect\n *\n * @param {number} userId\n *\n *\n */\n\nexport async function blockUser(userId) {\n  const response = await request('/user_blocks', {\n    method: 'POST',\n    body: {\n      user_block: {\n        blocked_id: userId,\n      },\n    },\n  });\n\n  return response.json();\n}\n"]},"metadata":{},"sourceType":"module"}