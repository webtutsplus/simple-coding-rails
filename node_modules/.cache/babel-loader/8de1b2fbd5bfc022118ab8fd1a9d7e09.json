{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport { h } from 'preact';\nimport { useState } from 'preact/hooks';\nimport PropTypes from 'prop-types';\nimport { createChannel } from '../actions/chat_channel_setting_actions';\nimport { addSnackbarItem } from '../../Snackbar';\nimport { Modal, Button } from '@crayons';\n/**\n *\n * This component is used to create a chat channel. At the moment only  support for tag_moderator user types.\n *\n * @param {object} props\n * @param {function} props.toggleModalCreateChannel\n * @param {function} props.handleCreateChannelSuccess\n *\n * @component\n *\n * @example\n *\n * <CreateChatModal\n * toggleModalCreateChannel={toggleModalCreateChannel}\n * handleCreateChannelSuccess={handleCreateChannelSuccess}\n * />\n *\n */\n\nfunction CreateChatModal(_ref) {\n  var toggleModalCreateChannel = _ref.toggleModalCreateChannel,\n      handleCreateChannelSuccess = _ref.handleCreateChannelSuccess;\n\n  var _useState = useState(undefined),\n      _useState2 = _slicedToArray(_useState, 2),\n      channelName = _useState2[0],\n      setchannelName = _useState2[1];\n\n  var _useState3 = useState(undefined),\n      _useState4 = _slicedToArray(_useState3, 2),\n      userNames = _useState4[0],\n      setUserNames = _useState4[1];\n\n  var handleCreateChannel = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator(function* (e) {\n      e.preventDefault();\n      var result = yield createChannel(channelName, userNames);\n\n      if (result.success) {\n        handleCreateChannelSuccess();\n        addSnackbarItem({\n          message: result.message\n        });\n      } else {\n        addSnackbarItem({\n          message: result.message\n        });\n      }\n    });\n\n    return function handleCreateChannel(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return h(Modal, {\n    title: \"Create A Channel\",\n    size: \"s\",\n    onClose: toggleModalCreateChannel\n  }, h(\"div\", {\n    className: \"crayons-field\"\n  }, h(\"label\", {\n    htmlFor: \"t1\",\n    className: \"crayons-field__label\"\n  }, \"Channel Name\"), h(\"input\", {\n    type: \"text\",\n    id: \"t1\",\n    className: \"crayons-textfield\",\n    placeholder: \"Enter name here...\",\n    value: channelName,\n    onInput: function onInput(e) {\n      return setchannelName(e.target.value);\n    }\n  }), h(\"label\", {\n    htmlFor: \"t2\",\n    className: \"crayons-field__label\"\n  }, \"Invite Users\"), h(\"input\", {\n    type: \"text\",\n    id: \"t2\",\n    className: \"crayons-textfield\",\n    placeholder: \"Separate username with comma\",\n    value: userNames,\n    onInput: function onInput(e) {\n      return setUserNames(e.target.value);\n    }\n  }), h(Button, {\n    className: \"crayons-btn\",\n    onClick: handleCreateChannel,\n    style: \"margin-top:20px\",\n    disabled: !channelName\n  }, \"Create\")));\n}\n\nCreateChatModal.propTypes = {\n  toggleModalCreateChannel: PropTypes.func.isRequired,\n  handleCreateChannelSuccess: PropTypes.func.isRequired\n};\nexport default CreateChatModal;","map":{"version":3,"sources":["/Users/nmadhab/hobby/forem/app/javascript/chat/components/CreateChatModal.jsx"],"names":["h","useState","PropTypes","createChannel","addSnackbarItem","Modal","Button","CreateChatModal","toggleModalCreateChannel","handleCreateChannelSuccess","undefined","channelName","setchannelName","userNames","setUserNames","handleCreateChannel","e","preventDefault","result","success","message","target","value","propTypes","func","isRequired"],"mappings":";;;;;;;;;;;;;;;;AAAA,SAASA,CAAT,QAAkB,QAAlB;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,aAAT,QAA8B,yCAA9B;AACA,SAASC,eAAT,QAAgC,gBAAhC;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,UAA9B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,eAAT,OAGG;AAAA,MAFDC,wBAEC,QAFDA,wBAEC;AAAA,MADDC,0BACC,QADDA,0BACC;;AAAA,kBACqCR,QAAQ,CAACS,SAAD,CAD7C;AAAA;AAAA,MACMC,WADN;AAAA,MACmBC,cADnB;;AAAA,mBAEiCX,QAAQ,CAACS,SAAD,CAFzC;AAAA;AAAA,MAEMG,SAFN;AAAA,MAEiBC,YAFjB;;AAID,MAAMC,mBAAmB;AAAA,kCAAG,WAAOC,CAAP,EAAa;AACvCA,MAAAA,CAAC,CAACC,cAAF;AACA,UAAMC,MAAM,SAASf,aAAa,CAACQ,WAAD,EAAcE,SAAd,CAAlC;;AACA,UAAIK,MAAM,CAACC,OAAX,EAAoB;AAClBV,QAAAA,0BAA0B;AAC1BL,QAAAA,eAAe,CAAC;AAAEgB,UAAAA,OAAO,EAAEF,MAAM,CAACE;AAAlB,SAAD,CAAf;AACD,OAHD,MAGO;AACLhB,QAAAA,eAAe,CAAC;AAAEgB,UAAAA,OAAO,EAAEF,MAAM,CAACE;AAAlB,SAAD,CAAf;AACD;AACF,KATwB;;AAAA,oBAAnBL,mBAAmB;AAAA;AAAA;AAAA,KAAzB;;AAWA,SACE,EAAC,KAAD;AAAO,IAAA,KAAK,EAAC,kBAAb;AAAgC,IAAA,IAAI,EAAC,GAArC;AAAyC,IAAA,OAAO,EAAEP;AAAlD,KACE;AAAK,IAAA,SAAS,EAAC;AAAf,KACE;AAAO,IAAA,OAAO,EAAC,IAAf;AAAoB,IAAA,SAAS,EAAC;AAA9B,oBADF,EAIE;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,EAAE,EAAC,IAFL;AAGE,IAAA,SAAS,EAAC,mBAHZ;AAIE,IAAA,WAAW,EAAC,oBAJd;AAKE,IAAA,KAAK,EAAEG,WALT;AAME,IAAA,OAAO,EAAE,iBAACK,CAAD;AAAA,aAAOJ,cAAc,CAACI,CAAC,CAACK,MAAF,CAASC,KAAV,CAArB;AAAA;AANX,IAJF,EAYE;AAAO,IAAA,OAAO,EAAC,IAAf;AAAoB,IAAA,SAAS,EAAC;AAA9B,oBAZF,EAeE;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,EAAE,EAAC,IAFL;AAGE,IAAA,SAAS,EAAC,mBAHZ;AAIE,IAAA,WAAW,EAAC,8BAJd;AAKE,IAAA,KAAK,EAAET,SALT;AAME,IAAA,OAAO,EAAE,iBAACG,CAAD;AAAA,aAAOF,YAAY,CAACE,CAAC,CAACK,MAAF,CAASC,KAAV,CAAnB;AAAA;AANX,IAfF,EAwBE,EAAC,MAAD;AACE,IAAA,SAAS,EAAC,aADZ;AAEE,IAAA,OAAO,EAAEP,mBAFX;AAGE,IAAA,KAAK,EAAC,iBAHR;AAIE,IAAA,QAAQ,EAAE,CAACJ;AAJb,cAxBF,CADF,CADF;AAqCD;;AAEDJ,eAAe,CAACgB,SAAhB,GAA4B;AAC1Bf,EAAAA,wBAAwB,EAAEN,SAAS,CAACsB,IAAV,CAAeC,UADf;AAE1BhB,EAAAA,0BAA0B,EAAEP,SAAS,CAACsB,IAAV,CAAeC;AAFjB,CAA5B;AAKA,eAAelB,eAAf","sourcesContent":["import { h } from 'preact';\nimport { useState } from 'preact/hooks';\nimport PropTypes from 'prop-types';\nimport { createChannel } from '../actions/chat_channel_setting_actions';\nimport { addSnackbarItem } from '../../Snackbar';\nimport { Modal, Button } from '@crayons';\n\n/**\n *\n * This component is used to create a chat channel. At the moment only  support for tag_moderator user types.\n *\n * @param {object} props\n * @param {function} props.toggleModalCreateChannel\n * @param {function} props.handleCreateChannelSuccess\n *\n * @component\n *\n * @example\n *\n * <CreateChatModal\n * toggleModalCreateChannel={toggleModalCreateChannel}\n * handleCreateChannelSuccess={handleCreateChannelSuccess}\n * />\n *\n */\n\nfunction CreateChatModal({\n  toggleModalCreateChannel,\n  handleCreateChannelSuccess,\n}) {\n  const [channelName, setchannelName] = useState(undefined);\n  const [userNames, setUserNames] = useState(undefined);\n\n  const handleCreateChannel = async (e) => {\n    e.preventDefault();\n    const result = await createChannel(channelName, userNames);\n    if (result.success) {\n      handleCreateChannelSuccess();\n      addSnackbarItem({ message: result.message });\n    } else {\n      addSnackbarItem({ message: result.message });\n    }\n  };\n\n  return (\n    <Modal title=\"Create A Channel\" size=\"s\" onClose={toggleModalCreateChannel}>\n      <div className=\"crayons-field\">\n        <label htmlFor=\"t1\" className=\"crayons-field__label\">\n          Channel Name\n        </label>\n        <input\n          type=\"text\"\n          id=\"t1\"\n          className=\"crayons-textfield\"\n          placeholder=\"Enter name here...\"\n          value={channelName}\n          onInput={(e) => setchannelName(e.target.value)}\n        />\n        <label htmlFor=\"t2\" className=\"crayons-field__label\">\n          Invite Users\n        </label>\n        <input\n          type=\"text\"\n          id=\"t2\"\n          className=\"crayons-textfield\"\n          placeholder=\"Separate username with comma\"\n          value={userNames}\n          onInput={(e) => setUserNames(e.target.value)}\n        />\n\n        <Button\n          className=\"crayons-btn\"\n          onClick={handleCreateChannel}\n          style=\"margin-top:20px\"\n          disabled={!channelName}\n        >\n          Create\n        </Button>\n      </div>\n    </Modal>\n  );\n}\n\nCreateChatModal.propTypes = {\n  toggleModalCreateChannel: PropTypes.func.isRequired,\n  handleCreateChannelSuccess: PropTypes.func.isRequired,\n};\n\nexport default CreateChatModal;\n"]},"metadata":{},"sourceType":"module"}