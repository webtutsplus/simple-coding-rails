{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport debounce from 'lodash.debounce';\n/**\n * A util function to wrap any action with lodash's `debounce` (https://lodash.com/docs/#debounce).\n * To use this util, wrap it in the util like so: debounceAction(onSearchBoxType.bind(this));\n *\n * By default, this util uses a default time of 300ms, and includes a default config of `{ leading: false }`.\n * These values can be overridden: debounceAction(this.onSearchBoxType.bind(this), { time: 100, config: { leading: true }});\n *\n *\n * @param {Function} action - The function that should be wrapped with `debounce`.\n * @param {Number} [time=300] - The number of milliseconds to wait.\n * @param {Object} [config={ leading: false }] - Any configuration for the debounce function.\n *\n * @returns {Function} A function wrapped in `debounce`.\n */\n\nexport default function debounceAction(action) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$time = _ref.time,\n      time = _ref$time === void 0 ? 300 : _ref$time,\n      _ref$config = _ref.config,\n      config = _ref$config === void 0 ? {\n    leading: false\n  } : _ref$config;\n\n  var configs = _objectSpread({}, config);\n\n  return debounce(action, time, configs);\n}","map":{"version":3,"sources":["/Users/nmadhab/hobby/forem/app/javascript/utilities/debounceAction.js"],"names":["debounce","debounceAction","action","time","config","leading","configs"],"mappings":";;;;;;AAAA,OAAOA,QAAP,MAAqB,iBAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,cAAT,CACbC,MADa,EAGb;AAAA,iFAD8C,EAC9C;AAAA,uBADEC,IACF;AAAA,MADEA,IACF,0BADS,GACT;AAAA,yBADcC,MACd;AAAA,MADcA,MACd,4BADuB;AAAEC,IAAAA,OAAO,EAAE;AAAX,GACvB;;AACA,MAAMC,OAAO,qBAAQF,MAAR,CAAb;;AACA,SAAOJ,QAAQ,CAACE,MAAD,EAASC,IAAT,EAAeG,OAAf,CAAf;AACD","sourcesContent":["import debounce from 'lodash.debounce';\n\n/**\n * A util function to wrap any action with lodash's `debounce` (https://lodash.com/docs/#debounce).\n * To use this util, wrap it in the util like so: debounceAction(onSearchBoxType.bind(this));\n *\n * By default, this util uses a default time of 300ms, and includes a default config of `{ leading: false }`.\n * These values can be overridden: debounceAction(this.onSearchBoxType.bind(this), { time: 100, config: { leading: true }});\n *\n *\n * @param {Function} action - The function that should be wrapped with `debounce`.\n * @param {Number} [time=300] - The number of milliseconds to wait.\n * @param {Object} [config={ leading: false }] - Any configuration for the debounce function.\n *\n * @returns {Function} A function wrapped in `debounce`.\n */\nexport default function debounceAction(\n  action,\n  { time = 300, config = { leading: false } } = {},\n) {\n  const configs = { ...config };\n  return debounce(action, time, configs);\n}\n"]},"metadata":{},"sourceType":"module"}