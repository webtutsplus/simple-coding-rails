{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n/**\n * Generic request with all the default headers required by the application.\n *\n * @example\n * import { request } from '@utilities/http';\n *\n * const response = await request('/notification_subscriptions/Article/26')\n *\n * Note:\n * The body option will typically be passed in as a JavaScript object.\n * A check is performed for this and automatically convert it to JSON if necessary.\n *\n * Requests send JSON by default but this can be easily overridden by adding\n * the Accept and Content-Type headers to the request options.\n *\n * The default method is GET.\n *\n * @param {string} url The URL to make the request to.\n * @param {RequestInit} [options={}] The request options.\n *\n * @return {Promise<Response>} the response\n */\nexport function request(_x) {\n  return _request.apply(this, arguments);\n}\n\nfunction _request() {\n  _request = _asyncToGenerator(function* (url) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    var headers = options.headers,\n        body = options.body,\n        _options$method = options.method,\n        method = _options$method === void 0 ? 'GET' : _options$method,\n        _options$csrfToken = options.csrfToken,\n        csrfToken = _options$csrfToken === void 0 ? yield getCsrfToken() : _options$csrfToken,\n        restOfOptions = _objectWithoutProperties(options, [\"headers\", \"body\", \"method\", \"csrfToken\"]); // There should never be a scenario where null is passed as the body,\n    // but if ever there is, this logic should change.\n\n\n    var jsonifiedBody = {\n      body: body && typeof body !== 'string' ? JSON.stringify(body) : body\n    };\n\n    var fetchOptions = _objectSpread(_objectSpread({\n      method: method,\n      headers: _objectSpread({\n        Accept: 'application/json',\n        'X-CSRF-Token': csrfToken,\n        'Content-Type': 'application/json'\n      }, headers),\n      credentials: 'same-origin'\n    }, jsonifiedBody), restOfOptions);\n\n    return fetch(url, fetchOptions);\n  });\n  return _request.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/nmadhab/hobby/forem/app/javascript/utilities/http/request.js"],"names":["request","url","options","headers","body","method","csrfToken","getCsrfToken","restOfOptions","jsonifiedBody","JSON","stringify","fetchOptions","Accept","credentials","fetch"],"mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAsBA,OAAtB;AAAA;AAAA;;;+BAAO,WAAuBC,GAAvB,EAA0C;AAAA,QAAdC,OAAc,uEAAJ,EAAI;;AAAA,QAE7CC,OAF6C,GAQ3CD,OAR2C,CAE7CC,OAF6C;AAAA,QAG7CC,IAH6C,GAQ3CF,OAR2C,CAG7CE,IAH6C;AAAA,0BAQ3CF,OAR2C,CAI7CG,MAJ6C;AAAA,QAI7CA,MAJ6C,gCAIpC,KAJoC;AAAA,6BAQ3CH,OAR2C,CAK7CI,SAL6C;AAAA,QAK7CA,SAL6C,yCAK3BC,YAAY,EALe;AAAA,QAO1CC,aAP0C,4BAQ3CN,OAR2C,+CAU/C;AACA;;;AACA,QAAMO,aAAa,GAAG;AACpBL,MAAAA,IAAI,EAAEA,IAAI,IAAI,OAAOA,IAAP,KAAgB,QAAxB,GAAmCM,IAAI,CAACC,SAAL,CAAeP,IAAf,CAAnC,GAA0DA;AAD5C,KAAtB;;AAIA,QAAMQ,YAAY;AAChBP,MAAAA,MAAM,EAANA,MADgB;AAEhBF,MAAAA,OAAO;AACLU,QAAAA,MAAM,EAAE,kBADH;AAEL,wBAAgBP,SAFX;AAGL,wBAAgB;AAHX,SAIFH,OAJE,CAFS;AAQhBW,MAAAA,WAAW,EAAE;AARG,OASbL,aATa,GAUbD,aAVa,CAAlB;;AAaA,WAAOO,KAAK,CAACd,GAAD,EAAMW,YAAN,CAAZ;AACD,G","sourcesContent":["/**\n * Generic request with all the default headers required by the application.\n *\n * @example\n * import { request } from '@utilities/http';\n *\n * const response = await request('/notification_subscriptions/Article/26')\n *\n * Note:\n * The body option will typically be passed in as a JavaScript object.\n * A check is performed for this and automatically convert it to JSON if necessary.\n *\n * Requests send JSON by default but this can be easily overridden by adding\n * the Accept and Content-Type headers to the request options.\n *\n * The default method is GET.\n *\n * @param {string} url The URL to make the request to.\n * @param {RequestInit} [options={}] The request options.\n *\n * @return {Promise<Response>} the response\n */\nexport async function request(url, options = {}) {\n  const {\n    headers,\n    body,\n    method = 'GET',\n    csrfToken = await getCsrfToken(),\n    // These are any other options that might be passed in e.g. keepalive\n    ...restOfOptions\n  } = options;\n\n  // There should never be a scenario where null is passed as the body,\n  // but if ever there is, this logic should change.\n  const jsonifiedBody = {\n    body: body && typeof body !== 'string' ? JSON.stringify(body) : body,\n  };\n\n  const fetchOptions = {\n    method,\n    headers: {\n      Accept: 'application/json',\n      'X-CSRF-Token': csrfToken,\n      'Content-Type': 'application/json',\n      ...headers,\n    },\n    credentials: 'same-origin',\n    ...jsonifiedBody,\n    ...restOfOptions,\n  };\n\n  return fetch(url, fetchOptions);\n}\n"]},"metadata":{},"sourceType":"module"}