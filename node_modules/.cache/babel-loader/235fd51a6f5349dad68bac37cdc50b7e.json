{"ast":null,"code":"import { createDataHash } from '../util';\nexport function getAllMessages(channelId, messageOffset, successCb, failureCb) {\n  fetch(\"/chat_channels/\".concat(channelId, \"?message_offset=\").concat(messageOffset), {\n    Accept: 'application/json',\n    'Content-Type': 'application/json',\n    credentials: 'same-origin'\n  }).then(function (response) {\n    return response.json();\n  }).then(successCb)[\"catch\"](failureCb);\n}\nexport function sendMessage(messageObject, successCb, failureCb) {\n  fetch('/messages', {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'X-CSRF-Token': window.csrfToken,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      message: {\n        message_markdown: messageObject.message,\n        user_id: window.currentUser.id,\n        chat_channel_id: messageObject.activeChannelId,\n        mentioned_users_id: messageObject.mentionedUsersId\n      }\n    }),\n    credentials: 'same-origin'\n  }).then(function (response) {\n    return response.json();\n  }).then(successCb)[\"catch\"](failureCb);\n}\nexport function editMessage(editedMessage, successCb, failureCb) {\n  fetch(\"/messages/\".concat(editedMessage.id), {\n    method: 'PATCH',\n    headers: {\n      Accept: 'application/json',\n      'X-CSRF-Token': window.csrfToken,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      message: {\n        message_markdown: editedMessage.message,\n        user_id: window.currentUser.id,\n        chat_channel_id: editedMessage.activeChannelId\n      }\n    }),\n    credentials: 'same-origin'\n  }).then(function (response) {\n    return response.json();\n  }).then(successCb)[\"catch\"](failureCb);\n}\nexport function sendOpen(activeChannelId, successCb, failureCb) {\n  fetch(\"/chat_channels/\".concat(activeChannelId, \"/open\"), {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'X-CSRF-Token': window.csrfToken,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({}),\n    credentials: 'same-origin'\n  }).then(function (response) {\n    return response.json();\n  }).then(successCb)[\"catch\"](failureCb);\n}\nexport function conductModeration(activeChannelId, message, successCb, failureCb) {\n  fetch(\"/chat_channels/\".concat(activeChannelId, \"/moderate\"), {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'X-CSRF-Token': window.csrfToken,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      chat_channel: {\n        command: message\n      }\n    }),\n    credentials: 'same-origin'\n  }).then(function (response) {\n    return response.json();\n  }).then(successCb)[\"catch\"](failureCb);\n}\nexport function getChannels(searchParams, additionalFilters, successCb, _failureCb) {\n  return createDataHash(additionalFilters, searchParams).then(function (response) {\n    if (searchParams.retrievalID === null || response.result.filter(function (e) {\n      return e.chat_channel_id === searchParams.retrievalID;\n    }).length === 1) {\n      successCb(response.result, searchParams.query);\n    } else {\n      fetch(\"/chat_channel_memberships/find_by_chat_channel_id?chat_channel_id=\".concat(searchParams.retrievalID), {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n        credentials: 'same-origin'\n      }).then(function (individualResponse) {\n        return individualResponse.json();\n      }).then(function (json) {\n        response.result.unshift(json);\n        successCb(response.result, searchParams.query);\n      });\n    }\n  });\n}\nexport function getUnopenedChannelIds(successCb) {\n  fetch('/chat_channels?state=unopened_ids', {\n    credentials: 'same-origin'\n  }).then(function (response) {\n    return response.json();\n  }).then(function (json) {\n    successCb(json.unopened_ids);\n  });\n}\nexport function getContent(url, successCb, failureCb) {\n  fetch(url, {\n    Accept: 'application/json',\n    'Content-Type': 'application/json',\n    credentials: 'same-origin'\n  }).then(function (response) {\n    return response.json();\n  }).then(successCb)[\"catch\"](failureCb);\n}\nexport function getJSONContents(url, successCb, failureCb) {\n  fetch(url, {\n    Accept: 'application/json',\n    'Content-Type': 'application/json',\n    credentials: 'same-origin'\n  }).then(function (response) {\n    return response.json();\n  }).then(successCb)[\"catch\"](failureCb);\n}\nexport function deleteMessage(messageId, successCb, failureCb) {\n  fetch(\"/messages/\".concat(messageId), {\n    method: 'DELETE',\n    headers: {\n      Accept: 'application/json',\n      'X-CSRF-Token': window.csrfToken,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      message: {\n        user_id: window.currentUser.id\n      }\n    }),\n    credentials: 'same-origin'\n  }).then(function (response) {\n    return response.json();\n  }).then(successCb)[\"catch\"](failureCb);\n}","map":{"version":3,"sources":["/Users/nmadhab/hobby/forem/app/javascript/chat/actions/actions.js"],"names":["createDataHash","getAllMessages","channelId","messageOffset","successCb","failureCb","fetch","Accept","credentials","then","response","json","sendMessage","messageObject","method","headers","window","csrfToken","body","JSON","stringify","message","message_markdown","user_id","currentUser","id","chat_channel_id","activeChannelId","mentioned_users_id","mentionedUsersId","editMessage","editedMessage","sendOpen","conductModeration","chat_channel","command","getChannels","searchParams","additionalFilters","_failureCb","retrievalID","result","filter","e","length","query","individualResponse","unshift","getUnopenedChannelIds","unopened_ids","getContent","url","getJSONContents","deleteMessage","messageId"],"mappings":"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","sourcesContent":["import { createDataHash } from '../util';\n\nexport function getAllMessages(channelId, messageOffset, successCb, failureCb) {\n  fetch(`/chat_channels/${channelId}?message_offset=${messageOffset}`, {\n    Accept: 'application/json',\n    'Content-Type': 'application/json',\n    credentials: 'same-origin',\n  })\n    .then((response) => response.json())\n    .then(successCb)\n    .catch(failureCb);\n}\n\nexport function sendMessage(messageObject, successCb, failureCb) {\n  fetch('/messages', {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'X-CSRF-Token': window.csrfToken,\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      message: {\n        message_markdown: messageObject.message,\n        user_id: window.currentUser.id,\n        chat_channel_id: messageObject.activeChannelId,\n        mentioned_users_id: messageObject.mentionedUsersId,\n      },\n    }),\n    credentials: 'same-origin',\n  })\n    .then((response) => response.json())\n    .then(successCb)\n    .catch(failureCb);\n}\n\nexport function editMessage(editedMessage, successCb, failureCb) {\n  fetch(`/messages/${editedMessage.id}`, {\n    method: 'PATCH',\n    headers: {\n      Accept: 'application/json',\n      'X-CSRF-Token': window.csrfToken,\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      message: {\n        message_markdown: editedMessage.message,\n        user_id: window.currentUser.id,\n        chat_channel_id: editedMessage.activeChannelId,\n      },\n    }),\n    credentials: 'same-origin',\n  })\n    .then((response) => response.json())\n    .then(successCb)\n    .catch(failureCb);\n}\n\nexport function sendOpen(activeChannelId, successCb, failureCb) {\n  fetch(`/chat_channels/${activeChannelId}/open`, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'X-CSRF-Token': window.csrfToken,\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({}),\n    credentials: 'same-origin',\n  })\n    .then((response) => response.json())\n    .then(successCb)\n    .catch(failureCb);\n}\n\nexport function conductModeration(\n  activeChannelId,\n  message,\n  successCb,\n  failureCb,\n) {\n  fetch(`/chat_channels/${activeChannelId}/moderate`, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'X-CSRF-Token': window.csrfToken,\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      chat_channel: {\n        command: message,\n      },\n    }),\n    credentials: 'same-origin',\n  })\n    .then((response) => response.json())\n    .then(successCb)\n    .catch(failureCb);\n}\n\nexport function getChannels(\n  searchParams,\n  additionalFilters,\n  successCb,\n  _failureCb,\n) {\n  return createDataHash(additionalFilters, searchParams).then((response) => {\n    if (\n      searchParams.retrievalID === null ||\n      response.result.filter(\n        (e) => e.chat_channel_id === searchParams.retrievalID,\n      ).length === 1\n    ) {\n      successCb(response.result, searchParams.query);\n    } else {\n      fetch(\n        `/chat_channel_memberships/find_by_chat_channel_id?chat_channel_id=${searchParams.retrievalID}`,\n        {\n          Accept: 'application/json',\n          'Content-Type': 'application/json',\n          credentials: 'same-origin',\n        },\n      )\n        .then((individualResponse) => individualResponse.json())\n        .then((json) => {\n          response.result.unshift(json);\n          successCb(response.result, searchParams.query);\n        });\n    }\n  });\n}\n\nexport function getUnopenedChannelIds(successCb) {\n  fetch('/chat_channels?state=unopened_ids', {\n    credentials: 'same-origin',\n  })\n    .then((response) => response.json())\n    .then((json) => {\n      successCb(json.unopened_ids);\n    });\n}\n\nexport function getContent(url, successCb, failureCb) {\n  fetch(url, {\n    Accept: 'application/json',\n    'Content-Type': 'application/json',\n    credentials: 'same-origin',\n  })\n    .then((response) => response.json())\n    .then(successCb)\n    .catch(failureCb);\n}\n\nexport function getJSONContents(url, successCb, failureCb) {\n  fetch(url, {\n    Accept: 'application/json',\n    'Content-Type': 'application/json',\n    credentials: 'same-origin',\n  })\n    .then((response) => response.json())\n    .then(successCb)\n    .catch(failureCb);\n}\n\nexport function deleteMessage(messageId, successCb, failureCb) {\n  fetch(`/messages/${messageId}`, {\n    method: 'DELETE',\n    headers: {\n      Accept: 'application/json',\n      'X-CSRF-Token': window.csrfToken,\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      message: {\n        user_id: window.currentUser.id,\n      },\n    }),\n    credentials: 'same-origin',\n  })\n    .then((response) => response.json())\n    .then(successCb)\n    .catch(failureCb);\n}\n"]},"metadata":{},"sourceType":"module"}