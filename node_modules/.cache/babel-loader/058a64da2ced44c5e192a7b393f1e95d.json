{"ast":null,"code":"function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport PropTypes from 'prop-types';\nimport { h } from 'preact';\n\nvar ExpireDate = function ExpireDate(_ref) {\n  var onChange = _ref.onChange,\n      defaultValue = _ref.defaultValue;\n  var tomorrow = new Date();\n  var monthFromToday = new Date();\n  tomorrow.setDate(new Date().getDate() + 1);\n\n  var _tomorrow$toISOString = tomorrow.toISOString().split('T');\n\n  var _tomorrow$toISOString2 = _slicedToArray(_tomorrow$toISOString, 1);\n\n  tomorrow = _tomorrow$toISOString2[0];\n  monthFromToday.setDate(new Date().getDate() + 30);\n\n  var _monthFromToday$toISO = monthFromToday.toISOString().split('T');\n\n  var _monthFromToday$toISO2 = _slicedToArray(_monthFromToday$toISO, 1);\n\n  monthFromToday = _monthFromToday$toISO2[0];\n  return h(\"div\", {\n    className: \"crayons-field\"\n  }, h(\"label\", {\n    className: \"crayons-field__label\",\n    htmlFor: \"expires_at\"\n  }, \"Custom Expire Date\", h(\"p\", {\n    \"class\": \"crayons-field__description\"\n  }, \"If applicable for time sensitive events, deadlines, etc.\")), h(\"input\", {\n    type: \"date\",\n    className: \"crayons-textfield m:max-w-50\",\n    id: \"expires_at\",\n    name: \"listing[expires_at]\",\n    value: defaultValue,\n    onInput: onChange,\n    min: tomorrow,\n    max: monthFromToday\n  }));\n};\n\nExpireDate.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  defaultValue: PropTypes.string.isRequired\n};\nexport default ExpireDate;","map":{"version":3,"sources":["/Users/nmadhab/hobby/forem/app/javascript/listings/components/ExpireDate.jsx"],"names":["PropTypes","h","ExpireDate","onChange","defaultValue","tomorrow","Date","monthFromToday","setDate","getDate","toISOString","split","propTypes","func","isRequired","string"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,SAASC,CAAT,QAAkB,QAAlB;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,OAAgC;AAAA,MAA7BC,QAA6B,QAA7BA,QAA6B;AAAA,MAAnBC,YAAmB,QAAnBA,YAAmB;AACjD,MAAIC,QAAQ,GAAG,IAAIC,IAAJ,EAAf;AACA,MAAIC,cAAc,GAAG,IAAID,IAAJ,EAArB;AACAD,EAAAA,QAAQ,CAACG,OAAT,CAAiB,IAAIF,IAAJ,GAAWG,OAAX,KAAuB,CAAxC;;AAHiD,8BAIpCJ,QAAQ,CAACK,WAAT,GAAuBC,KAAvB,CAA6B,GAA7B,CAJoC;;AAAA;;AAIhDN,EAAAA,QAJgD;AAKjDE,EAAAA,cAAc,CAACC,OAAf,CAAuB,IAAIF,IAAJ,GAAWG,OAAX,KAAuB,EAA9C;;AALiD,8BAM9BF,cAAc,CAACG,WAAf,GAA6BC,KAA7B,CAAmC,GAAnC,CAN8B;;AAAA;;AAMhDJ,EAAAA,cANgD;AAQjD,SACE;AAAK,IAAA,SAAS,EAAC;AAAf,KACE;AAAO,IAAA,SAAS,EAAC,sBAAjB;AAAwC,IAAA,OAAO,EAAC;AAAhD,2BAEE;AAAG,aAAM;AAAT,gEAFF,CADF,EAOE;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,SAAS,EAAC,8BAFZ;AAGE,IAAA,EAAE,EAAC,YAHL;AAIE,IAAA,IAAI,EAAC,qBAJP;AAKE,IAAA,KAAK,EAAEH,YALT;AAME,IAAA,OAAO,EAAED,QANX;AAOE,IAAA,GAAG,EAAEE,QAPP;AAQE,IAAA,GAAG,EAAEE;AARP,IAPF,CADF;AAoBD,CA5BD;;AA8BAL,UAAU,CAACU,SAAX,GAAuB;AACrBT,EAAAA,QAAQ,EAAEH,SAAS,CAACa,IAAV,CAAeC,UADJ;AAErBV,EAAAA,YAAY,EAAEJ,SAAS,CAACe,MAAV,CAAiBD;AAFV,CAAvB;AAKA,eAAeZ,UAAf","sourcesContent":["import PropTypes from 'prop-types';\nimport { h } from 'preact';\n\nconst ExpireDate = ({ onChange, defaultValue }) => {\n  let tomorrow = new Date();\n  let monthFromToday = new Date();\n  tomorrow.setDate(new Date().getDate() + 1);\n  [tomorrow] = tomorrow.toISOString().split('T');\n  monthFromToday.setDate(new Date().getDate() + 30);\n  [monthFromToday] = monthFromToday.toISOString().split('T');\n\n  return (\n    <div className=\"crayons-field\">\n      <label className=\"crayons-field__label\" htmlFor=\"expires_at\">\n        Custom Expire Date\n        <p class=\"crayons-field__description\">\n          If applicable for time sensitive events, deadlines, etc.\n        </p>\n      </label>\n      <input\n        type=\"date\"\n        className=\"crayons-textfield m:max-w-50\"\n        id=\"expires_at\"\n        name=\"listing[expires_at]\"\n        value={defaultValue}\n        onInput={onChange}\n        min={tomorrow}\n        max={monthFromToday}\n      />\n    </div>\n  );\n};\n\nExpireDate.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  defaultValue: PropTypes.string.isRequired,\n};\n\nexport default ExpireDate;\n"]},"metadata":{},"sourceType":"module"}