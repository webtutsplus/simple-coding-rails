{"ast":null,"code":"import { h } from 'preact';\nimport PropTypes from 'prop-types'; // eslint-disable-next-line import/no-unresolved\n\nimport ConfigImage from 'images/overflow-horizontal.svg';\nimport ChannelButton from './components/ChannelButton';\nimport { channelSorter } from './util';\n\nvar Channels = function Channels(_ref) {\n  var activeChannelId = _ref.activeChannelId,\n      chatChannels = _ref.chatChannels,\n      unopenedChannelIds = _ref.unopenedChannelIds,\n      handleSwitchChannel = _ref.handleSwitchChannel,\n      expanded = _ref.expanded,\n      _ref$filterQuery = _ref.filterQuery,\n      filterQuery = _ref$filterQuery === void 0 ? '' : _ref$filterQuery,\n      channelsLoaded = _ref.channelsLoaded,\n      currentUserId = _ref.currentUserId,\n      triggerActiveContent = _ref.triggerActiveContent;\n  var sortedChatChannels = channelSorter(chatChannels, currentUserId, filterQuery);\n  var discoverableChannels = sortedChatChannels.discoverableChannels.map(function (channel) {\n    return h(ChannelButton, {\n      channel: channel,\n      discoverableChannel: true,\n      triggerActiveContent: triggerActiveContent,\n      isActiveChannel: parseInt(activeChannelId, 10) === channel.chat_channel_id\n    });\n  });\n  var channels = sortedChatChannels.activeChannels.map(function (channel) {\n    var isActive = parseInt(activeChannelId, 10) === channel.chat_channel_id;\n    var isUnopened = !isActive && unopenedChannelIds.includes(channel.chat_channel_id);\n    var newMessagesIndicator = isUnopened ? 'new' : 'old';\n    var otherClassname = isActive ? 'chatchanneltab--active' : 'chatchanneltab--inactive';\n    return h(ChannelButton, {\n      channel: channel,\n      newMessagesIndicator: newMessagesIndicator,\n      otherClassname: otherClassname,\n      handleSwitchChannel: handleSwitchChannel,\n      isUnopened: isUnopened\n    });\n  });\n  var topNotice = '';\n\n  if (expanded && filterQuery.length === 0 && channelsLoaded && (channels.length === 0 || channels[0].messages_count === 0)) {\n    topNotice = h(\"div\", {\n      className: \"chatchannels__channelslistheader\",\n      role: \"alert\"\n    }, h(\"span\", {\n      role: \"img\",\n      \"aria-label\": \"emoji\"\n    }, \"\\uD83D\\uDC4B\"), ' ', \"Welcome to\", h(\"b\", null, \" Connect\"), \"! You may message anyone you mutually follow.\");\n  }\n\n  var channelsListFooter = '';\n\n  if (channels.length === 30) {\n    channelsListFooter = h(\"div\", {\n      className: \"chatchannels__channelslistfooter\"\n    }, \"...\");\n  }\n\n  var configFooter = '';\n\n  if (expanded) {\n    // TODO: The <div /> below should be converted into a real menu or <nav />\n    configFooter = h(\"div\", {\n      className: \"chatchannels__config\"\n    }, h(\"img\", {\n      alt: \"configration\",\n      src: ConfigImage,\n      style: {\n        height: '18px'\n      }\n    }), h(\"div\", {\n      className: \"chatchannels__configmenu\",\n      role: \"menu\"\n    }, h(\"a\", {\n      href: \"/settings\",\n      role: \"menuitem\"\n    }, \"Settings\"), h(\"a\", {\n      href: \"/report-abuse\",\n      role: \"menuitem\"\n    }, \"Report Abuse\")));\n  }\n\n  return h(\"div\", {\n    className: \"chatchannels\"\n  }, h(\"div\", {\n    className: \"chatchannels__channelslist\",\n    id: \"chatchannels__channelslist\",\n    \"data-testid\": \"chat-channels-list\"\n  }, topNotice, channels, discoverableChannels.length > 0 && filterQuery.length > 0 ? h(\"div\", null, h(\"span\", {\n    className: \"crayons-indicator crayons-indicator--\"\n  }, \"Global Channel Search\"), discoverableChannels) : '', channelsListFooter), configFooter);\n};\n\nChannels.propTypes = {\n  activeChannelId: PropTypes.number.isRequired,\n  chatChannels: PropTypes.arrayOf(PropTypes.objectOf()).isRequired,\n  unopenedChannelIds: PropTypes.arrayOf().isRequired,\n  handleSwitchChannel: PropTypes.func.isRequired,\n  triggerActiveContent: PropTypes.func.isRequired,\n  expanded: PropTypes.bool.isRequired,\n  filterQuery: PropTypes.string.isRequired,\n  channelsLoaded: PropTypes.bool.isRequired,\n  currentUserId: PropTypes.string.isRequired\n};\nexport default Channels;","map":{"version":3,"sources":["/Users/nmadhab/hobby/forem/app/javascript/chat/channels.jsx"],"names":["h","PropTypes","ConfigImage","ChannelButton","channelSorter","Channels","activeChannelId","chatChannels","unopenedChannelIds","handleSwitchChannel","expanded","filterQuery","channelsLoaded","currentUserId","triggerActiveContent","sortedChatChannels","discoverableChannels","map","channel","parseInt","chat_channel_id","channels","activeChannels","isActive","isUnopened","includes","newMessagesIndicator","otherClassname","topNotice","length","messages_count","channelsListFooter","configFooter","height","propTypes","number","isRequired","arrayOf","objectOf","func","bool","string"],"mappings":"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","sourcesContent":["import { h } from 'preact';\nimport PropTypes from 'prop-types';\n// eslint-disable-next-line import/no-unresolved\nimport ConfigImage from 'images/overflow-horizontal.svg';\nimport ChannelButton from './components/ChannelButton';\nimport { channelSorter } from './util';\n\nconst Channels = ({\n  activeChannelId,\n  chatChannels,\n  unopenedChannelIds,\n  handleSwitchChannel,\n  expanded,\n  filterQuery = '',\n  channelsLoaded,\n  currentUserId,\n  triggerActiveContent,\n}) => {\n  const sortedChatChannels = channelSorter(\n    chatChannels,\n    currentUserId,\n    filterQuery,\n  );\n  const discoverableChannels = sortedChatChannels.discoverableChannels.map(\n    (channel) => {\n      return (\n        <ChannelButton\n          channel={channel}\n          discoverableChannel\n          triggerActiveContent={triggerActiveContent}\n          isActiveChannel={\n            parseInt(activeChannelId, 10) === channel.chat_channel_id\n          }\n        />\n      );\n    },\n  );\n  const channels = sortedChatChannels.activeChannels.map((channel) => {\n    const isActive = parseInt(activeChannelId, 10) === channel.chat_channel_id;\n    const isUnopened =\n      !isActive && unopenedChannelIds.includes(channel.chat_channel_id);\n    const newMessagesIndicator = isUnopened ? 'new' : 'old';\n    const otherClassname = isActive\n      ? 'chatchanneltab--active'\n      : 'chatchanneltab--inactive';\n\n    return (\n      <ChannelButton\n        channel={channel}\n        newMessagesIndicator={newMessagesIndicator}\n        otherClassname={otherClassname}\n        handleSwitchChannel={handleSwitchChannel}\n        isUnopened={isUnopened}\n      />\n    );\n  });\n  let topNotice = '';\n  if (\n    expanded &&\n    filterQuery.length === 0 &&\n    channelsLoaded &&\n    (channels.length === 0 || channels[0].messages_count === 0)\n  ) {\n    topNotice = (\n      <div className=\"chatchannels__channelslistheader\" role=\"alert\">\n        <span role=\"img\" aria-label=\"emoji\">\n          👋\n        </span>{' '}\n        Welcome to\n        <b> Connect</b>! You may message anyone you mutually follow.\n      </div>\n    );\n  }\n\n  let channelsListFooter = '';\n  if (channels.length === 30) {\n    channelsListFooter = (\n      <div className=\"chatchannels__channelslistfooter\">...</div>\n    );\n  }\n  let configFooter = '';\n  if (expanded) {\n    // TODO: The <div /> below should be converted into a real menu or <nav />\n    configFooter = (\n      <div className=\"chatchannels__config\">\n        <img alt=\"configration\" src={ConfigImage} style={{ height: '18px' }} />\n        <div className=\"chatchannels__configmenu\" role=\"menu\">\n          <a href=\"/settings\" role=\"menuitem\">\n            Settings\n          </a>\n          <a href=\"/report-abuse\" role=\"menuitem\">\n            Report Abuse\n          </a>\n        </div>\n      </div>\n    );\n  }\n  return (\n    <div className=\"chatchannels\">\n      <div\n        className=\"chatchannels__channelslist\"\n        id=\"chatchannels__channelslist\"\n        data-testid=\"chat-channels-list\"\n      >\n        {topNotice}\n        {channels}\n        {discoverableChannels.length > 0 && filterQuery.length > 0 ? (\n          <div>\n            <span className=\"crayons-indicator crayons-indicator--\">\n              Global Channel Search\n            </span>\n            {discoverableChannels}\n          </div>\n        ) : (\n          ''\n        )}\n        {channelsListFooter}\n      </div>\n      {configFooter}\n    </div>\n  );\n};\n\nChannels.propTypes = {\n  activeChannelId: PropTypes.number.isRequired,\n  chatChannels: PropTypes.arrayOf(PropTypes.objectOf()).isRequired,\n  unopenedChannelIds: PropTypes.arrayOf().isRequired,\n  handleSwitchChannel: PropTypes.func.isRequired,\n  triggerActiveContent: PropTypes.func.isRequired,\n  expanded: PropTypes.bool.isRequired,\n  filterQuery: PropTypes.string.isRequired,\n  channelsLoaded: PropTypes.bool.isRequired,\n  currentUserId: PropTypes.string.isRequired,\n};\n\nexport default Channels;\n"]},"metadata":{},"sourceType":"module"}