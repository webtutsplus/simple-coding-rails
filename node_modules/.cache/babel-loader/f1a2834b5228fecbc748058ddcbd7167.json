{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { h, render } from 'preact';\nimport { Snackbar, addSnackbarItem } from '../Snackbar';\nimport addFullScreenModeControl from '../utilities/codeFullscreenModeSwitcher';\nvar fullscreenActionElements = document.getElementsByClassName('js-fullscreen-code-action');\n\nif (fullscreenActionElements) {\n  addFullScreenModeControl(fullscreenActionElements);\n} // The Snackbar for the article page\n\n\nvar snackZone = document.getElementById('snack-zone');\n\nif (snackZone) {\n  render(h(Snackbar, {\n    lifespan: \"3\"\n  }), snackZone);\n} // eslint-disable-next-line no-restricted-globals\n\n\ntop.addSnackbarItem = addSnackbarItem;\nvar userDataIntervalID = setInterval( /*#__PURE__*/_asyncToGenerator(function* () {\n  var _document$body$datase = document.body.dataset,\n      _document$body$datase2 = _document$body$datase.user,\n      user = _document$body$datase2 === void 0 ? null : _document$body$datase2,\n      userStatus = _document$body$datase.userStatus;\n\n  if (userStatus === 'logged-out') {\n    // User is not logged on so nothing dynamic to add to the page.\n    clearInterval(userDataIntervalID);\n    return;\n  }\n\n  if (userStatus === 'logged-in' && user !== null) {\n    // Load the comment subscription button for logged on users.\n    clearInterval(userDataIntervalID);\n    var root = document.getElementById('comment-subscription');\n\n    try {\n      var _yield$import = yield import('../CommentSubscription'),\n          getCommentSubscriptionStatus = _yield$import.getCommentSubscriptionStatus,\n          setCommentSubscriptionStatus = _yield$import.setCommentSubscriptionStatus,\n          CommentSubscription = _yield$import.CommentSubscription;\n\n      var articleId = document.getElementById('article-body').dataset.articleId;\n\n      var _yield$getCommentSubs = yield getCommentSubscriptionStatus(articleId),\n          subscriptionType = _yield$getCommentSubs.config;\n\n      var subscriptionRequestHandler = /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator(function* (type) {\n          var message = yield setCommentSubscriptionStatus(articleId, type);\n          addSnackbarItem({\n            message: message,\n            addCloseButton: true\n          });\n        });\n\n        return function subscriptionRequestHandler(_x) {\n          return _ref2.apply(this, arguments);\n        };\n      }();\n\n      render(h(CommentSubscription, {\n        subscriptionType: subscriptionType,\n        positionType: \"static\",\n        onSubscribe: subscriptionRequestHandler,\n        onUnsubscribe: subscriptionRequestHandler\n      }), root);\n    } catch (e) {\n      document.getElementById('comment-subscription').innerHTML = '<p className=\"color-accent-danger\">Unable to load Comment Subscription component.<br />Try refreshing the page.</p>';\n    }\n  }\n}));","map":{"version":3,"sources":["/Users/nmadhab/hobby/forem/app/javascript/packs/articlePage.jsx"],"names":["h","render","Snackbar","addSnackbarItem","addFullScreenModeControl","fullscreenActionElements","document","getElementsByClassName","snackZone","getElementById","top","userDataIntervalID","setInterval","body","dataset","user","userStatus","clearInterval","root","getCommentSubscriptionStatus","setCommentSubscriptionStatus","CommentSubscription","articleId","subscriptionType","config","subscriptionRequestHandler","type","message","addCloseButton","e","innerHTML"],"mappings":";;;;AAAA,SAASA,CAAT,EAAYC,MAAZ,QAA0B,QAA1B;AACA,SAASC,QAAT,EAAmBC,eAAnB,QAA0C,aAA1C;AACA,OAAOC,wBAAP,MAAqC,yCAArC;AAEA,IAAMC,wBAAwB,GAAGC,QAAQ,CAACC,sBAAT,CAC/B,2BAD+B,CAAjC;;AAIA,IAAIF,wBAAJ,EAA8B;AAC5BD,EAAAA,wBAAwB,CAACC,wBAAD,CAAxB;AACD,C,CAED;;;AACA,IAAMG,SAAS,GAAGF,QAAQ,CAACG,cAAT,CAAwB,YAAxB,CAAlB;;AAEA,IAAID,SAAJ,EAAe;AACbP,EAAAA,MAAM,CAAC,EAAC,QAAD;AAAU,IAAA,QAAQ,EAAC;AAAnB,IAAD,EAA4BO,SAA5B,CAAN;AACD,C,CAED;;;AACAE,GAAG,CAACP,eAAJ,GAAsBA,eAAtB;AAEA,IAAMQ,kBAAkB,GAAGC,WAAW,iCAAC,aAAY;AAAA,8BACbN,QAAQ,CAACO,IAAT,CAAcC,OADD;AAAA,qDACzCC,IADyC;AAAA,MACzCA,IADyC,uCAClC,IADkC;AAAA,MAC5BC,UAD4B,yBAC5BA,UAD4B;;AAGjD,MAAIA,UAAU,KAAK,YAAnB,EAAiC;AAC/B;AACAC,IAAAA,aAAa,CAACN,kBAAD,CAAb;AACA;AACD;;AAED,MAAIK,UAAU,KAAK,WAAf,IAA8BD,IAAI,KAAK,IAA3C,EAAiD;AAC/C;AACAE,IAAAA,aAAa,CAACN,kBAAD,CAAb;AACA,QAAMO,IAAI,GAAGZ,QAAQ,CAACG,cAAT,CAAwB,sBAAxB,CAAb;;AAEA,QAAI;AAAA,gCAKQ,OAAO,wBAAP,CALR;AAAA,UAEAU,4BAFA,iBAEAA,4BAFA;AAAA,UAGAC,4BAHA,iBAGAA,4BAHA;AAAA,UAIAC,mBAJA,iBAIAA,mBAJA;;AAAA,UAOMC,SAPN,GAOoBhB,QAAQ,CAACG,cAAT,CAAwB,cAAxB,EAAwCK,OAP5D,CAOMQ,SAPN;;AAAA,wCAQyCH,4BAA4B,CACrEG,SADqE,CARrE;AAAA,UAQcC,gBARd,yBAQMC,MARN;;AAWF,UAAMC,0BAA0B;AAAA,sCAAG,WAAOC,IAAP,EAAgB;AACjD,cAAMC,OAAO,SAASP,4BAA4B,CAACE,SAAD,EAAYI,IAAZ,CAAlD;AAEAvB,UAAAA,eAAe,CAAC;AAAEwB,YAAAA,OAAO,EAAPA,OAAF;AAAWC,YAAAA,cAAc,EAAE;AAA3B,WAAD,CAAf;AACD,SAJ+B;;AAAA,wBAA1BH,0BAA0B;AAAA;AAAA;AAAA,SAAhC;;AAMAxB,MAAAA,MAAM,CACJ,EAAC,mBAAD;AACE,QAAA,gBAAgB,EAAEsB,gBADpB;AAEE,QAAA,YAAY,EAAC,QAFf;AAGE,QAAA,WAAW,EAAEE,0BAHf;AAIE,QAAA,aAAa,EAAEA;AAJjB,QADI,EAOJP,IAPI,CAAN;AASD,KA1BD,CA0BE,OAAOW,CAAP,EAAU;AACVvB,MAAAA,QAAQ,CAACG,cAAT,CAAwB,sBAAxB,EAAgDqB,SAAhD,GACE,qHADF;AAED;AACF;AACF,CA7CqC,EAAtC","sourcesContent":["import { h, render } from 'preact';\nimport { Snackbar, addSnackbarItem } from '../Snackbar';\nimport addFullScreenModeControl from '../utilities/codeFullscreenModeSwitcher';\n\nconst fullscreenActionElements = document.getElementsByClassName(\n  'js-fullscreen-code-action',\n);\n\nif (fullscreenActionElements) {\n  addFullScreenModeControl(fullscreenActionElements);\n}\n\n// The Snackbar for the article page\nconst snackZone = document.getElementById('snack-zone');\n\nif (snackZone) {\n  render(<Snackbar lifespan=\"3\" />, snackZone);\n}\n\n// eslint-disable-next-line no-restricted-globals\ntop.addSnackbarItem = addSnackbarItem;\n\nconst userDataIntervalID = setInterval(async () => {\n  const { user = null, userStatus } = document.body.dataset;\n\n  if (userStatus === 'logged-out') {\n    // User is not logged on so nothing dynamic to add to the page.\n    clearInterval(userDataIntervalID);\n    return;\n  }\n\n  if (userStatus === 'logged-in' && user !== null) {\n    // Load the comment subscription button for logged on users.\n    clearInterval(userDataIntervalID);\n    const root = document.getElementById('comment-subscription');\n\n    try {\n      const {\n        getCommentSubscriptionStatus,\n        setCommentSubscriptionStatus,\n        CommentSubscription,\n      } = await import('../CommentSubscription');\n\n      const { articleId } = document.getElementById('article-body').dataset;\n      const { config: subscriptionType } = await getCommentSubscriptionStatus(\n        articleId,\n      );\n      const subscriptionRequestHandler = async (type) => {\n        const message = await setCommentSubscriptionStatus(articleId, type);\n\n        addSnackbarItem({ message, addCloseButton: true });\n      };\n\n      render(\n        <CommentSubscription\n          subscriptionType={subscriptionType}\n          positionType=\"static\"\n          onSubscribe={subscriptionRequestHandler}\n          onUnsubscribe={subscriptionRequestHandler}\n        />,\n        root,\n      );\n    } catch (e) {\n      document.getElementById('comment-subscription').innerHTML =\n        '<p className=\"color-accent-danger\">Unable to load Comment Subscription component.<br />Try refreshing the page.</p>';\n    }\n  }\n});\n"]},"metadata":{},"sourceType":"module"}