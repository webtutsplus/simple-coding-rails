{"ast":null,"code":"function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport { h } from 'preact';\nimport { useEffect, useState } from 'preact/hooks';\nimport { createPortal, Fragment, unmountComponentAtNode } from 'preact/compat';\nimport { Search } from './Search';\nimport { getSearchTermFromUrl } from '@utilities/search';\n/**\n * Manages the synchronization of search state between the top search bar (desktop) and\n * mobile (in search results page).\n */\n\nexport function SearchFormSync() {\n  var _useState = useState(function () {\n    return getSearchTermFromUrl(location.search);\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      searchTerm = _useState2[0],\n      setSearchTerm = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      mobileSearchContainer = _useState4[0],\n      setMobileSearchContainer = _useState4[1];\n  /**\n   * A listener for handling the synchronization of search forms.\n   *\n   * @param {CustomEvent<{ querystring: string }>} event A custom event for synching search forms.\n   */\n\n\n  function syncSearchFormsListener(event) {\n    var querystring = event.detail.querystring;\n    var updatedSearchTerm = getSearchTermFromUrl(querystring); // Server-side rendering of search results means the DOM node is destroyed everytime a search is performed,\n    // So we need to get the reference every time and use that for the parent in the portal.\n\n    var element = document.getElementById('mobile-search-container'); // The DOM element has changed because server-sde rendering returns new\n    // search results which destroys the existing search form in mobile view.\n    // Because of this we need to unmount the component at the old element reference\n    // i.e. the container for the createPortal call in the render.\n    // If we do not unmount, it will result in an unmounting error that will throw as the\n    // container element (search form that was wiped out because of the new search results) no longer exists.\n\n    if (mobileSearchContainer && element !== mobileSearchContainer) {\n      unmountComponentAtNode(mobileSearchContainer);\n    } // We need to delete the existing server-side rendered form because createPortal only appends to it's container.\n\n\n    if (element) {\n      var form = element.querySelector('form');\n      form && element.removeChild(form);\n    }\n\n    setMobileSearchContainer(element);\n    setSearchTerm(updatedSearchTerm);\n  }\n\n  useEffect(function () {\n    window.addEventListener('syncSearchForms', syncSearchFormsListener);\n    return function () {\n      window.removeEventListener('syncSearchForms', syncSearchFormsListener);\n    };\n  });\n  return h(Fragment, null, h(Search, {\n    searchTerm: searchTerm,\n    setSearchTerm: setSearchTerm\n  }), mobileSearchContainer && createPortal(h(Search, {\n    searchTerm: searchTerm,\n    setSearchTerm: setSearchTerm\n  }), mobileSearchContainer));\n}","map":{"version":3,"sources":["/Users/nmadhab/hobby/forem/app/javascript/Search/SearchFormSync.jsx"],"names":["h","useEffect","useState","createPortal","Fragment","unmountComponentAtNode","Search","getSearchTermFromUrl","SearchFormSync","location","search","searchTerm","setSearchTerm","mobileSearchContainer","setMobileSearchContainer","syncSearchFormsListener","event","querystring","detail","updatedSearchTerm","element","document","getElementById","form","querySelector","removeChild","window","addEventListener","removeEventListener"],"mappings":";;;;;;;;;;;;AAAA,SAASA,CAAT,QAAkB,QAAlB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,cAApC;AACA,SAASC,YAAT,EAAuBC,QAAvB,EAAiCC,sBAAjC,QAA+D,eAA/D;AACA,SAASC,MAAT,QAAuB,UAAvB;AACA,SAASC,oBAAT,QAAqC,mBAArC;AAEA;AACA;AACA;AACA;;AACA,OAAO,SAASC,cAAT,GAA0B;AAAA,kBACKN,QAAQ,CAAC,YAAM;AACjD,WAAOK,oBAAoB,CAACE,QAAQ,CAACC,MAAV,CAA3B;AACD,GAF2C,CADb;AAAA;AAAA,MACxBC,UADwB;AAAA,MACZC,aADY;;AAAA,mBAI2BV,QAAQ,CAAC,IAAD,CAJnC;AAAA;AAAA,MAIxBW,qBAJwB;AAAA,MAIDC,wBAJC;AAM/B;AACF;AACA;AACA;AACA;;;AACE,WAASC,uBAAT,CAAiCC,KAAjC,EAAwC;AAAA,QAC9BC,WAD8B,GACdD,KAAK,CAACE,MADQ,CAC9BD,WAD8B;AAEtC,QAAME,iBAAiB,GAAGZ,oBAAoB,CAACU,WAAD,CAA9C,CAFsC,CAItC;AACA;;AACA,QAAMG,OAAO,GAAGC,QAAQ,CAACC,cAAT,CAAwB,yBAAxB,CAAhB,CANsC,CAQtC;AACA;AACA;AACA;AACA;AACA;;AACA,QAAIT,qBAAqB,IAAIO,OAAO,KAAKP,qBAAzC,EAAgE;AAC9DR,MAAAA,sBAAsB,CAACQ,qBAAD,CAAtB;AACD,KAhBqC,CAkBtC;;;AACA,QAAIO,OAAJ,EAAa;AACX,UAAMG,IAAI,GAAGH,OAAO,CAACI,aAAR,CAAsB,MAAtB,CAAb;AACAD,MAAAA,IAAI,IAAIH,OAAO,CAACK,WAAR,CAAoBF,IAApB,CAAR;AACD;;AAEDT,IAAAA,wBAAwB,CAACM,OAAD,CAAxB;AACAR,IAAAA,aAAa,CAACO,iBAAD,CAAb;AACD;;AAEDlB,EAAAA,SAAS,CAAC,YAAM;AACdyB,IAAAA,MAAM,CAACC,gBAAP,CAAwB,iBAAxB,EAA2CZ,uBAA3C;AAEA,WAAO,YAAM;AACXW,MAAAA,MAAM,CAACE,mBAAP,CAA2B,iBAA3B,EAA8Cb,uBAA9C;AACD,KAFD;AAGD,GANQ,CAAT;AAQA,SACE,EAAC,QAAD,QACE,EAAC,MAAD;AAAQ,IAAA,UAAU,EAAEJ,UAApB;AAAgC,IAAA,aAAa,EAAEC;AAA/C,IADF,EAEGC,qBAAqB,IACpBV,YAAY,CACV,EAAC,MAAD;AAAQ,IAAA,UAAU,EAAEQ,UAApB;AAAgC,IAAA,aAAa,EAAEC;AAA/C,IADU,EAEVC,qBAFU,CAHhB,CADF;AAUD","sourcesContent":["import { h } from 'preact';\nimport { useEffect, useState } from 'preact/hooks';\nimport { createPortal, Fragment, unmountComponentAtNode } from 'preact/compat';\nimport { Search } from './Search';\nimport { getSearchTermFromUrl } from '@utilities/search';\n\n/**\n * Manages the synchronization of search state between the top search bar (desktop) and\n * mobile (in search results page).\n */\nexport function SearchFormSync() {\n  const [searchTerm, setSearchTerm] = useState(() => {\n    return getSearchTermFromUrl(location.search);\n  });\n  const [mobileSearchContainer, setMobileSearchContainer] = useState(null);\n\n  /**\n   * A listener for handling the synchronization of search forms.\n   *\n   * @param {CustomEvent<{ querystring: string }>} event A custom event for synching search forms.\n   */\n  function syncSearchFormsListener(event) {\n    const { querystring } = event.detail;\n    const updatedSearchTerm = getSearchTermFromUrl(querystring);\n\n    // Server-side rendering of search results means the DOM node is destroyed everytime a search is performed,\n    // So we need to get the reference every time and use that for the parent in the portal.\n    const element = document.getElementById('mobile-search-container');\n\n    // The DOM element has changed because server-sde rendering returns new\n    // search results which destroys the existing search form in mobile view.\n    // Because of this we need to unmount the component at the old element reference\n    // i.e. the container for the createPortal call in the render.\n    // If we do not unmount, it will result in an unmounting error that will throw as the\n    // container element (search form that was wiped out because of the new search results) no longer exists.\n    if (mobileSearchContainer && element !== mobileSearchContainer) {\n      unmountComponentAtNode(mobileSearchContainer);\n    }\n\n    // We need to delete the existing server-side rendered form because createPortal only appends to it's container.\n    if (element) {\n      const form = element.querySelector('form');\n      form && element.removeChild(form);\n    }\n\n    setMobileSearchContainer(element);\n    setSearchTerm(updatedSearchTerm);\n  }\n\n  useEffect(() => {\n    window.addEventListener('syncSearchForms', syncSearchFormsListener);\n\n    return () => {\n      window.removeEventListener('syncSearchForms', syncSearchFormsListener);\n    };\n  });\n\n  return (\n    <Fragment>\n      <Search searchTerm={searchTerm} setSearchTerm={setSearchTerm} />\n      {mobileSearchContainer &&\n        createPortal(\n          <Search searchTerm={searchTerm} setSearchTerm={setSearchTerm} />,\n          mobileSearchContainer,\n        )}\n    </Fragment>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}