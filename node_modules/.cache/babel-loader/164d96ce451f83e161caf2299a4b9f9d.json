{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* global jQuery */\nimport { Controller } from 'stimulus';\nimport adminModal from '../adminModal';\nvar recaptchaFields = document.getElementById('recaptchaContainer');\nvar emailRegistrationCheckbox = document.getElementById('email-registration-checkbox');\nvar emailAuthSettingsSection = document.getElementById('email-auth-settings-section');\nvar emailAuthModalTitle = 'Disable Email address registration'; // TODO: Remove the sentence \"You must update site config to save this action!\"\n// once we build more robust flow for Admin/Config\n\nvar emailAuthModalBody = \"\\n  <p>If you disable Email address as a registration option, people cannot create an account with their email address.</p>\\n  <p>However, people who have already created an account using their email address can continue to login.</p>\\n  <p><strong>You must confirm and update site config to save below this action.</strong></p>\";\n\nvar ConfigController = /*#__PURE__*/function (_Controller) {\n  _inherits(ConfigController, _Controller);\n\n  var _super = _createSuper(ConfigController);\n\n  function ConfigController() {\n    _classCallCheck(this, ConfigController);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ConfigController, [{\n    key: \"toggleAccordionButtonLabel\",\n    // GENERAL FUNCTIONS START\n    // This is a bit of hack because we have to deal with Bootstrap used inline, jQuery and Stimulus  :-/\n    // NOTE: it'd be best to rewrite this as a reusable \"toggle\" element in Stimulus without using jQuery + Bootstrap\n    value: function toggleAccordionButtonLabel(event) {\n      var $target = jQuery(event.target);\n      var $container = $target.parent();\n      var text = $target.text();\n\n      if ($container) {\n        var show = $container.attr('aria-expanded') === 'true';\n\n        if (show) {\n          $target.text(text.replace(/Hide/i, 'Show'));\n        } else {\n          $target.text(text.replace(/Show/i, 'Hide'));\n        }\n      }\n    }\n  }, {\n    key: \"disableTargetField\",\n    value: function disableTargetField(event) {\n      var targetElementName = event.target.dataset.disableTarget;\n      var targetElement = this[\"\".concat(targetElementName, \"Target\")];\n      var newValue = event.target.checked;\n      targetElement.disabled = newValue; // Disable the button generated by ERB for select tags\n\n      if (targetElement.nodeName === 'SELECT') {\n        var snakeCaseName = targetElementName.replace(/[A-Z]/g, function (letter) {\n          return \"_\".concat(letter.toLowerCase());\n        });\n        document.querySelector(\"button[data-id=site_config_\".concat(snakeCaseName, \"]\")).disabled = newValue;\n      }\n    }\n  }, {\n    key: \"closeAdminModal\",\n    value: function closeAdminModal() {\n      // per forem/internalEngineering#336, need to short-circuit the\n      // \"Update Site Configuration\" button submit action; chose not to\n      // define Target on actual \"Update\" button (since it's a partial).\n      // The Target is defined on the Authentication form, and that section's\n      // \"Update\" button is queried.\n      var submitBtn = this.authSectionFormTarget.querySelector('input[type=\"submit\"]');\n      this.configModalAnchorTarget.innerHTML = '';\n      document.body.style.height = 'inherit';\n      document.body.style.overflowY = 'inherit';\n\n      if (submitBtn.hasAttribute('disabled')) {\n        submitBtn.removeAttribute('disabled');\n      }\n    }\n  }, {\n    key: \"positionModalOnPage\",\n    value: function positionModalOnPage() {\n      if (document.getElementsByClassName('crayons-modal')[0]) {\n        document.body.style.height = '100vh';\n        document.body.style.overflowY = 'hidden';\n      }\n    } // GENERAL FUNCTIONS END\n    // EMAIL AUTH FUNCTIONS START\n\n  }, {\n    key: \"toggleGoogleRecaptchaFields\",\n    value: function toggleGoogleRecaptchaFields() {\n      if (this.requireCaptchaForEmailPasswordRegistrationTarget.checked) {\n        recaptchaFields.classList.remove('hidden');\n      } else {\n        recaptchaFields.classList.add('hidden');\n      }\n    }\n  }, {\n    key: \"enableOrEditEmailAuthSettings\",\n    value: function enableOrEditEmailAuthSettings(event) {\n      event.preventDefault();\n\n      if (this.emailAuthSettingsBtnTarget.dataset.buttonText === 'enable') {\n        emailRegistrationCheckbox.checked = true;\n        this.emailAuthSettingsBtnTarget.setAttribute('data-button-text', 'edit');\n        this.enabledIndicatorTarget.classList.add('visible');\n      }\n\n      this.emailAuthSettingsBtnTarget.classList.add('hidden');\n      emailAuthSettingsSection.classList.remove('hidden');\n    }\n  }, {\n    key: \"hideEmailAuthSettings\",\n    value: function hideEmailAuthSettings(event) {\n      event.preventDefault();\n      this.emailAuthSettingsBtnTarget.classList.remove('hidden');\n      emailAuthSettingsSection.classList.add('hidden');\n    }\n  }, {\n    key: \"activateEmailAuthModal\",\n    value: function activateEmailAuthModal(event) {\n      event.preventDefault();\n      this.configModalAnchorTarget.innerHTML = adminModal({\n        title: emailAuthModalTitle,\n        body: emailAuthModalBody,\n        leftBtnText: 'Confirm disable',\n        leftBtnAction: 'disableEmailAuthFromModal',\n        rightBtnText: 'Cancel',\n        rightBtnAction: 'closeAdminModal',\n        leftBtnClasses: 'crayons-btn--danger',\n        rightBtnClasses: 'crayons-btn--secondary'\n      });\n      this.positionModalOnPage();\n    }\n  }, {\n    key: \"disableEmailAuthFromModal\",\n    value: function disableEmailAuthFromModal(event) {\n      event.preventDefault();\n      this.disableEmailAuth(event);\n      this.closeAdminModal();\n    }\n  }, {\n    key: \"disableEmailAuth\",\n    value: function disableEmailAuth(event) {\n      event.preventDefault();\n      emailRegistrationCheckbox.checked = false;\n      this.emailAuthSettingsBtnTarget.innerHTML = 'Enable';\n      this.emailAuthSettingsBtnTarget.setAttribute('data-button-text', 'enable');\n      this.enabledIndicatorTarget.classList.remove('visible');\n      this.hideEmailAuthSettings(event);\n    } // EMAIL AUTH FUNCTIONS END\n    // AUTH PROVIDERS FUNCTIONS START\n\n  }, {\n    key: \"enableOrEditAuthProvider\",\n    value: function enableOrEditAuthProvider(event) {\n      event.preventDefault();\n      var providerName = event.target.dataset.providerName;\n      var enabledIndicator = document.getElementById(\"\".concat(providerName, \"-enabled-indicator\"));\n      document.getElementById(\"\".concat(providerName, \"-auth-settings\")).classList.remove('hidden');\n      event.target.classList.add('hidden');\n\n      if (event.target.dataset.buttonText === 'enable') {\n        enabledIndicator.classList.add('visible');\n        event.target.setAttribute('data-enable-auth', 'true');\n        this.listAuthToBeEnabled();\n      }\n    }\n  }, {\n    key: \"disableAuthProvider\",\n    value: function disableAuthProvider(event) {\n      event.preventDefault();\n      var providerName = event.target.dataset.providerName;\n      var enabledIndicator = document.getElementById(\"\".concat(providerName, \"-enabled-indicator\"));\n      var authEnableButton = document.getElementById(\"\".concat(providerName, \"-auth-btn\"));\n      authEnableButton.setAttribute('data-enable-auth', 'false');\n      enabledIndicator.classList.remove('visible');\n      this.listAuthToBeEnabled();\n      this.hideAuthProviderSettings(event);\n    }\n  }, {\n    key: \"authProviderModalTitle\",\n    value: function authProviderModalTitle(provider) {\n      return \"Disable \".concat(provider, \" login\");\n    }\n  }, {\n    key: \"authProviderModalBody\",\n    value: function authProviderModalBody(provider) {\n      return \"<p>If you disable \".concat(provider, \" as a login option, people cannot authenticate with \").concat(provider, \".</p><p><strong>You must update Site Config to save this action!</strong></p>\");\n    }\n  }, {\n    key: \"activateAuthProviderModal\",\n    value: function activateAuthProviderModal(event) {\n      event.preventDefault();\n      var providerName = event.target.dataset.providerName;\n      var providerOfficialName = event.target.dataset.providerOfficialName;\n      this.configModalAnchorTarget.innerHTML = adminModal({\n        title: this.authProviderModalTitle(providerOfficialName),\n        body: this.authProviderModalBody(providerOfficialName),\n        leftBtnText: 'Confirm disable',\n        leftBtnAction: 'disableAuthProviderFromModal',\n        rightBtnText: 'Cancel',\n        rightBtnAction: 'closeAdminModal',\n        leftBtnClasses: 'crayons-btn--danger',\n        rightBtnClasses: 'crayons-btn--secondary',\n        leftCustomDataAttr: \"data-provider-name=\".concat(providerName)\n      });\n      this.positionModalOnPage();\n    }\n  }, {\n    key: \"disableAuthProviderFromModal\",\n    value: function disableAuthProviderFromModal(event) {\n      event.preventDefault();\n      var providerName = event.target.dataset.providerName;\n      var authEnableButton = document.getElementById(\"\".concat(providerName, \"-auth-btn\"));\n      var enabledIndicator = document.getElementById(\"\".concat(providerName, \"-enabled-indicator\"));\n      authEnableButton.setAttribute('data-enable-auth', 'false');\n      this.listAuthToBeEnabled(event);\n      this.checkForAndGuardSoleAuthProvider();\n      enabledIndicator.classList.remove('visible');\n      this.hideAuthProviderSettings(event);\n      this.closeAdminModal();\n    }\n  }, {\n    key: \"checkForAndGuardSoleAuthProvider\",\n    value: function checkForAndGuardSoleAuthProvider() {\n      if (document.querySelectorAll('[data-enable-auth=\"true\"]').length === 1 && document.getElementById('email-auth-enable-edit-btn').getAttribute('data-button-text') === 'enable') {\n        var targetAuthDisableBtn = document.querySelector('[data-enable-auth=\"true\"]');\n        targetAuthDisableBtn.parentElement.classList.add('crayons-tooltip');\n        targetAuthDisableBtn.parentElement.setAttribute('data-tooltip', 'To edit this, you must first enable Email address as a registration option');\n        targetAuthDisableBtn.setAttribute('disabled', true);\n      }\n    }\n  }, {\n    key: \"hideAuthProviderSettings\",\n    value: function hideAuthProviderSettings(event) {\n      event.preventDefault();\n      var providerName = event.target.dataset.providerName;\n      document.getElementById(\"\".concat(providerName, \"-auth-settings\")).classList.add('hidden');\n      document.getElementById(\"\".concat(providerName, \"-auth-btn\")).classList.remove('hidden');\n    }\n  }, {\n    key: \"listAuthToBeEnabled\",\n    value: function listAuthToBeEnabled() {\n      var enabledProviderArray = [];\n      document.querySelectorAll('[data-enable-auth=\"true\"]').forEach(function (provider) {\n        enabledProviderArray.push(provider.dataset.providerName);\n      });\n      document.getElementById('auth_providers_to_enable').value = enabledProviderArray;\n    }\n  }, {\n    key: \"adjustAuthenticationOptions\",\n    value: function adjustAuthenticationOptions() {\n      if (this.inviteOnlyModeTarget.checked) {\n        document.getElementById('auth_providers_to_enable').value = '';\n        emailRegistrationCheckbox.checked = false;\n      } else {\n        emailRegistrationCheckbox.checked = true;\n      }\n    } // AUTH PROVIDERS FUNCTIONS END\n\n  }, {\n    key: \"enabledProvidersWithMissingKeys\",\n    value: function enabledProvidersWithMissingKeys() {\n      var providersWithMissingKeys = [];\n      document.querySelectorAll('[data-enable-auth=\"true\"]').forEach(function (provider) {\n        var providerName = provider.dataset.providerName;\n\n        if (!document.getElementById(\"site_config_\".concat(providerName, \"_key\")).value || !document.getElementById(\"site_config_\".concat(providerName, \"_secret\")).value) {\n          providersWithMissingKeys.push(providerName);\n        }\n      });\n      return providersWithMissingKeys;\n    }\n  }, {\n    key: \"generateProvidersList\",\n    value: function generateProvidersList(providers) {\n      var list = providers.reduce(function (html, provider) {\n        return \"\".concat(html, \"<li class=\\\"capitalize\\\">\").concat(provider, \"</li>\");\n      }, '');\n      return list;\n    }\n  }, {\n    key: \"missingAuthKeysModalBody\",\n    value: function missingAuthKeysModalBody(providers) {\n      return \"\\n      <p>You haven't filled out all of the required fields to enable the following authentication providers:</p>\\n      <ul class=\\\"mb-0\\\">\".concat(this.generateProvidersList(providers), \"</ul>\\n      <p class=\\\"mb-0\\\">You may continue editing these authentication providers, or you may cancel.</p>\\n    \");\n    }\n  }, {\n    key: \"submitForm\",\n    value: function submitForm() {\n      this.authSectionFormTarget.submit();\n    }\n  }, {\n    key: \"activateMissingKeysModal\",\n    value: function activateMissingKeysModal(providers) {\n      this.configModalAnchorTarget.innerHTML = adminModal({\n        title: 'Setup not complete',\n        body: this.missingAuthKeysModalBody(providers),\n        leftBtnText: 'Continue editing',\n        leftBtnAction: 'closeAdminModal',\n        rightBtnText: 'Cancel',\n        rightBtnAction: 'cancelAuthProviderEnable',\n        rightBtnClasses: 'crayons-btn--secondary'\n      });\n    }\n  }, {\n    key: \"configUpdatePrecheck\",\n    value: function configUpdatePrecheck(event) {\n      if (this.enabledProvidersWithMissingKeys().length > 0) {\n        event.preventDefault();\n        this.activateMissingKeysModal(this.enabledProvidersWithMissingKeys());\n      } else {\n        event.target.submit();\n      }\n    }\n  }, {\n    key: \"cancelAuthProviderEnable\",\n    value: function cancelAuthProviderEnable() {\n      var _this = this;\n\n      var providers = this.enabledProvidersWithMissingKeys();\n      providers.forEach(function (provider) {\n        var enabledIndicator = document.getElementById(\"\".concat(provider, \"-enabled-indicator\"));\n        var authEnableButton = document.getElementById(\"\".concat(provider, \"-auth-btn\"));\n        authEnableButton.setAttribute('data-enable-auth', 'false');\n        enabledIndicator.classList.remove('visible');\n\n        _this.listAuthToBeEnabled();\n\n        document.getElementById(\"\".concat(provider, \"-auth-settings\")).classList.add('hidden');\n        document.getElementById(\"\".concat(provider, \"-auth-btn\")).classList.remove('hidden');\n\n        _this.closeAdminModal();\n      });\n    }\n  }]);\n\n  return ConfigController;\n}(Controller);\n\n_defineProperty(ConfigController, \"targets\", ['authenticationProviders', 'authSectionForm', 'collectiveNoun', 'configModalAnchor', 'emailAuthSettingsBtn', 'enabledIndicator', 'inviteOnlyMode', 'requireCaptchaForEmailPasswordRegistration']);\n\nexport { ConfigController as default };","map":{"version":3,"sources":["/Users/nmadhab/hobby/forem/app/javascript/admin/controllers/config_controller.js"],"names":["Controller","adminModal","recaptchaFields","document","getElementById","emailRegistrationCheckbox","emailAuthSettingsSection","emailAuthModalTitle","emailAuthModalBody","ConfigController","event","$target","jQuery","target","$container","parent","text","show","attr","replace","targetElementName","dataset","disableTarget","targetElement","newValue","checked","disabled","nodeName","snakeCaseName","letter","toLowerCase","querySelector","submitBtn","authSectionFormTarget","configModalAnchorTarget","innerHTML","body","style","height","overflowY","hasAttribute","removeAttribute","getElementsByClassName","requireCaptchaForEmailPasswordRegistrationTarget","classList","remove","add","preventDefault","emailAuthSettingsBtnTarget","buttonText","setAttribute","enabledIndicatorTarget","title","leftBtnText","leftBtnAction","rightBtnText","rightBtnAction","leftBtnClasses","rightBtnClasses","positionModalOnPage","disableEmailAuth","closeAdminModal","hideEmailAuthSettings","providerName","enabledIndicator","listAuthToBeEnabled","authEnableButton","hideAuthProviderSettings","provider","providerOfficialName","authProviderModalTitle","authProviderModalBody","leftCustomDataAttr","checkForAndGuardSoleAuthProvider","querySelectorAll","length","getAttribute","targetAuthDisableBtn","parentElement","enabledProviderArray","forEach","push","value","inviteOnlyModeTarget","providersWithMissingKeys","providers","list","reduce","html","generateProvidersList","submit","missingAuthKeysModalBody","enabledProvidersWithMissingKeys","activateMissingKeysModal"],"mappings":"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","sourcesContent":["/* global jQuery */\nimport { Controller } from 'stimulus';\nimport adminModal from '../adminModal';\n\nconst recaptchaFields = document.getElementById('recaptchaContainer');\nconst emailRegistrationCheckbox = document.getElementById(\n  'email-registration-checkbox',\n);\nconst emailAuthSettingsSection = document.getElementById(\n  'email-auth-settings-section',\n);\nconst emailAuthModalTitle = 'Disable Email address registration';\n// TODO: Remove the sentence \"You must update site config to save this action!\"\n// once we build more robust flow for Admin/Config\nconst emailAuthModalBody = `\n  <p>If you disable Email address as a registration option, people cannot create an account with their email address.</p>\n  <p>However, people who have already created an account using their email address can continue to login.</p>\n  <p><strong>You must confirm and update site config to save below this action.</strong></p>`;\n\nexport default class ConfigController extends Controller {\n  static targets = [\n    'authenticationProviders',\n    'authSectionForm',\n    'collectiveNoun',\n    'configModalAnchor',\n    'emailAuthSettingsBtn',\n    'enabledIndicator',\n    'inviteOnlyMode',\n    'requireCaptchaForEmailPasswordRegistration',\n  ];\n\n  // GENERAL FUNCTIONS START\n\n  // This is a bit of hack because we have to deal with Bootstrap used inline, jQuery and Stimulus  :-/\n  // NOTE: it'd be best to rewrite this as a reusable \"toggle\" element in Stimulus without using jQuery + Bootstrap\n  toggleAccordionButtonLabel(event) {\n    const $target = jQuery(event.target);\n    const $container = $target.parent();\n\n    const text = $target.text();\n\n    if ($container) {\n      const show = $container.attr('aria-expanded') === 'true';\n\n      if (show) {\n        $target.text(text.replace(/Hide/i, 'Show'));\n      } else {\n        $target.text(text.replace(/Show/i, 'Hide'));\n      }\n    }\n  }\n\n  disableTargetField(event) {\n    const targetElementName = event.target.dataset.disableTarget;\n    const targetElement = this[`${targetElementName}Target`];\n    const newValue = event.target.checked;\n    targetElement.disabled = newValue;\n\n    // Disable the button generated by ERB for select tags\n    if (targetElement.nodeName === 'SELECT') {\n      const snakeCaseName = targetElementName.replace(\n        /[A-Z]/g,\n        (letter) => `_${letter.toLowerCase()}`,\n      );\n      document.querySelector(\n        `button[data-id=site_config_${snakeCaseName}]`,\n      ).disabled = newValue;\n    }\n  }\n\n  closeAdminModal() {\n    // per forem/internalEngineering#336, need to short-circuit the\n    // \"Update Site Configuration\" button submit action; chose not to\n    // define Target on actual \"Update\" button (since it's a partial).\n    // The Target is defined on the Authentication form, and that section's\n    // \"Update\" button is queried.\n    const submitBtn = this.authSectionFormTarget.querySelector(\n      'input[type=\"submit\"]',\n    );\n\n    this.configModalAnchorTarget.innerHTML = '';\n    document.body.style.height = 'inherit';\n    document.body.style.overflowY = 'inherit';\n\n    if (submitBtn.hasAttribute('disabled')) {\n      submitBtn.removeAttribute('disabled');\n    }\n  }\n\n  positionModalOnPage() {\n    if (document.getElementsByClassName('crayons-modal')[0]) {\n      document.body.style.height = '100vh';\n      document.body.style.overflowY = 'hidden';\n    }\n  }\n\n  // GENERAL FUNCTIONS END\n\n  // EMAIL AUTH FUNCTIONS START\n\n  toggleGoogleRecaptchaFields() {\n    if (this.requireCaptchaForEmailPasswordRegistrationTarget.checked) {\n      recaptchaFields.classList.remove('hidden');\n    } else {\n      recaptchaFields.classList.add('hidden');\n    }\n  }\n\n  enableOrEditEmailAuthSettings(event) {\n    event.preventDefault();\n    if (this.emailAuthSettingsBtnTarget.dataset.buttonText === 'enable') {\n      emailRegistrationCheckbox.checked = true;\n      this.emailAuthSettingsBtnTarget.setAttribute('data-button-text', 'edit');\n      this.enabledIndicatorTarget.classList.add('visible');\n    }\n    this.emailAuthSettingsBtnTarget.classList.add('hidden');\n    emailAuthSettingsSection.classList.remove('hidden');\n  }\n\n  hideEmailAuthSettings(event) {\n    event.preventDefault();\n    this.emailAuthSettingsBtnTarget.classList.remove('hidden');\n    emailAuthSettingsSection.classList.add('hidden');\n  }\n\n  activateEmailAuthModal(event) {\n    event.preventDefault();\n    this.configModalAnchorTarget.innerHTML = adminModal({\n      title: emailAuthModalTitle,\n      body: emailAuthModalBody,\n      leftBtnText: 'Confirm disable',\n      leftBtnAction: 'disableEmailAuthFromModal',\n      rightBtnText: 'Cancel',\n      rightBtnAction: 'closeAdminModal',\n      leftBtnClasses: 'crayons-btn--danger',\n      rightBtnClasses: 'crayons-btn--secondary',\n    });\n    this.positionModalOnPage();\n  }\n\n  disableEmailAuthFromModal(event) {\n    event.preventDefault();\n    this.disableEmailAuth(event);\n    this.closeAdminModal();\n  }\n\n  disableEmailAuth(event) {\n    event.preventDefault();\n    emailRegistrationCheckbox.checked = false;\n    this.emailAuthSettingsBtnTarget.innerHTML = 'Enable';\n    this.emailAuthSettingsBtnTarget.setAttribute('data-button-text', 'enable');\n    this.enabledIndicatorTarget.classList.remove('visible');\n    this.hideEmailAuthSettings(event);\n  }\n\n  // EMAIL AUTH FUNCTIONS END\n\n  // AUTH PROVIDERS FUNCTIONS START\n\n  enableOrEditAuthProvider(event) {\n    event.preventDefault();\n    const providerName = event.target.dataset.providerName;\n    const enabledIndicator = document.getElementById(\n      `${providerName}-enabled-indicator`,\n    );\n\n    document\n      .getElementById(`${providerName}-auth-settings`)\n      .classList.remove('hidden');\n    event.target.classList.add('hidden');\n\n    if (event.target.dataset.buttonText === 'enable') {\n      enabledIndicator.classList.add('visible');\n      event.target.setAttribute('data-enable-auth', 'true');\n      this.listAuthToBeEnabled();\n    }\n  }\n\n  disableAuthProvider(event) {\n    event.preventDefault();\n    const providerName = event.target.dataset.providerName;\n    const enabledIndicator = document.getElementById(\n      `${providerName}-enabled-indicator`,\n    );\n    const authEnableButton = document.getElementById(\n      `${providerName}-auth-btn`,\n    );\n    authEnableButton.setAttribute('data-enable-auth', 'false');\n    enabledIndicator.classList.remove('visible');\n    this.listAuthToBeEnabled();\n    this.hideAuthProviderSettings(event);\n  }\n\n  authProviderModalTitle(provider) {\n    return `Disable ${provider} login`;\n  }\n\n  authProviderModalBody(provider) {\n    return `<p>If you disable ${provider} as a login option, people cannot authenticate with ${provider}.</p><p><strong>You must update Site Config to save this action!</strong></p>`;\n  }\n\n  activateAuthProviderModal(event) {\n    event.preventDefault();\n    const providerName = event.target.dataset.providerName;\n    const providerOfficialName = event.target.dataset.providerOfficialName;\n    this.configModalAnchorTarget.innerHTML = adminModal({\n      title: this.authProviderModalTitle(providerOfficialName),\n      body: this.authProviderModalBody(providerOfficialName),\n      leftBtnText: 'Confirm disable',\n      leftBtnAction: 'disableAuthProviderFromModal',\n      rightBtnText: 'Cancel',\n      rightBtnAction: 'closeAdminModal',\n      leftBtnClasses: 'crayons-btn--danger',\n      rightBtnClasses: 'crayons-btn--secondary',\n      leftCustomDataAttr: `data-provider-name=${providerName}`,\n    });\n    this.positionModalOnPage();\n  }\n\n  disableAuthProviderFromModal(event) {\n    event.preventDefault();\n    const providerName = event.target.dataset.providerName;\n    const authEnableButton = document.getElementById(\n      `${providerName}-auth-btn`,\n    );\n    const enabledIndicator = document.getElementById(\n      `${providerName}-enabled-indicator`,\n    );\n    authEnableButton.setAttribute('data-enable-auth', 'false');\n    this.listAuthToBeEnabled(event);\n    this.checkForAndGuardSoleAuthProvider();\n    enabledIndicator.classList.remove('visible');\n    this.hideAuthProviderSettings(event);\n    this.closeAdminModal();\n  }\n\n  checkForAndGuardSoleAuthProvider() {\n    if (\n      document.querySelectorAll('[data-enable-auth=\"true\"]').length === 1 &&\n      document\n        .getElementById('email-auth-enable-edit-btn')\n        .getAttribute('data-button-text') === 'enable'\n    ) {\n      const targetAuthDisableBtn = document.querySelector(\n        '[data-enable-auth=\"true\"]',\n      );\n      targetAuthDisableBtn.parentElement.classList.add('crayons-tooltip');\n      targetAuthDisableBtn.parentElement.setAttribute(\n        'data-tooltip',\n        'To edit this, you must first enable Email address as a registration option',\n      );\n      targetAuthDisableBtn.setAttribute('disabled', true);\n    }\n  }\n\n  hideAuthProviderSettings(event) {\n    event.preventDefault();\n    const providerName = event.target.dataset.providerName;\n    document\n      .getElementById(`${providerName}-auth-settings`)\n      .classList.add('hidden');\n    document\n      .getElementById(`${providerName}-auth-btn`)\n      .classList.remove('hidden');\n  }\n\n  listAuthToBeEnabled() {\n    const enabledProviderArray = [];\n    document\n      .querySelectorAll('[data-enable-auth=\"true\"]')\n      .forEach((provider) => {\n        enabledProviderArray.push(provider.dataset.providerName);\n      });\n    document.getElementById(\n      'auth_providers_to_enable',\n    ).value = enabledProviderArray;\n  }\n\n  adjustAuthenticationOptions() {\n    if (this.inviteOnlyModeTarget.checked) {\n      document.getElementById('auth_providers_to_enable').value = '';\n      emailRegistrationCheckbox.checked = false;\n    } else {\n      emailRegistrationCheckbox.checked = true;\n    }\n  }\n  // AUTH PROVIDERS FUNCTIONS END\n\n  enabledProvidersWithMissingKeys() {\n    const providersWithMissingKeys = [];\n    document\n      .querySelectorAll('[data-enable-auth=\"true\"]')\n      .forEach((provider) => {\n        const { providerName } = provider.dataset;\n        if (\n          !document.getElementById(`site_config_${providerName}_key`).value ||\n          !document.getElementById(`site_config_${providerName}_secret`).value\n        ) {\n          providersWithMissingKeys.push(providerName);\n        }\n      });\n\n    return providersWithMissingKeys;\n  }\n\n  generateProvidersList(providers) {\n    const list = providers.reduce((html, provider) => {\n      return `${html}<li class=\"capitalize\">${provider}</li>`;\n    }, '');\n\n    return list;\n  }\n\n  missingAuthKeysModalBody(providers) {\n    return `\n      <p>You haven't filled out all of the required fields to enable the following authentication providers:</p>\n      <ul class=\"mb-0\">${this.generateProvidersList(providers)}</ul>\n      <p class=\"mb-0\">You may continue editing these authentication providers, or you may cancel.</p>\n    `;\n  }\n\n  submitForm() {\n    this.authSectionFormTarget.submit();\n  }\n\n  activateMissingKeysModal(providers) {\n    this.configModalAnchorTarget.innerHTML = adminModal({\n      title: 'Setup not complete',\n      body: this.missingAuthKeysModalBody(providers),\n      leftBtnText: 'Continue editing',\n      leftBtnAction: 'closeAdminModal',\n      rightBtnText: 'Cancel',\n      rightBtnAction: 'cancelAuthProviderEnable',\n      rightBtnClasses: 'crayons-btn--secondary',\n    });\n  }\n\n  configUpdatePrecheck(event) {\n    if (this.enabledProvidersWithMissingKeys().length > 0) {\n      event.preventDefault();\n      this.activateMissingKeysModal(this.enabledProvidersWithMissingKeys());\n    } else {\n      event.target.submit();\n    }\n  }\n\n  cancelAuthProviderEnable() {\n    const providers = this.enabledProvidersWithMissingKeys();\n\n    providers.forEach((provider) => {\n      const enabledIndicator = document.getElementById(\n        `${provider}-enabled-indicator`,\n      );\n      const authEnableButton = document.getElementById(`${provider}-auth-btn`);\n\n      authEnableButton.setAttribute('data-enable-auth', 'false');\n      enabledIndicator.classList.remove('visible');\n      this.listAuthToBeEnabled();\n      document\n        .getElementById(`${provider}-auth-settings`)\n        .classList.add('hidden');\n      document\n        .getElementById(`${provider}-auth-btn`)\n        .classList.remove('hidden');\n\n      this.closeAdminModal();\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}