"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _async = _interopRequireDefault(require("async"));

var _request = _interopRequireDefault(require("request"));

var _verror = _interopRequireDefault(require("verror"));

var _lodash = _interopRequireDefault(require("lodash.find"));

var _lodash2 = _interopRequireDefault(require("lodash.reduce"));

var _helpers = require("./helpers");

var _constants = require("./constants");

var HoneybadgerSourceMapPlugin =
/*#__PURE__*/
function () {
  function HoneybadgerSourceMapPlugin(_ref) {
    var apiKey = _ref.apiKey,
        assetsUrl = _ref.assetsUrl,
        _ref$revision = _ref.revision,
        revision = _ref$revision === void 0 ? "master" : _ref$revision,
        _ref$silent = _ref.silent,
        silent = _ref$silent === void 0 ? false : _ref$silent,
        _ref$ignoreErrors = _ref.ignoreErrors,
        ignoreErrors = _ref$ignoreErrors === void 0 ? false : _ref$ignoreErrors;
    (0, _classCallCheck2["default"])(this, HoneybadgerSourceMapPlugin);
    this.apiKey = apiKey;
    this.assetsUrl = assetsUrl;
    this.revision = revision;
    this.silent = silent;
    this.ignoreErrors = ignoreErrors;
    this.emittedAssets = new Map();
  }

  (0, _createClass2["default"])(HoneybadgerSourceMapPlugin, [{
    key: "assetEmitted",
    value: function assetEmitted(file, content, done) {
      this.emittedAssets.set(file, content);
      done();
    }
  }, {
    key: "afterEmit",
    value: function afterEmit(compilation, done) {
      var _this = this;

      var errors = (0, _helpers.validateOptions)(this);

      if (errors) {
        var _compilation$errors;

        (_compilation$errors = compilation.errors).push.apply(_compilation$errors, (0, _toConsumableArray2["default"])((0, _helpers.handleError)(errors)));

        return done();
      }

      this.uploadSourceMaps(compilation, function (err) {
        if (err) {
          if (!_this.ignoreErrors) {
            var _compilation$errors2;

            (_compilation$errors2 = compilation.errors).push.apply(_compilation$errors2, (0, _toConsumableArray2["default"])((0, _helpers.handleError)(err)));
          } else if (!_this.silent) {
            var _compilation$warnings;

            (_compilation$warnings = compilation.warnings).push.apply(_compilation$warnings, (0, _toConsumableArray2["default"])((0, _helpers.handleError)(err)));
          }
        }

        _this.emittedAssets.clear();

        done();
      });
    }
  }, {
    key: "apply",
    value: function apply(compiler) {
      if (compiler.hooks) {
        compiler.hooks.afterEmit.tapAsync(_constants.PLUGIN_NAME, this.afterEmit.bind(this));

        if (compiler.hooks.assetEmitted) {
          compiler.hooks.assetEmitted.tapAsync(_constants.PLUGIN_NAME, this.assetEmitted.bind(this));
        }
      } else {
        compiler.plugin('after-emit', this.afterEmit.bind(this));
      }
    }
  }, {
    key: "getAssets",
    value: function getAssets(compilation) {
      var _compilation$getStats = compilation.getStats().toJson(),
          chunks = _compilation$getStats.chunks;

      return (0, _lodash2["default"])(chunks, function (result, chunk) {
        var chunkName = chunk.names[0];
        var sourceFile = (0, _lodash["default"])(chunk.files, function (file) {
          return /\.js$/.test(file);
        });
        var sourceMap = (0, _lodash["default"])(chunk.files, function (file) {
          return /\.js\.map$/.test(file);
        });

        if (!sourceFile || !sourceMap) {
          return result;
        }

        return [].concat((0, _toConsumableArray2["default"])(result), [{
          sourceFile: sourceFile,
          sourceMap: sourceMap
        }]);
      }, []);
    }
  }, {
    key: "uploadSourceMap",
    value: function uploadSourceMap(compilation, _ref2, done) {
      var _this2 = this;

      var sourceFile = _ref2.sourceFile,
          sourceMap = _ref2.sourceMap;

      var req = _request["default"].post(_constants.ENDPOINT, function (err, res, body) {
        if (!err && res.statusCode === 201) {
          if (!_this2.silent) {
            console.info("Uploaded ".concat(sourceMap, " to Honeybadger API")); // eslint-disable-line no-console
          }

          return done();
        }

        var errMessage = "failed to upload ".concat(sourceMap, " to Honeybadger API");

        if (err) {
          return done(new _verror["default"](err, errMessage));
        }

        var result;

        try {
          var _JSON$parse = JSON.parse(body),
              error = _JSON$parse.error;

          result = new Error(error ? "".concat(errMessage, ": ").concat(error) : errMessage);
        } catch (parseErr) {
          result = new _verror["default"](parseErr, errMessage);
        }

        return done(result);
      });

      var form = req.form();
      form.append('api_key', this.apiKey);
      form.append('minified_url', "".concat(this.assetsUrl.toString().replace(/^\//, ''), "/").concat(sourceFile.replace(/^\//, '')));
      form.append('minified_file', this.emittedAssets.get(sourceFile) || compilation.assets[sourceFile].source(), {
        filename: sourceFile,
        contentType: 'application/javascript'
      });
      form.append('source_map', this.emittedAssets.get(sourceMap) || compilation.assets[sourceMap].source(), {
        filename: sourceMap,
        contentType: 'application/octet-stream'
      });
      form.append('revision', this.revision);
    }
  }, {
    key: "uploadSourceMaps",
    value: function uploadSourceMaps(compilation, done) {
      var assets = this.getAssets(compilation);
      var upload = this.uploadSourceMap.bind(this, compilation);

      _async["default"].each(assets, upload, function (err, results) {
        if (err) {
          return done(err);
        }

        return done(null, results);
      });
    }
  }]);
  return HoneybadgerSourceMapPlugin;
}();

module.exports = HoneybadgerSourceMapPlugin;