"use strict";

var _enzyme = require("enzyme");

var _react = _interopRequireDefault(require("react"));

var _Link = _interopRequireWildcard(require("../Link"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var LoadingSpinner = _Link.testExports.LoadingSpinner;
global.open = jest.fn();
describe('Link', function () {
  describe('Async link', function () {
    describe('when the link is clicked', function () {
      var wrapper;
      var mockOnFetchLink;
      beforeEach(function () {
        mockOnFetchLink = jest.fn();
        wrapper = (0, _enzyme.shallow)(_react.default.createElement(_Link.default, {
          onFetchLink: mockOnFetchLink
        }));
        wrapper.simulate('click');
      });
      it('should call the onFetchLink callback', function () {
        expect(mockOnFetchLink).toBeCalled();
      });
      it('should show a loading state', function () {
        expect(wrapper.find(LoadingSpinner).exists()).toBeTruthy();
      });
    });
    describe('when the link is currently loading, and receives the href', function () {
      var wrapper;
      var mockOnFetchLink;
      var href = 'https://timber.io';
      var target = '_blank';
      beforeEach(function () {
        mockOnFetchLink = jest.fn();
        wrapper = (0, _enzyme.shallow)(_react.default.createElement(_Link.default, {
          onFetchLink: mockOnFetchLink,
          target: target
        }));
        wrapper.setState({
          isLoading: true
        });
        wrapper.setProps({
          href: href
        });
      });
      it('should update the isLoading state to false', function () {
        expect(wrapper.state()).toEqual({
          isLoading: false
        });
      });
      it('should call window.open, with the current href and target', function () {
        expect(global.open).toBeCalledWith(href, target);
      });
    });
  });
});