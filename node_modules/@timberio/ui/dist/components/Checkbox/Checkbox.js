"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactEmotion = _interopRequireDefault(require("react-emotion"));

var _cleanElement = _interopRequireDefault(require("clean-element"));

var _objectPath = require("object-path");

var _helpers = require("../../helpers");

var _Icon = _interopRequireDefault(require("../Icon"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var cleaned = (0, _cleanElement.default)('label');
var Wrapper = (0, _helpers.system)(cleaned)(function (props) {
  return {
    display: 'flex',
    alignItems: 'center',
    position: 'relative',
    cursor: 'pointer',
    userSelect: 'none',
    verticalAlign: 'middle',
    '&:hover': {
      opacity: 0.8
    }
  };
});
var cleanedInput = (0, _cleanElement.default)('div');
var InputVirtual =
/*#__PURE__*/
(0, _reactEmotion.default)(cleanedInput, {
  target: "ewyabtn0"
})(function (props) {
  var _get;

  return _objectSpread({
    display: 'inline-block',
    position: 'relative',
    boxSizing: 'border-box',
    color: (0, _objectPath.get)(props, 'theme.colors.gray.0'),
    borderWidth: '1px',
    borderStyle: 'solid',
    borderColor: props.checked ? (0, _helpers.intentColor)(props, {
      intent: 'primary',
      shade: 3
    }) : (0, _objectPath.get)(props, 'theme.colors.gray.2'),
    background: props.checked ? (0, _helpers.intentColor)(props, {
      intent: 'primary',
      shade: 3
    }) : (0, _objectPath.get)(props, 'theme.colors.gray.0'),
    animation: props.checked && props.animated ? "".concat(_helpers.animations.bounce, " 200ms ease-out") : 'none'
  }, (0, _objectPath.get)((_get = {}, _defineProperty(_get, _helpers.SCALES.sm, {
    width: '20px',
    height: '20px',
    borderRadius: '5px'
  }), _defineProperty(_get, _helpers.SCALES.md, {
    width: '30px',
    height: '30px',
    borderRadius: '7px'
  }), _defineProperty(_get, _helpers.SCALES.lg, {
    width: '40px',
    height: '40px',
    borderRadius: '9px'
  }), _get), props.scale));
});
var Label = (0, _helpers.system)('span')(function (props) {
  return {
    color: (0, _objectPath.get)(props, 'theme.colors.gray.4')
  };
}); // Warning: Removed `VirtualInput` because browsers didn't like that

var Checkbox =
/*#__PURE__*/
function (_PureComponent) {
  _inherits(Checkbox, _PureComponent);

  function Checkbox(props) {
    var _this;

    _classCallCheck(this, Checkbox);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Checkbox).call(this, props));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onChange", function (evt) {
      var checked = _this.state.checked;
      evt.persist();

      _this.setState({
        checked: !checked
      });

      if (_this.props.onChange) {
        _this.props.onChange(!checked, evt);
      }
    });

    _this.state = {
      checked: props.checked
    };
    return _this;
  }

  _createClass(Checkbox, [{
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(_ref) {
      var checked = _ref.checked;

      if (checked !== this.props.checked && checked !== this.state.checked) {
        this.setState({
          checked: checked
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          label = _this$props.label,
          labelPos = _this$props.labelPos,
          labelProps = _this$props.labelProps,
          animated = _this$props.animated,
          scale = _this$props.scale,
          props = _objectWithoutProperties(_this$props, ["label", "labelPos", "labelProps", "animated", "scale"]);

      var checked = this.state.checked;
      return _react.default.createElement(Wrapper, _extends({}, props, {
        onClick: this.onChange
      }), labelPos === 'before' && _react.default.createElement(Label, _extends({
        mr: 10
      }, labelProps), label), _react.default.createElement(InputVirtual, {
        animated: animated,
        checked: checked,
        scale: scale
      }, checked && _react.default.createElement(_Icon.default, {
        name: "check",
        size: "100%"
      })), labelPos === 'after' && _react.default.createElement(Label, _extends({
        ml: 10
      }, labelProps), label));
    }
  }]);

  return Checkbox;
}(_react.PureComponent);

Checkbox.propTypes = {
  label: _propTypes.default.string,
  labelPos: _propTypes.default.oneOf(['before', 'after']),
  labelProps: _propTypes.default.object,
  animated: _propTypes.default.bool,
  checked: _propTypes.default.bool,
  onChange: _propTypes.default.func,
  scale: _propTypes.default.oneOf([_helpers.SCALES.sm, _helpers.SCALES.md, _helpers.SCALES.lg])
};
Checkbox.defaultProps = {
  labelPos: 'after',
  labelProps: {},
  animated: true,
  checked: false,
  scale: 'sm'
};
cleaned.propTypes = Checkbox.propTypes;
cleanedInput.propTypes = Checkbox.propTypes;
Checkbox.displayName = 'Checkbox';
var _default = Checkbox;
exports.default = _default;