"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _cleanElement = _interopRequireDefault(require("clean-element"));

var _objectPath = require("object-path");

var _helpers = require("../../helpers");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var cleaned = (0, _cleanElement.default)('div');
var Wrapper = (0, _helpers.system)(cleaned)(function (props) {
  return _objectSpread({
    position: 'relative',
    display: 'inline-block',
    width: '50px',
    borderRadius: '30px',
    cursor: 'pointer',
    boxShadow: '0 0 1px rgba(204, 204, 204, .8), 0 1px 3px rgba(222, 222, 222, .8)',
    background: (0, _objectPath.get)(props, 'theme.colors.gray.2'),
    '&:active > div': {
      opacity: 0.8
    }
  }, props.isOn && {
    background: (0, _objectPath.get)(props, 'theme.colors.green.1')
  });
});
var cleanedKnob = (0, _cleanElement.default)('div');
var Knob = (0, _helpers.system)(cleanedKnob)(function (props) {
  return _objectSpread({
    width: '25px',
    height: '25px',
    margin: '3px',
    borderRadius: '50%',
    background: (0, _objectPath.get)(props, 'theme.colors.gray.3'),
    transition: 'transform 100ms',
    transitionTimingFunction: 'ease-out'
  }, props.isOn && {
    background: (0, _objectPath.get)(props, 'theme.colors.green.3'),
    transform: 'translateX(19px)' // width - (margin * 2)

  });
});

var Switch =
/*#__PURE__*/
function (_PureComponent) {
  _inherits(Switch, _PureComponent);

  function Switch(props) {
    var _this;

    _classCallCheck(this, Switch);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Switch).call(this, props));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "toggle", function () {
      var isOn = !_this.state.isOn;

      _this.props.onChange(isOn);

      _this.setState({
        isOn: isOn
      });
    });

    _this.state = {
      isOn: props.isOn
    };
    return _this;
  }

  _createClass(Switch, [{
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(_ref) {
      var isOn = _ref.isOn;

      if (isOn !== undefined) {
        this.setState({
          isOn: isOn
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var isOn = this.state.isOn;
      return _react.default.createElement(Wrapper, _extends({}, this.props, {
        isOn: isOn,
        onClick: this.toggle
      }), _react.default.createElement(Knob, {
        isOn: isOn
      }));
    }
  }]);

  return Switch;
}(_react.PureComponent);

Switch.defaultProps = {
  isOn: false,
  onChange: function onChange() {}
};
Switch.propTypes = {
  isOn: _propTypes.default.bool,
  onChange: _propTypes.default.func
};
cleaned.propTypes = Switch.propTypes;
cleanedKnob.propTypes = Switch.propTypes;
Switch.displayName = 'Switch';
var _default = Switch;
exports.default = _default;