"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _Overlay = _interopRequireDefault(require("../Overlay"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Clipboard =
/*#__PURE__*/
function (_PureComponent) {
  _inherits(Clipboard, _PureComponent);

  function Clipboard() {
    var _this;

    _classCallCheck(this, Clipboard);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Clipboard).call(this));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "copyToClipboard", function (e) {
      e.stopPropagation();
      var textArea = document.createElement('textarea'); // Worth checking out https://clipboardjs.com/ if this causues issues
      // *** This styling is an extra step which is likely not required. ***
      //
      // Why is it here? To ensure:
      // 1. the element is able to have focus and selection.
      // 2. if element was to flash render it has minimal visual impact.
      // 3. less flakyness with selection and copying which **might** occur if
      //    the textarea element is not visible.
      //
      // The likelihood is the element won't even render, not even a flash,
      // so some of these are just precautions. However in IE the element
      // is visible whilst the popup box asking the user for permission for
      // the web page to copy to the clipboard.
      // Place in top-left corner of screen regardless of scroll position.

      textArea.style.position = 'fixed';
      textArea.style.top = 0;
      textArea.style.left = 0; // Ensure it has a small width and height. Setting to 1px / 1em
      // doesn't work as this gives a negative w/h on some browsers.

      textArea.style.width = '2em';
      textArea.style.height = '2em'; // We don't need padding, reducing the size if it does flash render.

      textArea.style.padding = 0; // Clean up any borders.

      textArea.style.border = 'none';
      textArea.style.outline = 'none';
      textArea.style.boxShadow = 'none'; // Avoid flash of white box if rendered for any reason.

      textArea.style.background = 'transparent';
      textArea.value = _this.props.value;
      document.body.appendChild(textArea);
      textArea.select();

      try {
        document.execCommand('copy');
      } catch (err) {
        console.error('Oops, unable to copy');
      }

      document.body.removeChild(textArea); // show copied overlay

      _this.setState({
        copied: true
      }, function () {
        var dur = _this._duration + 1000; // overlay takes 1s to fade out

        setTimeout(function () {
          return _this.setState({
            copied: false
          });
        }, dur);
      });
    });

    _this._duration = 1500;
    _this.state = {
      copied: false
    };
    return _this;
  }

  _createClass(Clipboard, [{
    key: "render",
    value: function render() {
      return _react.default.createElement("span", {
        onClick: this.copyToClipboard,
        style: this.props.style
      }, this.props.children, this.state.copied && _react.default.createElement(_Overlay.default, {
        icon: "check-circle-animated",
        title: "Copied!",
        dismiss: this._duration
      }));
    }
  }]);

  return Clipboard;
}(_react.PureComponent);

Clipboard.propTypes = {
  value: _propTypes.default.string
};
var _default = Clipboard;
exports.default = _default;