"use strict";

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _Theme = _interopRequireDefault(require("../../Theme"));

var _Table = _interopRequireWildcard(require("../Table"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ToggleButton = _Table.testExports.ToggleButton,
    EmptyHeaderCell = _Table.testExports.EmptyHeaderCell;
var columns = [{
  header: 'First Name',
  accessor: function accessor(row) {
    return row.firstName;
  },
  sort: function sort(a, b) {
    return a < b ? -1 : 1;
  },
  sortBy: function sortBy(row) {
    return row.firstName;
  },
  minWidth: 100,
  maxWidth: 150
}, {
  header: 'Last Name',
  accessor: function accessor(row) {
    return row.lastName;
  },
  minWidth: 100
}, // Custom Renderer
{
  header: 'Age',
  accessor: function accessor(row) {
    return row.age;
  },
  width: 75,
  renderer: function renderer(_ref) {
    var value = _ref.value;
    return _react.default.createElement("i", null, value);
  }
}, // Column styles
{
  header: 'Favorite Color',
  accessor: function accessor(row) {
    return row.color;
  },
  minWidth: 200,
  styles: {
    color: 'gray'
  }
}];
var data = [{
  firstName: 'Mark',
  lastName: 'Corwin',
  age: 28,
  color: 'red'
}, {
  firstName: 'Ben',
  lastName: 'Johnson',
  age: 30,
  color: 'purple'
}, {
  firstName: 'Jason',
  lastName: 'Maurer',
  age: 25,
  color: 'blue'
}, {
  firstName: 'Zach',
  lastName: 'Sherman',
  age: 26,
  color: 'green'
}, {
  firstName: 'John',
  lastName: 'Doe',
  age: 1005,
  color: 'Really really long color'
}];
describe('Table', function () {
  describe('when the Table has a renderChildRow function defined', function () {
    var wrapper;
    var mockRenderChildRow;
    beforeEach(function () {
      mockRenderChildRow = jest.fn();
      wrapper = (0, _enzyme.mount)(_react.default.createElement(_Theme.default, null, _react.default.createElement(_Table.default, {
        columns: columns,
        data: data,
        renderChildRow: mockRenderChildRow
      })));
    });
    it('should call the render function for each row', function () {
      expect(mockRenderChildRow.mock.calls.length).toBe(data.length);
    });
    it('should render toggle buttons in each row to reveal the child rows', function () {
      expect(wrapper.find(ToggleButton).length).toBe(data.length);
    });
    it('should add an empty cell in the header to align with the toggle buttons', function () {
      expect(wrapper.find(EmptyHeaderCell).exists()).toBeTruthy();
    });
  });
});