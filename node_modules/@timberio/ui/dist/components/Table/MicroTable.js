"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var defaultFlex = 1;

var defaultSort = function defaultSort(a, b) {
  return String(a).localeCompare(b, undefined, {
    numeric: true
  });
};

var stylesFromColumn = function stylesFromColumn(_ref) {
  var width = _ref.width,
      maxWidth = _ref.maxWidth,
      minWidth = _ref.minWidth,
      styles = _ref.styles;
  var hasWidth = typeof width !== 'undefined';
  var hasMinWidth = typeof minWidth !== 'undefined';
  return _objectSpread({
    boxSizing: 'border-box',
    wordBreak: 'break-word',
    flex: "".concat(hasWidth ? width : defaultFlex, " 0 auto"),
    width: "".concat(hasWidth ? width : hasMinWidth ? minWidth : defaultFlex, "px"),
    maxWidth: "".concat(hasWidth ? width : maxWidth, "px")
  }, styles);
};

var MicroTable =
/*#__PURE__*/
function (_React$Component) {
  _inherits(MicroTable, _React$Component);

  function MicroTable() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, MicroTable);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(MicroTable)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getColumns", function () {
      var columns = _this.props.columns;
      return columns;
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getTableProps", function () {
      var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref2$style = _ref2.style,
          style = _ref2$style === void 0 ? {} : _ref2$style;

      return {
        style: _objectSpread({}, style)
      };
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getHeaderProps", function () {
      var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref3$style = _ref3.style,
          style = _ref3$style === void 0 ? {} : _ref3$style;

      return {
        style: _objectSpread({}, _this.getRowStyles(), style)
      };
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getHeaderCells", function () {
      var columns = _this.getColumns();

      var _this$getSorting = _this.getSorting(),
          index = _this$getSorting.index,
          desc = _this$getSorting.desc;

      return columns.map(function (column, i) {
        return {
          column: column,
          sorted: index === i,
          sortedDesc: index === i && desc,
          getHeaderCellProps: function getHeaderCellProps() {
            var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
                _ref4$key = _ref4.key,
                key = _ref4$key === void 0 ? i : _ref4$key,
                _ref4$style = _ref4.style,
                style = _ref4$style === void 0 ? {} : _ref4$style,
                _onClick = _ref4.onClick;

            return {
              key: key,
              style: _objectSpread({}, stylesFromColumn(column), style),
              onClick: function onClick(e) {
                e.persist();

                _this.sortByColumnIndex(i);

                if (_onClick) {
                  _onClick(e);
                }
              }
            };
          }
        };
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getRows", function () {
      var columns = _this.props.columns;

      var sortedData = _this.getSortedData();

      return sortedData.map(function (row, i) {
        return {
          row: row,
          getRowProps: function getRowProps() {
            var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
                _ref5$key = _ref5.key,
                key = _ref5$key === void 0 ? "row-".concat(i) : _ref5$key,
                _ref5$style = _ref5.style,
                style = _ref5$style === void 0 ? {} : _ref5$style;

            return {
              key: key,
              index: i,
              style: _objectSpread({}, _this.getRowStyles(), style)
            };
          },
          cells: columns.map(function (column, idx) {
            return {
              column: column,
              value: column.accessor ? column.accessor(row) : row,
              getCellProps: function getCellProps() {
                var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
                    _ref6$key = _ref6.key,
                    key = _ref6$key === void 0 ? idx : _ref6$key,
                    _ref6$style = _ref6.style,
                    style = _ref6$style === void 0 ? {} : _ref6$style;

                return {
                  key: key,
                  style: _objectSpread({}, stylesFromColumn(column), style)
                };
              }
            };
          })
        };
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getSorting", function () {
      var _this$props$sortBy = _this.props.sortBy;
      _this$props$sortBy = _this$props$sortBy === void 0 ? {
        index: 0
      } : _this$props$sortBy;
      var index = _this$props$sortBy.index,
          desc = _this$props$sortBy.desc;

      var columns = _this.getColumns();

      var column = columns[index];
      return {
        column: column,
        index: index,
        desc: desc
      };
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getSortedData", function () {
      var data = _this.props.data;

      var _this$getSorting2 = _this.getSorting(),
          column = _this$getSorting2.column,
          desc = _this$getSorting2.desc;

      var sortedData = data.map(function (row, index) {
        return _objectSpread({
          index: index
        }, row);
      }).sort(function (a, b) {
        var aVal;
        var bVal;

        if (column.sortBy) {
          aVal = column.sortBy(a);
          bVal = column.sortBy(b);
        } else if (column.accessor) {
          aVal = column.accessor(a);
          bVal = column.accessor(b);
        } else {
          aVal = a;
          bVal = b;
        }

        return column.sort ? column.sort(aVal, bVal) : defaultSort(aVal, bVal);
      });

      if (desc) {
        return sortedData.reverse();
      }

      return sortedData;
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getRowStyles", function () {
      var columns = _this.getColumns();

      var width = 0;
      columns.forEach(function (column) {
        if (column.width) {
          width += column.width;
        } else if (column.minWidth) {
          width += column.minWidth;
        } else {
          width += defaultFlex;
        }
      });
      return {
        display: 'flex',
        minWidth: "".concat(width, "px")
      };
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "sortByColumnIndex", function (index) {
      var onSortChange = _this.props.onSortChange;

      var _this$getSorting3 = _this.getSorting(),
          oldIndex = _this$getSorting3.index,
          desc = _this$getSorting3.desc;

      if (onSortChange) {
        onSortChange({
          index: index,
          desc: oldIndex === index ? !desc : false
        });
      }
    });

    return _this;
  }

  _createClass(MicroTable, [{
    key: "render",
    value: function render() {
      var children = this.props.children;
      var getTableProps = this.getTableProps,
          getHeaderProps = this.getHeaderProps;
      var headerCells = this.getHeaderCells();
      var rows = this.getRows();
      var sorting = this.getSorting();
      return children({
        getTableProps: getTableProps,
        getHeaderProps: getHeaderProps,
        headerCells: headerCells,
        rows: rows,
        sorting: sorting
      });
    }
  }]);

  return MicroTable;
}(_react.default.Component);

exports.default = MicroTable;

_defineProperty(MicroTable, "propTypes", {
  data: _propTypes.default.array.isRequired,
  columns: _propTypes.default.array.isRequired,
  sortBy: _propTypes.default.shape({
    id: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
    desc: _propTypes.default.bool
  }),
  onSortChange: _propTypes.default.func
});