"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactDom = require("react-dom");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactEmotion = _interopRequireDefault(require("react-emotion"));

var _helpers = require("../../helpers");

var _root = require("../../helpers/root");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Wrapper =
/*#__PURE__*/
(0, _reactEmotion.default)('span', {
  target: "ev0a3tu0"
})({
  display: 'inline-block',
  position: 'relative'
});
var cleaned = (0, _helpers.clean)('span');
var Container = (0, _helpers.system)(cleaned)(function (props) {
  return _objectSpread({
    display: 'inline-block',
    position: 'fixed',
    top: props.top,
    bottom: props.bottom,
    left: props.left,
    right: props.right,
    zIndex: 9999,
    background: 'rgba(0, 0, 0, 0.85)',
    color: '#ffffff',
    padding: '8px',
    fontSize: '.8rem',
    borderRadius: '5px',
    boxShadow: '0 0 2px rgba(0, 0, 0, .16), 0 5px 9px rgba(0, 0, 0, .12)',
    opacity: props.visible ? 1 : 0,
    pointerEvents: props.visible ? 'all' : 'none',
    textAlign: 'center'
  }, props.animated && _objectSpread({
    transition: 'opacity 150ms',
    transitionDelay: "".concat(props.delay || 0, "ms"),
    perspective: '100px',
    transformStyle: 'preserve-3d',
    WebkitBackfaceVisibility: 'hidden',
    animationDuration: '200ms',
    animationDelay: "".concat(props.delay || 0, "ms"),
    animationTimingFunction: 'ease-out'
  }, props.placement === 'top' && {
    transformOrigin: '50% 100%',
    animationName: props.visible && _helpers.animations.flipUpX
  }, props.placement === 'bottom' && {
    transformOrigin: '50% 0',
    animationName: props.visible && _helpers.animations.flipUpX
  }, props.placement === 'left' && {
    transformOrigin: '100% 50%',
    animationName: props.visible && _helpers.animations.flipUpY
  }, props.placement === 'right' && {
    transformOrigin: '0 50%',
    animationName: props.visible && _helpers.animations.flipUpY
  }), {
    '& div': {
      marginLeft: props.positionOffset.left
    }
  });
});
var CaretDown = (0, _helpers.system)('div')({
  position: 'absolute',
  bottom: '-8px',
  left: '50%',
  transform: 'translateX(-50%)',
  width: 0,
  height: 0,
  borderLeft: '8px solid transparent',
  borderRight: '8px solid transparent',
  borderTop: '8px solid rgba(0, 0, 0, 0.85)'
});
var CaretUp = (0, _helpers.system)('div')({
  position: 'absolute',
  top: '-8px',
  left: '50%',
  transform: 'translateX(-50%)',
  width: 0,
  height: 0,
  borderLeft: '8px solid transparent',
  borderRight: '8px solid transparent',
  borderBottom: '8px solid rgba(0, 0, 0, 0.85)'
});
var CaretRight = (0, _helpers.system)('div')({
  position: 'absolute',
  right: '-8px',
  top: '50%',
  transform: 'translateY(-50%)',
  width: 0,
  height: 0,
  borderTop: '8px solid transparent',
  borderBottom: '8px solid transparent',
  borderLeft: '8px solid rgba(0, 0, 0, 0.85)'
});
var CaretLeft = (0, _helpers.system)('div')({
  position: 'absolute',
  left: '-8px',
  top: '50%',
  transform: 'translateY(-50%)',
  width: 0,
  height: 0,
  borderTop: '8px solid transparent',
  borderBottom: '8px solid transparent',
  borderRight: '8px solid rgba(0, 0, 0, 0.85)'
});

var Tooltip =
/*#__PURE__*/
function (_PureComponent) {
  _inherits(Tooltip, _PureComponent);

  function Tooltip(props) {
    var _this;

    _classCallCheck(this, Tooltip);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Tooltip).call(this, props));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleMouseEnter", function () {
      _this.getBounds().then(function () {
        _this.setState({
          visible: true
        });
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleMouseLeave", function () {
      _this.setState({
        visible: false
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleClick", function () {
      _this.setState({
        visible: !_this.state.visible
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getBounds", function () {
      return new Promise(function (resolve) {
        var bounds = {
          container: _this._self.getBoundingClientRect(),
          tip: _this._tip.getBoundingClientRect(),
          maxWidth: window.innerWidth,
          maxHeight: window.innerHeight
        };

        _this.setState({
          bounds: bounds
        }, function () {
          resolve(bounds);
        });
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "calculatePosition", function (placement) {
      var bounds = _this.state.bounds;
      var margin = 2;
      var pos = {};
      var offsets = {};

      switch (placement) {
        case 'right':
          pos.left = bounds.container.x + bounds.container.width + margin + 8;
          pos.top = bounds.container.y + bounds.container.height / 2 - bounds.tip.height / 2;
          break;

        case 'left':
          pos.left = bounds.container.x - bounds.tip.width - margin - 8;
          pos.top = bounds.container.y + bounds.container.height / 2 - bounds.tip.height / 2;
          break;

        case 'bottom':
          pos.left = bounds.container.x + bounds.container.width / 2 - bounds.tip.width / 2;
          pos.top = bounds.container.y + bounds.container.height + margin + 8;
          break;

        case 'top':
        default:
          pos.left = bounds.container.x + bounds.container.width / 2 - bounds.tip.width / 2;
          pos.top = bounds.container.y - bounds.tip.height - margin - 8;
          break;
      } // if no space on left, put on right


      if (placement === 'left' && pos.left < 0) {
        console.warn('No room on left for the tooltip! Putting on right.'); // return this.calculatePosition('right')
      } // if no space on right, put on left


      if (placement === 'right' && pos.left + bounds.tip.width > bounds.maxWidth) {
        console.warn('No room on right for the tooltip! Putting on left.'); // return this.calculatePosition('left')
      } // if no space above, put below


      if (placement === 'top' && pos.top < 0) {
        console.warn('No room on top for the tooltip! Putting on bottom.'); // return this.calculatePosition('bottom')
      } // if no space below, put above


      if (placement === 'bottom' && pos.top + bounds.tip.height > bounds.maxHeight) {
        console.warn('No room on bottom for the tooltip! Putting on top.'); // return this.calculatePosition('top')
      } // if above/below and no space on left, move to right


      if (pos.left < 0) {
        offsets.left = pos.left - 20;
        pos.left = 20;
      } // if above/below and no space on right, move to left


      if (pos.left + bounds.tip.width > bounds.maxWidth) {
        offsets.left = pos.left + bounds.tip.width + 20 - bounds.maxWidth;
        pos.left = bounds.maxWidth - bounds.tip.width - 20;
      }

      return {
        placement: placement,
        offsets: offsets,
        coords: pos
      };
    });

    _this.el = document.createElement('div');
    _this.state = {
      visible: props.visible,
      bounds: {
        container: {},
        tip: {}
      }
    };
    return _this;
  }

  _createClass(Tooltip, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      (0, _root.getRootEl)().appendChild(this.el);
      this.getBounds();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      (0, _root.getRootEl)().removeChild(this.el);
    }
  }, {
    key: "componentWillReveiveProps",
    value: function componentWillReveiveProps(nextProps) {
      if (nextProps.visible !== undefined) {
        this.getBounds();
        this.setState({
          visible: nextProps.visible
        });
      }
    }
  }, {
    key: "componentWillUpdate",
    value: function componentWillUpdate(props) {
      if (!props.visible && this.props.visible) {
        this.getBounds();
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          message = _this$props.message,
          animated = _this$props.animated,
          delay = _this$props.delay,
          placement = _this$props.placement,
          caretProps = _this$props.caretProps,
          children = _this$props.children,
          wrapperProps = _this$props.wrapperProps,
          props = _objectWithoutProperties(_this$props, ["message", "animated", "delay", "placement", "caretProps", "children", "wrapperProps"]);

      var visible = this.state.visible;
      var position = this.calculatePosition(placement);
      return _react.default.createElement(Wrapper, _extends({
        innerRef: function innerRef(ref) {
          return _this2._self = ref;
        },
        onClick: this.handleClick,
        onMouseEnter: this.handleMouseEnter,
        onMouseLeave: this.handleMouseLeave
      }, wrapperProps), (0, _reactDom.createPortal)(_react.default.createElement(Container, _extends({}, props, position.coords, {
        positionOffset: position.offsets,
        refGetter: function refGetter(ref) {
          return _this2._tip = ref;
        },
        animated: animated,
        delay: delay,
        visible: visible,
        placement: position.placement
      }), message, position.placement === 'top' && _react.default.createElement(CaretDown, caretProps), position.placement === 'bottom' && _react.default.createElement(CaretUp, caretProps), position.placement === 'left' && _react.default.createElement(CaretRight, caretProps), position.placement === 'right' && _react.default.createElement(CaretLeft, caretProps)), this.el), children);
    }
  }]);

  return Tooltip;
}(_react.PureComponent);

Tooltip.defaultProps = {
  visible: false,
  message: '',
  animated: true,
  delay: 0,
  placement: 'top',
  caretProps: {},
  wrapperProps: {},
  isVisibleDuringResize: false
};
Tooltip.propTypes = {
  visible: _propTypes.default.bool,
  message: _propTypes.default.string,
  animated: _propTypes.default.bool,
  delay: _propTypes.default.number,
  placement: _propTypes.default.oneOf(['top', 'bottom', 'left', 'right']),
  caretProps: _propTypes.default.object,
  positionOffset: _propTypes.default.object,
  wrapperProps: _propTypes.default.object,
  isVisibleDuringResize: _propTypes.default.bool
};
cleaned.propTypes = Tooltip.propTypes;
Tooltip.displayName = 'Tooltip';
var _default = Tooltip;
exports.default = _default;