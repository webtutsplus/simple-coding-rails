"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _objectPath = require("object-path");

var _helpers = require("../../helpers");

var _Label = _interopRequireDefault(require("../Label"));

var _Error = _interopRequireDefault(require("../Error"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var cleaned = (0, _helpers.clean)('div');
var Wrapper = (0, _helpers.system)(cleaned)(function (props) {
  return {
    position: 'relative'
  };
});

var getStyles = function getStyles(props) {
  return {
    color: (0, _objectPath.get)(props, 'theme.colors.gray.6'),
    fontSize: '14px',
    padding: '.75rem',
    paddingLeft: props.icon ? '30px' : '.75rem',
    outline: 'none',
    boxShadow: 'none',
    lineHeight: '1rem',
    borderWidth: 1,
    borderStyle: 'solid',
    borderColor: props.errors ? (0, _objectPath.get)(props, 'theme.colors.red.2') : (0, _objectPath.get)(props, 'theme.colors.gray.2'),
    borderRadius: 4,
    width: '100%',
    '::placeholder': {
      color: (0, _objectPath.get)(props, 'theme.colors.gray.3')
    },
    '&:focus': {
      borderColor: props.errors ? (0, _objectPath.get)(props, 'theme.colors.red.2') : (0, _objectPath.get)(props, 'theme.colors.purple.4')
    }
  };
};

var cleanedTextArea = (0, _helpers.clean)('textarea');
var TextBox = (0, _helpers.system)(cleanedTextArea)(function (props) {
  return _objectSpread({}, getStyles(props));
});

var Textarea =
/*#__PURE__*/
function (_Component) {
  _inherits(Textarea, _Component);

  function Textarea() {
    _classCallCheck(this, Textarea);

    return _possibleConstructorReturn(this, _getPrototypeOf(Textarea).apply(this, arguments));
  }

  _createClass(Textarea, [{
    key: "renderLabel",
    // Use the label prop if it exists, otherwise fall back to name
    value: function renderLabel() {
      var _this$props = this.props,
          hideLabel = _this$props.hideLabel,
          label = _this$props.label,
          name = _this$props.name;
      if (hideLabel || !label && !name) return null;
      return _react.default.createElement(_Label.default, {
        htmlFor: name
      }, label || name);
    }
  }, {
    key: "renderError",
    value: function renderError() {
      var _this$props2 = this.props,
          showErrorMessage = _this$props2.showErrorMessage,
          errors = _this$props2.errors;
      if (!showErrorMessage || !errors) return null;
      return _react.default.createElement(_Error.default, null, errors);
    }
  }, {
    key: "renderTextArea",
    value: function renderTextArea() {
      var _this = this;

      var _this$props3 = this.props,
          name = _this$props3.name,
          placeholder = _this$props3.placeholder,
          value = _this$props3.value,
          onChange = _this$props3.onChange,
          onBlur = _this$props3.onBlur,
          errors = _this$props3.errors,
          autoFocus = _this$props3.autoFocus,
          textAreaProps = _this$props3.textAreaProps,
          type = _this$props3.type;
      var props = {
        name: name,
        placeholder: placeholder,
        value: value || '',
        onChange: onChange,
        onBlur: onBlur,
        errors: errors,
        autoFocus: autoFocus,
        type: type,
        refGetter: function refGetter(r) {
          return _this.textarea = r;
        }
      };
      return _react.default.createElement(TextBox, _extends({}, props, textAreaProps));
    }
  }, {
    key: "render",
    value: function render() {
      return _react.default.createElement(Wrapper, this.props, this.renderLabel(), _react.default.createElement("div", {
        style: {
          position: 'relative'
        }
      }, this.renderError(), this.renderTextArea()));
    }
  }]);

  return Textarea;
}(_react.Component);

Textarea.propTypes = {
  placeholder: _propTypes.default.string,
  name: _propTypes.default.string,
  label: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object]),
  hideLabel: _propTypes.default.bool,
  textAreaProps: _propTypes.default.object,
  autoFocus: _propTypes.default.bool,
  showErrorMessage: _propTypes.default.bool,
  errors: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.string, _propTypes.default.array])
};
Textarea.defaultProps = {
  name: null,
  label: null,
  hideLabel: false,
  placeholder: '',
  textAreaProps: {},
  errors: null,
  showErrorMessage: false,
  autoFocus: false
};
cleaned.propTypes = Textarea.propTypes;
Textarea.displayName = 'Textarea';
var _default = Textarea;
exports.default = _default;