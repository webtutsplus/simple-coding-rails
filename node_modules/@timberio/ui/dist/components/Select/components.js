"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FilterableInput = exports.Input = exports.CheckboxReplace = exports.CheckboxOption = exports.Option = void 0;

var _react = _interopRequireDefault(require("react"));

var _reactEmotion = _interopRequireDefault(require("react-emotion"));

var _reactSelect = require("react-select");

var _MenuItem = _interopRequireDefault(require("../MenuItem"));

var _Icon = _interopRequireDefault(require("../Icon"));

var _Checkbox = _interopRequireDefault(require("../Checkbox"));

var _helpers = require("../../helpers");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var Option = function Option(_ref) {
  var children = _ref.children,
      data = _ref.data,
      innerProps = _ref.innerProps,
      isFocused = _ref.isFocused,
      isSelected = _ref.isSelected;

  // https://github.com/JedWatson/react-select/issues/2599
  var innerRef = innerProps.innerRef,
      inner = _objectWithoutProperties(innerProps, ["innerRef"]);

  var styles = {};

  if (isFocused) {
    styles = {
      bg: 'gray.2',
      color: 'purple.3'
    };
  }

  if (isSelected) {
    styles = {
      bg: 'purple.3',
      color: 'gray.0'
    };
  }

  return _react.default.createElement(_MenuItem.default, _extends({}, inner, {
    icon: data.icon
  }, styles), children);
};

exports.Option = Option;

var CheckboxOption = function CheckboxOption(_ref2) {
  var children = _ref2.children,
      data = _ref2.data,
      isFocused = _ref2.isFocused,
      isSelected = _ref2.isSelected,
      innerProps = _ref2.innerProps,
      selectOption = _ref2.selectOption,
      rest = _objectWithoutProperties(_ref2, ["children", "data", "isFocused", "isSelected", "innerProps", "selectOption"]);

  var innerRef = innerProps.innerRef,
      inner = _objectWithoutProperties(innerProps, ["innerRef"]);

  var styles = {};

  if (isFocused) {
    styles = {
      bg: 'gray.2',
      color: 'purple.3'
    };
  }

  return _react.default.createElement(_MenuItem.default, _extends({}, inner, styles), _react.default.createElement(_Checkbox.default, {
    checked: isSelected,
    scale: "sm",
    animated: false
  }), _react.default.createElement(_Icon.default, {
    name: data.icon,
    mx: 2,
    size: 15,
    fallback: "box"
  }), children);
}; // Special checkbox option that appends when a checkbox is selected
// and fully replaces the query when the outer option is clicked


exports.CheckboxOption = CheckboxOption;

var CheckboxReplace = function CheckboxReplace(_ref3) {
  var children = _ref3.children,
      data = _ref3.data,
      isFocused = _ref3.isFocused,
      isSelected = _ref3.isSelected,
      innerProps = _ref3.innerProps,
      selectOption = _ref3.selectOption,
      props = _objectWithoutProperties(_ref3, ["children", "data", "isFocused", "isSelected", "innerProps", "selectOption"]);

  var innerRef = innerProps.innerRef,
      inner = _objectWithoutProperties(innerProps, ["innerRef"]);

  var styles = {};

  if (isFocused) {
    styles = {
      bg: 'gray.2',
      color: 'purple.3'
    };
  }

  return _react.default.createElement(_MenuItem.default, _extends({}, inner, styles, {
    onClick: function onClick() {
      return props.setValue([{
        value: props.value,
        label: props.label
      }]);
    }
  }), _react.default.createElement(_Checkbox.default, {
    checked: isSelected,
    scale: "sm",
    animated: false,
    onChange: function onChange(val, e) {
      e.stopPropagation();
      var nextValue = val ? props.getValue().concat({
        value: props.value,
        label: props.label
      }) : props.getValue().filter(function (v) {
        return v.value !== props.value;
      });
      props.setValue(nextValue);
    }
  }), _react.default.createElement(_Icon.default, {
    name: data.icon,
    mx: 2,
    size: 15,
    fallback: "box"
  }), children);
};

exports.CheckboxReplace = CheckboxReplace;

var Input = function Input(props) {
  return _react.default.createElement(_reactSelect.components.Input, props);
};

exports.Input = Input;
var InputWrapper =
/*#__PURE__*/
(0, _reactEmotion.default)('div', {
  target: "er7zlmu0"
})(function (props) {
  return {
    background: (0, _helpers.fromTheme)('colors.gray.1', props),
    borderRadius: '5px',
    position: 'absolute',
    zIndex: 100,
    top: 50,
    width: '100%',
    height: 35,
    input: {
      padding: '7px !important',
      width: '100% !important'
    }
  };
}); // TODO: Figure out how to hide this input when the menu is closed

var FilterableInput = function FilterableInput(props) {
  return _react.default.createElement(InputWrapper, null, _react.default.createElement(_reactSelect.components.Input, props));
};

exports.FilterableInput = FilterableInput;