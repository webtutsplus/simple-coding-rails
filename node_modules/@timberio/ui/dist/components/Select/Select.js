"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactSelect = _interopRequireDefault(require("react-select"));

var _emotionTheming = require("emotion-theming");

var _cleanElement = _interopRequireDefault(require("clean-element"));

var _helpers = require("../../helpers");

var _Label = _interopRequireDefault(require("../Label"));

var _components = require("./components");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var cleaned = (0, _cleanElement.default)('div');
var Wrapper = (0, _helpers.system)(cleaned)(function (props) {
  return {
    position: 'relative'
  };
});

var Select =
/*#__PURE__*/
function (_Component) {
  _inherits(Select, _Component);

  function Select(props) {
    var _this;

    _classCallCheck(this, Select);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Select).call(this, props));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleKeyDown", function (evt) {
      var _this$state = _this.state,
          _this$state$value = _this$state.value,
          value = _this$state$value === void 0 ? [] : _this$state$value,
          inputValue = _this$state.inputValue;

      if (!inputValue) {
        return;
      }

      switch (evt.key) {
        case 'Enter':
        case 'Tab':
        case ',':
          {
            evt.preventDefault();

            var newValue = _toConsumableArray(value).concat([{
              label: inputValue,
              value: inputValue
            }]);

            _this.setState({
              inputValue: '',
              value: newValue
            }, function () {
              _this.props.onChange(newValue);
            });

            break;
          }

        default:
          false;
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleChange", function (value) {
      _this.props.onChange(value);

      _this.setState({
        value: value
      });
    });

    _this.state = {
      value: props.value,
      inputValue: ''
    };
    return _this;
  }

  _createClass(Select, [{
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(_ref) {
      var value = _ref.value;

      if (value) {
        this.setState({
          value: value
        });
      }
    }
  }, {
    key: "getStyles",
    value: function getStyles() {
      var _this$props = this.props,
          singleValueStyles = _this$props.singleValueStyles,
          multiValueStyles = _this$props.multiValueStyles,
          controlStyles = _this$props.controlStyles,
          menuStyles = _this$props.menuStyles,
          inputStyles = _this$props.inputStyles,
          placeholderStyles = _this$props.placeholderStyles,
          showFilterInMenu = _this$props.showFilterInMenu,
          isDisabled = _this$props.isDisabled,
          theme = _this$props.theme;
      return {
        control: function control(base) {
          return _objectSpread({}, base, {
            padding: 4,
            background: 'white',
            borderRadius: '5px',
            borderWidth: 1,
            borderStyle: 'solid',
            borderColor: theme.colors.gray[2]
          }, isDisabled && {
            background: theme.colors.gray[2]
          }, {
            cursor: 'pointer'
          }, controlStyles);
        },
        menu: function menu(base) {
          return _objectSpread({
            background: '#fff',
            marginTop: '10px',
            padding: '5px 0',
            borderRadius: '4px',
            boxShadow: '0 0 2px rgba(0, 0, 0, .16), 0 5px 9px rgba(0, 0, 0, .12)',
            position: 'absolute',
            width: '100%',
            zIndex: 99
          }, showFilterInMenu && {
            paddingTop: 50
          }, menuStyles);
        },
        input: function input(base) {
          return _objectSpread({}, base, inputStyles);
        },
        multiValue: function multiValue(base) {
          return _objectSpread({}, base, {
            background: theme.colors.gray[1],
            margin: '0 3px',
            borderRadius: '4px',
            boxShadow: '0 0 1px rgba(204, 204, 204, .8), 0 1px 3px rgba(222, 222, 222, .8)'
          }, multiValueStyles);
        },
        singleValue: function singleValue(base) {
          return _objectSpread({}, base, {
            overflow: 'visible'
          }, singleValueStyles);
        },
        placeholder: function placeholder(base) {
          return _objectSpread({}, base, {
            overflow: 'visible',
            color: theme.colors.gray[3]
          }, placeholderStyles);
        }
      };
    }
  }, {
    key: "renderSelect",
    value: function renderSelect() {
      var _this2 = this;

      var _this$state2 = this.state,
          value = _this$state2.value,
          inputValue = _this$state2.inputValue;
      var _this$props2 = this.props,
          type = _this$props2.type,
          data = _this$props2.data,
          placeholder = _this$props2.placeholder,
          label = _this$props2.label,
          defaultValue = _this$props2.defaultValue,
          closeMenuOnSelect = _this$props2.closeMenuOnSelect,
          isClearable = _this$props2.isClearable,
          isSearchable = _this$props2.isSearchable,
          isDisabled = _this$props2.isDisabled,
          menuPortalTarget = _this$props2.menuPortalTarget,
          appendOnOptionClick = _this$props2.appendOnOptionClick,
          showFilterInMenu = _this$props2.showFilterInMenu,
          menuIsOpen = _this$props2.menuIsOpen,
          components = _this$props2.components,
          group = _this$props2.group;
      var shared = {
        label: label,
        onChange: this.handleChange,
        onInputChange: function onInputChange(v) {
          return _this2.setState({
            inputValue: v
          });
        },
        placeholder: placeholder,
        value: value,
        inputValue: inputValue,
        defaultValue: defaultValue,
        closeMenuOnSelect: closeMenuOnSelect,
        menuIsOpen: menuIsOpen,
        isDisabled: isDisabled,
        group: group,
        styles: this.getStyles(),
        menuPortalTarget: menuPortalTarget // For createable multiselect input

      };

      if (type === 'input') {
        return _react.default.createElement(_reactSelect.default, _extends({}, shared, {
          isMulti: true,
          menuIsOpen: false,
          onKeyDown: this.handleKeyDown,
          components: _objectSpread({}, components, {
            DropdownIndicator: null
          })
        }));
      } // Special multiselect checkbox component


      if (type === 'checkbox') {
        var showMultiValue = shared.value && shared.value.length > 1;
        var values = components.MultiValue ? {
          MultiValue: showMultiValue ? components.MultiValue : components.SingleValue
        } : {};
        return _react.default.createElement(_reactSelect.default, _extends({}, shared, {
          options: data,
          isMulti: true,
          components: _objectSpread({}, components, values, {
            IndicatorSeparator: null,
            Input: showFilterInMenu ? _components.FilterableInput : _components.Input,
            Option: appendOnOptionClick ? _components.CheckboxOption : _components.CheckboxReplace
          }),
          isClearable: false,
          isSearchable: true,
          closeMenuOnSelect: false,
          hideSelectedOptions: false
        }));
      } // For all other select components


      return _react.default.createElement(_reactSelect.default, _extends({}, shared, {
        options: data,
        isMulti: type === 'multi',
        components: components,
        isClearable: isClearable,
        isSearchable: isSearchable
      }));
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props3 = this.props,
          label = _this$props3.label,
          rest = _objectWithoutProperties(_this$props3, ["label"]);

      return _react.default.createElement(Wrapper, rest, label && _react.default.createElement(_Label.default, null, label), this.renderSelect());
    }
  }]);

  return Select;
}(_react.Component);

Select.defaultProps = {
  data: [],
  type: 'single',
  onChange: function onChange() {},
  closeMenuOnSelect: true,
  isClearable: false,
  isSearchable: false,
  isDisabled: false,
  appendOnOptionClick: true,
  showFilterInMenu: false,
  menuPortalTarget: undefined,
  components: {
    Option: _components.Option,
    IndicatorSeparator: null,
    Input: _components.Input
  }
};
Select.propTypes = {
  data: _propTypes.default.array,
  type: _propTypes.default.oneOf(['single', 'multi', 'input', 'checkbox']),
  menuPortalTarget: _propTypes.default.object,
  onChange: _propTypes.default.func,
  label: _propTypes.default.string,
  controlStyles: _propTypes.default.object,
  singleValueStyles: _propTypes.default.object,
  multiValueStyles: _propTypes.default.object,
  menuStyles: _propTypes.default.object,
  placeholderStyles: _propTypes.default.object,
  selectProps: _propTypes.default.object,
  closeMenuOnSelect: _propTypes.default.bool,
  isSearchable: _propTypes.default.bool,
  isClearable: _propTypes.default.bool,
  isDisabled: _propTypes.default.bool,
  showFilterInMenu: _propTypes.default.bool,
  appendOnOptionClick: _propTypes.default.bool,
  components: _propTypes.default.object
};
cleaned.propTypes = Select.propTypes;

var _default = (0, _emotionTheming.withTheme)(Select);

exports.default = _default;