"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var featherIcons = _interopRequireWildcard(require("react-feather"));

var _cleanElement = _interopRequireDefault(require("clean-element"));

var _objectPath = require("object-path");

var _emotionTheming = require("emotion-theming");

var _helpers = require("../../helpers");

var _CheckCircleAnimated = _interopRequireDefault(require("./custom/CheckCircleAnimated"));

var _CheckSolid = _interopRequireDefault(require("./custom/CheckSolid"));

var _AlertSolid = _interopRequireDefault(require("./custom/AlertSolid"));

var _SplitArrow = _interopRequireDefault(require("./custom/SplitArrow"));

var platforms = _interopRequireWildcard(require("./custom/platforms"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var icons = _objectSpread({}, featherIcons, platforms, {
  CheckCircleAnimated: _CheckCircleAnimated.default,
  CheckSolid: _CheckSolid.default,
  AlertSolid: _AlertSolid.default,
  SplitArrow: _SplitArrow.default
});

var cleaned = (0, _cleanElement.default)('div');
var Wrapper = (0, _helpers.system)(cleaned)(function (props) {
  return {
    display: 'inline-block',
    '& svg': {
      verticalAlign: 'baseline'
    }
  };
});

function toPascalCase(str) {
  return str.replace(/(^|-)(\w)?/g, function (m) {
    return m.toUpperCase();
  }).replace(/-/g, '');
}

var Icon = function Icon(props) {
  var name = props.name,
      fallback = props.fallback,
      colorAlt = props.colorAlt,
      size = props.size,
      theme = props.theme;
  var iconProps = {};
  var pascalCase = toPascalCase(name); // only add colorAlt if it's a custom icon
  // (so we can remove it from the dom)

  if (!featherIcons[pascalCase] && colorAlt) {
    iconProps.colorAlt = (0, _objectPath.get)(theme, "colors.".concat(colorAlt), colorAlt);
  } // Get the matching icon


  var match = icons[pascalCase];

  if (!match) {
    if (fallback && icons[toPascalCase(fallback)]) {
      match = icons[toPascalCase(fallback)];
    } else {
      return null;
    }
  }

  return _react.default.createElement(Wrapper, props, _react.default.createElement(match, _objectSpread({
    size: size
  }, iconProps)));
};

Icon.defaultProps = {
  size: 30
};
Icon.propTypes = {
  name: _propTypes.default.string.isRequired,
  colorAlt: _propTypes.default.string,
  fallback: _propTypes.default.string
};
cleaned.propTypes = Icon.propTypes;
Icon.displayName = 'Icon';

var _default = (0, _emotionTheming.withTheme)(Icon);

exports.default = _default;