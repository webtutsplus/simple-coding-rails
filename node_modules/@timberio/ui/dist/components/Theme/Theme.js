"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _deepmerge = _interopRequireDefault(require("deepmerge"));

var _objectPath = require("object-path");

var _emotionTheming = require("emotion-theming");

var _helpers = require("../../helpers");

var _root = require("../../helpers/root");

var _base = _interopRequireDefault(require("../../themes/base"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Wrapper = (0, _helpers.system)('div')(function (props) {
  return {
    boxSizing: 'border-box',
    background: (0, _objectPath.get)(props, 'theme.colors.background'),
    fontFamily: (0, _objectPath.get)(props, 'theme.fonts.primary'),
    color: (0, _objectPath.get)(props, 'theme.colors.text')
  };
}); // Log a warning when theme config changes as triggering this too often is bad for performance

var warning = '@timberio/ui theme changed, for performance reasons you should be careful not to do this often.'; // Don't merge color scales, use source scale

var arrayMerge = function arrayMerge(dest, source) {
  return source;
}; // Do a deep merge of theme props


function mergeThemeProps(useDefaults, base, theme) {
  if (!useDefaults) return theme;
  return (0, _deepmerge.default)(base, theme, {
    arrayMerge: arrayMerge
  });
}

var Theme =
/*#__PURE__*/
function (_PureComponent) {
  _inherits(Theme, _PureComponent);

  function Theme(props) {
    var _this;

    _classCallCheck(this, Theme);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Theme).call(this, props));
    var _this$props = _this.props,
        theme = _this$props.theme,
        useDefaults = _this$props.useDefaults;
    _this.state = {
      theme: mergeThemeProps(useDefaults, _base.default, theme)
    };
    return _this;
  }

  _createClass(Theme, [{
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(next) {
      if (this.props.theme !== next.theme) {
        console.warn(warning);
        var useDefaults = this.props.useDefaults;
        this.setState({
          theme: mergeThemeProps(useDefaults, _base.default, next.theme)
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      return _react.default.createElement(_emotionTheming.ThemeProvider, {
        theme: this.state.theme
      }, _react.default.createElement(Wrapper, {
        id: _root.ROOT_ID
      }, this.props.children));
    }
  }]);

  return Theme;
}(_react.PureComponent);

Theme.defaultProps = {
  theme: _base.default,
  useDefaults: true
};
Theme.propTypes = {
  theme: _propTypes.default.object,
  useDefaults: _propTypes.default.bool
};
Theme.displayName = 'Theme';
var _default = Theme;
exports.default = _default;