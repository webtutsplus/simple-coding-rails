"use strict";

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _Icon = _interopRequireDefault(require("../../Icon"));

var _Callout = _interopRequireWildcard(require("../Callout"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Container = _Callout.testExports.Container;
describe('Callout', function () {
  describe('when the callout is rendered', function () {
    var wrapper;
    var mockIntent;
    beforeEach(function () {
      mockIntent = 'secondary';
      wrapper = (0, _enzyme.shallow)(_react.default.createElement(_Callout.default, {
        intent: mockIntent
      }));
    });
    it('should pass the intent to the container', function () {
      expect(wrapper.find(Container).props().intent).toBe(mockIntent);
    });
  });
  describe('when an icon type is passed in', function () {
    var wrapper;
    var mockIconType;
    beforeEach(function () {
      mockIconType = 'activity';
      wrapper = (0, _enzyme.shallow)(_react.default.createElement(_Callout.default, {
        intent: "primary",
        icon: mockIconType
      }));
    });
    it('should render an icon of that type', function () {
      expect(wrapper.find(_Icon.default).props().name).toBe(mockIconType);
    });
  });
});