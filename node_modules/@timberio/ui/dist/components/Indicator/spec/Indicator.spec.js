"use strict";

var _enzyme = require("enzyme");

var _react = _interopRequireDefault(require("react"));

var _Indicator = _interopRequireWildcard(require("../Indicator"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var IndicatorContainer = _Indicator.testExports.IndicatorContainer,
    AnimatedDot = _Indicator.testExports.AnimatedDot;
global.open = jest.fn();
describe('Indicator', function () {
  describe('when an intent is passed in', function () {
    var wrapper;
    var mockIntent = 'secondary';
    beforeEach(function () {
      wrapper = (0, _enzyme.shallow)(_react.default.createElement(_Indicator.default, {
        intent: mockIntent
      }));
    });
    it('should pass the intent the container, and both animated dots', function () {
      expect(wrapper.find(IndicatorContainer).props().intent).toBe(mockIntent);
      var dots = wrapper.find(AnimatedDot);
      expect(dots.at(0).props().intent).toBe(mockIntent);
      expect(dots.at(1).props().intent).toBe(mockIntent);
    });
  });
});