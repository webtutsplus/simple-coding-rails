"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fromTheme = fromTheme;
exports.intentColor = intentColor;
exports.propTypes = exports.SCALES = exports.INTENTS = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _objectPath = require("object-path");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var INTENTS = {
  primary: 'primary',
  secondary: 'secondary',
  success: 'success',
  danger: 'danger',
  warning: 'warning',
  info: 'info',
  propTypes: {
    intent: _propTypes.default.oneOf(['primary', 'secondary', 'success', 'danger', 'warning', 'info'])
  }
};
exports.INTENTS = INTENTS;
var SCALES = {
  xs: 'xs',
  sm: 'sm',
  md: 'md',
  lg: 'lg',
  xl: 'xl',
  propTypes: {
    scale: _propTypes.default.oneOf(['xs', 'sm', 'md', 'lg', 'xl'])
  }
};
exports.SCALES = SCALES;
var propTypes = {
  intents: INTENTS.propTypes.intent,
  scales: SCALES.propTypes.scale
  /**
   * Helper for pulling a prop from the theme
   * allows shorthand accessors in components like fromTheme('button.color')
   *
   * @param {(string|array)} attributes - path to theme attribute
   */

};
exports.propTypes = propTypes;

function fromTheme(path, props) {
  if (props) return (0, _objectPath.get)(props, "theme.".concat(path));
  return function (data) {
    return (0, _objectPath.get)(data, "theme.".concat(path));
  };
}

function intentColor(props) {
  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var colorName = (0, _objectPath.get)(props, ['theme', 'intents', opts.intent || props.intent]);
  var shade = typeof opts.shade === 'number' ? opts.shade : 3;
  return (0, _objectPath.get)(props, ['theme', 'colors', colorName, shade]);
}