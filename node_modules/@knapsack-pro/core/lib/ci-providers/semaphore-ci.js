"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SemaphoreCI = void 0;
var _1 = require(".");
var SemaphoreCI = (function (_super) {
    __extends(SemaphoreCI, _super);
    function SemaphoreCI() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(SemaphoreCI, "ciNodeTotal", {
        get: function () {
            return process.env.SEMAPHORE_THREAD_COUNT;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SemaphoreCI, "ciNodeIndex", {
        get: function () {
            var currentThread = process.env.SEMAPHORE_CURRENT_THREAD;
            if (currentThread) {
                return (parseInt(currentThread, 10) - 1).toString();
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SemaphoreCI, "ciNodeBuildId", {
        get: function () {
            return process.env.SEMAPHORE_BUILD_NUMBER;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SemaphoreCI, "commitHash", {
        get: function () {
            return process.env.REVISION;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SemaphoreCI, "branch", {
        get: function () {
            return process.env.BRANCH_NAME;
        },
        enumerable: false,
        configurable: true
    });
    return SemaphoreCI;
}(_1.CIProviderBase));
exports.SemaphoreCI = SemaphoreCI;
