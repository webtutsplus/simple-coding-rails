"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KnapsackProCore = void 0;
var knapsack_pro_api_1 = require("./knapsack-pro-api");
var api_response_codes_1 = require("./api-response-codes");
var knapsack_pro_logger_1 = require("./knapsack-pro-logger");
var fallback_test_distributor_1 = require("./fallback-test-distributor");
var KnapsackProCore = (function () {
    function KnapsackProCore(clientName, clientVersion, allTestFiles) {
        this.recordedTestFiles = [];
        this.allTestFiles = allTestFiles;
        this.knapsackProAPI = new knapsack_pro_api_1.KnapsackProAPI(clientName, clientVersion);
        this.knapsackProLogger = new knapsack_pro_logger_1.KnapsackProLogger();
        this.isTestSuiteGreen = true;
    }
    KnapsackProCore.prototype.runQueueMode = function (onSuccess, onFailure) {
        this.fetchTestsFromQueue(true, true, onSuccess, onFailure);
    };
    KnapsackProCore.prototype.fetchTestsFromQueue = function (initializeQueue, attemptConnectToQueue, onSuccess, onFailure) {
        var _this = this;
        if (initializeQueue === void 0) { initializeQueue = false; }
        if (attemptConnectToQueue === void 0) { attemptConnectToQueue = false; }
        this.knapsackProAPI
            .fetchTestsFromQueue(this.allTestFiles, initializeQueue, attemptConnectToQueue)
            .then(function (response) {
            var apiCode = response.data.code;
            if (apiCode === api_response_codes_1.QueueApiResponseCodes.AttemptConnectToQueueFailed) {
                _this.fetchTestsFromQueue(true, false, onSuccess, onFailure);
                return;
            }
            var queueTestFiles = response.data.test_files;
            var isQueueEmpty = queueTestFiles.length === 0;
            if (isQueueEmpty) {
                _this.finishQueueMode();
                return;
            }
            onSuccess(queueTestFiles).then(function (_a) {
                var recordedTestFiles = _a.recordedTestFiles, isTestSuiteGreen = _a.isTestSuiteGreen;
                _this.updateRecordedTestFiles(recordedTestFiles, isTestSuiteGreen);
                _this.fetchTestsFromQueue(false, false, onSuccess, onFailure);
            });
        })
            .catch(function (error) {
            if (_this.knapsackProAPI.isExpectedErrorStatus(error)) {
                process.exitCode = 1;
                throw new Error('Knapsack Pro API returned an error. See the above logs.');
            }
            onFailure(error);
            _this.knapsackProLogger.warn('Fallback Mode has started. We could not connect to Knapsack Pro API. Your tests will be executed based on test file names.\n\nIf other CI nodes were able to connect to Knapsack Pro API then you may notice that some of the test files were executed twice across CI nodes. Fallback Mode guarantees each of test files is run at least once as a part of CI build.');
            var fallbackTestDistributor = new fallback_test_distributor_1.FallbackTestDistributor(_this.allTestFiles, _this.recordedTestFiles);
            var testFiles = fallbackTestDistributor.testFilesForCiNode();
            var executedTestFiles = knapsack_pro_logger_1.KnapsackProLogger.objectInspect(_this.recordedTestFiles);
            _this.knapsackProLogger.debug("Test files already executed:\n" + executedTestFiles);
            var inspectedTestFiles = knapsack_pro_logger_1.KnapsackProLogger.objectInspect(testFiles);
            _this.knapsackProLogger.debug("Test files to be run in Fallback Mode:\n" + inspectedTestFiles);
            onSuccess(testFiles).then(function (_a) {
                var recordedTestFiles = _a.recordedTestFiles, isTestSuiteGreen = _a.isTestSuiteGreen;
                _this.updateRecordedTestFiles(recordedTestFiles, isTestSuiteGreen);
                _this.finishQueueMode();
            });
        });
    };
    KnapsackProCore.prototype.updateRecordedTestFiles = function (recordedTestFiles, isTestSuiteGreen) {
        this.recordedTestFiles = this.recordedTestFiles.concat(recordedTestFiles);
        this.isTestSuiteGreen = this.isTestSuiteGreen && isTestSuiteGreen;
    };
    KnapsackProCore.prototype.finishQueueMode = function () {
        this.createBuildSubset(this.recordedTestFiles);
        process.exitCode = this.isTestSuiteGreen ? 0 : 1;
    };
    KnapsackProCore.prototype.createBuildSubset = function (testFiles) {
        var _this = this;
        this.knapsackProAPI.createBuildSubset(testFiles).catch(function (error) {
            _this.knapsackProLogger.error('Could not save recorded timing of tests due to failed request to Knapsack Pro API.');
        });
    };
    return KnapsackProCore;
}());
exports.KnapsackProCore = KnapsackProCore;
