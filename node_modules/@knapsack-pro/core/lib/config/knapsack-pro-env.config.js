"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KnapsackProEnvConfig = void 0;
var childProcess = require("child_process");
var _1 = require(".");
var knapsack_pro_logger_1 = require("../knapsack-pro-logger");
var spawnSync = childProcess.spawnSync;
function logLevel() {
    if (process.env.KNAPSACK_PRO_LOG_LEVEL) {
        return process.env.KNAPSACK_PRO_LOG_LEVEL;
    }
    return 'info';
}
var knapsackProLogger = new knapsack_pro_logger_1.KnapsackProLogger(logLevel());
var KnapsackProEnvConfig = (function () {
    function KnapsackProEnvConfig() {
    }
    Object.defineProperty(KnapsackProEnvConfig, "endpoint", {
        get: function () {
            if (process.env.KNAPSACK_PRO_ENDPOINT) {
                return process.env.KNAPSACK_PRO_ENDPOINT;
            }
            return 'https://api.knapsackpro.com';
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(KnapsackProEnvConfig, "testSuiteToken", {
        get: function () {
            if (process.env.KNAPSACK_PRO_TEST_SUITE_TOKEN) {
                return process.env.KNAPSACK_PRO_TEST_SUITE_TOKEN;
            }
            throw new Error("Please set test suite API token in CI environment variables.\n      Please check README for the Knapsack Pro client library.");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(KnapsackProEnvConfig, "fixedQueueSplit", {
        get: function () {
            if (process.env.KNAPSACK_PRO_FIXED_QUEUE_SPLIT) {
                return (process.env.KNAPSACK_PRO_FIXED_QUEUE_SPLIT.toLowerCase() === 'true');
            }
            return false;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(KnapsackProEnvConfig, "ciNodeTotal", {
        get: function () {
            if (process.env.KNAPSACK_PRO_CI_NODE_TOTAL) {
                return parseInt(process.env.KNAPSACK_PRO_CI_NODE_TOTAL, 10);
            }
            var ciNodeTotal = _1.CIEnvConfig.ciNodeTotal;
            if (ciNodeTotal) {
                return parseInt(ciNodeTotal, 10);
            }
            throw new Error('Undefined number of total CI nodes! Please set KNAPSACK_PRO_CI_NODE_TOTAL environment variable.');
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(KnapsackProEnvConfig, "ciNodeIndex", {
        get: function () {
            if (process.env.KNAPSACK_PRO_CI_NODE_INDEX) {
                return parseInt(process.env.KNAPSACK_PRO_CI_NODE_INDEX, 10);
            }
            var ciNodeIndex = _1.CIEnvConfig.ciNodeIndex;
            if (ciNodeIndex) {
                return parseInt(ciNodeIndex, 10);
            }
            throw new Error('Undefined CI node index! Please set KNAPSACK_PRO_CI_NODE_INDEX environment variable.');
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(KnapsackProEnvConfig, "ciNodeBuildId", {
        get: function () {
            if (process.env.KNAPSACK_PRO_CI_NODE_BUILD_ID) {
                return process.env.KNAPSACK_PRO_CI_NODE_BUILD_ID;
            }
            var ciNodeBuildId = _1.CIEnvConfig.ciNodeBuildId;
            if (ciNodeBuildId) {
                return ciNodeBuildId;
            }
            var knapsackProMissingBuildIdKey = 'missing-build-id';
            process.env.KNAPSACK_PRO_CI_NODE_BUILD_ID = knapsackProMissingBuildIdKey;
            knapsackProLogger.warn('CI node build ID not detected! Your tests will run anyway.\n\n' +
                'If you want to be able to run more than one CI build at the same time for exactly the same commit hash, branch name and number of parallel CI nodes then you have to set unique KNAPSACK_PRO_CI_NODE_BUILD_ID environment variable.\n\n' +
                'For instance you can generate KNAPSACK_PRO_CI_NODE_BUILD_ID=$(openssl rand - base64 32)\n\n' +
                'Please ensure KNAPSACK_PRO_CI_NODE_BUILD_ID has the same value for all parallel CI nodes being part of the single CI build. Thanks to that the parallel nodes will consume tests from the same Queue.');
            return process.env.KNAPSACK_PRO_CI_NODE_BUILD_ID;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(KnapsackProEnvConfig, "commitHash", {
        get: function () {
            if (process.env.KNAPSACK_PRO_COMMIT_HASH) {
                return process.env.KNAPSACK_PRO_COMMIT_HASH;
            }
            var commitHash = _1.CIEnvConfig.commitHash;
            if (commitHash) {
                return commitHash;
            }
            var gitProcess = spawnSync('git', ['rev-parse', 'HEAD']);
            if (gitProcess.status === 0) {
                var gitCommitHash = gitProcess.stdout.toString().trim();
                process.env.KNAPSACK_PRO_COMMIT_HASH = gitCommitHash;
                return gitCommitHash;
            }
            if (gitProcess.stderr === null) {
                knapsackProLogger.error('We tried to detect commit hash using git but it failed. Please ensure you have have git installed or set KNAPSACK_PRO_COMMIT_HASH environment variable.');
            }
            else {
                var gitErrorMessage = gitProcess.stderr.toString();
                knapsackProLogger.error('There was error in detecting commit hash using git installed on the machine:');
                knapsackProLogger.error(gitErrorMessage);
            }
            throw new Error('Undefined commit hash! Please set KNAPSACK_PRO_COMMIT_HASH environment variable.');
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(KnapsackProEnvConfig, "branch", {
        get: function () {
            if (process.env.KNAPSACK_PRO_BRANCH) {
                return process.env.KNAPSACK_PRO_BRANCH;
            }
            var branch = _1.CIEnvConfig.branch;
            if (branch) {
                return branch;
            }
            var gitProcess = spawnSync('git', ['rev-parse', '--abbrev-ref', 'HEAD']);
            if (gitProcess.status === 0) {
                var gitBranch = gitProcess.stdout.toString().trim();
                process.env.KNAPSACK_PRO_BRANCH = gitBranch;
                return gitBranch;
            }
            if (gitProcess.stderr === null) {
                knapsackProLogger.error('We tried to detect branch name using git but it failed. Please ensure you have have git installed or set KNAPSACK_PRO_BRANCH environment variable.');
            }
            else {
                var gitErrorMessage = gitProcess.stderr.toString();
                knapsackProLogger.error('There was error in detecting branch name using git installed on the machine:');
                knapsackProLogger.error(gitErrorMessage);
            }
            throw new Error('Undefined branch name! Please set KNAPSACK_PRO_BRANCH environment variable.');
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(KnapsackProEnvConfig, "logLevel", {
        get: function () {
            return logLevel();
        },
        enumerable: false,
        configurable: true
    });
    return KnapsackProEnvConfig;
}());
exports.KnapsackProEnvConfig = KnapsackProEnvConfig;
