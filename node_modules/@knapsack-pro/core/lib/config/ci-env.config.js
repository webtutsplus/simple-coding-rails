"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CIEnvConfig = void 0;
var ci_providers_1 = require("../ci-providers");
var CIEnvConfig = (function () {
    function CIEnvConfig() {
    }
    Object.defineProperty(CIEnvConfig, "ciNodeTotal", {
        get: function () {
            return this.ciEnvFor('ciNodeTotal');
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CIEnvConfig, "ciNodeIndex", {
        get: function () {
            return this.ciEnvFor('ciNodeIndex');
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CIEnvConfig, "ciNodeBuildId", {
        get: function () {
            return this.ciEnvFor('ciNodeBuildId');
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CIEnvConfig, "commitHash", {
        get: function () {
            return this.ciEnvFor('commitHash');
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CIEnvConfig, "branch", {
        get: function () {
            return this.ciEnvFor('branch');
        },
        enumerable: false,
        configurable: true
    });
    CIEnvConfig.ciEnvFor = function (functionName) {
        var supportedCIProviders = [
            ci_providers_1.GitlabCI,
            ci_providers_1.AppVeyor,
            ci_providers_1.Buildkite,
            ci_providers_1.CircleCI,
            ci_providers_1.CirrusCI,
            ci_providers_1.CodefreshCI,
            ci_providers_1.Codeship,
            ci_providers_1.GithubActions,
            ci_providers_1.HerokuCI,
            ci_providers_1.SemaphoreCI,
            ci_providers_1.SemaphoreCI2,
            ci_providers_1.SolanoCI,
            ci_providers_1.TravisCI,
        ];
        for (var _i = 0, supportedCIProviders_1 = supportedCIProviders; _i < supportedCIProviders_1.length; _i++) {
            var ciProvider = supportedCIProviders_1[_i];
            var value = ciProvider[functionName];
            if (value) {
                return value;
            }
        }
    };
    return CIEnvConfig;
}());
exports.CIEnvConfig = CIEnvConfig;
