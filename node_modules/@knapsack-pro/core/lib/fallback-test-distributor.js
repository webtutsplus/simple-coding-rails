"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FallbackTestDistributor = void 0;
var config_1 = require("./config");
var FallbackTestDistributor = (function () {
    function FallbackTestDistributor(allTestFiles, executedTestFiles, ciNodeTotal) {
        if (ciNodeTotal === void 0) { ciNodeTotal = config_1.KnapsackProEnvConfig.ciNodeTotal; }
        this.executedTestFilePaths = executedTestFiles.map(function (testFile) { return testFile.path; });
        this.testFilesPerCiNode = this.assignTestFilesPerCiNode(this.orderByTestPath(allTestFiles), ciNodeTotal);
    }
    FallbackTestDistributor.prototype.testFilesForCiNode = function (ciNodeIndex) {
        var _this = this;
        if (ciNodeIndex === void 0) { ciNodeIndex = config_1.KnapsackProEnvConfig.ciNodeIndex; }
        return this.testFilesPerCiNode[ciNodeIndex].filter(function (testFile) { return !_this.executedTestFilePaths.includes(testFile.path); });
    };
    FallbackTestDistributor.prototype.orderByTestPath = function (testFiles) {
        var sortBy = function (key) {
            return function (a, b) {
                return a[key] > b[key] ? 1 : b[key] > a[key] ? -1 : 0;
            };
        };
        return testFiles.sort(sortBy('path'));
    };
    FallbackTestDistributor.prototype.assignTestFilesPerCiNode = function (allTestFiles, ciNodeTotal) {
        var testFilesPerCiNode = Array.from({ length: ciNodeTotal }, function () { return []; });
        allTestFiles.forEach(function (testFile, index) {
            return testFilesPerCiNode[index % ciNodeTotal].push(testFile);
        });
        return testFilesPerCiNode;
    };
    return FallbackTestDistributor;
}());
exports.FallbackTestDistributor = FallbackTestDistributor;
