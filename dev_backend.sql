--
-- PostgreSQL database dump
--

-- Dumped from database version 10.15 (Ubuntu 10.15-0ubuntu0.18.04.1)
-- Dumped by pg_dump version 10.15 (Ubuntu 10.15-0ubuntu0.18.04.1)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


--
-- Name: citext; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS citext WITH SCHEMA public;


--
-- Name: EXTENSION citext; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION citext IS 'data type for case-insensitive character strings';


--
-- Name: pgcrypto; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS pgcrypto WITH SCHEMA public;


--
-- Name: EXTENSION pgcrypto; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pgcrypto IS 'cryptographic functions';


SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: ahoy_events; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.ahoy_events (
    id bigint NOT NULL,
    name character varying,
    properties jsonb,
    "time" timestamp without time zone,
    user_id bigint,
    visit_id bigint
);


ALTER TABLE public.ahoy_events OWNER TO contact_webtutsplus;

--
-- Name: ahoy_events_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.ahoy_events_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.ahoy_events_id_seq OWNER TO contact_webtutsplus;

--
-- Name: ahoy_events_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.ahoy_events_id_seq OWNED BY public.ahoy_events.id;


--
-- Name: ahoy_messages; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.ahoy_messages (
    id bigint NOT NULL,
    clicked_at timestamp without time zone,
    content text,
    feedback_message_id bigint,
    mailer character varying,
    opened_at timestamp without time zone,
    sent_at timestamp without time zone,
    subject text,
    "to" text,
    token character varying,
    user_id bigint,
    user_type character varying,
    utm_campaign character varying,
    utm_content character varying,
    utm_medium character varying,
    utm_source character varying,
    utm_term character varying
);


ALTER TABLE public.ahoy_messages OWNER TO contact_webtutsplus;

--
-- Name: ahoy_messages_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.ahoy_messages_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.ahoy_messages_id_seq OWNER TO contact_webtutsplus;

--
-- Name: ahoy_messages_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.ahoy_messages_id_seq OWNED BY public.ahoy_messages.id;


--
-- Name: ahoy_visits; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.ahoy_visits (
    id bigint NOT NULL,
    started_at timestamp without time zone,
    user_id bigint,
    visit_token character varying,
    visitor_token character varying
);


ALTER TABLE public.ahoy_visits OWNER TO contact_webtutsplus;

--
-- Name: ahoy_visits_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.ahoy_visits_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.ahoy_visits_id_seq OWNER TO contact_webtutsplus;

--
-- Name: ahoy_visits_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.ahoy_visits_id_seq OWNED BY public.ahoy_visits.id;


--
-- Name: announcements; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.announcements (
    id bigint NOT NULL,
    banner_style character varying,
    created_at timestamp(6) without time zone NOT NULL,
    updated_at timestamp(6) without time zone NOT NULL
);


ALTER TABLE public.announcements OWNER TO contact_webtutsplus;

--
-- Name: announcements_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.announcements_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.announcements_id_seq OWNER TO contact_webtutsplus;

--
-- Name: announcements_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.announcements_id_seq OWNED BY public.announcements.id;


--
-- Name: api_secrets; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.api_secrets (
    id bigint NOT NULL,
    created_at timestamp without time zone NOT NULL,
    description character varying NOT NULL,
    secret character varying,
    updated_at timestamp without time zone NOT NULL,
    user_id bigint
);


ALTER TABLE public.api_secrets OWNER TO contact_webtutsplus;

--
-- Name: api_secrets_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.api_secrets_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.api_secrets_id_seq OWNER TO contact_webtutsplus;

--
-- Name: api_secrets_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.api_secrets_id_seq OWNED BY public.api_secrets.id;


--
-- Name: ar_internal_metadata; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.ar_internal_metadata (
    key character varying NOT NULL,
    value character varying,
    created_at timestamp(6) without time zone NOT NULL,
    updated_at timestamp(6) without time zone NOT NULL
);


ALTER TABLE public.ar_internal_metadata OWNER TO contact_webtutsplus;

--
-- Name: articles; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.articles (
    id bigint NOT NULL,
    any_comments_hidden boolean DEFAULT false,
    approved boolean DEFAULT false,
    archived boolean DEFAULT false,
    body_html text,
    body_markdown text,
    boost_states jsonb DEFAULT '{}'::jsonb NOT NULL,
    cached_organization text,
    cached_tag_list character varying,
    cached_user text,
    cached_user_name character varying,
    cached_user_username character varying,
    canonical_url character varying,
    co_author_ids bigint[] DEFAULT '{}'::bigint[],
    collection_id bigint,
    comment_score integer DEFAULT 0,
    comment_template character varying,
    comments_count integer DEFAULT 0 NOT NULL,
    created_at timestamp without time zone NOT NULL,
    crossposted_at timestamp without time zone,
    description character varying,
    edited_at timestamp without time zone,
    email_digest_eligible boolean DEFAULT true,
    experience_level_rating double precision DEFAULT 5.0,
    experience_level_rating_distribution double precision DEFAULT 5.0,
    facebook_last_buffered timestamp without time zone,
    featured boolean DEFAULT false,
    featured_number integer,
    feed_source_url character varying,
    hotness_score integer DEFAULT 0,
    language character varying,
    last_buffered timestamp without time zone,
    last_comment_at timestamp without time zone DEFAULT '2017-01-01 05:00:00'::timestamp without time zone,
    last_experience_level_rating_at timestamp without time zone,
    main_image character varying,
    main_image_background_hex_color character varying DEFAULT '#dddddd'::character varying,
    nth_published_by_author integer DEFAULT 0,
    organic_page_views_count integer DEFAULT 0,
    organic_page_views_past_month_count integer DEFAULT 0,
    organic_page_views_past_week_count integer DEFAULT 0,
    organization_id bigint,
    originally_published_at timestamp without time zone,
    page_views_count integer DEFAULT 0,
    password character varying,
    path character varying,
    positive_reactions_count integer DEFAULT 0 NOT NULL,
    previous_positive_reactions_count integer DEFAULT 0,
    previous_public_reactions_count integer DEFAULT 0 NOT NULL,
    processed_html text,
    public_reactions_count integer DEFAULT 0 NOT NULL,
    published boolean DEFAULT false,
    published_at timestamp without time zone,
    published_from_feed boolean DEFAULT false,
    rating_votes_count integer DEFAULT 0 NOT NULL,
    reactions_count integer DEFAULT 0 NOT NULL,
    reading_time integer DEFAULT 0,
    receive_notifications boolean DEFAULT true,
    score integer DEFAULT 0,
    search_optimized_description_replacement character varying,
    search_optimized_title_preamble character varying,
    show_comments boolean DEFAULT true,
    slug text,
    social_image character varying,
    spaminess_rating integer DEFAULT 0,
    title character varying,
    updated_at timestamp without time zone NOT NULL,
    user_id bigint,
    user_subscriptions_count integer DEFAULT 0 NOT NULL,
    video character varying,
    video_closed_caption_track_url character varying,
    video_code character varying,
    video_duration_in_seconds double precision DEFAULT 0.0,
    video_source_url character varying,
    video_state character varying,
    video_thumbnail_url character varying
);


ALTER TABLE public.articles OWNER TO contact_webtutsplus;

--
-- Name: articles_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.articles_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.articles_id_seq OWNER TO contact_webtutsplus;

--
-- Name: articles_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.articles_id_seq OWNED BY public.articles.id;


--
-- Name: audit_logs; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.audit_logs (
    id bigint NOT NULL,
    category character varying,
    created_at timestamp without time zone NOT NULL,
    data jsonb DEFAULT '{}'::jsonb NOT NULL,
    roles character varying[],
    slug character varying,
    updated_at timestamp without time zone NOT NULL,
    user_id bigint
);


ALTER TABLE public.audit_logs OWNER TO contact_webtutsplus;

--
-- Name: audit_logs_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.audit_logs_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.audit_logs_id_seq OWNER TO contact_webtutsplus;

--
-- Name: audit_logs_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.audit_logs_id_seq OWNED BY public.audit_logs.id;


--
-- Name: badge_achievements; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.badge_achievements (
    id bigint NOT NULL,
    badge_id bigint NOT NULL,
    created_at timestamp without time zone NOT NULL,
    rewarder_id bigint,
    rewarding_context_message text,
    rewarding_context_message_markdown text,
    updated_at timestamp without time zone NOT NULL,
    user_id bigint NOT NULL
);


ALTER TABLE public.badge_achievements OWNER TO contact_webtutsplus;

--
-- Name: badge_achievements_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.badge_achievements_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.badge_achievements_id_seq OWNER TO contact_webtutsplus;

--
-- Name: badge_achievements_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.badge_achievements_id_seq OWNED BY public.badge_achievements.id;


--
-- Name: badges; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.badges (
    id bigint NOT NULL,
    badge_image character varying,
    created_at timestamp without time zone NOT NULL,
    description character varying NOT NULL,
    slug character varying NOT NULL,
    title character varying NOT NULL,
    updated_at timestamp without time zone NOT NULL
);


ALTER TABLE public.badges OWNER TO contact_webtutsplus;

--
-- Name: badges_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.badges_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.badges_id_seq OWNER TO contact_webtutsplus;

--
-- Name: badges_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.badges_id_seq OWNED BY public.badges.id;


--
-- Name: banished_users; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.banished_users (
    id bigint NOT NULL,
    banished_by_id bigint,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    username character varying
);


ALTER TABLE public.banished_users OWNER TO contact_webtutsplus;

--
-- Name: banished_users_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.banished_users_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.banished_users_id_seq OWNER TO contact_webtutsplus;

--
-- Name: banished_users_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.banished_users_id_seq OWNED BY public.banished_users.id;


--
-- Name: blazer_audits; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.blazer_audits (
    id bigint NOT NULL,
    created_at timestamp without time zone,
    data_source character varying,
    query_id bigint,
    statement text,
    user_id bigint
);


ALTER TABLE public.blazer_audits OWNER TO contact_webtutsplus;

--
-- Name: blazer_audits_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.blazer_audits_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.blazer_audits_id_seq OWNER TO contact_webtutsplus;

--
-- Name: blazer_audits_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.blazer_audits_id_seq OWNED BY public.blazer_audits.id;


--
-- Name: blazer_checks; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.blazer_checks (
    id bigint NOT NULL,
    check_type character varying,
    created_at timestamp without time zone NOT NULL,
    creator_id bigint,
    emails text,
    last_run_at timestamp without time zone,
    message text,
    query_id bigint,
    schedule character varying,
    slack_channels text,
    state character varying,
    updated_at timestamp without time zone NOT NULL
);


ALTER TABLE public.blazer_checks OWNER TO contact_webtutsplus;

--
-- Name: blazer_checks_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.blazer_checks_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.blazer_checks_id_seq OWNER TO contact_webtutsplus;

--
-- Name: blazer_checks_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.blazer_checks_id_seq OWNED BY public.blazer_checks.id;


--
-- Name: blazer_dashboard_queries; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.blazer_dashboard_queries (
    id bigint NOT NULL,
    created_at timestamp without time zone NOT NULL,
    dashboard_id bigint,
    "position" integer,
    query_id bigint,
    updated_at timestamp without time zone NOT NULL
);


ALTER TABLE public.blazer_dashboard_queries OWNER TO contact_webtutsplus;

--
-- Name: blazer_dashboard_queries_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.blazer_dashboard_queries_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.blazer_dashboard_queries_id_seq OWNER TO contact_webtutsplus;

--
-- Name: blazer_dashboard_queries_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.blazer_dashboard_queries_id_seq OWNED BY public.blazer_dashboard_queries.id;


--
-- Name: blazer_dashboards; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.blazer_dashboards (
    id bigint NOT NULL,
    created_at timestamp without time zone NOT NULL,
    creator_id bigint,
    name text,
    updated_at timestamp without time zone NOT NULL
);


ALTER TABLE public.blazer_dashboards OWNER TO contact_webtutsplus;

--
-- Name: blazer_dashboards_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.blazer_dashboards_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.blazer_dashboards_id_seq OWNER TO contact_webtutsplus;

--
-- Name: blazer_dashboards_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.blazer_dashboards_id_seq OWNED BY public.blazer_dashboards.id;


--
-- Name: blazer_queries; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.blazer_queries (
    id bigint NOT NULL,
    created_at timestamp without time zone NOT NULL,
    creator_id bigint,
    data_source character varying,
    description text,
    name character varying,
    statement text,
    updated_at timestamp without time zone NOT NULL
);


ALTER TABLE public.blazer_queries OWNER TO contact_webtutsplus;

--
-- Name: blazer_queries_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.blazer_queries_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.blazer_queries_id_seq OWNER TO contact_webtutsplus;

--
-- Name: blazer_queries_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.blazer_queries_id_seq OWNED BY public.blazer_queries.id;


--
-- Name: broadcasts; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.broadcasts (
    id bigint NOT NULL,
    active boolean DEFAULT false,
    active_status_updated_at timestamp without time zone,
    banner_style character varying,
    body_markdown text,
    broadcastable_id bigint,
    broadcastable_type character varying,
    created_at timestamp without time zone,
    processed_html text,
    title character varying,
    type_of character varying,
    updated_at timestamp without time zone
);


ALTER TABLE public.broadcasts OWNER TO contact_webtutsplus;

--
-- Name: broadcasts_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.broadcasts_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.broadcasts_id_seq OWNER TO contact_webtutsplus;

--
-- Name: broadcasts_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.broadcasts_id_seq OWNED BY public.broadcasts.id;


--
-- Name: buffer_updates; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.buffer_updates (
    id bigint NOT NULL,
    approver_user_id bigint,
    article_id bigint NOT NULL,
    body_text text,
    buffer_id_code character varying,
    buffer_profile_id_code character varying,
    buffer_response text DEFAULT '--- {}
'::text,
    composer_user_id bigint,
    created_at timestamp without time zone NOT NULL,
    social_service_name character varying,
    status character varying DEFAULT 'pending'::character varying,
    tag_id bigint,
    updated_at timestamp without time zone NOT NULL
);


ALTER TABLE public.buffer_updates OWNER TO contact_webtutsplus;

--
-- Name: buffer_updates_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.buffer_updates_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.buffer_updates_id_seq OWNER TO contact_webtutsplus;

--
-- Name: buffer_updates_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.buffer_updates_id_seq OWNED BY public.buffer_updates.id;


--
-- Name: chat_channel_memberships; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.chat_channel_memberships (
    id bigint NOT NULL,
    chat_channel_id bigint NOT NULL,
    created_at timestamp without time zone NOT NULL,
    has_unopened_messages boolean DEFAULT false,
    last_opened_at timestamp without time zone DEFAULT '2017-01-01 05:00:00'::timestamp without time zone,
    role character varying DEFAULT 'member'::character varying,
    show_global_badge_notification boolean DEFAULT true,
    status character varying DEFAULT 'active'::character varying,
    updated_at timestamp without time zone NOT NULL,
    user_id bigint NOT NULL
);


ALTER TABLE public.chat_channel_memberships OWNER TO contact_webtutsplus;

--
-- Name: chat_channel_memberships_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.chat_channel_memberships_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.chat_channel_memberships_id_seq OWNER TO contact_webtutsplus;

--
-- Name: chat_channel_memberships_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.chat_channel_memberships_id_seq OWNED BY public.chat_channel_memberships.id;


--
-- Name: chat_channels; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.chat_channels (
    id bigint NOT NULL,
    channel_name character varying,
    channel_type character varying NOT NULL,
    created_at timestamp without time zone NOT NULL,
    description character varying,
    discoverable boolean DEFAULT false,
    last_message_at timestamp without time zone DEFAULT '2017-01-01 05:00:00'::timestamp without time zone,
    slug character varying,
    status character varying DEFAULT 'active'::character varying,
    updated_at timestamp without time zone NOT NULL
);


ALTER TABLE public.chat_channels OWNER TO contact_webtutsplus;

--
-- Name: chat_channels_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.chat_channels_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.chat_channels_id_seq OWNER TO contact_webtutsplus;

--
-- Name: chat_channels_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.chat_channels_id_seq OWNED BY public.chat_channels.id;


--
-- Name: classified_listing_categories; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.classified_listing_categories (
    id bigint NOT NULL,
    cost integer NOT NULL,
    created_at timestamp without time zone NOT NULL,
    name character varying NOT NULL,
    rules character varying NOT NULL,
    slug character varying NOT NULL,
    social_preview_color character varying,
    social_preview_description character varying,
    updated_at timestamp without time zone NOT NULL
);


ALTER TABLE public.classified_listing_categories OWNER TO contact_webtutsplus;

--
-- Name: classified_listing_categories_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.classified_listing_categories_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.classified_listing_categories_id_seq OWNER TO contact_webtutsplus;

--
-- Name: classified_listing_categories_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.classified_listing_categories_id_seq OWNED BY public.classified_listing_categories.id;


--
-- Name: classified_listings; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.classified_listings (
    id bigint NOT NULL,
    body_markdown text,
    bumped_at timestamp without time zone,
    cached_tag_list character varying,
    classified_listing_category_id bigint,
    contact_via_connect boolean DEFAULT false,
    created_at timestamp without time zone NOT NULL,
    expires_at timestamp without time zone,
    last_buffered timestamp without time zone,
    location character varying,
    organization_id bigint,
    originally_published_at timestamp without time zone,
    processed_html text,
    published boolean,
    slug character varying,
    title character varying,
    updated_at timestamp without time zone NOT NULL,
    user_id bigint
);


ALTER TABLE public.classified_listings OWNER TO contact_webtutsplus;

--
-- Name: classified_listings_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.classified_listings_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.classified_listings_id_seq OWNER TO contact_webtutsplus;

--
-- Name: classified_listings_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.classified_listings_id_seq OWNED BY public.classified_listings.id;


--
-- Name: collections; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.collections (
    id bigint NOT NULL,
    created_at timestamp without time zone NOT NULL,
    description character varying,
    main_image character varying,
    organization_id bigint,
    published boolean DEFAULT false,
    slug character varying,
    social_image character varying,
    title character varying,
    updated_at timestamp without time zone NOT NULL,
    user_id bigint
);


ALTER TABLE public.collections OWNER TO contact_webtutsplus;

--
-- Name: collections_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.collections_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.collections_id_seq OWNER TO contact_webtutsplus;

--
-- Name: collections_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.collections_id_seq OWNED BY public.collections.id;


--
-- Name: comments; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.comments (
    id bigint NOT NULL,
    ancestry character varying,
    body_html text,
    body_markdown text,
    commentable_id bigint,
    commentable_type character varying,
    created_at timestamp without time zone NOT NULL,
    deleted boolean DEFAULT false,
    edited boolean DEFAULT false,
    edited_at timestamp without time zone,
    hidden_by_commentable_user boolean DEFAULT false,
    id_code character varying,
    markdown_character_count integer,
    positive_reactions_count integer DEFAULT 0 NOT NULL,
    processed_html text,
    public_reactions_count integer DEFAULT 0 NOT NULL,
    reactions_count integer DEFAULT 0 NOT NULL,
    receive_notifications boolean DEFAULT true,
    score integer DEFAULT 0,
    spaminess_rating integer DEFAULT 0,
    updated_at timestamp without time zone NOT NULL,
    user_id bigint
);


ALTER TABLE public.comments OWNER TO contact_webtutsplus;

--
-- Name: comments_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.comments_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.comments_id_seq OWNER TO contact_webtutsplus;

--
-- Name: comments_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.comments_id_seq OWNED BY public.comments.id;


--
-- Name: credits; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.credits (
    id bigint NOT NULL,
    cost double precision DEFAULT 0.0,
    created_at timestamp without time zone NOT NULL,
    organization_id bigint,
    purchase_id bigint,
    purchase_type character varying,
    spent boolean DEFAULT false,
    spent_at timestamp without time zone,
    updated_at timestamp without time zone NOT NULL,
    user_id bigint
);


ALTER TABLE public.credits OWNER TO contact_webtutsplus;

--
-- Name: credits_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.credits_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.credits_id_seq OWNER TO contact_webtutsplus;

--
-- Name: credits_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.credits_id_seq OWNED BY public.credits.id;


--
-- Name: custom_profile_fields; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.custom_profile_fields (
    id bigint NOT NULL,
    attribute_name character varying NOT NULL,
    created_at timestamp(6) without time zone NOT NULL,
    description character varying,
    label public.citext NOT NULL,
    profile_id bigint NOT NULL,
    updated_at timestamp(6) without time zone NOT NULL
);


ALTER TABLE public.custom_profile_fields OWNER TO contact_webtutsplus;

--
-- Name: custom_profile_fields_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.custom_profile_fields_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.custom_profile_fields_id_seq OWNER TO contact_webtutsplus;

--
-- Name: custom_profile_fields_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.custom_profile_fields_id_seq OWNED BY public.custom_profile_fields.id;


--
-- Name: data_update_scripts; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.data_update_scripts (
    id bigint NOT NULL,
    created_at timestamp without time zone NOT NULL,
    error text,
    file_name character varying,
    finished_at timestamp without time zone,
    run_at timestamp without time zone,
    status integer DEFAULT 0 NOT NULL,
    updated_at timestamp without time zone NOT NULL
);


ALTER TABLE public.data_update_scripts OWNER TO contact_webtutsplus;

--
-- Name: data_update_scripts_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.data_update_scripts_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.data_update_scripts_id_seq OWNER TO contact_webtutsplus;

--
-- Name: data_update_scripts_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.data_update_scripts_id_seq OWNED BY public.data_update_scripts.id;


--
-- Name: display_ad_events; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.display_ad_events (
    id bigint NOT NULL,
    category character varying,
    context_type character varying,
    created_at timestamp without time zone NOT NULL,
    display_ad_id bigint,
    updated_at timestamp without time zone NOT NULL,
    user_id bigint
);


ALTER TABLE public.display_ad_events OWNER TO contact_webtutsplus;

--
-- Name: display_ad_events_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.display_ad_events_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.display_ad_events_id_seq OWNER TO contact_webtutsplus;

--
-- Name: display_ad_events_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.display_ad_events_id_seq OWNED BY public.display_ad_events.id;


--
-- Name: display_ads; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.display_ads (
    id bigint NOT NULL,
    approved boolean DEFAULT false,
    body_markdown text,
    clicks_count integer DEFAULT 0,
    created_at timestamp without time zone NOT NULL,
    impressions_count integer DEFAULT 0,
    organization_id bigint,
    placement_area character varying,
    processed_html text,
    published boolean DEFAULT false,
    success_rate double precision DEFAULT 0.0,
    updated_at timestamp without time zone NOT NULL
);


ALTER TABLE public.display_ads OWNER TO contact_webtutsplus;

--
-- Name: display_ads_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.display_ads_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.display_ads_id_seq OWNER TO contact_webtutsplus;

--
-- Name: display_ads_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.display_ads_id_seq OWNED BY public.display_ads.id;


--
-- Name: email_authorizations; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.email_authorizations (
    id bigint NOT NULL,
    confirmation_token character varying,
    created_at timestamp without time zone NOT NULL,
    json_data jsonb DEFAULT '{}'::jsonb NOT NULL,
    type_of character varying NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    user_id bigint,
    verified_at timestamp without time zone
);


ALTER TABLE public.email_authorizations OWNER TO contact_webtutsplus;

--
-- Name: email_authorizations_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.email_authorizations_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.email_authorizations_id_seq OWNER TO contact_webtutsplus;

--
-- Name: email_authorizations_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.email_authorizations_id_seq OWNED BY public.email_authorizations.id;


--
-- Name: events; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.events (
    id bigint NOT NULL,
    category character varying,
    cover_image character varying,
    created_at timestamp without time zone NOT NULL,
    description_html text,
    description_markdown text,
    ends_at timestamp without time zone,
    host_name character varying,
    live_now boolean DEFAULT false,
    location_name character varying,
    location_url character varying,
    profile_image character varying,
    published boolean,
    slug character varying,
    starts_at timestamp without time zone,
    title character varying,
    updated_at timestamp without time zone NOT NULL
);


ALTER TABLE public.events OWNER TO contact_webtutsplus;

--
-- Name: events_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.events_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.events_id_seq OWNER TO contact_webtutsplus;

--
-- Name: events_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.events_id_seq OWNED BY public.events.id;


--
-- Name: feedback_messages; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.feedback_messages (
    id bigint NOT NULL,
    affected_id bigint,
    category character varying,
    created_at timestamp without time zone,
    feedback_type character varying,
    message text,
    offender_id bigint,
    reported_url character varying,
    reporter_id bigint,
    status character varying DEFAULT 'Open'::character varying,
    updated_at timestamp without time zone
);


ALTER TABLE public.feedback_messages OWNER TO contact_webtutsplus;

--
-- Name: feedback_messages_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.feedback_messages_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.feedback_messages_id_seq OWNER TO contact_webtutsplus;

--
-- Name: feedback_messages_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.feedback_messages_id_seq OWNED BY public.feedback_messages.id;


--
-- Name: field_test_events; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.field_test_events (
    id bigint NOT NULL,
    created_at timestamp without time zone,
    field_test_membership_id bigint,
    name character varying
);


ALTER TABLE public.field_test_events OWNER TO contact_webtutsplus;

--
-- Name: field_test_events_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.field_test_events_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.field_test_events_id_seq OWNER TO contact_webtutsplus;

--
-- Name: field_test_events_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.field_test_events_id_seq OWNED BY public.field_test_events.id;


--
-- Name: field_test_memberships; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.field_test_memberships (
    id bigint NOT NULL,
    converted boolean DEFAULT false,
    created_at timestamp without time zone,
    experiment character varying,
    participant_id character varying,
    participant_type character varying,
    variant character varying
);


ALTER TABLE public.field_test_memberships OWNER TO contact_webtutsplus;

--
-- Name: field_test_memberships_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.field_test_memberships_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.field_test_memberships_id_seq OWNER TO contact_webtutsplus;

--
-- Name: field_test_memberships_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.field_test_memberships_id_seq OWNED BY public.field_test_memberships.id;


--
-- Name: flipper_features; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.flipper_features (
    id bigint NOT NULL,
    created_at timestamp without time zone NOT NULL,
    key character varying NOT NULL,
    updated_at timestamp without time zone NOT NULL
);


ALTER TABLE public.flipper_features OWNER TO contact_webtutsplus;

--
-- Name: flipper_features_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.flipper_features_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.flipper_features_id_seq OWNER TO contact_webtutsplus;

--
-- Name: flipper_features_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.flipper_features_id_seq OWNED BY public.flipper_features.id;


--
-- Name: flipper_gates; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.flipper_gates (
    id bigint NOT NULL,
    created_at timestamp without time zone NOT NULL,
    feature_key character varying NOT NULL,
    key character varying NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    value character varying
);


ALTER TABLE public.flipper_gates OWNER TO contact_webtutsplus;

--
-- Name: flipper_gates_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.flipper_gates_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.flipper_gates_id_seq OWNER TO contact_webtutsplus;

--
-- Name: flipper_gates_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.flipper_gates_id_seq OWNED BY public.flipper_gates.id;


--
-- Name: follows; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.follows (
    id bigint NOT NULL,
    blocked boolean DEFAULT false NOT NULL,
    created_at timestamp without time zone,
    explicit_points double precision DEFAULT 1.0,
    followable_id bigint NOT NULL,
    followable_type character varying NOT NULL,
    follower_id bigint NOT NULL,
    follower_type character varying NOT NULL,
    implicit_points double precision DEFAULT 0.0,
    points double precision DEFAULT 1.0,
    subscription_status character varying DEFAULT 'all_articles'::character varying NOT NULL,
    updated_at timestamp without time zone
);


ALTER TABLE public.follows OWNER TO contact_webtutsplus;

--
-- Name: follows_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.follows_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.follows_id_seq OWNER TO contact_webtutsplus;

--
-- Name: follows_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.follows_id_seq OWNED BY public.follows.id;


--
-- Name: github_issues; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.github_issues (
    id bigint NOT NULL,
    category character varying,
    created_at timestamp without time zone NOT NULL,
    issue_serialized character varying DEFAULT '--- {}
'::character varying,
    processed_html character varying,
    updated_at timestamp without time zone NOT NULL,
    url character varying
);


ALTER TABLE public.github_issues OWNER TO contact_webtutsplus;

--
-- Name: github_issues_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.github_issues_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.github_issues_id_seq OWNER TO contact_webtutsplus;

--
-- Name: github_issues_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.github_issues_id_seq OWNED BY public.github_issues.id;


--
-- Name: github_repos; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.github_repos (
    id bigint NOT NULL,
    additional_note character varying,
    bytes_size integer,
    created_at timestamp without time zone NOT NULL,
    description character varying,
    featured boolean DEFAULT false,
    fork boolean DEFAULT false,
    github_id_code bigint,
    info_hash text DEFAULT '--- {}
'::text,
    language character varying,
    name character varying,
    priority integer DEFAULT 0,
    stargazers_count integer,
    updated_at timestamp without time zone NOT NULL,
    url character varying,
    user_id bigint,
    watchers_count integer
);


ALTER TABLE public.github_repos OWNER TO contact_webtutsplus;

--
-- Name: github_repos_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.github_repos_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.github_repos_id_seq OWNER TO contact_webtutsplus;

--
-- Name: github_repos_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.github_repos_id_seq OWNED BY public.github_repos.id;


--
-- Name: html_variant_successes; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.html_variant_successes (
    id bigint NOT NULL,
    article_id bigint,
    created_at timestamp without time zone NOT NULL,
    html_variant_id bigint,
    updated_at timestamp without time zone NOT NULL
);


ALTER TABLE public.html_variant_successes OWNER TO contact_webtutsplus;

--
-- Name: html_variant_successes_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.html_variant_successes_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.html_variant_successes_id_seq OWNER TO contact_webtutsplus;

--
-- Name: html_variant_successes_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.html_variant_successes_id_seq OWNED BY public.html_variant_successes.id;


--
-- Name: html_variant_trials; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.html_variant_trials (
    id bigint NOT NULL,
    article_id bigint,
    created_at timestamp without time zone NOT NULL,
    html_variant_id bigint,
    updated_at timestamp without time zone NOT NULL
);


ALTER TABLE public.html_variant_trials OWNER TO contact_webtutsplus;

--
-- Name: html_variant_trials_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.html_variant_trials_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.html_variant_trials_id_seq OWNER TO contact_webtutsplus;

--
-- Name: html_variant_trials_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.html_variant_trials_id_seq OWNED BY public.html_variant_trials.id;


--
-- Name: html_variants; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.html_variants (
    id bigint NOT NULL,
    approved boolean DEFAULT false,
    created_at timestamp without time zone NOT NULL,
    "group" character varying,
    html text,
    name character varying,
    published boolean DEFAULT false,
    success_rate double precision DEFAULT 0.0,
    target_tag character varying,
    updated_at timestamp without time zone NOT NULL,
    user_id bigint
);


ALTER TABLE public.html_variants OWNER TO contact_webtutsplus;

--
-- Name: html_variants_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.html_variants_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.html_variants_id_seq OWNER TO contact_webtutsplus;

--
-- Name: html_variants_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.html_variants_id_seq OWNED BY public.html_variants.id;


--
-- Name: identities; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.identities (
    id bigint NOT NULL,
    auth_data_dump text,
    created_at timestamp without time zone NOT NULL,
    provider character varying,
    secret character varying,
    token character varying,
    uid character varying,
    updated_at timestamp without time zone NOT NULL,
    user_id bigint
);


ALTER TABLE public.identities OWNER TO contact_webtutsplus;

--
-- Name: identities_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.identities_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.identities_id_seq OWNER TO contact_webtutsplus;

--
-- Name: identities_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.identities_id_seq OWNED BY public.identities.id;


--
-- Name: mentions; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.mentions (
    id bigint NOT NULL,
    created_at timestamp without time zone NOT NULL,
    mentionable_id bigint,
    mentionable_type character varying,
    updated_at timestamp without time zone NOT NULL,
    user_id bigint
);


ALTER TABLE public.mentions OWNER TO contact_webtutsplus;

--
-- Name: mentions_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.mentions_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.mentions_id_seq OWNER TO contact_webtutsplus;

--
-- Name: mentions_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.mentions_id_seq OWNED BY public.mentions.id;


--
-- Name: messages; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.messages (
    id bigint NOT NULL,
    chat_action character varying,
    chat_channel_id bigint NOT NULL,
    created_at timestamp without time zone NOT NULL,
    edited_at timestamp without time zone,
    message_html character varying NOT NULL,
    message_markdown character varying NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    user_id bigint NOT NULL
);


ALTER TABLE public.messages OWNER TO contact_webtutsplus;

--
-- Name: messages_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.messages_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.messages_id_seq OWNER TO contact_webtutsplus;

--
-- Name: messages_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.messages_id_seq OWNED BY public.messages.id;


--
-- Name: navigation_links; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.navigation_links (
    id bigint NOT NULL,
    created_at timestamp(6) without time zone NOT NULL,
    display_only_when_signed_in boolean DEFAULT false,
    icon character varying NOT NULL,
    name character varying NOT NULL,
    "position" integer,
    updated_at timestamp(6) without time zone NOT NULL,
    url character varying NOT NULL
);


ALTER TABLE public.navigation_links OWNER TO contact_webtutsplus;

--
-- Name: navigation_links_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.navigation_links_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.navigation_links_id_seq OWNER TO contact_webtutsplus;

--
-- Name: navigation_links_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.navigation_links_id_seq OWNED BY public.navigation_links.id;


--
-- Name: notes; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.notes (
    id bigint NOT NULL,
    author_id bigint,
    content text,
    created_at timestamp without time zone NOT NULL,
    noteable_id bigint,
    noteable_type character varying,
    reason character varying,
    updated_at timestamp without time zone NOT NULL
);


ALTER TABLE public.notes OWNER TO contact_webtutsplus;

--
-- Name: notes_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.notes_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.notes_id_seq OWNER TO contact_webtutsplus;

--
-- Name: notes_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.notes_id_seq OWNED BY public.notes.id;


--
-- Name: notification_subscriptions; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.notification_subscriptions (
    id bigint NOT NULL,
    config text DEFAULT 'all_comments'::text NOT NULL,
    created_at timestamp without time zone NOT NULL,
    notifiable_id bigint NOT NULL,
    notifiable_type character varying NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    user_id bigint NOT NULL
);


ALTER TABLE public.notification_subscriptions OWNER TO contact_webtutsplus;

--
-- Name: notification_subscriptions_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.notification_subscriptions_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.notification_subscriptions_id_seq OWNER TO contact_webtutsplus;

--
-- Name: notification_subscriptions_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.notification_subscriptions_id_seq OWNED BY public.notification_subscriptions.id;


--
-- Name: notifications; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.notifications (
    id bigint NOT NULL,
    action character varying,
    created_at timestamp without time zone NOT NULL,
    json_data jsonb,
    notifiable_id bigint,
    notifiable_type character varying,
    notified_at timestamp without time zone,
    organization_id bigint,
    read boolean DEFAULT false,
    updated_at timestamp without time zone NOT NULL,
    user_id bigint
);


ALTER TABLE public.notifications OWNER TO contact_webtutsplus;

--
-- Name: notifications_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.notifications_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.notifications_id_seq OWNER TO contact_webtutsplus;

--
-- Name: notifications_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.notifications_id_seq OWNED BY public.notifications.id;


--
-- Name: oauth_access_grants; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.oauth_access_grants (
    id bigint NOT NULL,
    application_id bigint NOT NULL,
    created_at timestamp without time zone NOT NULL,
    expires_in integer NOT NULL,
    redirect_uri text NOT NULL,
    resource_owner_id bigint NOT NULL,
    revoked_at timestamp without time zone,
    scopes character varying,
    token character varying NOT NULL
);


ALTER TABLE public.oauth_access_grants OWNER TO contact_webtutsplus;

--
-- Name: oauth_access_grants_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.oauth_access_grants_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.oauth_access_grants_id_seq OWNER TO contact_webtutsplus;

--
-- Name: oauth_access_grants_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.oauth_access_grants_id_seq OWNED BY public.oauth_access_grants.id;


--
-- Name: oauth_access_tokens; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.oauth_access_tokens (
    id bigint NOT NULL,
    application_id bigint NOT NULL,
    created_at timestamp without time zone NOT NULL,
    expires_in integer,
    previous_refresh_token character varying DEFAULT ''::character varying NOT NULL,
    refresh_token character varying,
    resource_owner_id bigint,
    revoked_at timestamp without time zone,
    scopes character varying,
    token character varying NOT NULL
);


ALTER TABLE public.oauth_access_tokens OWNER TO contact_webtutsplus;

--
-- Name: oauth_access_tokens_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.oauth_access_tokens_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.oauth_access_tokens_id_seq OWNER TO contact_webtutsplus;

--
-- Name: oauth_access_tokens_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.oauth_access_tokens_id_seq OWNED BY public.oauth_access_tokens.id;


--
-- Name: oauth_applications; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.oauth_applications (
    id bigint NOT NULL,
    confidential boolean DEFAULT true NOT NULL,
    created_at timestamp without time zone NOT NULL,
    name character varying NOT NULL,
    redirect_uri text NOT NULL,
    scopes character varying DEFAULT ''::character varying NOT NULL,
    secret character varying NOT NULL,
    uid character varying NOT NULL,
    updated_at timestamp without time zone NOT NULL
);


ALTER TABLE public.oauth_applications OWNER TO contact_webtutsplus;

--
-- Name: oauth_applications_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.oauth_applications_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.oauth_applications_id_seq OWNER TO contact_webtutsplus;

--
-- Name: oauth_applications_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.oauth_applications_id_seq OWNED BY public.oauth_applications.id;


--
-- Name: organization_memberships; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.organization_memberships (
    id bigint NOT NULL,
    created_at timestamp without time zone NOT NULL,
    organization_id bigint NOT NULL,
    type_of_user character varying NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    user_id bigint NOT NULL,
    user_title character varying
);


ALTER TABLE public.organization_memberships OWNER TO contact_webtutsplus;

--
-- Name: organization_memberships_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.organization_memberships_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.organization_memberships_id_seq OWNER TO contact_webtutsplus;

--
-- Name: organization_memberships_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.organization_memberships_id_seq OWNED BY public.organization_memberships.id;


--
-- Name: organizations; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.organizations (
    id bigint NOT NULL,
    articles_count integer DEFAULT 0 NOT NULL,
    bg_color_hex character varying,
    company_size character varying,
    created_at timestamp without time zone NOT NULL,
    credits_count integer DEFAULT 0 NOT NULL,
    cta_body_markdown text,
    cta_button_text character varying,
    cta_button_url character varying,
    cta_processed_html text,
    dark_nav_image character varying,
    email character varying,
    github_username character varying,
    last_article_at timestamp without time zone DEFAULT '2017-01-01 05:00:00'::timestamp without time zone,
    latest_article_updated_at timestamp without time zone,
    location character varying,
    name character varying,
    nav_image character varying,
    old_old_slug character varying,
    old_slug character varying,
    profile_image character varying,
    profile_updated_at timestamp without time zone DEFAULT '2017-01-01 05:00:00'::timestamp without time zone,
    proof text,
    secret character varying,
    slug character varying,
    spent_credits_count integer DEFAULT 0 NOT NULL,
    story character varying,
    summary text,
    tag_line character varying,
    tech_stack character varying,
    text_color_hex character varying,
    twitter_username character varying,
    unspent_credits_count integer DEFAULT 0 NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    url character varying
);


ALTER TABLE public.organizations OWNER TO contact_webtutsplus;

--
-- Name: organizations_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.organizations_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.organizations_id_seq OWNER TO contact_webtutsplus;

--
-- Name: organizations_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.organizations_id_seq OWNED BY public.organizations.id;


--
-- Name: page_views; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.page_views (
    id bigint NOT NULL,
    article_id bigint,
    counts_for_number_of_views integer DEFAULT 1,
    created_at timestamp without time zone NOT NULL,
    domain character varying,
    path character varying,
    referrer character varying,
    time_tracked_in_seconds integer DEFAULT 15,
    updated_at timestamp without time zone NOT NULL,
    user_agent character varying,
    user_id bigint
);


ALTER TABLE public.page_views OWNER TO contact_webtutsplus;

--
-- Name: page_views_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.page_views_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.page_views_id_seq OWNER TO contact_webtutsplus;

--
-- Name: page_views_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.page_views_id_seq OWNED BY public.page_views.id;


--
-- Name: pages; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.pages (
    id bigint NOT NULL,
    body_html text,
    body_json jsonb,
    body_markdown text,
    created_at timestamp without time zone NOT NULL,
    description character varying,
    is_top_level_path boolean DEFAULT false,
    processed_html text,
    slug character varying,
    social_image character varying,
    template character varying,
    title character varying,
    updated_at timestamp without time zone NOT NULL
);


ALTER TABLE public.pages OWNER TO contact_webtutsplus;

--
-- Name: pages_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.pages_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.pages_id_seq OWNER TO contact_webtutsplus;

--
-- Name: pages_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.pages_id_seq OWNED BY public.pages.id;


--
-- Name: podcast_episode_appearances; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.podcast_episode_appearances (
    id bigint NOT NULL,
    approved boolean DEFAULT false NOT NULL,
    created_at timestamp(6) without time zone NOT NULL,
    featured_on_user_profile boolean DEFAULT false NOT NULL,
    podcast_episode_id bigint NOT NULL,
    role character varying DEFAULT 'guest'::character varying NOT NULL,
    updated_at timestamp(6) without time zone NOT NULL,
    user_id bigint NOT NULL
);


ALTER TABLE public.podcast_episode_appearances OWNER TO contact_webtutsplus;

--
-- Name: podcast_episode_appearances_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.podcast_episode_appearances_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.podcast_episode_appearances_id_seq OWNER TO contact_webtutsplus;

--
-- Name: podcast_episode_appearances_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.podcast_episode_appearances_id_seq OWNED BY public.podcast_episode_appearances.id;


--
-- Name: podcast_episodes; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.podcast_episodes (
    id bigint NOT NULL,
    any_comments_hidden boolean DEFAULT false,
    body text,
    comments_count integer DEFAULT 0 NOT NULL,
    created_at timestamp without time zone NOT NULL,
    duration_in_seconds integer,
    guid character varying NOT NULL,
    https boolean DEFAULT true,
    image character varying,
    itunes_url character varying,
    media_url character varying NOT NULL,
    podcast_id bigint,
    processed_html text,
    published_at timestamp without time zone,
    quote text,
    reachable boolean DEFAULT true,
    reactions_count integer DEFAULT 0 NOT NULL,
    slug character varying NOT NULL,
    social_image character varying,
    status_notice character varying,
    subtitle character varying,
    summary text,
    title character varying NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    website_url character varying
);


ALTER TABLE public.podcast_episodes OWNER TO contact_webtutsplus;

--
-- Name: podcast_episodes_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.podcast_episodes_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.podcast_episodes_id_seq OWNER TO contact_webtutsplus;

--
-- Name: podcast_episodes_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.podcast_episodes_id_seq OWNED BY public.podcast_episodes.id;


--
-- Name: podcast_ownerships; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.podcast_ownerships (
    id bigint NOT NULL,
    created_at timestamp(6) without time zone NOT NULL,
    podcast_id bigint NOT NULL,
    updated_at timestamp(6) without time zone NOT NULL,
    user_id bigint NOT NULL
);


ALTER TABLE public.podcast_ownerships OWNER TO contact_webtutsplus;

--
-- Name: podcast_ownerships_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.podcast_ownerships_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.podcast_ownerships_id_seq OWNER TO contact_webtutsplus;

--
-- Name: podcast_ownerships_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.podcast_ownerships_id_seq OWNED BY public.podcast_ownerships.id;


--
-- Name: podcasts; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.podcasts (
    id bigint NOT NULL,
    android_url character varying,
    created_at timestamp without time zone NOT NULL,
    creator_id bigint,
    description text,
    feed_url character varying NOT NULL,
    image character varying NOT NULL,
    itunes_url character varying,
    main_color_hex character varying NOT NULL,
    overcast_url character varying,
    pattern_image character varying,
    published boolean DEFAULT false,
    reachable boolean DEFAULT true,
    slug character varying NOT NULL,
    soundcloud_url character varying,
    status_notice text DEFAULT ''::text,
    title character varying NOT NULL,
    twitter_username character varying,
    "unique_website_url?" boolean DEFAULT true,
    updated_at timestamp without time zone NOT NULL,
    website_url character varying
);


ALTER TABLE public.podcasts OWNER TO contact_webtutsplus;

--
-- Name: podcasts_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.podcasts_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.podcasts_id_seq OWNER TO contact_webtutsplus;

--
-- Name: podcasts_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.podcasts_id_seq OWNED BY public.podcasts.id;


--
-- Name: poll_options; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.poll_options (
    id bigint NOT NULL,
    created_at timestamp without time zone NOT NULL,
    markdown character varying,
    poll_id bigint,
    poll_votes_count integer DEFAULT 0 NOT NULL,
    processed_html character varying,
    updated_at timestamp without time zone NOT NULL
);


ALTER TABLE public.poll_options OWNER TO contact_webtutsplus;

--
-- Name: poll_options_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.poll_options_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.poll_options_id_seq OWNER TO contact_webtutsplus;

--
-- Name: poll_options_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.poll_options_id_seq OWNED BY public.poll_options.id;


--
-- Name: poll_skips; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.poll_skips (
    id bigint NOT NULL,
    created_at timestamp without time zone NOT NULL,
    poll_id bigint,
    updated_at timestamp without time zone NOT NULL,
    user_id bigint
);


ALTER TABLE public.poll_skips OWNER TO contact_webtutsplus;

--
-- Name: poll_skips_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.poll_skips_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.poll_skips_id_seq OWNER TO contact_webtutsplus;

--
-- Name: poll_skips_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.poll_skips_id_seq OWNED BY public.poll_skips.id;


--
-- Name: poll_votes; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.poll_votes (
    id bigint NOT NULL,
    created_at timestamp without time zone NOT NULL,
    poll_id bigint NOT NULL,
    poll_option_id bigint NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    user_id bigint NOT NULL
);


ALTER TABLE public.poll_votes OWNER TO contact_webtutsplus;

--
-- Name: poll_votes_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.poll_votes_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.poll_votes_id_seq OWNER TO contact_webtutsplus;

--
-- Name: poll_votes_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.poll_votes_id_seq OWNED BY public.poll_votes.id;


--
-- Name: polls; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.polls (
    id bigint NOT NULL,
    article_id bigint,
    created_at timestamp without time zone NOT NULL,
    poll_options_count integer DEFAULT 0 NOT NULL,
    poll_skips_count integer DEFAULT 0 NOT NULL,
    poll_votes_count integer DEFAULT 0 NOT NULL,
    prompt_html character varying,
    prompt_markdown character varying,
    updated_at timestamp without time zone NOT NULL
);


ALTER TABLE public.polls OWNER TO contact_webtutsplus;

--
-- Name: polls_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.polls_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.polls_id_seq OWNER TO contact_webtutsplus;

--
-- Name: polls_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.polls_id_seq OWNED BY public.polls.id;


--
-- Name: profile_field_groups; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.profile_field_groups (
    id bigint NOT NULL,
    created_at timestamp(6) without time zone NOT NULL,
    description character varying,
    name character varying NOT NULL,
    updated_at timestamp(6) without time zone NOT NULL
);


ALTER TABLE public.profile_field_groups OWNER TO contact_webtutsplus;

--
-- Name: profile_field_groups_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.profile_field_groups_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.profile_field_groups_id_seq OWNER TO contact_webtutsplus;

--
-- Name: profile_field_groups_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.profile_field_groups_id_seq OWNED BY public.profile_field_groups.id;


--
-- Name: profile_fields; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.profile_fields (
    id bigint NOT NULL,
    attribute_name character varying NOT NULL,
    created_at timestamp(6) without time zone NOT NULL,
    description character varying,
    display_area integer DEFAULT 1 NOT NULL,
    input_type integer DEFAULT 0 NOT NULL,
    label public.citext NOT NULL,
    placeholder_text character varying,
    profile_field_group_id bigint,
    show_in_onboarding boolean DEFAULT false NOT NULL,
    updated_at timestamp(6) without time zone NOT NULL
);


ALTER TABLE public.profile_fields OWNER TO contact_webtutsplus;

--
-- Name: profile_fields_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.profile_fields_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.profile_fields_id_seq OWNER TO contact_webtutsplus;

--
-- Name: profile_fields_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.profile_fields_id_seq OWNED BY public.profile_fields.id;


--
-- Name: profile_pins; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.profile_pins (
    id bigint NOT NULL,
    created_at timestamp without time zone NOT NULL,
    pinnable_id bigint,
    pinnable_type character varying,
    profile_id bigint,
    profile_type character varying,
    updated_at timestamp without time zone NOT NULL
);


ALTER TABLE public.profile_pins OWNER TO contact_webtutsplus;

--
-- Name: profile_pins_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.profile_pins_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.profile_pins_id_seq OWNER TO contact_webtutsplus;

--
-- Name: profile_pins_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.profile_pins_id_seq OWNED BY public.profile_pins.id;


--
-- Name: profiles; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.profiles (
    id bigint NOT NULL,
    created_at timestamp(6) without time zone NOT NULL,
    data jsonb DEFAULT '{}'::jsonb NOT NULL,
    updated_at timestamp(6) without time zone NOT NULL,
    user_id bigint NOT NULL
);


ALTER TABLE public.profiles OWNER TO contact_webtutsplus;

--
-- Name: profiles_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.profiles_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.profiles_id_seq OWNER TO contact_webtutsplus;

--
-- Name: profiles_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.profiles_id_seq OWNED BY public.profiles.id;


--
-- Name: rating_votes; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.rating_votes (
    id bigint NOT NULL,
    article_id bigint,
    context character varying DEFAULT 'explicit'::character varying,
    created_at timestamp without time zone NOT NULL,
    "group" character varying,
    rating double precision,
    updated_at timestamp without time zone NOT NULL,
    user_id bigint
);


ALTER TABLE public.rating_votes OWNER TO contact_webtutsplus;

--
-- Name: rating_votes_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.rating_votes_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.rating_votes_id_seq OWNER TO contact_webtutsplus;

--
-- Name: rating_votes_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.rating_votes_id_seq OWNED BY public.rating_votes.id;


--
-- Name: reactions; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.reactions (
    id bigint NOT NULL,
    category character varying,
    created_at timestamp without time zone NOT NULL,
    points double precision DEFAULT 1.0,
    reactable_id bigint,
    reactable_type character varying,
    status character varying DEFAULT 'valid'::character varying,
    updated_at timestamp without time zone NOT NULL,
    user_id bigint
);


ALTER TABLE public.reactions OWNER TO contact_webtutsplus;

--
-- Name: reactions_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.reactions_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.reactions_id_seq OWNER TO contact_webtutsplus;

--
-- Name: reactions_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.reactions_id_seq OWNED BY public.reactions.id;


--
-- Name: response_templates; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.response_templates (
    id bigint NOT NULL,
    content text NOT NULL,
    content_type character varying NOT NULL,
    created_at timestamp without time zone NOT NULL,
    title character varying NOT NULL,
    type_of character varying NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    user_id bigint
);


ALTER TABLE public.response_templates OWNER TO contact_webtutsplus;

--
-- Name: response_templates_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.response_templates_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.response_templates_id_seq OWNER TO contact_webtutsplus;

--
-- Name: response_templates_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.response_templates_id_seq OWNED BY public.response_templates.id;


--
-- Name: roles; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.roles (
    id bigint NOT NULL,
    created_at timestamp without time zone,
    name character varying,
    resource_id bigint,
    resource_type character varying,
    updated_at timestamp without time zone
);


ALTER TABLE public.roles OWNER TO contact_webtutsplus;

--
-- Name: roles_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.roles_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.roles_id_seq OWNER TO contact_webtutsplus;

--
-- Name: roles_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.roles_id_seq OWNED BY public.roles.id;


--
-- Name: schema_migrations; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.schema_migrations (
    version character varying NOT NULL
);


ALTER TABLE public.schema_migrations OWNER TO contact_webtutsplus;

--
-- Name: site_configs; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.site_configs (
    id bigint NOT NULL,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    value text,
    var character varying NOT NULL
);


ALTER TABLE public.site_configs OWNER TO contact_webtutsplus;

--
-- Name: site_configs_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.site_configs_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.site_configs_id_seq OWNER TO contact_webtutsplus;

--
-- Name: site_configs_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.site_configs_id_seq OWNED BY public.site_configs.id;


--
-- Name: sponsorships; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.sponsorships (
    id bigint NOT NULL,
    blurb_html text,
    created_at timestamp without time zone NOT NULL,
    expires_at timestamp without time zone,
    featured_number integer DEFAULT 0 NOT NULL,
    instructions text,
    instructions_updated_at timestamp without time zone,
    level character varying NOT NULL,
    organization_id bigint,
    sponsorable_id bigint,
    sponsorable_type character varying,
    status character varying DEFAULT 'none'::character varying NOT NULL,
    tagline character varying,
    updated_at timestamp without time zone NOT NULL,
    url character varying,
    user_id bigint
);


ALTER TABLE public.sponsorships OWNER TO contact_webtutsplus;

--
-- Name: sponsorships_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.sponsorships_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sponsorships_id_seq OWNER TO contact_webtutsplus;

--
-- Name: sponsorships_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.sponsorships_id_seq OWNED BY public.sponsorships.id;


--
-- Name: tag_adjustments; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.tag_adjustments (
    id bigint NOT NULL,
    adjustment_type character varying,
    article_id bigint,
    created_at timestamp without time zone NOT NULL,
    reason_for_adjustment character varying,
    status character varying,
    tag_id bigint,
    tag_name character varying,
    updated_at timestamp without time zone NOT NULL,
    user_id bigint
);


ALTER TABLE public.tag_adjustments OWNER TO contact_webtutsplus;

--
-- Name: tag_adjustments_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.tag_adjustments_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.tag_adjustments_id_seq OWNER TO contact_webtutsplus;

--
-- Name: tag_adjustments_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.tag_adjustments_id_seq OWNED BY public.tag_adjustments.id;


--
-- Name: taggings; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.taggings (
    id bigint NOT NULL,
    context character varying(128),
    created_at timestamp without time zone,
    tag_id bigint,
    taggable_id bigint,
    taggable_type character varying,
    tagger_id bigint,
    tagger_type character varying
);


ALTER TABLE public.taggings OWNER TO contact_webtutsplus;

--
-- Name: taggings_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.taggings_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.taggings_id_seq OWNER TO contact_webtutsplus;

--
-- Name: taggings_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.taggings_id_seq OWNED BY public.taggings.id;


--
-- Name: tags; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.tags (
    id bigint NOT NULL,
    alias_for character varying,
    badge_id bigint,
    bg_color_hex character varying,
    buffer_profile_id_code character varying,
    category character varying DEFAULT 'uncategorized'::character varying NOT NULL,
    created_at timestamp without time zone,
    hotness_score integer DEFAULT 0,
    keywords_for_search character varying,
    mod_chat_channel_id bigint,
    name character varying,
    pretty_name character varying,
    profile_image character varying,
    requires_approval boolean DEFAULT false,
    rules_html text,
    rules_markdown text,
    short_summary character varying,
    social_image character varying,
    social_preview_template character varying DEFAULT 'article'::character varying,
    submission_template text,
    supported boolean DEFAULT false,
    taggings_count integer DEFAULT 0,
    text_color_hex character varying,
    updated_at timestamp without time zone,
    wiki_body_html text,
    wiki_body_markdown text
);


ALTER TABLE public.tags OWNER TO contact_webtutsplus;

--
-- Name: tags_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.tags_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.tags_id_seq OWNER TO contact_webtutsplus;

--
-- Name: tags_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.tags_id_seq OWNED BY public.tags.id;


--
-- Name: tweets; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.tweets (
    id bigint NOT NULL,
    created_at timestamp without time zone NOT NULL,
    extended_entities_serialized text DEFAULT '--- {}
'::text,
    favorite_count integer,
    full_fetched_object_serialized text DEFAULT '--- {}
'::text,
    hashtags_serialized character varying DEFAULT '--- []
'::character varying,
    in_reply_to_status_id_code character varying,
    in_reply_to_user_id_code character varying,
    in_reply_to_username character varying,
    is_quote_status boolean,
    last_fetched_at timestamp without time zone,
    media_serialized text DEFAULT '--- []
'::text,
    mentioned_usernames_serialized character varying DEFAULT '--- []
'::character varying,
    profile_image character varying,
    quoted_tweet_id_code character varying,
    retweet_count integer,
    source character varying,
    text character varying,
    tweeted_at timestamp without time zone,
    twitter_id_code character varying,
    twitter_name character varying,
    twitter_uid character varying,
    twitter_user_followers_count integer,
    twitter_user_following_count integer,
    twitter_username character varying,
    updated_at timestamp without time zone NOT NULL,
    urls_serialized text DEFAULT '--- []
'::text,
    user_id bigint,
    user_is_verified boolean
);


ALTER TABLE public.tweets OWNER TO contact_webtutsplus;

--
-- Name: tweets_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.tweets_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.tweets_id_seq OWNER TO contact_webtutsplus;

--
-- Name: tweets_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.tweets_id_seq OWNED BY public.tweets.id;


--
-- Name: user_blocks; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.user_blocks (
    id bigint NOT NULL,
    blocked_id bigint NOT NULL,
    blocker_id bigint NOT NULL,
    config character varying DEFAULT 'default'::character varying NOT NULL,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);


ALTER TABLE public.user_blocks OWNER TO contact_webtutsplus;

--
-- Name: user_blocks_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.user_blocks_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.user_blocks_id_seq OWNER TO contact_webtutsplus;

--
-- Name: user_blocks_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.user_blocks_id_seq OWNED BY public.user_blocks.id;


--
-- Name: user_subscriptions; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.user_subscriptions (
    id bigint NOT NULL,
    author_id bigint NOT NULL,
    created_at timestamp(6) without time zone NOT NULL,
    subscriber_email character varying NOT NULL,
    subscriber_id bigint NOT NULL,
    updated_at timestamp(6) without time zone NOT NULL,
    user_subscription_sourceable_id bigint,
    user_subscription_sourceable_type character varying
);


ALTER TABLE public.user_subscriptions OWNER TO contact_webtutsplus;

--
-- Name: user_subscriptions_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.user_subscriptions_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.user_subscriptions_id_seq OWNER TO contact_webtutsplus;

--
-- Name: user_subscriptions_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.user_subscriptions_id_seq OWNED BY public.user_subscriptions.id;


--
-- Name: users; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.users (
    id bigint NOT NULL,
    apple_created_at timestamp without time zone,
    apple_username character varying,
    articles_count integer DEFAULT 0 NOT NULL,
    available_for character varying,
    badge_achievements_count integer DEFAULT 0 NOT NULL,
    behance_url character varying,
    bg_color_hex character varying,
    blocked_by_count bigint DEFAULT 0 NOT NULL,
    blocking_others_count bigint DEFAULT 0 NOT NULL,
    checked_code_of_conduct boolean DEFAULT false,
    checked_terms_and_conditions boolean DEFAULT false,
    comments_count integer DEFAULT 0 NOT NULL,
    config_font character varying DEFAULT 'default'::character varying,
    config_navbar character varying DEFAULT 'default'::character varying NOT NULL,
    config_theme character varying DEFAULT 'default'::character varying,
    confirmation_sent_at timestamp without time zone,
    confirmation_token character varying,
    confirmed_at timestamp without time zone,
    created_at timestamp without time zone NOT NULL,
    credits_count integer DEFAULT 0 NOT NULL,
    current_sign_in_at timestamp without time zone,
    current_sign_in_ip inet,
    currently_hacking_on character varying,
    currently_learning character varying,
    display_announcements boolean DEFAULT true,
    display_sponsors boolean DEFAULT true,
    dribbble_url character varying,
    editor_version character varying DEFAULT 'v1'::character varying,
    education character varying,
    email character varying,
    email_badge_notifications boolean DEFAULT true,
    email_comment_notifications boolean DEFAULT true,
    email_community_mod_newsletter boolean DEFAULT false,
    email_connect_messages boolean DEFAULT true,
    email_digest_periodic boolean DEFAULT false NOT NULL,
    email_follower_notifications boolean DEFAULT true,
    email_membership_newsletter boolean DEFAULT false,
    email_mention_notifications boolean DEFAULT true,
    email_newsletter boolean DEFAULT false,
    email_public boolean DEFAULT false,
    email_tag_mod_newsletter boolean DEFAULT false,
    email_unread_notifications boolean DEFAULT true,
    employer_name character varying,
    employer_url character varying,
    employment_title character varying,
    encrypted_password character varying DEFAULT ''::character varying NOT NULL,
    experience_level integer,
    export_requested boolean DEFAULT false,
    exported_at timestamp without time zone,
    facebook_created_at timestamp without time zone,
    facebook_url character varying,
    facebook_username character varying,
    failed_attempts integer DEFAULT 0,
    feed_admin_publish_permission boolean DEFAULT true,
    feed_fetched_at timestamp without time zone DEFAULT '2017-01-01 05:00:00'::timestamp without time zone,
    feed_mark_canonical boolean DEFAULT false,
    feed_referential_link boolean DEFAULT true NOT NULL,
    feed_url character varying,
    following_orgs_count integer DEFAULT 0 NOT NULL,
    following_tags_count integer DEFAULT 0 NOT NULL,
    following_users_count integer DEFAULT 0 NOT NULL,
    github_created_at timestamp without time zone,
    github_repos_updated_at timestamp without time zone DEFAULT '2017-01-01 05:00:00'::timestamp without time zone,
    github_username character varying,
    gitlab_url character varying,
    inbox_guidelines character varying,
    inbox_type character varying DEFAULT 'private'::character varying,
    instagram_url character varying,
    invitation_accepted_at timestamp without time zone,
    invitation_created_at timestamp without time zone,
    invitation_limit integer,
    invitation_sent_at timestamp without time zone,
    invitation_token character varying,
    invitations_count integer DEFAULT 0,
    invited_by_id bigint,
    invited_by_type character varying,
    language_settings jsonb DEFAULT '{}'::jsonb NOT NULL,
    last_article_at timestamp without time zone DEFAULT '2017-01-01 05:00:00'::timestamp without time zone,
    last_comment_at timestamp without time zone DEFAULT '2017-01-01 05:00:00'::timestamp without time zone,
    last_followed_at timestamp without time zone,
    last_moderation_notification timestamp without time zone DEFAULT '2017-01-01 00:00:00'::timestamp without time zone,
    last_notification_activity timestamp without time zone,
    last_onboarding_page character varying,
    last_reacted_at timestamp without time zone,
    last_sign_in_at timestamp without time zone,
    last_sign_in_ip inet,
    latest_article_updated_at timestamp without time zone,
    linkedin_url character varying,
    location character varying,
    locked_at timestamp without time zone,
    mastodon_url character varying,
    medium_url character varying,
    mobile_comment_notifications boolean DEFAULT true,
    mod_roundrobin_notifications boolean DEFAULT true,
    monthly_dues integer DEFAULT 0,
    mostly_work_with character varying,
    name character varying,
    old_old_username character varying,
    old_username character varying,
    onboarding_package_requested boolean DEFAULT false,
    organization_info_updated_at timestamp without time zone,
    payment_pointer character varying,
    permit_adjacent_sponsors boolean DEFAULT true,
    profile_image character varying,
    profile_updated_at timestamp without time zone DEFAULT '2017-01-01 05:00:00'::timestamp without time zone,
    rating_votes_count integer DEFAULT 0 NOT NULL,
    reaction_notifications boolean DEFAULT true,
    reactions_count integer DEFAULT 0 NOT NULL,
    registered boolean DEFAULT true,
    registered_at timestamp without time zone,
    remember_created_at timestamp without time zone,
    remember_token character varying,
    reputation_modifier double precision DEFAULT 1.0,
    reset_password_sent_at timestamp without time zone,
    reset_password_token character varying,
    saw_onboarding boolean DEFAULT true,
    score integer DEFAULT 0,
    secret character varying,
    sign_in_count integer DEFAULT 0 NOT NULL,
    signup_cta_variant character varying,
    spent_credits_count integer DEFAULT 0 NOT NULL,
    stackoverflow_url character varying,
    stripe_id_code character varying,
    subscribed_to_user_subscriptions_count integer DEFAULT 0 NOT NULL,
    summary text,
    text_color_hex character varying,
    twitch_url character varying,
    twitter_created_at timestamp without time zone,
    twitter_followers_count integer,
    twitter_following_count integer,
    twitter_username character varying,
    unconfirmed_email character varying,
    unlock_token character varying,
    unspent_credits_count integer DEFAULT 0 NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    username character varying,
    website_url character varying,
    welcome_notifications boolean DEFAULT true NOT NULL,
    workshop_expiration timestamp without time zone,
    youtube_url character varying
);


ALTER TABLE public.users OWNER TO contact_webtutsplus;

--
-- Name: users_gdpr_delete_requests; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.users_gdpr_delete_requests (
    id bigint NOT NULL,
    created_at timestamp(6) without time zone NOT NULL,
    email character varying NOT NULL,
    updated_at timestamp(6) without time zone NOT NULL,
    user_id integer NOT NULL,
    username character varying
);


ALTER TABLE public.users_gdpr_delete_requests OWNER TO contact_webtutsplus;

--
-- Name: users_gdpr_delete_requests_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.users_gdpr_delete_requests_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.users_gdpr_delete_requests_id_seq OWNER TO contact_webtutsplus;

--
-- Name: users_gdpr_delete_requests_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.users_gdpr_delete_requests_id_seq OWNED BY public.users_gdpr_delete_requests.id;


--
-- Name: users_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.users_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.users_id_seq OWNER TO contact_webtutsplus;

--
-- Name: users_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.users_id_seq OWNED BY public.users.id;


--
-- Name: users_roles; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.users_roles (
    role_id bigint,
    user_id bigint
);


ALTER TABLE public.users_roles OWNER TO contact_webtutsplus;

--
-- Name: webhook_endpoints; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.webhook_endpoints (
    id bigint NOT NULL,
    created_at timestamp without time zone NOT NULL,
    events character varying[] NOT NULL,
    oauth_application_id bigint,
    source character varying,
    target_url character varying NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    user_id bigint NOT NULL
);


ALTER TABLE public.webhook_endpoints OWNER TO contact_webtutsplus;

--
-- Name: webhook_endpoints_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.webhook_endpoints_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.webhook_endpoints_id_seq OWNER TO contact_webtutsplus;

--
-- Name: webhook_endpoints_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.webhook_endpoints_id_seq OWNED BY public.webhook_endpoints.id;


--
-- Name: welcome_notifications; Type: TABLE; Schema: public; Owner: contact_webtutsplus
--

CREATE TABLE public.welcome_notifications (
    id bigint NOT NULL,
    created_at timestamp(6) without time zone NOT NULL,
    updated_at timestamp(6) without time zone NOT NULL
);


ALTER TABLE public.welcome_notifications OWNER TO contact_webtutsplus;

--
-- Name: welcome_notifications_id_seq; Type: SEQUENCE; Schema: public; Owner: contact_webtutsplus
--

CREATE SEQUENCE public.welcome_notifications_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.welcome_notifications_id_seq OWNER TO contact_webtutsplus;

--
-- Name: welcome_notifications_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: contact_webtutsplus
--

ALTER SEQUENCE public.welcome_notifications_id_seq OWNED BY public.welcome_notifications.id;


--
-- Name: ahoy_events id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.ahoy_events ALTER COLUMN id SET DEFAULT nextval('public.ahoy_events_id_seq'::regclass);


--
-- Name: ahoy_messages id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.ahoy_messages ALTER COLUMN id SET DEFAULT nextval('public.ahoy_messages_id_seq'::regclass);


--
-- Name: ahoy_visits id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.ahoy_visits ALTER COLUMN id SET DEFAULT nextval('public.ahoy_visits_id_seq'::regclass);


--
-- Name: announcements id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.announcements ALTER COLUMN id SET DEFAULT nextval('public.announcements_id_seq'::regclass);


--
-- Name: api_secrets id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.api_secrets ALTER COLUMN id SET DEFAULT nextval('public.api_secrets_id_seq'::regclass);


--
-- Name: articles id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.articles ALTER COLUMN id SET DEFAULT nextval('public.articles_id_seq'::regclass);


--
-- Name: audit_logs id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.audit_logs ALTER COLUMN id SET DEFAULT nextval('public.audit_logs_id_seq'::regclass);


--
-- Name: badge_achievements id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.badge_achievements ALTER COLUMN id SET DEFAULT nextval('public.badge_achievements_id_seq'::regclass);


--
-- Name: badges id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.badges ALTER COLUMN id SET DEFAULT nextval('public.badges_id_seq'::regclass);


--
-- Name: banished_users id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.banished_users ALTER COLUMN id SET DEFAULT nextval('public.banished_users_id_seq'::regclass);


--
-- Name: blazer_audits id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.blazer_audits ALTER COLUMN id SET DEFAULT nextval('public.blazer_audits_id_seq'::regclass);


--
-- Name: blazer_checks id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.blazer_checks ALTER COLUMN id SET DEFAULT nextval('public.blazer_checks_id_seq'::regclass);


--
-- Name: blazer_dashboard_queries id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.blazer_dashboard_queries ALTER COLUMN id SET DEFAULT nextval('public.blazer_dashboard_queries_id_seq'::regclass);


--
-- Name: blazer_dashboards id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.blazer_dashboards ALTER COLUMN id SET DEFAULT nextval('public.blazer_dashboards_id_seq'::regclass);


--
-- Name: blazer_queries id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.blazer_queries ALTER COLUMN id SET DEFAULT nextval('public.blazer_queries_id_seq'::regclass);


--
-- Name: broadcasts id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.broadcasts ALTER COLUMN id SET DEFAULT nextval('public.broadcasts_id_seq'::regclass);


--
-- Name: buffer_updates id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.buffer_updates ALTER COLUMN id SET DEFAULT nextval('public.buffer_updates_id_seq'::regclass);


--
-- Name: chat_channel_memberships id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.chat_channel_memberships ALTER COLUMN id SET DEFAULT nextval('public.chat_channel_memberships_id_seq'::regclass);


--
-- Name: chat_channels id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.chat_channels ALTER COLUMN id SET DEFAULT nextval('public.chat_channels_id_seq'::regclass);


--
-- Name: classified_listing_categories id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.classified_listing_categories ALTER COLUMN id SET DEFAULT nextval('public.classified_listing_categories_id_seq'::regclass);


--
-- Name: classified_listings id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.classified_listings ALTER COLUMN id SET DEFAULT nextval('public.classified_listings_id_seq'::regclass);


--
-- Name: collections id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.collections ALTER COLUMN id SET DEFAULT nextval('public.collections_id_seq'::regclass);


--
-- Name: comments id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.comments ALTER COLUMN id SET DEFAULT nextval('public.comments_id_seq'::regclass);


--
-- Name: credits id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.credits ALTER COLUMN id SET DEFAULT nextval('public.credits_id_seq'::regclass);


--
-- Name: custom_profile_fields id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.custom_profile_fields ALTER COLUMN id SET DEFAULT nextval('public.custom_profile_fields_id_seq'::regclass);


--
-- Name: data_update_scripts id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.data_update_scripts ALTER COLUMN id SET DEFAULT nextval('public.data_update_scripts_id_seq'::regclass);


--
-- Name: display_ad_events id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.display_ad_events ALTER COLUMN id SET DEFAULT nextval('public.display_ad_events_id_seq'::regclass);


--
-- Name: display_ads id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.display_ads ALTER COLUMN id SET DEFAULT nextval('public.display_ads_id_seq'::regclass);


--
-- Name: email_authorizations id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.email_authorizations ALTER COLUMN id SET DEFAULT nextval('public.email_authorizations_id_seq'::regclass);


--
-- Name: events id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.events ALTER COLUMN id SET DEFAULT nextval('public.events_id_seq'::regclass);


--
-- Name: feedback_messages id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.feedback_messages ALTER COLUMN id SET DEFAULT nextval('public.feedback_messages_id_seq'::regclass);


--
-- Name: field_test_events id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.field_test_events ALTER COLUMN id SET DEFAULT nextval('public.field_test_events_id_seq'::regclass);


--
-- Name: field_test_memberships id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.field_test_memberships ALTER COLUMN id SET DEFAULT nextval('public.field_test_memberships_id_seq'::regclass);


--
-- Name: flipper_features id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.flipper_features ALTER COLUMN id SET DEFAULT nextval('public.flipper_features_id_seq'::regclass);


--
-- Name: flipper_gates id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.flipper_gates ALTER COLUMN id SET DEFAULT nextval('public.flipper_gates_id_seq'::regclass);


--
-- Name: follows id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.follows ALTER COLUMN id SET DEFAULT nextval('public.follows_id_seq'::regclass);


--
-- Name: github_issues id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.github_issues ALTER COLUMN id SET DEFAULT nextval('public.github_issues_id_seq'::regclass);


--
-- Name: github_repos id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.github_repos ALTER COLUMN id SET DEFAULT nextval('public.github_repos_id_seq'::regclass);


--
-- Name: html_variant_successes id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.html_variant_successes ALTER COLUMN id SET DEFAULT nextval('public.html_variant_successes_id_seq'::regclass);


--
-- Name: html_variant_trials id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.html_variant_trials ALTER COLUMN id SET DEFAULT nextval('public.html_variant_trials_id_seq'::regclass);


--
-- Name: html_variants id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.html_variants ALTER COLUMN id SET DEFAULT nextval('public.html_variants_id_seq'::regclass);


--
-- Name: identities id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.identities ALTER COLUMN id SET DEFAULT nextval('public.identities_id_seq'::regclass);


--
-- Name: mentions id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.mentions ALTER COLUMN id SET DEFAULT nextval('public.mentions_id_seq'::regclass);


--
-- Name: messages id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.messages ALTER COLUMN id SET DEFAULT nextval('public.messages_id_seq'::regclass);


--
-- Name: navigation_links id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.navigation_links ALTER COLUMN id SET DEFAULT nextval('public.navigation_links_id_seq'::regclass);


--
-- Name: notes id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.notes ALTER COLUMN id SET DEFAULT nextval('public.notes_id_seq'::regclass);


--
-- Name: notification_subscriptions id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.notification_subscriptions ALTER COLUMN id SET DEFAULT nextval('public.notification_subscriptions_id_seq'::regclass);


--
-- Name: notifications id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.notifications ALTER COLUMN id SET DEFAULT nextval('public.notifications_id_seq'::regclass);


--
-- Name: oauth_access_grants id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.oauth_access_grants ALTER COLUMN id SET DEFAULT nextval('public.oauth_access_grants_id_seq'::regclass);


--
-- Name: oauth_access_tokens id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.oauth_access_tokens ALTER COLUMN id SET DEFAULT nextval('public.oauth_access_tokens_id_seq'::regclass);


--
-- Name: oauth_applications id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.oauth_applications ALTER COLUMN id SET DEFAULT nextval('public.oauth_applications_id_seq'::regclass);


--
-- Name: organization_memberships id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.organization_memberships ALTER COLUMN id SET DEFAULT nextval('public.organization_memberships_id_seq'::regclass);


--
-- Name: organizations id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.organizations ALTER COLUMN id SET DEFAULT nextval('public.organizations_id_seq'::regclass);


--
-- Name: page_views id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.page_views ALTER COLUMN id SET DEFAULT nextval('public.page_views_id_seq'::regclass);


--
-- Name: pages id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.pages ALTER COLUMN id SET DEFAULT nextval('public.pages_id_seq'::regclass);


--
-- Name: podcast_episode_appearances id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.podcast_episode_appearances ALTER COLUMN id SET DEFAULT nextval('public.podcast_episode_appearances_id_seq'::regclass);


--
-- Name: podcast_episodes id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.podcast_episodes ALTER COLUMN id SET DEFAULT nextval('public.podcast_episodes_id_seq'::regclass);


--
-- Name: podcast_ownerships id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.podcast_ownerships ALTER COLUMN id SET DEFAULT nextval('public.podcast_ownerships_id_seq'::regclass);


--
-- Name: podcasts id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.podcasts ALTER COLUMN id SET DEFAULT nextval('public.podcasts_id_seq'::regclass);


--
-- Name: poll_options id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.poll_options ALTER COLUMN id SET DEFAULT nextval('public.poll_options_id_seq'::regclass);


--
-- Name: poll_skips id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.poll_skips ALTER COLUMN id SET DEFAULT nextval('public.poll_skips_id_seq'::regclass);


--
-- Name: poll_votes id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.poll_votes ALTER COLUMN id SET DEFAULT nextval('public.poll_votes_id_seq'::regclass);


--
-- Name: polls id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.polls ALTER COLUMN id SET DEFAULT nextval('public.polls_id_seq'::regclass);


--
-- Name: profile_field_groups id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.profile_field_groups ALTER COLUMN id SET DEFAULT nextval('public.profile_field_groups_id_seq'::regclass);


--
-- Name: profile_fields id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.profile_fields ALTER COLUMN id SET DEFAULT nextval('public.profile_fields_id_seq'::regclass);


--
-- Name: profile_pins id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.profile_pins ALTER COLUMN id SET DEFAULT nextval('public.profile_pins_id_seq'::regclass);


--
-- Name: profiles id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.profiles ALTER COLUMN id SET DEFAULT nextval('public.profiles_id_seq'::regclass);


--
-- Name: rating_votes id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.rating_votes ALTER COLUMN id SET DEFAULT nextval('public.rating_votes_id_seq'::regclass);


--
-- Name: reactions id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.reactions ALTER COLUMN id SET DEFAULT nextval('public.reactions_id_seq'::regclass);


--
-- Name: response_templates id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.response_templates ALTER COLUMN id SET DEFAULT nextval('public.response_templates_id_seq'::regclass);


--
-- Name: roles id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.roles ALTER COLUMN id SET DEFAULT nextval('public.roles_id_seq'::regclass);


--
-- Name: site_configs id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.site_configs ALTER COLUMN id SET DEFAULT nextval('public.site_configs_id_seq'::regclass);


--
-- Name: sponsorships id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.sponsorships ALTER COLUMN id SET DEFAULT nextval('public.sponsorships_id_seq'::regclass);


--
-- Name: tag_adjustments id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.tag_adjustments ALTER COLUMN id SET DEFAULT nextval('public.tag_adjustments_id_seq'::regclass);


--
-- Name: taggings id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.taggings ALTER COLUMN id SET DEFAULT nextval('public.taggings_id_seq'::regclass);


--
-- Name: tags id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.tags ALTER COLUMN id SET DEFAULT nextval('public.tags_id_seq'::regclass);


--
-- Name: tweets id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.tweets ALTER COLUMN id SET DEFAULT nextval('public.tweets_id_seq'::regclass);


--
-- Name: user_blocks id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.user_blocks ALTER COLUMN id SET DEFAULT nextval('public.user_blocks_id_seq'::regclass);


--
-- Name: user_subscriptions id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.user_subscriptions ALTER COLUMN id SET DEFAULT nextval('public.user_subscriptions_id_seq'::regclass);


--
-- Name: users id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.users ALTER COLUMN id SET DEFAULT nextval('public.users_id_seq'::regclass);


--
-- Name: users_gdpr_delete_requests id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.users_gdpr_delete_requests ALTER COLUMN id SET DEFAULT nextval('public.users_gdpr_delete_requests_id_seq'::regclass);


--
-- Name: webhook_endpoints id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.webhook_endpoints ALTER COLUMN id SET DEFAULT nextval('public.webhook_endpoints_id_seq'::regclass);


--
-- Name: welcome_notifications id; Type: DEFAULT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.welcome_notifications ALTER COLUMN id SET DEFAULT nextval('public.welcome_notifications_id_seq'::regclass);


--
-- Data for Name: ahoy_events; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.ahoy_events (id, name, properties, "time", user_id, visit_id) FROM stdin;
\.


--
-- Data for Name: ahoy_messages; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.ahoy_messages (id, clicked_at, content, feedback_message_id, mailer, opened_at, sent_at, subject, "to", token, user_id, user_type, utm_campaign, utm_content, utm_medium, utm_source, utm_term) FROM stdin;
11	\N	Date: Sat, 20 Feb 2021 07:54:06 +0000\r\nFrom: Simple Coding <contact@webtutsplus.com>\r\nReply-To: Simple Coding <contact@webtutsplus.com>\r\nTo: nilmadhab1994@gmail.com\r\nMessage-ID: <6030c01eeaf3_4b211877c4198f@simple-coding-rails.mail>\r\nSubject: Unlock instructions\r\nMime-Version: 1.0\r\nContent-Type: text/html;\r\n charset=UTF-8\r\nContent-Transfer-Encoding: 7bit\r\n\r\n<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" "http://www.w3.org/TR/REC-html40/loose.dtd">\r\n<html><body>\r\n<p>Hello nilmadhab1994@gmail.com!</p>\r\n\r\n<p>Your account has been locked due to an excessive number of unsuccessful sign in attempts.</p>\r\n\r\n<p>Click the link below to unlock your account:</p>\r\n\r\n<p><a href="http://104.197.181.100:3000/ahoy/messages/E8qckBSpX5gj8GNOIElJWBpq1ypqcgdD/click?signature=43c36aac9ea22224b6ed89ab289a4f86af9d4ca8&amp;url=http%3A%2F%2F104.197.181.100%3A3000%2Fusers%2Funlock%3Funlock_token%3Du-zkNP5Vg7z6Xjemexzn%26utm_source%3Ddevise_mailer%26utm_medium%3Demail%26utm_campaign%3Dunlock_instructions">Unlock my account</a></p>\r\n<img alt="" src="http://104.197.181.100:3000/ahoy/messages/E8qckBSpX5gj8GNOIElJWBpq1ypqcgdD/open.gif" width="1" height="1">\r\n</body></html>\r\n	\N	DeviseMailer#unlock_instructions	\N	2021-02-20 07:54:06.241979	Unlock instructions	nilmadhab1994@gmail.com	E8qckBSpX5gj8GNOIElJWBpq1ypqcgdD	1	User	unlock_instructions	\N	email	devise_mailer	\N
12	\N	Date: Thu, 25 Feb 2021 11:44:17 +0000\r\nFrom: Simple Coding <contact@webtutsplus.com>\r\nReply-To: Simple Coding <contact@webtutsplus.com>\r\nTo: shivam.agrawal.2000@gmail.com\r\nMessage-ID: <60378d912a487_380f1b26065b0@simple-coding-rails.mail>\r\nSubject: Confirmation instructions\r\nMime-Version: 1.0\r\nContent-Type: text/html;\r\n charset=UTF-8\r\nContent-Transfer-Encoding: 7bit\r\n\r\n<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" "http://www.w3.org/TR/REC-html40/loose.dtd">\r\n<html><body>\r\n<p>Welcome shivam.agrawal.2000@gmail.com!</p>\r\n\r\n<p>You can confirm your account email through the link below:</p>\r\n\r\n<p><a href="http://104.197.181.100:3000/ahoy/messages/lQebBnk3gqNoOmLpXNZl4VrZdTpYR0Ae/click?signature=63c85825cc560c52a08d26124ecb1823dd27df80&amp;url=http%3A%2F%2F104.197.181.100%3A3000%2Fusers%2Fconfirmation%3Fconfirmation_token%3DQBDr-KXYBqB22KTB8D3H%26utm_source%3Ddevise_mailer%26utm_medium%3Demail%26utm_campaign%3Dconfirmation_instructions">Confirm my account</a></p>\r\n<img alt="" src="http://104.197.181.100:3000/ahoy/messages/lQebBnk3gqNoOmLpXNZl4VrZdTpYR0Ae/open.gif" width="1" height="1">\r\n</body></html>\r\n	\N	DeviseMailer#confirmation_instructions	\N	2021-02-25 11:44:17.294158	Confirmation instructions	shivam.agrawal.2000@gmail.com	lQebBnk3gqNoOmLpXNZl4VrZdTpYR0Ae	12	User	confirmation_instructions	\N	email	devise_mailer	\N
\.


--
-- Data for Name: ahoy_visits; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.ahoy_visits (id, started_at, user_id, visit_token, visitor_token) FROM stdin;
\.


--
-- Data for Name: announcements; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.announcements (id, banner_style, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: api_secrets; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.api_secrets (id, created_at, description, secret, updated_at, user_id) FROM stdin;
\.


--
-- Data for Name: ar_internal_metadata; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.ar_internal_metadata (key, value, created_at, updated_at) FROM stdin;
environment	development	2021-02-10 13:38:38.033195	2021-02-10 13:38:38.033195
schema_sha1	78b3a16cb9a4aea822e8c7c8c5f44707ee5e6c9d	2021-02-10 13:38:38.051988	2021-02-10 13:38:38.051988
\.


--
-- Data for Name: articles; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.articles (id, any_comments_hidden, approved, archived, body_html, body_markdown, boost_states, cached_organization, cached_tag_list, cached_user, cached_user_name, cached_user_username, canonical_url, co_author_ids, collection_id, comment_score, comment_template, comments_count, created_at, crossposted_at, description, edited_at, email_digest_eligible, experience_level_rating, experience_level_rating_distribution, facebook_last_buffered, featured, featured_number, feed_source_url, hotness_score, language, last_buffered, last_comment_at, last_experience_level_rating_at, main_image, main_image_background_hex_color, nth_published_by_author, organic_page_views_count, organic_page_views_past_month_count, organic_page_views_past_week_count, organization_id, originally_published_at, page_views_count, password, path, positive_reactions_count, previous_positive_reactions_count, previous_public_reactions_count, processed_html, public_reactions_count, published, published_at, published_from_feed, rating_votes_count, reactions_count, reading_time, receive_notifications, score, search_optimized_description_replacement, search_optimized_title_preamble, show_comments, slug, social_image, spaminess_rating, title, updated_at, user_id, user_subscriptions_count, video, video_closed_caption_track_url, video_code, video_duration_in_seconds, video_source_url, video_state, video_thumbnail_url) FROM stdin;
61	f	f	f	\N	![Alt Text](/i/zak9sbkb7h3hnwjixe5o.jpg)\n\n## Introduction\n\nWe have created a simple authentication system in Java and Springboot, which you can see here.\n{% medium https://medium.com/webtutsplus/a-simple-user-authentication-api-made-with-spring-boot-4a7135ff1eca %}\n\nThis time we are going to take that simple Spring Boot API that we created in the previous tutorial and run it on the cloud. To be able to do this we will need to go to get ourselves a VPS, or a Virtual Private Server. A VPS is a virtual operating system that is run on a company’s data center. So we aren’t renting someone’s entire computer, we are renting a part of their computer, in our case we are only renting one of their CPU cores (most modern laptops have 4 cores, some have even more), 1 GB of their RAM, and 25 GB of their storage. So let's get this started shall we?\n\n{% youtube 1b0RKk2Ag30 %}\n\n{% youtube gT9pRMBcdm0 %}\n\n## Requirements\n\n* A terminal. This isn’t necessarily a requirement as you can access a terminal from the Digital Ocean website, but from my testing I found their terminal to be a bit slow, so I prefer just going with the terminal that came with my operating system.\n* An account with Digital Ocean (or with any other VPS provider).\n\n## Setting up the VPS\n\nTo start off with, head on over to [Digital Ocean](http://digitalocean.com/) and click on either “Sign In” or “Sign Up” (or the VPS provider of your choice).\n![Alt Text](/i/qevh3mfuvr2nx1cmc54f.png)\nOnce you have an account you can go to your dashboard. Click on “Create” and then “Droplets”.\n\n![Alt Text](/i/eydua82aw2fhta3wry6h.png)\n\nFor our droplet, we are going to choose Ubuntu 20.04 (LTS) as our image of choice. For the uninitiated, this is a very easy-to-use distribution of Linux based on Debian, it’s also the one I use on a personal basis.\n\nWe are just going to choose the basic plan of $5/mo since there is no reason to get anything more expensive. We are not going to add any block storage. Feel free to choose any region you want, personally, I am just going to choose Frankfurt. We are not going to get any additional options.\n\nOur authentication option will be via password, so enter a root password of your choice. When you reach the “Choose a hostname” point you should give it a name of your choice since this will be how you recognize your droplet, and I don’t know about you but if I had a list of droplets all with a name similar to “ubuntu-s-1vcpu-1gb-fra1–01” I would never be able to tell them apart, so I am just gonna change the hostname of mine to something more recognizable, “Spring-Boot-Cloud”. I am also not going to enable backups since I am doubtful that this droplet will last very long. Click on “Create Droplet”.\n\n![Alt Text](/i/u64rjbodlmirtozda9da.png)\n\nYour droplet will get booted up as a normal computer would. Once it has finished you will be able to interface with it through the website or through your terminal.\n\n![Alt Text](/i/cg7okvf04ge3o0wkjk1p.png)\n\nWhen you open the console for the first time it will ask for your “Login”, you just type “root”. Next, it will ask for your password, this is the password you had to enter when you initially created your droplet. After that you will see something like this:\n\n![Alt Text](/i/ua28g6elaxqua53y6yjt.png)\n\n## Using your terminal\n\nIf you are like me and prefer to use your computer’s terminal then you can follow this part, otherwise, feel free to skip over this part. Start off by opening your terminal and type this command (replace YOUR_IP with the IP address of your droplet):\n\n`ssh root@YOUR_IP`\n\nIt should give you a message like: “The authenticity of host ‘YOUR_IP (YOUR_IP)’ can’t be established. ECDSA key fingerprint is SHA256:STRING_OF_CHARACTERS. Are you sure you want to continue connecting (yes/no/[fingerprint])?”? Just type “yes”. It will add it to the list of known hosts and then close the connection, just retype\n\n`ssh root@YOUR_IP`\n\nor just press the up arrow. It will ask you for the password, this is the password you created when you set up your droplet. You should see something like this:\n\n![Alt Text](/i/qzlupv5h4gekmavq0ng3.png)\n\n## Updating, upgrading, and installing\n\nNow that we have our server up and running we have to do some housekeeping to make sure that it is ready to run our application for us. Run this command to update our files, upgraded our files, and remove any unwanted files:\n\n`apt-get update && apt-get upgrade && apt-get autoremove`\n\nIf at any time a message like “Do you want to continue? [Y/n]” pops up, you can just press “y” and then “Enter”.\n\n## Installing required packages\n\nNow that our operating system has been updated we need to install the necessary packages, you can do that using this command:\n\n`apt-get install openjdk-8-jdk openjdk-8-jre mysql-server maven`\n\nThis will install Java 8 JDK and runtime environment, [MySQL](https://medium.com/javarevisited/top-10-free-courses-to-learn-php-and-mysql-for-web-development-e96e69982675?source=---------34------------------), and [Maven](https://medium.com/javarevisited/6-best-maven-courses-for-beginners-in-2020-23ea3cba89). Maven will be used to build our project’s JAR file.\n\n## Setting up MySQL\n\nNext, we need to set up our [MySQL database](https://medium.com/javarevisited/top-5-courses-to-learn-mysql-in-2020-4ffada70656f), start off by entering this command:\n\n`mysql_secure_installation`\n\nThis will take you through setting everything up. If you hesitate about something just say no, which in this case just means press enter. When it asks for your password, enter a password that you will remember since you will need it later. When it asks if you want to reload the privilege tables now, say yes. Next, let us create the users' database. Start off by typing this into the terminal:\n\n`mysql`\n\nThis will take you to the MySQL monitor where we can now create our new database with this command:\n\n`CREATE DATABASE users;`\n\nWhen testing this out I had an issue where my Spring Boot application had issues with being able to access the database. I found this command which seemed to work:\n\n`ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'YOUR_PASSWORD';\nFLUSH PRIVILEGES;`\n\nOnes that’s done, you can exit MySQL monitor with the command:\n\n`exit`\n\n## Setting up JAVA_HOME\n\nFinally, we need to set the JAVA_HOME variable so that Maven will know where the JDK is. We can use nano to edit our environment:\n\n`nano /etc/environment`\n\nUnderneath the PATH variable add this line:\n\n`JAVA_HOME="/usr/lib/jvm/java-1.8.0-openjdk-amd64"`\n\nWhen you are done you can press Ctrl+X, it will ask you if you want to save, type “y”, and then press Enter.\n\n\n![Alt Text](/i/y7p6gut39spviq3tr1zc.png)\n\nTo force the OS to recognize the new variable we have to run this command:\n\n`source /etc/environment`\n\nTo make sure it worked you can run:\n\n`echo $JAVA_HOME`\n\nThis should return the path to where the JDK is installed.\n\n## Compiling our program\n\nAll that is left for us to do is to compile our Spring Boot application into a JAR file. Let's start by downloading the source files from bitbucket:\n\n`git clone https://PsionicAlch@bitbucket.org/java-spring-1994/api-tutorial.git`\n\nThis will clone the project into our home file. Now we need to change some application variables so that our application will know how to access our database. Enter this command:\n\n`nano api-tutorial/src/main/resources/application.properties`\n\nThis will open our application.properties file in nano. Change “USERNAME” to root, and “PASSWORD” to the password you used to set up MySQL. Remember to save your file as you did before. Now for the part that makes me a bit nervous since it caused me so much grief when I did the preparation for this tutorial. To compile the application run this command:\n\n`cd api-tutorial/ && mvn clean install`\n\nIf you receive a “BUILD SUCCESS” message it means that your project successfully compiled and that you now have a JAR file that you can run. For this part, I am going to switch back to the terminal on the Digital Ocean website because it will allow me to run the program in the background even after I closed my terminal.\n\n## Running your application\n\nTo run your newly created JAR file you will have to change directories with this command:\n\n`cd api-tutorial/target`\n\nNow to run the JAR file you can use this command:\n\n`java -jar tutorial-0.0.1-SNAPSHOT.jar`\n\nYou should now have a running [Spring Boot application](https://medium.com/javarevisited/10-advanced-spring-boot-courses-for-experienced-java-developers-5e57606816bd?source=collection_home---4------0-----------------------) that can be accessed from the internet. Let’s test it out!\n\n## Testing our application\n\nTo create a new user you can run this command (replace YOUR_IP with your server’s IP address):\n\n`curl -H "Content-Type: application/json" -X POST -d '{\n    "username": "test",\n    "password": "test"\n}' http://46.101.208.101:8080/users/register`\n\n![Alt Text](/i/l99ssmln8zj75i0i8q51.png)\n\nYou should be able to run all the commands we went through in the [previous tutorial.](https://medium.com/webtutsplus/a-simple-user-authentication-api-made-with-spring-boot-4a7135ff1eca)\n\n**Thank you for reading this.**\n\n**Have a lovely day!**\n`\n\n\n\n\n\n\n\n\n\n	{"boosted_additional_tags": "", "boosted_dev_digest_email": false, "boosted_additional_articles": false}	\N	cloudservices, springboot, devops, deployment	--- !ruby/struct:Articles::CachedEntity\nname: nilmadhab mondal\nusername: nilmadhab\nslug: nilmadhab\nprofile_image_90: "/uploads/user/profile_image/1/d9b0e3b7-ad59-45d5-b516-4e8ffd0a6958.jpeg"\nprofile_image_url: "/uploads/user/profile_image/1/d9b0e3b7-ad59-45d5-b516-4e8ffd0a6958.jpeg"\n	nilmadhab mondal	nilmadhab	\N	{}	\N	0	\N	0	2021-02-22 20:22:13.474772	\N	Introduction   We have created a simple authentication system in Java and Springboot, whic...	\N	t	5	5	\N	f	1614025333	\N	354665	en	\N	2021-02-22 20:22:13.464485	\N	/i/89ztmarxt39jwl2mmk1l.jpg	#dddddd	27	0	0	0	\N	\N	11	8411efeef414c4c2bdb4cef5be5d5c472b5ce8e56768400b42a3d69243e5ee6ac1a22b12a313479ab56c0abf4d142bfe45ec003d573338b1ac837cb4	/nilmadhab/let-s-deploy-spring-boot-app-to-the-cloud-56j2	0	0	0	<p><a href="/i/zak9sbkb7h3hnwjixe5o.jpg" class="article-body-image-wrapper"><img src="/i/zak9sbkb7h3hnwjixe5o.jpg" alt="Alt Text" loading="lazy"></a></p>\n\n<h2>\n  <a name="introduction" href="#introduction" class="anchor">\n  </a>\n  Introduction\n</h2>\n\n<p>We have created a simple authentication system in Java and Springboot, which you can see here.<br>\n</p>\n<div class="ltag__link">\n  <a href="https://medium.com/webtutsplus/a-simple-user-authentication-api-made-with-spring-boot-4a7135ff1eca" class="ltag__link__link">\n    <div class="ltag__link__pic">\n      <img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--tLzMBohE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/fit/c/96/96/1%2AhNjwft_dNBxvTr6g6TOVGg.jpeg" alt="Nil Madhab" loading="lazy">\n    </div>\n  </a>\n  <a href="https://medium.com/webtutsplus/a-simple-user-authentication-api-made-with-spring-boot-4a7135ff1eca" class="ltag__link__link">\n    <div class="ltag__link__content">\n      <h2>Login and Signup with Java and Spring Boot | Javarevisited</h2>\n      <h3>Nil Madhab ・ <time datetime="2021-01-08T11:11:23.526Z">Jan 8, 2021</time> ・ 14 min read\n      <div class="ltag__link__servicename">\n        <img src="/assets/medium_icon.svg" alt="Medium Logo" aria-label="Medium Logo" loading="lazy">\n        Medium\n      </div>\n    </h3>\n</div>\n  </a>\n</div>\n\n\n<p>This time we are going to take that simple Spring Boot API that we created in the previous tutorial and run it on the cloud. To be able to do this we will need to go to get ourselves a VPS, or a Virtual Private Server. A VPS is a virtual operating system that is run on a company’s data center. So we aren’t renting someone’s entire computer, we are renting a part of their computer, in our case we are only renting one of their CPU cores (most modern laptops have 4 cores, some have even more), 1 GB of their RAM, and 25 GB of their storage. So let's get this started shall we?</p>\n\n<p><iframe width="710" height="399" src="https://www.youtube.com/embed/1b0RKk2Ag30" allowfullscreen loading="lazy">\n</iframe>\n</p>\n\n<p><iframe width="710" height="399" src="https://www.youtube.com/embed/gT9pRMBcdm0" allowfullscreen loading="lazy">\n</iframe>\n</p>\n\n<h2>\n  <a name="requirements" href="#requirements" class="anchor">\n  </a>\n  Requirements\n</h2>\n\n<ul>\n<li>A terminal. This isn’t necessarily a requirement as you can access a terminal from the Digital Ocean website, but from my testing I found their terminal to be a bit slow, so I prefer just going with the terminal that came with my operating system.</li>\n<li>An account with Digital Ocean (or with any other VPS provider).</li>\n</ul>\n\n<h2>\n  <a name="setting-up-the-vps" href="#setting-up-the-vps" class="anchor">\n  </a>\n  Setting up the VPS\n</h2>\n\n<p>To start off with, head on over to <a href="http://digitalocean.com/">Digital Ocean</a> and click on either “Sign In” or “Sign Up” (or the VPS provider of your choice).<br>\n<a href="/i/qevh3mfuvr2nx1cmc54f.png" class="article-body-image-wrapper"><img src="/i/qevh3mfuvr2nx1cmc54f.png" alt="Alt Text" loading="lazy"></a><br>\nOnce you have an account you can go to your dashboard. Click on “Create” and then “Droplets”.</p>\n\n<p><a href="/i/eydua82aw2fhta3wry6h.png" class="article-body-image-wrapper"><img src="/i/eydua82aw2fhta3wry6h.png" alt="Alt Text" loading="lazy"></a></p>\n\n<p>For our droplet, we are going to choose Ubuntu 20.04 (LTS) as our image of choice. For the uninitiated, this is a very easy-to-use distribution of Linux based on Debian, it’s also the one I use on a personal basis.</p>\n\n<p>We are just going to choose the basic plan of $5/mo since there is no reason to get anything more expensive. We are not going to add any block storage. Feel free to choose any region you want, personally, I am just going to choose Frankfurt. We are not going to get any additional options.</p>\n\n<p>Our authentication option will be via password, so enter a root password of your choice. When you reach the “Choose a hostname” point you should give it a name of your choice since this will be how you recognize your droplet, and I don’t know about you but if I had a list of droplets all with a name similar to “ubuntu-s-1vcpu-1gb-fra1–01” I would never be able to tell them apart, so I am just gonna change the hostname of mine to something more recognizable, “Spring-Boot-Cloud”. I am also not going to enable backups since I am doubtful that this droplet will last very long. Click on “Create Droplet”.</p>\n\n<p><a href="/i/u64rjbodlmirtozda9da.png" class="article-body-image-wrapper"><img src="/i/u64rjbodlmirtozda9da.png" alt="Alt Text" loading="lazy"></a></p>\n\n<p>Your droplet will get booted up as a normal computer would. Once it has finished you will be able to interface with it through the website or through your terminal.</p>\n\n<p><a href="/i/cg7okvf04ge3o0wkjk1p.png" class="article-body-image-wrapper"><img src="/i/cg7okvf04ge3o0wkjk1p.png" alt="Alt Text" loading="lazy"></a></p>\n\n<p>When you open the console for the first time it will ask for your “Login”, you just type “root”. Next, it will ask for your password, this is the password you had to enter when you initially created your droplet. After that you will see something like this:</p>\n\n<p><a href="/i/ua28g6elaxqua53y6yjt.png" class="article-body-image-wrapper"><img src="/i/ua28g6elaxqua53y6yjt.png" alt="Alt Text" loading="lazy"></a></p>\n\n<h2>\n  <a name="using-your-terminal" href="#using-your-terminal" class="anchor">\n  </a>\n  Using your terminal\n</h2>\n\n<p>If you are like me and prefer to use your computer’s terminal then you can follow this part, otherwise, feel free to skip over this part. Start off by opening your terminal and type this command (replace YOUR_IP with the IP address of your droplet):</p>\n\n<p><code>ssh root@YOUR_IP</code></p>\n\n<p>It should give you a message like: “The authenticity of host ‘YOUR_IP (YOUR_IP)’ can’t be established. ECDSA key fingerprint is SHA256:STRING_OF_CHARACTERS. Are you sure you want to continue connecting (yes/no/[fingerprint])?”? Just type “yes”. It will add it to the list of known hosts and then close the connection, just retype</p>\n\n<p><code>ssh root@YOUR_IP</code></p>\n\n<p>or just press the up arrow. It will ask you for the password, this is the password you created when you set up your droplet. You should see something like this:</p>\n\n<p><a href="/i/qzlupv5h4gekmavq0ng3.png" class="article-body-image-wrapper"><img src="/i/qzlupv5h4gekmavq0ng3.png" alt="Alt Text" loading="lazy"></a></p>\n\n<h2>\n  <a name="updating-upgrading-and-installing" href="#updating-upgrading-and-installing" class="anchor">\n  </a>\n  Updating, upgrading, and installing\n</h2>\n\n<p>Now that we have our server up and running we have to do some housekeeping to make sure that it is ready to run our application for us. Run this command to update our files, upgraded our files, and remove any unwanted files:</p>\n\n<p><code>apt-get update &amp;&amp; apt-get upgrade &amp;&amp; apt-get autoremove</code></p>\n\n<p>If at any time a message like “Do you want to continue? [Y/n]” pops up, you can just press “y” and then “Enter”.</p>\n\n<h2>\n  <a name="installing-required-packages" href="#installing-required-packages" class="anchor">\n  </a>\n  Installing required packages\n</h2>\n\n<p>Now that our operating system has been updated we need to install the necessary packages, you can do that using this command:</p>\n\n<p><code>apt-get install openjdk-8-jdk openjdk-8-jre mysql-server maven</code></p>\n\n<p>This will install Java 8 JDK and runtime environment, <a href="https://medium.com/javarevisited/top-10-free-courses-to-learn-php-and-mysql-for-web-development-e96e69982675?source=---------34------------------">MySQL</a>, and <a href="https://medium.com/javarevisited/6-best-maven-courses-for-beginners-in-2020-23ea3cba89">Maven</a>. Maven will be used to build our project’s JAR file.</p>\n\n<h2>\n  <a name="setting-up-mysql" href="#setting-up-mysql" class="anchor">\n  </a>\n  Setting up MySQL\n</h2>\n\n<p>Next, we need to set up our <a href="https://medium.com/javarevisited/top-5-courses-to-learn-mysql-in-2020-4ffada70656f">MySQL database</a>, start off by entering this command:</p>\n\n<p><code>mysql_secure_installation</code></p>\n\n<p>This will take you through setting everything up. If you hesitate about something just say no, which in this case just means press enter. When it asks for your password, enter a password that you will remember since you will need it later. When it asks if you want to reload the privilege tables now, say yes. Next, let us create the users' database. Start off by typing this into the terminal:</p>\n\n<p><code>mysql</code></p>\n\n<p>This will take you to the MySQL monitor where we can now create our new database with this command:</p>\n\n<p><code>CREATE DATABASE users;</code></p>\n\n<p>When testing this out I had an issue where my Spring Boot application had issues with being able to access the database. I found this command which seemed to work:</p>\n\n<p><code>ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'YOUR_PASSWORD';<br>\nFLUSH PRIVILEGES;</code></p>\n\n<p>Ones that’s done, you can exit MySQL monitor with the command:</p>\n\n<p><code>exit</code></p>\n\n<h2>\n  <a name="setting-up-javahome" href="#setting-up-javahome" class="anchor">\n  </a>\n  Setting up JAVA_HOME\n</h2>\n\n<p>Finally, we need to set the JAVA_HOME variable so that Maven will know where the JDK is. We can use nano to edit our environment:</p>\n\n<p><code>nano /etc/environment</code></p>\n\n<p>Underneath the PATH variable add this line:</p>\n\n<p><code>JAVA_HOME="/usr/lib/jvm/java-1.8.0-openjdk-amd64"</code></p>\n\n<p>When you are done you can press Ctrl+X, it will ask you if you want to save, type “y”, and then press Enter.</p>\n\n<p><a href="/i/y7p6gut39spviq3tr1zc.png" class="article-body-image-wrapper"><img src="/i/y7p6gut39spviq3tr1zc.png" alt="Alt Text" loading="lazy"></a></p>\n\n<p>To force the OS to recognize the new variable we have to run this command:</p>\n\n<p><code>source /etc/environment</code></p>\n\n<p>To make sure it worked you can run:</p>\n\n<p><code>echo $JAVA_HOME</code></p>\n\n<p>This should return the path to where the JDK is installed.</p>\n\n<h2>\n  <a name="compiling-our-program" href="#compiling-our-program" class="anchor">\n  </a>\n  Compiling our program\n</h2>\n\n<p>All that is left for us to do is to compile our Spring Boot application into a JAR file. Let's start by downloading the source files from bitbucket:</p>\n\n<p><code>git clone https://PsionicAlch@bitbucket.org/java-spring-1994/api-tutorial.git</code></p>\n\n<p>This will clone the project into our home file. Now we need to change some application variables so that our application will know how to access our database. Enter this command:</p>\n\n<p><code>nano api-tutorial/src/main/resources/application.properties</code></p>\n\n<p>This will open our application.properties file in nano. Change “USERNAME” to root, and “PASSWORD” to the password you used to set up MySQL. Remember to save your file as you did before. Now for the part that makes me a bit nervous since it caused me so much grief when I did the preparation for this tutorial. To compile the application run this command:</p>\n\n<p><code>cd api-tutorial/ &amp;&amp; mvn clean install</code></p>\n\n<p>If you receive a “BUILD SUCCESS” message it means that your project successfully compiled and that you now have a JAR file that you can run. For this part, I am going to switch back to the terminal on the Digital Ocean website because it will allow me to run the program in the background even after I closed my terminal.</p>\n\n<h2>\n  <a name="running-your-application" href="#running-your-application" class="anchor">\n  </a>\n  Running your application\n</h2>\n\n<p>To run your newly created JAR file you will have to change directories with this command:</p>\n\n<p><code>cd api-tutorial/target</code></p>\n\n<p>Now to run the JAR file you can use this command:</p>\n\n<p><code>java -jar tutorial-0.0.1-SNAPSHOT.jar</code></p>\n\n<p>You should now have a running <a href="https://medium.com/javarevisited/10-advanced-spring-boot-courses-for-experienced-java-developers-5e57606816bd?source=collection_home---4------0-----------------------">Spring Boot application</a> that can be accessed from the internet. Let’s test it out!</p>\n\n<h2>\n  <a name="testing-our-application" href="#testing-our-application" class="anchor">\n  </a>\n  Testing our application\n</h2>\n\n<p>To create a new user you can run this command (replace YOUR_IP with your server’s IP address):</p>\n\n<p><code>curl -H "Content-Type: application/json" -X POST -d '{<br>\n    "username": "test",<br>\n    "password": "test"<br>\n}' http://46.101.208.101:8080/users/register</code></p>\n\n<p><a href="/i/l99ssmln8zj75i0i8q51.png" class="article-body-image-wrapper"><img src="/i/l99ssmln8zj75i0i8q51.png" alt="Alt Text" loading="lazy"></a></p>\n\n<p>You should be able to run all the commands we went through in the <a href="https://medium.com/webtutsplus/a-simple-user-authentication-api-made-with-spring-boot-4a7135ff1eca">previous tutorial.</a></p>\n\n<p><strong>Thank you for reading this.</strong></p>\n\n<p><strong>Have a lovely day!</strong><br>\n`</p>\n\n	0	t	2021-02-22 20:22:13.464485	f	0	0	6	t	0	\N	\N	t	let-s-deploy-spring-boot-app-to-the-cloud-56j2	\N	25	Let’s Deploy Spring Boot App to the Cloud	2021-02-22 20:22:13.474772	1	0	\N	\N	\N	0	\N	\N	\N
28	f	f	f	\N	In this article, I will explain how I made my own online compiler using open source code.\n\n![AltText](https://api.simplecoding.dev:3000/i/3bsp0ei6hnk43xbghda4.jpeg)\n\nHere I will make one editor that supports 3 languages; C++, Java, and Python.\n\nAdding more languages is also very simple.\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/2wn5mi0kqkoferwr331j.png)\n\n## Overview\n\nBuilding an online code editor and compiler can seem too complicated, but we can break it down into two pieces.\n\n1. API running on the backend server, which will take a piece of code and language as input and output the answer after running the code on the server\n2. Frontend code editor, we can choose the language and edit and modify the code here. Then we make a post request to the backend API and show output on the website\n\n## Tutorials in this Series\n\n1. Deploy our Online Code Executor in Google Cloud\n2. Understanding the API of Judge0\n3. Creating an online code editor front-end (this tutorial)\n\n## Demo\n\nThis is the webpage we are going to build.\n\n[you can find the live demo here](http://167.99.37.15:8007/)\n{% youtube x5YD1yOC8_c %}\n<figcaption>Online code editor demo</figcaption>\n\n## FrontEnd\n\nOur frontend is pretty simple. We have one drop-down menu where we can select the language and depend upon the language we will get our respective code editors. Our main code lies in the home-page.html and the code-editor resides in the texteditor.js.\n\nHere we have made one onClickListener for dropdown menu items. So when one item is clicked, the corresponding listener gets triggered and we can call our desired editors. All the languages have different id associated with it . The list can be found using this.\n\nThe home-page looks like this.\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/mnmiliyblac9fmyuhlio.png)\nThe home-page html code is given below.\n\n{% gist https://gist.github.com/sksaikia/a9389a44448e6223d2f23a880e1cf7f5.js %}\n\nHere we call the codeEditor function of the javascript file , we pass the respective id associated with the language.\n\nWe add the style from assets/css/style.css .\n{% gist https://gist.github.com/sksaikia/053afd3008060e174260471f63240eed.js %}\nAlso we need to link the javascript file so that the code can be executed. We get the lang_id from the html and do the network call accordingly. **For java code is 62, cpp 53 and python 70.** This is passed in `language_id` . We also set default values to the editor depending on the `lang_id.`\n\n{% gist https://gist.github.com/sksaikia/27c3660c369e075b90d94bf018fe2f1d.js %}\nOn execution of code it should show like this.\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/z85vtayh3i2nz3yopl55.png)\n\nThe entire code can be found in the following repository.\n{% github webtutsplus/code-editor %}\n\n\n	{"boosted_additional_tags": "", "boosted_dev_digest_email": false, "boosted_additional_articles": false}	\N	frontend, onlinecompiler	--- !ruby/struct:Articles::CachedEntity\nname: nilmadhab mondal\nusername: nilmadhab\nslug: nilmadhab\nprofile_image_90: "/uploads/user/profile_image/1/d9b0e3b7-ad59-45d5-b516-4e8ffd0a6958.jpeg"\nprofile_image_url: "/uploads/user/profile_image/1/d9b0e3b7-ad59-45d5-b516-4e8ffd0a6958.jpeg"\n	nilmadhab mondal	nilmadhab	\N	{}	\N	0	\N	0	2021-02-15 14:21:39.159967	\N	In this article, I will explain how I made my own online compiler using open source code.    Here I w...	2021-02-18 08:15:25.745948	t	5	5	\N	f	1613398899	\N	351899	en	\N	2021-02-15 14:21:39.148003	\N	\N	#dddddd	2	0	0	0	\N	\N	19	5f6aa8a97ce00004aad833f8c01855713ad0350aca9658faa46797f37c47055c70250d88fdb3dc3de37c9828dc183de53eeacdfb8b9dc69c3b17f576	/nilmadhab/let-s-develop-an-online-code-editor-compiler-like-hackerrank-1al	0	0	0	<p>In this article, I will explain how I made my own online compiler using open source code.</p>\n\n<p><a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--Yuh14B64--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.simplecoding.dev:3000/i/3bsp0ei6hnk43xbghda4.jpeg" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--Yuh14B64--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.simplecoding.dev:3000/i/3bsp0ei6hnk43xbghda4.jpeg" alt="AltText" loading="lazy"></a></p>\n\n<p>Here I will make one editor that supports 3 languages; C++, Java, and Python.</p>\n\n<p>Adding more languages is also very simple.<br>\n<a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--yS8OfSsI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2wn5mi0kqkoferwr331j.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--yS8OfSsI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2wn5mi0kqkoferwr331j.png" alt="Alt Text" loading="lazy"></a></p>\n<h2>\n  <a name="overview" href="#overview" class="anchor">\n  </a>\n  Overview\n</h2>\n\n<p>Building an online code editor and compiler can seem too complicated, but we can break it down into two pieces.</p>\n\n<ol>\n<li>API running on the backend server, which will take a piece of code and language as input and output the answer after running the code on the server</li>\n<li>Frontend code editor, we can choose the language and edit and modify the code here. Then we make a post request to the backend API and show output on the website</li>\n</ol>\n<h2>\n  <a name="tutorials-in-this-series" href="#tutorials-in-this-series" class="anchor">\n  </a>\n  Tutorials in this Series\n</h2>\n\n<ol>\n<li>Deploy our Online Code Executor in Google Cloud</li>\n<li>Understanding the API of Judge0</li>\n<li>Creating an online code editor front-end (this tutorial)</li>\n</ol>\n<h2>\n  <a name="demo" href="#demo" class="anchor">\n  </a>\n  Demo\n</h2>\n\n<p>This is the webpage we are going to build.</p>\n\n<figure><p><a href="http://167.99.37.15:8007/">you can find the live demo here</a><br>\n<iframe width="710" height="399" src="https://www.youtube.com/embed/x5YD1yOC8_c" allowfullscreen loading="lazy">\n</iframe>\n</p>\n<figcaption>Online code editor demo</figcaption></figure>\n\n\n\n<h2>\n  <a name="frontend" href="#frontend" class="anchor">\n  </a>\n  FrontEnd\n</h2>\n\n<p>Our frontend is pretty simple. We have one drop-down menu where we can select the language and depend upon the language we will get our respective code editors. Our main code lies in the home-page.html and the code-editor resides in the texteditor.js.</p>\n\n<p>Here we have made one onClickListener for dropdown menu items. So when one item is clicked, the corresponding listener gets triggered and we can call our desired editors. All the languages have different id associated with it . The list can be found using this.</p>\n\n<p>The home-page looks like this.<br>\n<a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--bTfajllj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/mnmiliyblac9fmyuhlio.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--bTfajllj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/mnmiliyblac9fmyuhlio.png" alt="Alt Text" loading="lazy"></a><br>\nThe home-page html code is given below.</p>\n\n\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/sksaikia/a9389a44448e6223d2f23a880e1cf7f5.js"></script>\n</div>\n\n\n<p>Here we call the codeEditor function of the javascript file , we pass the respective id associated with the language.</p>\n\n<p>We add the style from assets/css/style.css .<br>\n</p>\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/sksaikia/053afd3008060e174260471f63240eed.js"></script>\n</div>\n<br>\nAlso we need to link the javascript file so that the code can be executed. We get the lang_id from the html and do the network call accordingly. <strong>For java code is 62, cpp 53 and python 70.</strong> This is passed in <code>language_id</code> . We also set default values to the editor depending on the <code>lang_id.</code>\n\n\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/sksaikia/27c3660c369e075b90d94bf018fe2f1d.js"></script>\n</div>\n<br>\nOn execution of code it should show like this.<br>\n<img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--_PwlgLJw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/z85vtayh3i2nz3yopl55.png" alt="Alt Text" loading="lazy">\n\n<p>The entire code can be found in the following repository.<br>\n</p>\n<div class="ltag-github-readme-tag">\n  <div class="readme-overview">\n    <h2>\n      <img src="/assets/github-logo.svg" alt="GitHub logo" loading="lazy">\n      <a href="https://github.com/webtutsplus">\n        webtutsplus\n      </a> / <a style="font-weight: 600;" href="https://github.com/webtutsplus/code-editor">\n        code-editor\n      </a>\n    </h2>\n    <h3>\n      \n    </h3>\n  </div>\n  <div class="ltag-github-body">\n    \n<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1>\nAce (Ajax.org Cloud9 Editor)</h1>\n<p><a href="https://cdnjs.com/libraries/ace" rel="nofollow"><img src="https://camo.githubusercontent.com/3b1da3daa130048440d93a52c04de765426eb1bc6ea37a1cd4a4acbe7a39ff40/68747470733a2f2f696d672e736869656c64732e696f2f63646e6a732f762f6163652e737667" alt="CDNJS" data-canonical-src="https://img.shields.io/cdnjs/v/ace.svg" style="max-width:100%;"></a>\n<a href="https://www.npmjs.com/package/ace-builds" rel="nofollow"><img src="https://camo.githubusercontent.com/1ce47a5a35b3a5673bd9638a14eeb96c72c1c4cd6a6c8e1f78b5f4ceac6d56b3/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f6163652d6275696c64732e737667" alt="npm" data-canonical-src="https://img.shields.io/npm/v/ace-builds.svg" style="max-width:100%;"></a></p>\n<p>Ace is a code editor written in JavaScript.</p>\n<p>This repository has only generated files.\nIf you want to work on ace please go to <a href="https://github.com/ajaxorg/ace">https://github.com/ajaxorg/ace</a> instead.</p>\n<p>here you can find pre-built files for convenience of embedding.\nit contains 4 versions</p>\n<ul>\n<li>\n<a href="https://github.com/ajaxorg/ace-builds/tree/master/src">src</a>              concatenated but not minified</li>\n<li>\n<a href="https://github.com/ajaxorg/ace-builds/tree/master/src-min">src-min</a>      concatenated and minified with uglify.js</li>\n<li>\n<a href="https://github.com/ajaxorg/ace-builds/tree/master/src-noconflict">src-noconflict</a>      uses ace.require instead of require</li>\n<li>\n<a href="https://github.com/ajaxorg/ace-builds/tree/master/src-min-noconflict">src-min-noconflict</a>      concatenated, minified with uglify.js, and uses ace.require instead of require</li>\n</ul>\n<p>For a simple way of embedding ace into webpage see <a href="https://github.com/ajaxorg/ace-builds/blob/master/editor.html">editor.html</a> or list of other <a href="https://github.com/ajaxorg/ace-builds/tree/master/demo">simple examples</a>\nTo see ace in action go to <a href="http://ajaxorg.github.com/ace-builds/kitchen-sink.html">kitchen-sink-demo</a>, <a href="http://ajaxorg.github.com/ace-builds/demo/scrollable-page.html">scrollable-page-demo</a> or <a href="http://ajaxorg.github.com/ace-builds/editor.html">minimal demo</a>,</p>\n</article></div>\n\n\n\n</div>\n<br>\n  <div class="gh-btn-container"><a class="gh-btn" href="https://github.com/webtutsplus/code-editor">View on GitHub</a></div>\n<br>\n</div>\n<br>\n\n\n	0	t	2021-02-15 14:21:39.148003	f	0	0	2	t	0	\N	\N	t	let-s-develop-an-online-code-editor-compiler-like-hackerrank-1al	\N	25	Let’s Develop An Online Code Editor/Compiler Like HackerRank	2021-02-18 08:15:26.414406	1	0	\N	\N	\N	0	\N	\N	\N
29	f	f	f	\N	In this series, I am going to solve Leetcode medium problems live with my friends, which you can see on our youtube channel, Today we will do Problem Leetcode: 1047. **Remove All Adjacent Duplicates In String.**\n\nA little bit about me, I have offers from **Uber India** and **Amazon India** in the past, and I am currently working for **Booking.com** in Amsterdam.\n\n## Motivation to learn algorithms\n\n{% medium https://medium.com/leetcode-simplified/solve-leetcode-problems-and-get-offers-from-your-dream-companies-2786415be0b7 %}\n\n## Problem Statement\n\nGiven a string `S` of lowercase letters, a duplicate removal consists of choosing two adjacent and equal letters and removing them.\n\nWe repeatedly make duplicate removals on S until we no longer can.\n\nReturn the final string after all such duplicate removals have been made. It is guaranteed the answer is unique.\n\n**Example 1:**\n\n`Input: "abbaca"\nOutput: "ca"\nExplanation: \nFor example, in "abbaca" we could remove "bb" since the letters are adjacent and equal, and this is the only possible move.  The result of this move is that the string is "aaca", of which only "aa" is possible, so the final string is "ca".`\n\n**Note:**\n\n1. `<= S.length <= 20000`\n2. `S` consists only of English lowercase letters.\n\n## Solution\n\nThis problem can be solved using a [stack](https://www.java67.com/2013/08/ata-structures-in-java-programming-array-linked-list-map-set-stack-queue.html). We can put all the characters one by one into the stack. While we put one element into the stack, we check the top of the stack, if it is equal to our current character(i.e. 2 adjacent characters are the same), we pop that element and also don’t put our current character into the stack. In that way, we can neglect all the adjacent characters.\n\nAt last, we have to [reverse the string](https://www.java67.com/2016/06/how-to-reverse-string-in-place-in-java.html) because when popping characters from the stack, it is returned in a reverse manner.\n\nThe java and python code are given below.\n{% gist https://gist.github.com/sksaikia/c0f2a019c8fed8445e776a5d6fbbad62.js %}\n\n{% gist https://gist.github.com/sksaikia/bdf91a8657fe9184fa9975add69c5615.js %}\n\nIf n is the length of the string then\n\nTime Complexity: O(n), for traversing the string\n\nSpace Complexity: O(n), for storing characters into the stack\n\nThe code for this problem can be found in the following repository.\n\n{% github webtutsplus/LeetCode %}\n\nSimilar Problems :\n\n* Leetcode 1209. **Remove All Adjacent Duplicates In String**\n\n**Thank You for reading and Follow this publication for more LeetCode problems!😃**\n\n## [LeetCode Simplified](https://medium.com/leetcode-simplified)\n\n**Othe Data Structure Articles you may like**\n\n{% medium https://medium.com/hackernoon/50-data-structure-and-algorithms-interview-questions-for-programmers-b4b1ac61f5b0 %}\n\n{% medium https://medium.com/hackernoon/10-data-structure-algorithms-and-programming-courses-to-crack-any-coding-interview-e1c50b30b927 %}\n\n{% medium https://medium.com/javarevisited/top-21-string-programming-interview-questions-for-beginners-and-experienced-developers-56037048de45 %}\n	{"boosted_additional_tags": "", "boosted_dev_digest_email": false, "boosted_additional_articles": false}	\N	leetcode, algorithms, career, programming	--- !ruby/struct:Articles::CachedEntity\nname: nilmadhab mondal\nusername: nilmadhab\nslug: nilmadhab\nprofile_image_90: "/uploads/user/profile_image/1/d9b0e3b7-ad59-45d5-b516-4e8ffd0a6958.jpeg"\nprofile_image_url: "/uploads/user/profile_image/1/d9b0e3b7-ad59-45d5-b516-4e8ffd0a6958.jpeg"\n	nilmadhab mondal	nilmadhab	\N	{}	\N	0	\N	0	2021-02-15 16:09:45.963426	\N	In this series, I am going to solve Leetcode medium problems live with my friends, which you can see...	2021-02-20 13:25:02.144845	t	5	5	\N	f	1613415895	\N	350986	en	\N	2021-02-15 19:04:55.214085	\N	/i/cvgaraoiwsfmbbb9xbdh.png	#dddddd	3	0	0	0	\N	\N	15	05bf3708479f2d7802e4cdcc192a4d9dd966a4e03a98989f1cad6e2a284817d3d6e3d2f981ec0cb004f11d0168d836dca1e05f55acfc1307fa85be79	/nilmadhab/leetcode-1047-remove-all-adjacent-duplicates-in-string-solution-3iia	0	0	0	<p>In this series, I am going to solve Leetcode medium problems live with my friends, which you can see on our youtube channel, Today we will do Problem Leetcode: 1047. <strong>Remove All Adjacent Duplicates In String.</strong></p>\n\n<p>A little bit about me, I have offers from <strong>Uber India</strong> and <strong>Amazon India</strong> in the past, and I am currently working for <strong>Booking.com</strong> in Amsterdam.</p>\n\n<h2>\n  <a name="motivation-to-learn-algorithms" href="#motivation-to-learn-algorithms" class="anchor">\n  </a>\n  Motivation to learn algorithms\n</h2>\n\n\n<div class="ltag__link">\n  <a href="https://medium.com/leetcode-simplified/solve-leetcode-problems-and-get-offers-from-your-dream-companies-2786415be0b7" class="ltag__link__link">\n    <div class="ltag__link__pic">\n      <img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--tLzMBohE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/fit/c/96/96/1%2AhNjwft_dNBxvTr6g6TOVGg.jpeg" alt="Nil Madhab" loading="lazy">\n    </div>\n  </a>\n  <a href="https://medium.com/leetcode-simplified/solve-leetcode-problems-and-get-offers-from-your-dream-companies-2786415be0b7" class="ltag__link__link">\n    <div class="ltag__link__content">\n      <h2>Solve Leetcode Problems and Get Offers From Your Dream Companies | by Nil Madhab | LeetCode Simplified | Jan, 2021 | Medium</h2>\n      <h3>Nil Madhab ・ <time datetime="2021-02-06T16:44:52.884Z">Feb 6, 2021</time> ・ 3 min read\n      <div class="ltag__link__servicename">\n        <img src="/assets/medium_icon.svg" alt="Medium Logo" aria-label="Medium Logo" loading="lazy">\n        Medium\n      </div>\n    </h3>\n</div>\n  </a>\n</div>\n\n\n<h2>\n  <a name="problem-statement" href="#problem-statement" class="anchor">\n  </a>\n  Problem Statement\n</h2>\n\n<p>Given a string <code>S</code> of lowercase letters, a duplicate removal consists of choosing two adjacent and equal letters and removing them.</p>\n\n<p>We repeatedly make duplicate removals on S until we no longer can.</p>\n\n<p>Return the final string after all such duplicate removals have been made. It is guaranteed the answer is unique.</p>\n\n<p><strong>Example 1:</strong></p>\n\n<p><code>Input: "abbaca"<br>\nOutput: "ca"<br>\nExplanation: <br>\nFor example, in "abbaca" we could remove "bb" since the letters are adjacent and equal, and this is the only possible move.  The result of this move is that the string is "aaca", of which only "aa" is possible, so the final string is "ca".</code></p>\n\n<p><strong>Note:</strong></p>\n\n<ol>\n<li><code>&lt;= S.length &lt;= 20000</code></li>\n<li>\n<code>S</code> consists only of English lowercase letters.</li>\n</ol>\n<h2>\n  <a name="solution" href="#solution" class="anchor">\n  </a>\n  Solution\n</h2>\n\n<p>This problem can be solved using a <a href="https://www.java67.com/2013/08/ata-structures-in-java-programming-array-linked-list-map-set-stack-queue.html">stack</a>. We can put all the characters one by one into the stack. While we put one element into the stack, we check the top of the stack, if it is equal to our current character(i.e. 2 adjacent characters are the same), we pop that element and also don’t put our current character into the stack. In that way, we can neglect all the adjacent characters.</p>\n\n<p>At last, we have to <a href="https://www.java67.com/2016/06/how-to-reverse-string-in-place-in-java.html">reverse the string</a> because when popping characters from the stack, it is returned in a reverse manner.</p>\n\n<p>The java and python code are given below.<br>\n</p>\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/sksaikia/c0f2a019c8fed8445e776a5d6fbbad62.js"></script>\n</div>\n\n\n\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/sksaikia/bdf91a8657fe9184fa9975add69c5615.js"></script>\n</div>\n\n\n<p>If n is the length of the string then</p>\n\n<p>Time Complexity: O(n), for traversing the string</p>\n\n<p>Space Complexity: O(n), for storing characters into the stack</p>\n\n<p>The code for this problem can be found in the following repository.</p>\n\n\n<div class="ltag-github-readme-tag">\n  <div class="readme-overview">\n    <h2>\n      <img src="/assets/github-logo.svg" alt="GitHub logo" loading="lazy">\n      <a href="https://github.com/webtutsplus">\n        webtutsplus\n      </a> / <a style="font-weight: 600;" href="https://github.com/webtutsplus/LeetCode">\n        LeetCode\n      </a>\n    </h2>\n    <h3>\n      \n    </h3>\n  </div>\n</div>\n\n\n<p>Similar Problems :</p>\n\n<ul>\n<li>Leetcode 1209. <strong>Remove All Adjacent Duplicates In String</strong>\n</li>\n</ul>\n\n<p><strong>Thank You for reading and Follow this publication for more LeetCode problems!😃</strong></p>\n\n<h2>\n  <a name="leetcode-simplified" href="#leetcode-simplified" class="anchor">\n  </a>\n  <a href="https://medium.com/leetcode-simplified">LeetCode Simplified</a>\n</h2>\n\n<p><strong>Othe Data Structure Articles you may like</strong></p>\n\n\n<div class="ltag__link">\n  <a href="https://medium.com/hackernoon/50-data-structure-and-algorithms-interview-questions-for-programmers-b4b1ac61f5b0" class="ltag__link__link">\n    <div class="ltag__link__pic">\n      <img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--qkjHfzsS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/fit/c/96/96/0%2Au9Ha3uTCjEmW_3gn.gif" alt="javinpaul" loading="lazy">\n    </div>\n  </a>\n  <a href="https://medium.com/hackernoon/50-data-structure-and-algorithms-interview-questions-for-programmers-b4b1ac61f5b0" class="ltag__link__link">\n    <div class="ltag__link__content">\n      <h2>50+ Data Structure and Algorithms Interview Questions for Programmers | by javinpaul | HackerNoon.com | Medium</h2>\n      <h3>javinpaul ・ <time datetime="2020-09-23T06:54:28.848Z">Sep 23, 2020</time> ・ 12 min read\n      <div class="ltag__link__servicename">\n        <img src="/assets/medium_icon.svg" alt="Medium Logo" aria-label="Medium Logo" loading="lazy">\n        Medium\n      </div>\n    </h3>\n</div>\n  </a>\n</div>\n\n\n\n<div class="ltag__link">\n  <a href="https://medium.com/hackernoon/10-data-structure-algorithms-and-programming-courses-to-crack-any-coding-interview-e1c50b30b927" class="ltag__link__link">\n    <div class="ltag__link__pic">\n      <img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--qkjHfzsS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/fit/c/96/96/0%2Au9Ha3uTCjEmW_3gn.gif" alt="javinpaul" loading="lazy">\n    </div>\n  </a>\n  <a href="https://medium.com/hackernoon/10-data-structure-algorithms-and-programming-courses-to-crack-any-coding-interview-e1c50b30b927" class="ltag__link__link">\n    <div class="ltag__link__content">\n      <h2>10 Data Structure, Algorithms, and Programming Courses to Crack Any Coding Interview | by javinpaul | HackerNoon.com | Medium</h2>\n      <h3>javinpaul ・ <time datetime="2020-09-23T06:55:01.868Z">Sep 23, 2020</time> ・ 15 min read\n      <div class="ltag__link__servicename">\n        <img src="/assets/medium_icon.svg" alt="Medium Logo" aria-label="Medium Logo" loading="lazy">\n        Medium\n      </div>\n    </h3>\n</div>\n  </a>\n</div>\n\n\n\n<div class="ltag__link">\n  <a href="https://medium.com/javarevisited/top-21-string-programming-interview-questions-for-beginners-and-experienced-developers-56037048de45" class="ltag__link__link">\n    <div class="ltag__link__pic">\n      <img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--qkjHfzsS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/fit/c/96/96/0%2Au9Ha3uTCjEmW_3gn.gif" alt="javinpaul" loading="lazy">\n    </div>\n  </a>\n  <a href="https://medium.com/javarevisited/top-21-string-programming-interview-questions-for-beginners-and-experienced-developers-56037048de45" class="ltag__link__link">\n    <div class="ltag__link__content">\n      <h2>Top 21 String Programming Interview Questions for Beginners and Experienced Developers | by javinpaul | Javarevisited | Medium</h2>\n      <h3>javinpaul ・ <time datetime="2020-02-16T04:51:23.658Z">Feb 16, 2020</time> ・ 7 min read\n      <div class="ltag__link__servicename">\n        <img src="/assets/medium_icon.svg" alt="Medium Logo" aria-label="Medium Logo" loading="lazy">\n        Medium\n      </div>\n    </h3>\n</div>\n  </a>\n</div>\n\n\n	0	t	2021-02-15 19:04:55.214085	f	0	0	2	t	0	\N	\N	t	leetcode-1047-remove-all-adjacent-duplicates-in-string-solution-3iia	\N	25	Leetcode 1047 — Remove All Adjacent Duplicates In String [Solution]	2021-02-20 13:25:07.286913	1	0	\N	\N	\N	0	\N	\N	\N
45	f	f	f	\N	We will develop a file upload service, which will be used for image upload in our e-Commerce App using Java Spring Boot\n\n![Image for post](https://miro.medium.com/max/6000/0*Qsl7DJWEyjGfTeGg)\n\n<figcaption>Photo by <a href="https://unsplash.com/@drewcoffman?utm_source=medium&utm_medium=referral">Drew Coffman</a> on <a href="https://unsplash.com?utm_source=medium&utm_medium=referral">Unsplash</a></figcaption>\n\nWe needed an image upload functionality for our E-Commerce App, as we need to upload images for products and categories. We will build this function as a standalone service, which can be reused later. You can use this source code for uploading and displaying images for any of your products.\n\nFirst, we will build the backend in [Java](/javarevisited/5-essential-frameworks-every-java-developer-should-learn-6ed83315f1fb) and [Spring](/javarevisited/10-best-online-courses-to-learn-spring-framework-in-2020-f7f73599c2fd), then integrate it with a Web client and Android Client in other tutorials\n\nBackend Demo\n============\n\nYou can test the file upload demo [**here**](http://remotedevs.org:8080/api/swagger-ui.html#/file-upload-controller)\n\nFind the complete code [here](https://bitbucket.org/ecommerce-webtutsplus/ecommerce/src/master/src/main/java/com/webtutsplus/ecommerce/controller/FileUploadController.java)\n\n**Backend Design**\n==================\n\nWe will have 3 APIs  \n1\\. Upload image  \n2\\. Get an image by its name  \n3\\. Get all images\n\nLet’s have a look at `FileUploadController` Java class which describe above 3 APIs\n```\npackage com.webtutsplus.ecommerce.controller;\n\nimport com.webtutsplus.ecommerce.model.FileInfo;\nimport com.webtutsplus.ecommerce.service.FIleStoreService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.io.Resource;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.web.multipart.MultipartFile;\nimport org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder;\n\nimport java.io.IOException;\nimport java.nio.file.Path;\nimport java.util.List;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\n@RestController\n@RequestMapping("/fileUpload")\npublic class FileUploadController {\n\n    @Autowired\n    FIleStoreService fileStoreService;\n\n    //upload a file\n    @PostMapping("/")\n    public String handleFileUpload(@RequestParam("file") MultipartFile file) {\n        return fileStoreService.store(file);\n    }\n\n\n    // get all the files\n    @GetMapping("/")\n    public ResponseEntity<List<FileInfo>> getListFiles() {\n        \n        // first get a stream of all file path present in root file directory\n        Stream<Path> pathStream =  fileStoreService.loadAll();\n        \n        List<FileInfo> fileInfos = pathStream.map(path -> {\n            // get file name\n            String filename = path.getFileName().toString();\n            \n            // use function to get one file to build the URL \n            String url = MvcUriComponentsBuilder\n                    .fromMethodName(FileUploadController.class, "getFile", path.getFileName().toString()).build().toString();\n            // make a fileinfo object  from filename and url \n            return new FileInfo(filename, url);\n            \n        }).collect(Collectors.toList());\n        \n        return ResponseEntity.status(HttpStatus.OK).body(fileInfos);\n    }\n\n    // get file by filename\n    @GetMapping("/files/{filename:.+}")\n    public ResponseEntity<Resource> getFile(@PathVariable String filename) {\n        Resource file = fileStoreService.load(filename);\n        return ResponseEntity.ok()\n                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=\\"" + file.getFilename() + "\\"").body(file);\n    }\n\n}\n```\n\nwhich calls the `FileStoreService` which also contains 3 methods for each APIs respectively. I have added plenty of comments to the code. Please comment below if anything is not clear.\n```\npackage com.webtutsplus.ecommerce.service;\n\nimport com.webtutsplus.ecommerce.constants.Constants;\nimport com.webtutsplus.ecommerce.exceptions.StorageException;\nimport org.apache.commons.io.FilenameUtils;\nimport org.springframework.core.io.Resource;\nimport org.springframework.core.io.UrlResource;\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.multipart.MultipartFile;\nimport org.springframework.web.servlet.support.ServletUriComponentsBuilder;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.MalformedURLException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.nio.file.StandardCopyOption;\nimport java.util.UUID;\nimport java.util.stream.Stream;\n\n@Service\npublic class FIleStoreService {\n\n    Path rootLocation = Paths.get(Constants.UPLOAD_FILE_DIR);\n\n    public String store(MultipartFile file) {\n        try {\n            if (file.isEmpty()) {\n                throw new StorageException("Failed to store empty file.");\n            }\n            // find extension of the file,png or jpg\n            String extension = FilenameUtils.getExtension(file.getOriginalFilename());\n\n            // generate a random unique name for the image\n            String uploadedFileName = UUID.randomUUID().toString() + "." + extension;\n\n            // create a path for destination file\n            Path destinationFile = rootLocation.resolve(Paths.get(uploadedFileName))\n                                   .normalize().toAbsolutePath();\n\n            // Copy input file to destination file path\n            try (InputStream inputStream = file.getInputStream()) {\n                Files.copy(inputStream, destinationFile,\n                        StandardCopyOption.REPLACE_EXISTING);\n\n                final String baseUrl =\n                        ServletUriComponentsBuilder.fromCurrentContextPath().build().toUriString();\n\n                //create the public Image URl where we can find the image\n                final StringBuilder imageStringBuilder = new StringBuilder(baseUrl);\n                imageStringBuilder.append("/fileUpload/files/");\n                imageStringBuilder.append(uploadedFileName);\n\n                return imageStringBuilder.toString();\n            }\n        }\n        catch (IOException e) {\n            throw new StorageException("Failed to store file.", e);\n        }\n    }\n\n    public Stream<Path> loadAll() {\n        // load all the files\n        try {\n            return Files.walk(this.rootLocation, 1)\n                    // ignore the root path\n                    .filter(path -> !path.equals(this.rootLocation))\n                    .map(this.rootLocation::relativize);\n        }\n        catch (IOException e) {\n            throw new StorageException("Failed to read stored files", e);\n        }\n\n    }\n\n    public Resource load(String filename) {\n        try {\n            // read the file based on the filename\n            Path file = rootLocation.resolve(filename);\n            // get resource from path\n            Resource resource = new UrlResource(file.toUri());\n\n            if (resource.exists() || resource.isReadable()) {\n                return resource;\n            } else {\n                throw new RuntimeException("Could not read the file!");\n            }\n        } catch (MalformedURLException e) {\n            throw new RuntimeException("Error: " + e.getMessage());\n        }\n    }\n}\n```\n\nThat’s it, files will be now renamed with a unique name saved into `**_UPLOAD_FILE_DIR_**` directory**_._**\n\n[\n\n![Image for post](https://miro.medium.com/max/60/1*UDfmuQ3Ls19kmLwZY_dSSA.png?q=20)\n\n![Image for post](https://miro.medium.com/max/5700/1*UDfmuQ3Ls19kmLwZY_dSSA.png)\n\n\nUpload a file\n\n**Get all the files**\n=====================\n\n![Image for post](https://miro.medium.com/max/60/1*FotTrSa7edNr4yVEJke4Pw.png?q=20)\n\n![Image for post](https://miro.medium.com/max/5656/1*FotTrSa7edNr4yVEJke4Pw.png)\n\n\n\nget all the uploaded files\n\nDownload a single file by name\n==============================\n\n![Image for post](https://miro.medium.com/max/5604/1*KarGu7LxXiKtbv23_QQPug.png)\n\n\nNext step\n=========\n\nWe will build an [Android Application](/javarevisited/top-5-courses-to-learn-android-for-java-programmers-667e03d995b4), which will use the APIs. The final result will look something like this.\n\n{% youtube GQmJmjvT0j8 %}	{"boosted_additional_tags": "", "boosted_dev_digest_email": false, "boosted_additional_articles": false}	\N	backend, fileupload, javascript, java	--- !ruby/struct:Articles::CachedEntity\nname: nilmadhab mondal\nusername: nilmadhab\nslug: nilmadhab\nprofile_image_90: "/uploads/user/profile_image/1/d9b0e3b7-ad59-45d5-b516-4e8ffd0a6958.jpeg"\nprofile_image_url: "/uploads/user/profile_image/1/d9b0e3b7-ad59-45d5-b516-4e8ffd0a6958.jpeg"\n	nilmadhab mondal	nilmadhab	\N	{}	\N	0	\N	0	2021-02-18 21:34:27.620382	\N	We will develop a file upload service, which will be used for image upload in our e-Commerce App usin...	\N	t	5	5	\N	f	1613684067	\N	354324	en	\N	2021-02-18 21:34:27.610789	\N	/i/79kmdajoe6kwlbzdhcj4.png	#dddddd	15	0	0	0	\N	\N	4	59e9ab456241341b217ccba422018813c748973bb7e88cc0b42624d661b134df4990111448282df81cd5ab37300278d417a215243fc83fa129b5faca	/nilmadhab/let-s-develop-file-upload-service-from-scratch-using-java-and-spring-boot-1f6	0	0	0	<p>We will develop a file upload service, which will be used for image upload in our e-Commerce App using Java Spring Boot</p>\n\n<figure><p><a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--fHF3Zd9D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/6000/0%2AQsl7DJWEyjGfTeGg" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--fHF3Zd9D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/6000/0%2AQsl7DJWEyjGfTeGg" alt="Image for post" loading="lazy"></a></p>\n<figcaption>Photo by <a href="https://unsplash.com/@drewcoffman?utm_source=medium&amp;utm_medium=referral">Drew Coffman</a> on <a href="https://unsplash.com?utm_source=medium&amp;utm_medium=referral">Unsplash</a></figcaption></figure>\n\n\n\n<p>We needed an image upload functionality for our E-Commerce App, as we need to upload images for products and categories. We will build this function as a standalone service, which can be reused later. You can use this source code for uploading and displaying images for any of your products.</p>\n\n<p>First, we will build the backend in <a href="http://104.197.181.100:3000/javarevisited/5-essential-frameworks-every-java-developer-should-learn-6ed83315f1fb">Java</a> and <a href="http://104.197.181.100:3000/javarevisited/10-best-online-courses-to-learn-spring-framework-in-2020-f7f73599c2fd">Spring</a>, then integrate it with a Web client and Android Client in other tutorials</p>\n\n<h1>\n  <a name="backend-demo" href="#backend-demo" class="anchor">\n  </a>\n  Backend Demo\n</h1>\n\n<p>You can test the file upload demo <a href="http://remotedevs.org:8080/api/swagger-ui.html#/file-upload-controller"><strong>here</strong></a></p>\n\n<p>Find the complete code <a href="https://bitbucket.org/ecommerce-webtutsplus/ecommerce/src/master/src/main/java/com/webtutsplus/ecommerce/controller/FileUploadController.java">here</a></p>\n\n<h1>\n  <a name="backend-design" href="#backend-design" class="anchor">\n  </a>\n  <strong>Backend Design</strong>\n</h1>\n\n<p>We will have 3 APIs<br><br>\n1. Upload image<br><br>\n2. Get an image by its name<br><br>\n3. Get all images</p>\n\n<p>Let’s have a look at <code>FileUploadController</code> Java class which describe above 3 APIs<br>\n</p>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>package com.webtutsplus.ecommerce.controller;\n\nimport com.webtutsplus.ecommerce.model.FileInfo;\nimport com.webtutsplus.ecommerce.service.FIleStoreService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.io.Resource;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.web.multipart.MultipartFile;\nimport org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder;\n\nimport java.io.IOException;\nimport java.nio.file.Path;\nimport java.util.List;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\n@RestController\n@RequestMapping("/fileUpload")\npublic class FileUploadController {\n\n    @Autowired\n    FIleStoreService fileStoreService;\n\n    //upload a file\n    @PostMapping("/")\n    public String handleFileUpload(@RequestParam("file") MultipartFile file) {\n        return fileStoreService.store(file);\n    }\n\n\n    // get all the files\n    @GetMapping("/")\n    public ResponseEntity&lt;List&lt;FileInfo&gt;&gt; getListFiles() {\n\n        // first get a stream of all file path present in root file directory\n        Stream&lt;Path&gt; pathStream =  fileStoreService.loadAll();\n\n        List&lt;FileInfo&gt; fileInfos = pathStream.map(path -&gt; {\n            // get file name\n            String filename = path.getFileName().toString();\n\n            // use function to get one file to build the URL \n            String url = MvcUriComponentsBuilder\n                    .fromMethodName(FileUploadController.class, "getFile", path.getFileName().toString()).build().toString();\n            // make a fileinfo object  from filename and url \n            return new FileInfo(filename, url);\n\n        }).collect(Collectors.toList());\n\n        return ResponseEntity.status(HttpStatus.OK).body(fileInfos);\n    }\n\n    // get file by filename\n    @GetMapping("/files/{filename:.+}")\n    public ResponseEntity&lt;Resource&gt; getFile(@PathVariable String filename) {\n        Resource file = fileStoreService.load(filename);\n        return ResponseEntity.ok()\n                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=\\"" + file.getFilename() + "\\"").body(file);\n    }\n\n}\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>which calls the <code>FileStoreService</code> which also contains 3 methods for each APIs respectively. I have added plenty of comments to the code. Please comment below if anything is not clear.<br>\n</p>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>package com.webtutsplus.ecommerce.service;\n\nimport com.webtutsplus.ecommerce.constants.Constants;\nimport com.webtutsplus.ecommerce.exceptions.StorageException;\nimport org.apache.commons.io.FilenameUtils;\nimport org.springframework.core.io.Resource;\nimport org.springframework.core.io.UrlResource;\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.multipart.MultipartFile;\nimport org.springframework.web.servlet.support.ServletUriComponentsBuilder;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.MalformedURLException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.nio.file.StandardCopyOption;\nimport java.util.UUID;\nimport java.util.stream.Stream;\n\n@Service\npublic class FIleStoreService {\n\n    Path rootLocation = Paths.get(Constants.UPLOAD_FILE_DIR);\n\n    public String store(MultipartFile file) {\n        try {\n            if (file.isEmpty()) {\n                throw new StorageException("Failed to store empty file.");\n            }\n            // find extension of the file,png or jpg\n            String extension = FilenameUtils.getExtension(file.getOriginalFilename());\n\n            // generate a random unique name for the image\n            String uploadedFileName = UUID.randomUUID().toString() + "." + extension;\n\n            // create a path for destination file\n            Path destinationFile = rootLocation.resolve(Paths.get(uploadedFileName))\n                                   .normalize().toAbsolutePath();\n\n            // Copy input file to destination file path\n            try (InputStream inputStream = file.getInputStream()) {\n                Files.copy(inputStream, destinationFile,\n                        StandardCopyOption.REPLACE_EXISTING);\n\n                final String baseUrl =\n                        ServletUriComponentsBuilder.fromCurrentContextPath().build().toUriString();\n\n                //create the public Image URl where we can find the image\n                final StringBuilder imageStringBuilder = new StringBuilder(baseUrl);\n                imageStringBuilder.append("/fileUpload/files/");\n                imageStringBuilder.append(uploadedFileName);\n\n                return imageStringBuilder.toString();\n            }\n        }\n        catch (IOException e) {\n            throw new StorageException("Failed to store file.", e);\n        }\n    }\n\n    public Stream&lt;Path&gt; loadAll() {\n        // load all the files\n        try {\n            return Files.walk(this.rootLocation, 1)\n                    // ignore the root path\n                    .filter(path -&gt; !path.equals(this.rootLocation))\n                    .map(this.rootLocation::relativize);\n        }\n        catch (IOException e) {\n            throw new StorageException("Failed to read stored files", e);\n        }\n\n    }\n\n    public Resource load(String filename) {\n        try {\n            // read the file based on the filename\n            Path file = rootLocation.resolve(filename);\n            // get resource from path\n            Resource resource = new UrlResource(file.toUri());\n\n            if (resource.exists() || resource.isReadable()) {\n                return resource;\n            } else {\n                throw new RuntimeException("Could not read the file!");\n            }\n        } catch (MalformedURLException e) {\n            throw new RuntimeException("Error: " + e.getMessage());\n        }\n    }\n}\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>That’s it, files will be now renamed with a unique name saved into <code>**_UPLOAD_FILE_DIR_**</code> directory*<em><em>.</em></em>*</p>\n\n<p>[</p>\n\n<p><a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--OA32ZF7x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/60/1%2AUDfmuQ3Ls19kmLwZY_dSSA.png%3Fq%3D20" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--OA32ZF7x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/60/1%2AUDfmuQ3Ls19kmLwZY_dSSA.png%3Fq%3D20" alt="Image for post" loading="lazy"></a></p>\n\n<p><a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--Kj-0YDPI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/5700/1%2AUDfmuQ3Ls19kmLwZY_dSSA.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--Kj-0YDPI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/5700/1%2AUDfmuQ3Ls19kmLwZY_dSSA.png" alt="Image for post" loading="lazy"></a></p>\n\n<p>Upload a file</p>\n\n<h1>\n  <a name="get-all-the-files" href="#get-all-the-files" class="anchor">\n  </a>\n  <strong>Get all the files</strong>\n</h1>\n\n<p><a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--HBp4OcSn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/60/1%2AFotTrSa7edNr4yVEJke4Pw.png%3Fq%3D20" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--HBp4OcSn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/60/1%2AFotTrSa7edNr4yVEJke4Pw.png%3Fq%3D20" alt="Image for post" loading="lazy"></a></p>\n\n<p><a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--nc8FOu8R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/5656/1%2AFotTrSa7edNr4yVEJke4Pw.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--nc8FOu8R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/5656/1%2AFotTrSa7edNr4yVEJke4Pw.png" alt="Image for post" loading="lazy"></a></p>\n\n<p>get all the uploaded files</p>\n\n<h1>\n  <a name="download-a-single-file-by-name" href="#download-a-single-file-by-name" class="anchor">\n  </a>\n  Download a single file by name\n</h1>\n\n<p><a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--uVKQeAAm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/5604/1%2AKarGu7LxXiKtbv23_QQPug.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--uVKQeAAm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/5604/1%2AKarGu7LxXiKtbv23_QQPug.png" alt="Image for post" loading="lazy"></a></p>\n\n<h1>\n  <a name="next-step" href="#next-step" class="anchor">\n  </a>\n  Next step\n</h1>\n\n<p>We will build an <a href="http://104.197.181.100:3000/javarevisited/top-5-courses-to-learn-android-for-java-programmers-667e03d995b4">Android Application</a>, which will use the APIs. The final result will look something like this.</p>\n\n<p><iframe width="710" height="399" src="https://www.youtube.com/embed/GQmJmjvT0j8" allowfullscreen loading="lazy">\n</iframe>\n</p>\n\n	0	t	2021-02-18 21:34:27.610789	f	0	0	4	t	0	\N	\N	t	let-s-develop-file-upload-service-from-scratch-using-java-and-spring-boot-1f6	\N	25	Let’s Develop File Upload Service From Scratch Using Java and Spring Boot	2021-02-18 21:34:27.620382	1	0	\N	\N	\N	0	\N	\N	\N
48	f	f	f	\N	Learn the basics of obtaining a domain and linking it with your server or a virtual machine on the cloud.\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wnphx0x1ee23ksvrhk0j.jpg)\n\n<figcaption>Photo by <a href="https://unsplash.com/@firmbee?utm_source=medium&utm_medium=referral">William Iven</a> on<a href="https://unsplash.com/?utm_source=medium&utm_medium=referral">Unsplash</a></figcaption>\n\nIn this tutorial, we will learn how to link a domain with our server or a VM instance located on the cloud. We will also learn how to get a free domain for a year using Freenom.\n\nNOTE:- If you are familiar with Google App Engine or AWS Elastic Beanstalk, you must already know that they provide a domain name instead of an IP address. However, this domain name is not easy to remember (E.g. —` https://developer-frontend-304619.ew.r.appspot.com/ `. Clearly, you would not want this as a domain name). So, you can link a Domain Name with this complex Domain as well. If you do not understand this paragraph, do not worry. It is just a bit of extra information!!!\n\n## The Background\n\nNowadays, there are many platforms that allow us to host our website with the click of a button. Microsoft Azure, Google Cloud Platform, Amazon Web Services are some of these platforms. When we issue ourselves a virtual machine on these platforms, we generally get a public IP (e.g. 35.67.43.XX) using which we can access our website.\n\nHowever, in today’s world, this looks ugly. Nobody wants to open a website that will only be accessed using an IP address. Also, it is difficult to memorize the IP address for any website. Imagine, every time you needed to do Google Search, you would have to look up its IP address in a notebook.\n\nHere comes the use of **Domain Names.** Domain names (`http://www.google.com`) are nice to look at and easy to remember. But, we have to first issue ourselves a domain name and link it with our IP. There are dedicated public servers (called Domain Name System Servers) on the internet whose sole job is to convert domain names to IP addresses.\n\nWhenever we enter a domain name in the Address Bar of our browser, our browser contacts one of these Domain Name System Servers (DNS Servers) to get the IP address associated with it. Once the browser has the IP address, it then contacts the server for obtaining web pages.\n\n## Get a Host on the Cloud\n\nBefore we begin, we must have a virtual machine instance on the cloud. Make sure you have a Cloud VM instance with a website deployed on it. You must know its public IP address as well. Also, make sure you are able to access your website with this IP address.\n\n## Obtaining a Free Domain from Freenom\n\nSo, before we begin, we must issue a domain for ourselves. If you already have the domain, that’s good. You can skip this section. If you do not have it yet, we will show how you can obtain one for free from Freenom. The following steps illustrate:-\n\n**STEP 1: Search for the domain**\n\n* Go to Freenom’s website — [https://www.freenom.com/](https://www.freenom.com/en/index.html?lang=en)\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mglwkfep4an3pa6eewmu.png)\n<figcaption>Freenom website</figcaption>\n\n* Enter the domain you want. E.g. if you want a domain for your organization/company, just enter the name of the organization/company here and click on check availability. You will get a list of domains that are available for free for one year.\n\n**STEP 2: — Select the domain**\n\n   * Once you have selected a domain of your choice, click on `Get It Now` and then on `Checkout` .\n   * Select the Period. The first 12 months are free.\n   * Do NOT click on continue. We still have to link this domain with our server. We will explain that process in the next section\n\n## Linking Domain with our server\n\nSo now, we have a domain added to our cart already. We issued it for free from Freenom. If you already had a domain, you may have bought it from some other website. But that does not matter much.\n\nAlthough we will explain the process of linking domains with our server using Freenom’s website as an example, we can assure you the process is very similar for other domain issuing websites as well.\n\nWe will now give an overview of this process and then see how it is actually done using the domain added in our cart on Freenom. Remember, we mentioned DNS Servers whose sole purpose is to convert Domain Names to IP Addresses. So, linking a domain name with an IP Address (or server) means creating a record on one of these servers that contain your domain name and the IP address of your server/Cloud VM. There are many DNS servers worldwide and they constantly talk with each other. So, if you create a record on one of these servers, it will automatically be shared with other DNS Servers as well, although it will take some time to spread to all the DNS servers on the planet.\n\nNow that we know the process and what needs to be done to link our domain with the IP address, let’s see how it is done.\n\n**STEP 1: Find the Option to Use DNS**\n\n * If you issued domain using Freenom as per the steps mentioned in the last section, you would see the following screen:-\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ycus3scvjzeehb6rvj8v.png)\n\n* Find the option that says `Use DNS`. We are not concerned with domain forwarding in this tutorial. If you issued domain using any other Domain-Issuing Website, find a similar option like `Configure Domain` , `Use DNS` , `Create a Record` etc.\n* Click on `Use DNS` . You will now see two options — `Use Freenom’s DNS` or `Use your own DNS`. As you must have guessed by now, Freenom also provides a DNS server. We can choose to create a record in Freenom’s DNS Server or in our own DNS Server. Since we do not have a DNS server of our own, we will use Freenom’s DNS Server.\n\n**NOTE:- Almost every Domain-Issuing Website has a DNS Server of its own. So if you issued your Domain using any other Domain-Issuing Website, try to look for the option Use Website's DNS**\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xicpy5woi1ftzpedy6fi.png)\n\n**STEP 2: Enter HostName and IP Address of your server**\n\n* Now, it is time to create a DNS Record for our Domain and our server’s IP Address. As you may have guessed, you can customize the subdomain. (Subdomain refers to the first part of your domain — like [www.example.com](http://www.example.com/) or `api.example.com` . Here `www` and `api `are the subdomains of the domain `example.com` .\n* You can assign the same IP address to all the sub-domains you want to have OR you can even assign them different IP addresses as well. Subdomains are basically used to provide separate access to certain web pages of your site without creating a new URL. For example, you might use `www.example.com` to directly use your website and `api.example.com` to use the API interface of your website.\n* Also, DNS records are of various types. On some websites, you will be asked the type of DNS record, you want to create. To create a record containing the IPv4 address of the server, we have to create ` A records` . To create a record containing the IPv6 address of the server, we have to create `AAAA records` . \n\nNOTE:-\nRemember the Google App Engine and AWS Beanstalk about which we talked at the starting. Instead of an IP address, they provide a very complex domain to you (E.g. — [https://developer-frontend-304619.ew.r.appspot.com/](https://dev-frontend-304619.ew.r.appspot.com/) ), which is not easy to remember. To link that complex domain with your elegant and simple domain that you issued, you need to create a `CNAME` type of DNS record. Instead of an IP address, you will provide that complex domain in a CNAME record.\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c1hpj5zegd0t9z5iqdca.png)\n<figcaption>Entering DNS record on Google Domains</figcaption>\n\n* This is the most important step. Even if you are some other **Domain-Issuing Website**, you need to follow the same steps.\n\nNote:- You can even change these DNS records later.\n\n**STEP 3: Continue and complete the process**\n\n* After entering the DNS records, click on continue. If you are using Freenom, you will be asked to create an account on Freenom. This will help you in managing this domain later sometimes like changing the DNS records or delete this domain etc. If you are using any other **Domain-Issuing Website**, remember to create an account on that as well.\n* It will take some time for the DNS records to be shared with all the existing DNS server on Earth. It can take up to a maximum of 72 hours to get propagate worldwide. However, it typically takes less than an hour to get propagated.\n* After you have entered the records, it would look like this on Google Domain's website\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dxyz99l46f292404c5r5.png)\n<figcaption>DNS records on Google Domains</figcaption>\n\n**Congratulations !!!**\n\nYou have now learned how to link your domain with your server. If you are creating an open-source web application, this tutorial will definitely help you in getting a free domain for it :)\n\n**Note:-**\nGenerally, the issued domains do not have SSL certificates with them. That means, once you have linked the domain with your server, you should access it using `http://www.example.com` and not using `https://www.example.com` .\n\nWe will soon make a tutorial on how to get an SSL certificate for free for your domain. That way you can access your domain using `https://` as well. Until then, GOODBYE!!!	{"boosted_additional_tags": "", "boosted_dev_digest_email": false, "boosted_additional_articles": false}	\N	backend, freedomain, server	--- !ruby/struct:Articles::CachedEntity\nname: nilmadhab mondal\nusername: nilmadhab\nslug: nilmadhab\nprofile_image_90: "/uploads/user/profile_image/1/d9b0e3b7-ad59-45d5-b516-4e8ffd0a6958.jpeg"\nprofile_image_url: "/uploads/user/profile_image/1/d9b0e3b7-ad59-45d5-b516-4e8ffd0a6958.jpeg"\n	nilmadhab mondal	nilmadhab	\N	{}	\N	0	\N	0	2021-02-20 12:37:19.600229	\N	Learn the basics of obtaining a domain and linking it with your server or a virtual machine on the cl...	2021-02-20 13:36:03.295744	t	5	5	\N	f	1613824639	\N	354339	en	\N	2021-02-20 12:37:19.590766	\N	/i/s8t2dj7pw73zfhv6u9er.jpg	#dddddd	18	0	0	0	\N	\N	4	db1058d79300430d13cb4ea062b06d5efe8a40aff21879b7a61e1cd9292e17461aed9ef5deffe517ff6f98f47baf0da5fafeb69859537a46193665f7	/nilmadhab/how-to-get-a-free-domain-from-freenom-and-link-it-with-your-server-468i	0	0	0	<p>Learn the basics of obtaining a domain and linking it with your server or a virtual machine on the cloud.</p>\n\n<figure><p><a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--6G5LzYdh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wnphx0x1ee23ksvrhk0j.jpg" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--6G5LzYdh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wnphx0x1ee23ksvrhk0j.jpg" alt="Alt Text" loading="lazy"></a></p>\n<figcaption>Photo by <a href="https://unsplash.com/@firmbee?utm_source=medium&amp;utm_medium=referral">William Iven</a> on<a href="https://unsplash.com/?utm_source=medium&amp;utm_medium=referral">Unsplash</a></figcaption></figure>\n\n\n\n<p>In this tutorial, we will learn how to link a domain with our server or a VM instance located on the cloud. We will also learn how to get a free domain for a year using Freenom.</p>\n\n<p>NOTE:- If you are familiar with Google App Engine or AWS Elastic Beanstalk, you must already know that they provide a domain name instead of an IP address. However, this domain name is not easy to remember (E.g. —<code>https://developer-frontend-304619.ew.r.appspot.com/</code>. Clearly, you would not want this as a domain name). So, you can link a Domain Name with this complex Domain as well. If you do not understand this paragraph, do not worry. It is just a bit of extra information!!!</p>\n\n<h2>\n  <a name="the-background" href="#the-background" class="anchor">\n  </a>\n  The Background\n</h2>\n\n<p>Nowadays, there are many platforms that allow us to host our website with the click of a button. Microsoft Azure, Google Cloud Platform, Amazon Web Services are some of these platforms. When we issue ourselves a virtual machine on these platforms, we generally get a public IP (e.g. 35.67.43.XX) using which we can access our website.</p>\n\n<p>However, in today’s world, this looks ugly. Nobody wants to open a website that will only be accessed using an IP address. Also, it is difficult to memorize the IP address for any website. Imagine, every time you needed to do Google Search, you would have to look up its IP address in a notebook.</p>\n\n<p>Here comes the use of <strong>Domain Names.</strong> Domain names (<code>http://www.google.com</code>) are nice to look at and easy to remember. But, we have to first issue ourselves a domain name and link it with our IP. There are dedicated public servers (called Domain Name System Servers) on the internet whose sole job is to convert domain names to IP addresses.</p>\n\n<p>Whenever we enter a domain name in the Address Bar of our browser, our browser contacts one of these Domain Name System Servers (DNS Servers) to get the IP address associated with it. Once the browser has the IP address, it then contacts the server for obtaining web pages.</p>\n\n<h2>\n  <a name="get-a-host-on-the-cloud" href="#get-a-host-on-the-cloud" class="anchor">\n  </a>\n  Get a Host on the Cloud\n</h2>\n\n<p>Before we begin, we must have a virtual machine instance on the cloud. Make sure you have a Cloud VM instance with a website deployed on it. You must know its public IP address as well. Also, make sure you are able to access your website with this IP address.</p>\n\n<h2>\n  <a name="obtaining-a-free-domain-from-freenom" href="#obtaining-a-free-domain-from-freenom" class="anchor">\n  </a>\n  Obtaining a Free Domain from Freenom\n</h2>\n\n<p>So, before we begin, we must issue a domain for ourselves. If you already have the domain, that’s good. You can skip this section. If you do not have it yet, we will show how you can obtain one for free from Freenom. The following steps illustrate:-</p>\n\n<p><strong>STEP 1: Search for the domain</strong></p>\n\n<ul>\n<li>Go to Freenom’s website — <a href="https://www.freenom.com/en/index.html?lang=en">https://www.freenom.com/</a>\n</li>\n</ul>\n\n<figure><p><a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--UzegY80P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mglwkfep4an3pa6eewmu.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--UzegY80P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mglwkfep4an3pa6eewmu.png" alt="Alt Text" loading="lazy"></a></p>\n<figcaption>Freenom website</figcaption></figure>\n\n\n\n<ul>\n<li>Enter the domain you want. E.g. if you want a domain for your organization/company, just enter the name of the organization/company here and click on check availability. You will get a list of domains that are available for free for one year.</li>\n</ul>\n\n<p><strong>STEP 2: — Select the domain</strong></p>\n\n<ul>\n<li>Once you have selected a domain of your choice, click on <code>Get It Now</code> and then on <code>Checkout</code> .</li>\n<li>Select the Period. The first 12 months are free.</li>\n<li>Do NOT click on continue. We still have to link this domain with our server. We will explain that process in the next section</li>\n</ul>\n\n<h2>\n  <a name="linking-domain-with-our-server" href="#linking-domain-with-our-server" class="anchor">\n  </a>\n  Linking Domain with our server\n</h2>\n\n<p>So now, we have a domain added to our cart already. We issued it for free from Freenom. If you already had a domain, you may have bought it from some other website. But that does not matter much.</p>\n\n<p>Although we will explain the process of linking domains with our server using Freenom’s website as an example, we can assure you the process is very similar for other domain issuing websites as well.</p>\n\n<p>We will now give an overview of this process and then see how it is actually done using the domain added in our cart on Freenom. Remember, we mentioned DNS Servers whose sole purpose is to convert Domain Names to IP Addresses. So, linking a domain name with an IP Address (or server) means creating a record on one of these servers that contain your domain name and the IP address of your server/Cloud VM. There are many DNS servers worldwide and they constantly talk with each other. So, if you create a record on one of these servers, it will automatically be shared with other DNS Servers as well, although it will take some time to spread to all the DNS servers on the planet.</p>\n\n<p>Now that we know the process and what needs to be done to link our domain with the IP address, let’s see how it is done.</p>\n\n<p><strong>STEP 1: Find the Option to Use DNS</strong></p>\n\n<ul>\n<li>If you issued domain using Freenom as per the steps mentioned in the last section, you would see the following screen:-</li>\n</ul>\n\n<p><a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--PDWmcZXl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ycus3scvjzeehb6rvj8v.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--PDWmcZXl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ycus3scvjzeehb6rvj8v.png" alt="Alt Text" loading="lazy"></a></p>\n\n<ul>\n<li>Find the option that says <code>Use DNS</code>. We are not concerned with domain forwarding in this tutorial. If you issued domain using any other Domain-Issuing Website, find a similar option like <code>Configure Domain</code> , <code>Use DNS</code> , <code>Create a Record</code> etc.</li>\n<li>Click on <code>Use DNS</code> . You will now see two options — <code>Use Freenom’s DNS</code> or <code>Use your own DNS</code>. As you must have guessed by now, Freenom also provides a DNS server. We can choose to create a record in Freenom’s DNS Server or in our own DNS Server. Since we do not have a DNS server of our own, we will use Freenom’s DNS Server.</li>\n</ul>\n\n<p><strong>NOTE:- Almost every Domain-Issuing Website has a DNS Server of its own. So if you issued your Domain using any other Domain-Issuing Website, try to look for the option Use Website's DNS</strong></p>\n\n<p><a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--3wpYaiXL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xicpy5woi1ftzpedy6fi.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--3wpYaiXL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xicpy5woi1ftzpedy6fi.png" alt="Alt Text" loading="lazy"></a></p>\n\n<p><strong>STEP 2: Enter HostName and IP Address of your server</strong></p>\n\n<ul>\n<li>Now, it is time to create a DNS Record for our Domain and our server’s IP Address. As you may have guessed, you can customize the subdomain. (Subdomain refers to the first part of your domain — like <a href="http://www.example.com/">www.example.com</a> or <code>api.example.com</code> . Here <code>www</code> and <code>api</code>are the subdomains of the domain <code>example.com</code> .</li>\n<li>You can assign the same IP address to all the sub-domains you want to have OR you can even assign them different IP addresses as well. Subdomains are basically used to provide separate access to certain web pages of your site without creating a new URL. For example, you might use <code>www.example.com</code> to directly use your website and <code>api.example.com</code> to use the API interface of your website.</li>\n<li>Also, DNS records are of various types. On some websites, you will be asked the type of DNS record, you want to create. To create a record containing the IPv4 address of the server, we have to create <code>A records</code> . To create a record containing the IPv6 address of the server, we have to create <code>AAAA records</code> . </li>\n</ul>\n\n<p>NOTE:-<br>\nRemember the Google App Engine and AWS Beanstalk about which we talked at the starting. Instead of an IP address, they provide a very complex domain to you (E.g. — <a href="https://dev-frontend-304619.ew.r.appspot.com/">https://developer-frontend-304619.ew.r.appspot.com/</a> ), which is not easy to remember. To link that complex domain with your elegant and simple domain that you issued, you need to create a <code>CNAME</code> type of DNS record. Instead of an IP address, you will provide that complex domain in a CNAME record.</p>\n\n<figure><p><a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--1HBX349V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c1hpj5zegd0t9z5iqdca.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--1HBX349V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c1hpj5zegd0t9z5iqdca.png" alt="Alt Text" loading="lazy"></a></p>\n<figcaption>Entering DNS record on Google Domains</figcaption></figure>\n\n\n\n<ul>\n<li>This is the most important step. Even if you are some other <strong>Domain-Issuing Website</strong>, you need to follow the same steps.</li>\n</ul>\n\n<p>Note:- You can even change these DNS records later.</p>\n\n<p><strong>STEP 3: Continue and complete the process</strong></p>\n\n<ul>\n<li>After entering the DNS records, click on continue. If you are using Freenom, you will be asked to create an account on Freenom. This will help you in managing this domain later sometimes like changing the DNS records or delete this domain etc. If you are using any other <strong>Domain-Issuing Website</strong>, remember to create an account on that as well.</li>\n<li>It will take some time for the DNS records to be shared with all the existing DNS server on Earth. It can take up to a maximum of 72 hours to get propagate worldwide. However, it typically takes less than an hour to get propagated.</li>\n<li>After you have entered the records, it would look like this on Google Domain's website</li>\n</ul>\n\n<figure><p><a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--NKMOvr_t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dxyz99l46f292404c5r5.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--NKMOvr_t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dxyz99l46f292404c5r5.png" alt="Alt Text" loading="lazy"></a></p>\n<figcaption>DNS records on Google Domains</figcaption></figure>\n\n\n\n<p><strong>Congratulations !!!</strong></p>\n\n<p>You have now learned how to link your domain with your server. If you are creating an open-source web application, this tutorial will definitely help you in getting a free domain for it :)</p>\n\n<p><strong>Note:-</strong><br>\nGenerally, the issued domains do not have SSL certificates with them. That means, once you have linked the domain with your server, you should access it using <code>http://www.example.com</code> and not using <code>https://www.example.com</code> .</p>\n\n<p>We will soon make a tutorial on how to get an SSL certificate for free for your domain. That way you can access your domain using <code>https://</code> as well. Until then, GOODBYE!!!</p>\n\n	0	t	2021-02-20 12:37:19.590766	f	0	0	7	t	0	\N	\N	t	how-to-get-a-free-domain-from-freenom-and-link-it-with-your-server-468i	\N	25	How to Get a Free Domain from Freenom and Link it With Your Server	2021-02-20 13:36:03.505539	1	0	\N	\N	\N	0	\N	\N	\N
62	f	f	f	\N	\n\n### we are going to implement basic SignUp and SignIn functionality in Spring backend and Android UI\n{% youtube cfgwH4XQkvI %}\n## An Overview Of The Tutorial!\n>  Introduction\n>  Database Design\n>  API Design\n>  Demo overview\n>  Signup\n>  Dealing with the Android Application\n>  Our Intention\n>  Requirements\n>  Dependencies\n>  Permissions\n>  Creating Models\n>  Updating the API\n>  Creating Activities\n>  The Main Page\n>  Signing Up Users\n>  Signing In Users\n>  Constructing the Dashboard\n>  Running the Application\n>  Resources\n\n## Introduction\n\nThis is a series of tutorials we are building to demonstrate how to build an **E-Commerce** App, one component at a time.\n\nWe are going to implement a **basic authentication** which will be extended to role-based access i.e. Admin can change anything, add new Users, a manager can only add/update Category and Products, users can only see the products and Category.\n\nWhen users/admin sign in, we will generate an authentication token, which will be used to verify the users, when they are going to access an API later.\n\n## Frontend Tutorial\n{% medium https://medium.com/javascript-in-plain-english/creating-an-ecommerce-frontend-with-vue-js-c64481a65941 %}\n\n## Database Design\n\n![](https://cdn-images-1.medium.com/max/5096/1*H71kToMRxh2v9iXwaIu2dQ.png)\n<figcaption>Entity Relationship Diagram</figcaption>\n\nWe will have a user table and tokens table. For every user, when they signUp and sign in, we will generate a token, which will have an expiry date. After the expiry day has passed, we should generate a new token, although we will not cover it in the tutorial.\n\n## **API Design**\n{% gist https://gist.github.com/nilmadhab1995/f4c507635aebecdcd51dcd7414282d7d.js %}\n\nUserController will have two methods, Signup and SignIn, which will be POST requests.\n\n## Demo Overview\n\n## SignUp\n\nLet's look at signUp API. It takes **SignupDto** as Input and returns True or False as output depending upon if SignUp succeeds.\n\n{% gist https://gist.github.com/nilmadhab1995/46ebfe02fd7554b20e38a7e1d331cffa.js %}\n\nWe follow these steps for signup\n\n 1. Encrypt the password\n\n 2. Save the User\n\n 3. Generate auth token and save it in database\n\n 4. Return Success\n{% gist https://gist.github.com/nilmadhab1995/fcf95158baab020f7c3d6381ad54a768.js %}\n\nWe will now look at models that are mapped as a table in the \n\n{% gist https://gist.github.com/nilmadhab1995/c3ca9fad0745bd1e0d275aeef3e7646c.js %}\n\nUser and Tokens are linked by user_id field in tokens table, which has one to one relationship, i.e one user can have one token and vice versa.\n{% gist https://gist.github.com/nilmadhab1995/96cbca2bdff1a97a80aaf0be7e9ab786.js %}\n\n[**You can find the complete backend code here**](https://bitbucket.org/ecommerce-webtutsplus/ecommerce/src/master/)\n\n## Start building the Android Application\n\nNext, we are going to use the same [REST API](https://medium.com/javarevisited/21-spring-mvc-rest-interview-questions-answers-for-beginners-and-experienced-developers-21ad3d4c9b82) to perform the **user authentication** process in the same android application that we have created and deployed in the last tutorial. If you have not followed up, please check out the tutorial using the link given below.\n{% medium https://medium.com/technology-hits/lets-add-products-in-android-for-e-commerce-app-b8468e055001 %}\n\n## Our Intention\n\nIn our last tutorial above, we have created ways in our application to view, add, and update our products by communicating with our REST API service.\n\nNow we are going to limit the access of **adding and updating products only to the authenticated users**. Non-authenticated users can simply checkout all products we have, but they are not permitted to edit.\n\nOur intention is to achieve such functionality mentioned above in our application. Get ready to explore!\n\n## Requirements\n\nThough we have no new requirements for the application to achieve basic authentication, let’s revise them for the new readers’ convenience.\n\n* *Android Studio (Completely Setup with SDK)*\n\n* *Android Virtual Device*\n\n* *Cloud Hosted E-Commerce Backend API*\n\n* *Retrofit- to interact with the API*\n\n* *Glide- to load images*\n\nSteps to set up your work environment in Android Studio can be found [here](https://developer.android.com/studio/install).\n\n## Dependencies\n\nNo new dependencies are needed for extending the user authentication functionality in our application. Anyway, I’ll showcase all dependencies we have used in our application.\n>  Recycler View\nCard View\nRetrofit\nGson converter\nGlide\n\n## Permissions\n\nSame as dependencies, we don’t need any extra permissions to extend the required functionality to our application.\n\nWe only need **internet permissions** to communicate with the [RESTful service](https://medium.com/javarevisited/top-5-books-and-courses-to-learn-restful-web-services-in-java-using-spring-mvc-and-spring-boot-79ec4b351d12?source=---------17------------------). It was added during the last-mentioned tutorial.\n\nYou can check out the *app/src/main/AndroidManifest.xml* file of our application below-\n{% gist https://gist.github.com/nilmadhab1995/63e423bade56b8e813baaf749f9b990e.js %}\nPlease check the contents of the given *app/src/main/AndroidManifest.xml* file with yours.\n\n## Creating Models\n\nWe already have a model for the Product to send and receive through the API. Likewise, we need to create a model for the user to pass their credentials through our API.\n\nOur **user model** accepts the credentials first name, last name, email id, and a password to save a user to the backend and the respective user’s email id and password to sign in them into the application.\n\nTherefore, create a class *User*, that has four fields *firstName, lastName, email, and password*, as shown below-\n{% gist https://gist.github.com/giridhar30/52ff493913cbaaae2989ee3646662527.js %}\nAnd now we have all the required models to interact with our API. Let’s go ahead with making the user objects interact with our RESTful service.\n\n## Updating the API\n\nWe need to update the **interface API** that we have created so that it also interacts with the Users API in our backend.\n\nWe already have the interaction with the products API. Without disturbing that, we need to establish interaction with the Users API in our RESTful service. For the same, we are gonna update the **API.java**in our project.\n\nYou can update the same as below-\n{% gist https://gist.github.com/giridhar30/de7f0f68c4854111b7499118e59b0e20.js %}\nNow we can interact with the Users API of our backend. Let’s move further!\n\n## Creating Activities\n\nWe all know that **activities are the basic building blocks** of the application. An **activity** consists of a layout file and a java class to control the same.\n\nWe are provided with the pre-built activity called **Main Activity**. And also, we have added the following working activities to our application.\n\n* *ListProducts Activity*\n\n* *AddProduct Activity*\n\n* *UpdateProduct Activity*\n\nFor this tutorial, we need three more activities to sign up a user, sign in a user, and show the dashboard to the users respectively. Go ahead and **create** the following **activities** by following the steps: **Right-click on the MainActivity residing package -> New -> Activity -> Empty Activity**\n>  SignupActivity\n>  SigninActivity\n>  DashboardActivity\n\n## The Main Page\n\nThe previous main page consisted mainly of buttons that navigate to add or update products and list products. But the **functionalities of adding and updating products should be available only after the user is signing in**. So, we are removing it from the main activity’s layout file.\n\nInstead of that, we are adding two buttons that navigate to the user signup and user sign-in activity. The respective **layout file** is as below-\n{% gist https://gist.github.com/giridhar30/2ec146645ead707bac780b2ca4a3e610.js %}\nNow, we need to make those newly created buttons to navigate to respective activities. For that, add **on click listeners** to the buttons in the **MainActivity.java**as below-\n{% gist https://gist.github.com/giridhar30/7a331e2dd5ca7cfa9fead5c2c04a62de.js %}\nNow, let’s concentrate on signing up and signing in users through our application.\n\n![](https://cdn-images-1.medium.com/max/2000/1*rkEkqec7TK_K2XyaHgs0_A.jpeg)\n\n![](https://cdn-images-1.medium.com/max/2000/1*nvwHI_xI9KiUiDcvC2ukQA.jpeg)\n\n## Signing Up Users\n\nWe need mainly four edit texts — one for getting the *first name*, one for getting the **last name**, one for getting the *email id* and the last one for getting the **password**.\n\nAnd finally, we need a button to submit these data. The **layout** for the signup activity is modified as follows-\n{% gist https://gist.github.com/giridhar30/a3bf1b92f15ccfed3f8c13afc306d581.js %}\nThe input **data has to be trimmed, validated and verified** before we pass it to the backend. All these are done in the *SignupActivity.java.*\n\nAn **On Click Listener** is added to the button that submit the data. Once the data is submitted, it is validated. After validation, a user object is created with the data and the object is passed through the API to **Signup.**\n\nOnce the signup is completed successfully, the application navigates to the signin activity. The controlling file of the signup activity as below-\n\n![](https://cdn-images-1.medium.com/max/2000/1*VAiilXaeIVt_RUM4Mnk3og.jpeg)\n{% gist https://gist.github.com/giridhar30/d8dfd25f8995b79fd89054ef8266da8b.js %}\nWe have the sign up part all ready. Let’s move to the sign in part of our application!\n\n## Signing In Users\n\nFor signing in users, we need just the user’s email to identify them and their password to verify them. To get them, we need two edit text views.\n\nAnd also, a button is needed to submit the data. Below given is the **layout file** for **sign-in** activity.\n{% gist https://gist.github.com/giridhar30/ef20ec8b9d658f96647d34b78578da75.js %}\nThe data from this layout is **fetched, processed and verified with the backend **API by the **SigninActivity.java**. It also should contain the on click listener for the button to submit the data.\n\nThrough the **on click listener** added, we receive the data from the fields and process it to create a user object. The object is then passed to the **REST API**, which verifies it and sends us a response to authenticate the user.\n\nAfter **successful authentication** of the user, they are directed to the **dashboard activity** of the application.\n\n![](https://cdn-images-1.medium.com/max/2000/1*XM5IDnpxGXC-31sbu0tTag.jpeg)\n{% gist https://gist.github.com/giridhar30/68bd587280b24802b6ca36a735fc3094.js %}\nThe only remaining task before us is to make the dashboard activity. Without any delay, let’s do that!\n\n## Constructing the Dashboard\n\nThe **dashboard activity** seems similar to that of our main activity. It can also be called the main activity for **authenticated users**.\n\nAuthenticated users must be able to **edit the products or add new products**. For that sake, add the buttons for adding and updating the products. Also, add a button for viewing the products.\n\nThe **layout file** of the dashboard activity should be constructed as follows-\n{% gist https://gist.github.com/giridhar30/6fda6c6feb7814ebc9af6639ec9069c4.js %}\nLet’s make these buttons in the dashboard activity functional! Go to the file *DashboardActivity.java *that controls the functioning of the activity. Add **on click listeners** to the buttons that we have added previously.\n\nSet up the navigation correctly so that the user is navigated to the respective activities from the buttons.\n\nThe corresponding **DashboardActivity.java** file is as follows-\n\n![](https://cdn-images-1.medium.com/max/2000/1*XM5IDnpxGXC-31sbu0tTag.jpeg)\n{% gist https://gist.github.com/giridhar30/3edeedd85c0d61f09b19acd04b5814ba.js %}\nHurray! we have completed the coding section! Let’s run the application now!\n\n## Running the Application\n\nNow, it’s time for running the application, after adding the required functionalities. Select the required **Android Virtual Device** from the toolbar and click on the **run** button on the same(**Green triangle icon**)\n\nAfter a certain amount of time, your android virtual device will get the application installed and opened. You can completely use it now!\n\nSome of its screenshots are as below —\n\n![](https://cdn-images-1.medium.com/max/2000/1*Eu77Q-nOONmW_c1bE6LzLg.jpeg)\n\n![](https://cdn-images-1.medium.com/max/2000/1*Eq5ExvhkmG3AMX3PUEcFBw.jpeg)\n\n![](https://cdn-images-1.medium.com/max/2000/1*JNEXsh3stMKBJ73inRFwiQ.jpeg)\n\n![](https://cdn-images-1.medium.com/max/2000/1*6BeB1bE4LluGyIBxRv52AA.jpeg)\n\n## Resources\n\n 1. [Bitbucket link](https://bitbucket.org/ecommerce-webtutsplus/ecommerce/src/master/) for Spring Backend Project Repository\n\n 2. [Bitbucket link](https://bitbucket.org/ecommerce-webtutsplus/android-ui/src/c3b5df055d886b2aba3a6af9928b532f4808dd8a/) for Android Application Project Repository\n\n 3. [Spring Backend](http://104.236.26.66:8080/api/swagger-ui.html) Swagger UI hosted on cloud\n\n 4. [REST API](http://104.236.26.66:8080/api/) of our Spring Backend\n\n 5. [Tutorial](https://medium.com/technology-hits/lets-develop-an-ecommerce-application-from-scratch-using-java-and-spring-6dfac6ce5a9f) for the creating Spring Backend API\n\n 6. [Tutorial](https://medium.com/technology-hits/lets-add-products-in-android-for-e-commerce-app-b8468e055001) for creating the products application\n\n 7. [Steps](https://developer.android.com/studio/install) to install and set up Android Studio\n\nYahoo! That’s it! Hope you have learned many things from this tutorial. Stay tuned for such an awesome series of tutorials!\n\n***Happy Learning!***\n\n\n	{"boosted_additional_tags": "", "boosted_dev_digest_email": false, "boosted_additional_articles": false}	\N	backend, ecommerce	--- !ruby/struct:Articles::CachedEntity\nname: nilmadhab mondal\nusername: nilmadhab\nslug: nilmadhab\nprofile_image_90: "/uploads/user/profile_image/1/d9b0e3b7-ad59-45d5-b516-4e8ffd0a6958.jpeg"\nprofile_image_url: "/uploads/user/profile_image/1/d9b0e3b7-ad59-45d5-b516-4e8ffd0a6958.jpeg"\n	nilmadhab mondal	nilmadhab	\N	{}	\N	0	\N	0	2021-02-23 11:20:12.422452	\N	we are going to implement basic SignUp and SignIn functionality in Spring backend and Androi...	2021-02-23 11:40:55.710069	t	5	5	\N	f	1614079212	\N	354594	en	\N	2021-02-23 11:20:12.413066	\N	/i/31e82341ae4vxtn7ml9x.png	#dddddd	28	0	0	0	\N	\N	5	c6ee8d0b012bdcb87f95794c3704af3608eaa671a14cb33a56e3962d72129da4f3619a2f2a60db48638a5ab9b6c9b6a9c18761e70b0fd6907dc710f4	/nilmadhab/let-s-build-signup-signin-and-role-based-access-in-our-e-commerce-app-343d	0	0	0	<h3>\n  <a name="we-are-going-to-implement-basic-signup-and-signin-functionality-in-spring-backend-and-android-ui" href="#we-are-going-to-implement-basic-signup-and-signin-functionality-in-spring-backend-and-android-ui" class="anchor">\n  </a>\n  we are going to implement basic SignUp and SignIn functionality in Spring backend and Android UI\n</h3>\n\n<p><iframe width="710" height="399" src="https://www.youtube.com/embed/cfgwH4XQkvI" allowfullscreen loading="lazy">\n</iframe>\n</p>\n\n<h2>\n  <a name="an-overview-of-the-tutorial" href="#an-overview-of-the-tutorial" class="anchor">\n  </a>\n  An Overview Of The Tutorial!\n</h2>\n\n<blockquote>\n<p>Introduction<br>\n Database Design<br>\n API Design<br>\n Demo overview<br>\n Signup<br>\n Dealing with the Android Application<br>\n Our Intention<br>\n Requirements<br>\n Dependencies<br>\n Permissions<br>\n Creating Models<br>\n Updating the API<br>\n Creating Activities<br>\n The Main Page<br>\n Signing Up Users<br>\n Signing In Users<br>\n Constructing the Dashboard<br>\n Running the Application<br>\n Resources</p>\n</blockquote>\n\n<h2>\n  <a name="introduction" href="#introduction" class="anchor">\n  </a>\n  Introduction\n</h2>\n\n<p>This is a series of tutorials we are building to demonstrate how to build an <strong>E-Commerce</strong> App, one component at a time.</p>\n\n<p>We are going to implement a <strong>basic authentication</strong> which will be extended to role-based access i.e. Admin can change anything, add new Users, a manager can only add/update Category and Products, users can only see the products and Category.</p>\n\n<p>When users/admin sign in, we will generate an authentication token, which will be used to verify the users, when they are going to access an API later.</p>\n\n<h2>\n  <a name="frontend-tutorial" href="#frontend-tutorial" class="anchor">\n  </a>\n  Frontend Tutorial\n</h2>\n\n\n<div class="ltag__link">\n  <a href="https://medium.com/javascript-in-plain-english/creating-an-ecommerce-frontend-with-vue-js-c64481a65941" class="ltag__link__link">\n    <div class="ltag__link__pic">\n      <img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--tLzMBohE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/fit/c/96/96/1%2AhNjwft_dNBxvTr6g6TOVGg.jpeg" alt="Nil Madhab" loading="lazy">\n    </div>\n  </a>\n  <a href="https://medium.com/javascript-in-plain-english/creating-an-ecommerce-frontend-with-vue-js-c64481a65941" class="ltag__link__link">\n    <div class="ltag__link__content">\n      <h2>Creating an eCommerce Frontend with Vue.js | by Nil Madhab | Jan, 2021 | JavaScript in Plain English</h2>\n      <h3>Nil Madhab ・ <time datetime="2021-01-19T06:48:45.149Z">Jan 19, 2021</time> ・ 12 min read\n      <div class="ltag__link__servicename">\n        <img src="/assets/medium_icon.svg" alt="Medium Logo" aria-label="Medium Logo" loading="lazy">\n        Medium\n      </div>\n    </h3>\n</div>\n  </a>\n</div>\n\n\n<h2>\n  <a name="database-design" href="#database-design" class="anchor">\n  </a>\n  Database Design\n</h2>\n\n<figure><p><a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--P1Q3xxXC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/5096/1%2AH71kToMRxh2v9iXwaIu2dQ.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--P1Q3xxXC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/5096/1%2AH71kToMRxh2v9iXwaIu2dQ.png" alt="" loading="lazy"></a></p>\n<figcaption>Entity Relationship Diagram</figcaption></figure>\n\n\n\n<p>We will have a user table and tokens table. For every user, when they signUp and sign in, we will generate a token, which will have an expiry date. After the expiry day has passed, we should generate a new token, although we will not cover it in the tutorial.</p>\n\n<h2>\n  <a name="api-design" href="#api-design" class="anchor">\n  </a>\n  <strong>API Design</strong>\n</h2>\n\n\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/nilmadhab1995/f4c507635aebecdcd51dcd7414282d7d.js"></script>\n</div>\n\n\n<p>UserController will have two methods, Signup and SignIn, which will be POST requests.</p>\n\n<h2>\n  <a name="demo-overview" href="#demo-overview" class="anchor">\n  </a>\n  Demo Overview\n</h2>\n\n<h2>\n  <a name="signup" href="#signup" class="anchor">\n  </a>\n  SignUp\n</h2>\n\n<p>Let's look at signUp API. It takes <strong>SignupDto</strong> as Input and returns True or False as output depending upon if SignUp succeeds.</p>\n\n\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/nilmadhab1995/46ebfe02fd7554b20e38a7e1d331cffa.js"></script>\n</div>\n\n\n<p>We follow these steps for signup</p>\n\n<ol>\n<li><p>Encrypt the password</p></li>\n<li><p>Save the User</p></li>\n<li><p>Generate auth token and save it in database</p></li>\n<li>\n<p>Return Success<br>\n</p>\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/nilmadhab1995/fcf95158baab020f7c3d6381ad54a768.js"></script>\n</div>\n</li>\n</ol>\n\n<p>We will now look at models that are mapped as a table in the </p>\n\n\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/nilmadhab1995/c3ca9fad0745bd1e0d275aeef3e7646c.js"></script>\n</div>\n\n\n<p>User and Tokens are linked by user_id field in tokens table, which has one to one relationship, i.e one user can have one token and vice versa.<br>\n</p>\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/nilmadhab1995/96cbca2bdff1a97a80aaf0be7e9ab786.js"></script>\n</div>\n\n\n<p><a href="https://bitbucket.org/ecommerce-webtutsplus/ecommerce/src/master/"><strong>You can find the complete backend code here</strong></a></p>\n\n<h2>\n  <a name="start-building-the-android-application" href="#start-building-the-android-application" class="anchor">\n  </a>\n  Start building the Android Application\n</h2>\n\n<p>Next, we are going to use the same <a href="https://medium.com/javarevisited/21-spring-mvc-rest-interview-questions-answers-for-beginners-and-experienced-developers-21ad3d4c9b82">REST API</a> to perform the <strong>user authentication</strong> process in the same android application that we have created and deployed in the last tutorial. If you have not followed up, please check out the tutorial using the link given below.<br>\n</p>\n<div class="ltag__link">\n  <a href="https://medium.com/technology-hits/lets-add-products-in-android-for-e-commerce-app-b8468e055001" class="ltag__link__link">\n    <div class="ltag__link__pic">\n      <img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--tLzMBohE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/fit/c/96/96/1%2AhNjwft_dNBxvTr6g6TOVGg.jpeg" alt="Nil Madhab" loading="lazy">\n    </div>\n  </a>\n  <a href="https://medium.com/technology-hits/lets-add-products-in-android-for-e-commerce-app-b8468e055001" class="ltag__link__link">\n    <div class="ltag__link__content">\n      <h2>Let’s Add Products in Android for E-Commerce App | by Nil Madhab | webtutsplus | Medium</h2>\n      <h3>Nil Madhab ・ <time datetime="2021-01-03T15:02:27.202Z">Jan 3, 2021</time> ・ 7 min read\n      <div class="ltag__link__servicename">\n        <img src="/assets/medium_icon.svg" alt="Medium Logo" aria-label="Medium Logo" loading="lazy">\n        Medium\n      </div>\n    </h3>\n</div>\n  </a>\n</div>\n\n\n<h2>\n  <a name="our-intention" href="#our-intention" class="anchor">\n  </a>\n  Our Intention\n</h2>\n\n<p>In our last tutorial above, we have created ways in our application to view, add, and update our products by communicating with our REST API service.</p>\n\n<p>Now we are going to limit the access of <strong>adding and updating products only to the authenticated users</strong>. Non-authenticated users can simply checkout all products we have, but they are not permitted to edit.</p>\n\n<p>Our intention is to achieve such functionality mentioned above in our application. Get ready to explore!</p>\n\n<h2>\n  <a name="requirements" href="#requirements" class="anchor">\n  </a>\n  Requirements\n</h2>\n\n<p>Though we have no new requirements for the application to achieve basic authentication, let’s revise them for the new readers’ convenience.</p>\n\n<ul>\n<li><p><em>Android Studio (Completely Setup with SDK)</em></p></li>\n<li><p><em>Android Virtual Device</em></p></li>\n<li><p><em>Cloud Hosted E-Commerce Backend API</em></p></li>\n<li><p><em>Retrofit- to interact with the API</em></p></li>\n<li><p><em>Glide- to load images</em></p></li>\n</ul>\n\n<p>Steps to set up your work environment in Android Studio can be found <a href="https://developer.android.com/studio/install">here</a>.</p>\n\n<h2>\n  <a name="dependencies" href="#dependencies" class="anchor">\n  </a>\n  Dependencies\n</h2>\n\n<p>No new dependencies are needed for extending the user authentication functionality in our application. Anyway, I’ll showcase all dependencies we have used in our application.</p>\n\n<blockquote>\n<p>Recycler View<br>\nCard View<br>\nRetrofit<br>\nGson converter<br>\nGlide</p>\n</blockquote>\n\n<h2>\n  <a name="permissions" href="#permissions" class="anchor">\n  </a>\n  Permissions\n</h2>\n\n<p>Same as dependencies, we don’t need any extra permissions to extend the required functionality to our application.</p>\n\n<p>We only need <strong>internet permissions</strong> to communicate with the <a href="https://medium.com/javarevisited/top-5-books-and-courses-to-learn-restful-web-services-in-java-using-spring-mvc-and-spring-boot-79ec4b351d12?source=---------17------------------">RESTful service</a>. It was added during the last-mentioned tutorial.</p>\n\n<p>You can check out the <em>app/src/main/AndroidManifest.xml</em> file of our application below-<br>\n</p>\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/nilmadhab1995/63e423bade56b8e813baaf749f9b990e.js"></script>\n</div>\n<br>\nPlease check the contents of the given <em>app/src/main/AndroidManifest.xml</em> file with yours.\n\n<h2>\n  <a name="creating-models" href="#creating-models" class="anchor">\n  </a>\n  Creating Models\n</h2>\n\n<p>We already have a model for the Product to send and receive through the API. Likewise, we need to create a model for the user to pass their credentials through our API.</p>\n\n<p>Our <strong>user model</strong> accepts the credentials first name, last name, email id, and a password to save a user to the backend and the respective user’s email id and password to sign in them into the application.</p>\n\n<p>Therefore, create a class <em>User</em>, that has four fields <em>firstName, lastName, email, and password</em>, as shown below-<br>\n</p>\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/giridhar30/52ff493913cbaaae2989ee3646662527.js"></script>\n</div>\n<br>\nAnd now we have all the required models to interact with our API. Let’s go ahead with making the user objects interact with our RESTful service.\n\n<h2>\n  <a name="updating-the-api" href="#updating-the-api" class="anchor">\n  </a>\n  Updating the API\n</h2>\n\n<p>We need to update the <strong>interface API</strong> that we have created so that it also interacts with the Users API in our backend.</p>\n\n<p>We already have the interaction with the products API. Without disturbing that, we need to establish interaction with the Users API in our RESTful service. For the same, we are gonna update the <strong>API.java</strong>in our project.</p>\n\n<p>You can update the same as below-<br>\n</p>\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/giridhar30/de7f0f68c4854111b7499118e59b0e20.js"></script>\n</div>\n<br>\nNow we can interact with the Users API of our backend. Let’s move further!\n\n<h2>\n  <a name="creating-activities" href="#creating-activities" class="anchor">\n  </a>\n  Creating Activities\n</h2>\n\n<p>We all know that <strong>activities are the basic building blocks</strong> of the application. An <strong>activity</strong> consists of a layout file and a java class to control the same.</p>\n\n<p>We are provided with the pre-built activity called <strong>Main Activity</strong>. And also, we have added the following working activities to our application.</p>\n\n<ul>\n<li><p><em>ListProducts Activity</em></p></li>\n<li><p><em>AddProduct Activity</em></p></li>\n<li><p><em>UpdateProduct Activity</em></p></li>\n</ul>\n\n<p>For this tutorial, we need three more activities to sign up a user, sign in a user, and show the dashboard to the users respectively. Go ahead and <strong>create</strong> the following <strong>activities</strong> by following the steps: <strong>Right-click on the MainActivity residing package -&gt; New -&gt; Activity -&gt; Empty Activity</strong></p>\n\n<blockquote>\n<p>SignupActivity<br>\n SigninActivity<br>\n DashboardActivity</p>\n</blockquote>\n\n<h2>\n  <a name="the-main-page" href="#the-main-page" class="anchor">\n  </a>\n  The Main Page\n</h2>\n\n<p>The previous main page consisted mainly of buttons that navigate to add or update products and list products. But the <strong>functionalities of adding and updating products should be available only after the user is signing in</strong>. So, we are removing it from the main activity’s layout file.</p>\n\n<p>Instead of that, we are adding two buttons that navigate to the user signup and user sign-in activity. The respective <strong>layout file</strong> is as below-<br>\n</p>\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/giridhar30/2ec146645ead707bac780b2ca4a3e610.js"></script>\n</div>\n<br>\nNow, we need to make those newly created buttons to navigate to respective activities. For that, add <strong>on click listeners</strong> to the buttons in the <strong>MainActivity.java</strong>as below-<br>\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/giridhar30/7a331e2dd5ca7cfa9fead5c2c04a62de.js"></script>\n</div>\n<br>\nNow, let’s concentrate on signing up and signing in users through our application.\n\n<p><a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--G2QlO6LI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2ArkEkqec7TK_K2XyaHgs0_A.jpeg" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--G2QlO6LI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2ArkEkqec7TK_K2XyaHgs0_A.jpeg" alt="" loading="lazy"></a></p>\n\n<p><a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--KrcQBFP7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AnvwHI_xI9KiUiDcvC2ukQA.jpeg" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--KrcQBFP7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AnvwHI_xI9KiUiDcvC2ukQA.jpeg" alt="" loading="lazy"></a></p>\n\n<h2>\n  <a name="signing-up-users" href="#signing-up-users" class="anchor">\n  </a>\n  Signing Up Users\n</h2>\n\n<p>We need mainly four edit texts — one for getting the <em>first name</em>, one for getting the <strong>last name</strong>, one for getting the <em>email id</em> and the last one for getting the <strong>password</strong>.</p>\n\n<p>And finally, we need a button to submit these data. The <strong>layout</strong> for the signup activity is modified as follows-<br>\n</p>\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/giridhar30/a3bf1b92f15ccfed3f8c13afc306d581.js"></script>\n</div>\n<br>\nThe input <strong>data has to be trimmed, validated and verified</strong> before we pass it to the backend. All these are done in the <em>SignupActivity.java.</em>\n\n<p>An <strong>On Click Listener</strong> is added to the button that submit the data. Once the data is submitted, it is validated. After validation, a user object is created with the data and the object is passed through the API to <strong>Signup.</strong></p>\n\n<p>Once the signup is completed successfully, the application navigates to the signin activity. The controlling file of the signup activity as below-</p>\n\n<p><a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--vHY4P_KB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AVAiilXaeIVt_RUM4Mnk3og.jpeg" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--vHY4P_KB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AVAiilXaeIVt_RUM4Mnk3og.jpeg" alt="" loading="lazy"></a><br>\n</p>\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/giridhar30/d8dfd25f8995b79fd89054ef8266da8b.js"></script>\n</div>\n<br>\nWe have the sign up part all ready. Let’s move to the sign in part of our application!\n\n<h2>\n  <a name="signing-in-users" href="#signing-in-users" class="anchor">\n  </a>\n  Signing In Users\n</h2>\n\n<p>For signing in users, we need just the user’s email to identify them and their password to verify them. To get them, we need two edit text views.</p>\n\n<p>And also, a button is needed to submit the data. Below given is the <strong>layout file</strong> for <strong>sign-in</strong> activity.<br>\n</p>\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/giridhar30/ef20ec8b9d658f96647d34b78578da75.js"></script>\n</div>\n<br>\nThe data from this layout is <strong>fetched, processed and verified with the backend **API by the **SigninActivity.java</strong>. It also should contain the on click listener for the button to submit the data.\n\n<p>Through the <strong>on click listener</strong> added, we receive the data from the fields and process it to create a user object. The object is then passed to the <strong>REST API</strong>, which verifies it and sends us a response to authenticate the user.</p>\n\n<p>After <strong>successful authentication</strong> of the user, they are directed to the <strong>dashboard activity</strong> of the application.</p>\n\n<p><a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--PIvTW_pv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AXM5IDnpxGXC-31sbu0tTag.jpeg" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--PIvTW_pv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AXM5IDnpxGXC-31sbu0tTag.jpeg" alt="" loading="lazy"></a><br>\n</p>\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/giridhar30/68bd587280b24802b6ca36a735fc3094.js"></script>\n</div>\n<br>\nThe only remaining task before us is to make the dashboard activity. Without any delay, let’s do that!\n\n<h2>\n  <a name="constructing-the-dashboard" href="#constructing-the-dashboard" class="anchor">\n  </a>\n  Constructing the Dashboard\n</h2>\n\n<p>The <strong>dashboard activity</strong> seems similar to that of our main activity. It can also be called the main activity for <strong>authenticated users</strong>.</p>\n\n<p>Authenticated users must be able to <strong>edit the products or add new products</strong>. For that sake, add the buttons for adding and updating the products. Also, add a button for viewing the products.</p>\n\n<p>The <strong>layout file</strong> of the dashboard activity should be constructed as follows-<br>\n</p>\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/giridhar30/6fda6c6feb7814ebc9af6639ec9069c4.js"></script>\n</div>\n<br>\nLet’s make these buttons in the dashboard activity functional! Go to the file <em>DashboardActivity.java *that controls the functioning of the activity. Add **on click listeners</em>* to the buttons that we have added previously.\n\n<p>Set up the navigation correctly so that the user is navigated to the respective activities from the buttons.</p>\n\n<p>The corresponding <strong>DashboardActivity.java</strong> file is as follows-</p>\n\n<p><a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--PIvTW_pv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AXM5IDnpxGXC-31sbu0tTag.jpeg" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--PIvTW_pv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AXM5IDnpxGXC-31sbu0tTag.jpeg" alt="" loading="lazy"></a><br>\n</p>\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/giridhar30/3edeedd85c0d61f09b19acd04b5814ba.js"></script>\n</div>\n<br>\nHurray! we have completed the coding section! Let’s run the application now!\n\n<h2>\n  <a name="running-the-application" href="#running-the-application" class="anchor">\n  </a>\n  Running the Application\n</h2>\n\n<p>Now, it’s time for running the application, after adding the required functionalities. Select the required <strong>Android Virtual Device</strong> from the toolbar and click on the <strong>run</strong> button on the same(<strong>Green triangle icon</strong>)</p>\n\n<p>After a certain amount of time, your android virtual device will get the application installed and opened. You can completely use it now!</p>\n\n<p>Some of its screenshots are as below —</p>\n\n<p><a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--2PTWKWqz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AEu77Q-nOONmW_c1bE6LzLg.jpeg" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--2PTWKWqz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AEu77Q-nOONmW_c1bE6LzLg.jpeg" alt="" loading="lazy"></a></p>\n\n<p><a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--mVMdNymU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AEq5ExvhkmG3AMX3PUEcFBw.jpeg" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--mVMdNymU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AEq5ExvhkmG3AMX3PUEcFBw.jpeg" alt="" loading="lazy"></a></p>\n\n<p><a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--fHWmnrl9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AJNEXsh3stMKBJ73inRFwiQ.jpeg" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--fHWmnrl9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AJNEXsh3stMKBJ73inRFwiQ.jpeg" alt="" loading="lazy"></a></p>\n\n<p><a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--uASlzjFL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2A6BeB1bE4LluGyIBxRv52AA.jpeg" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--uASlzjFL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2A6BeB1bE4LluGyIBxRv52AA.jpeg" alt="" loading="lazy"></a></p>\n\n<h2>\n  <a name="resources" href="#resources" class="anchor">\n  </a>\n  Resources\n</h2>\n\n<ol>\n<li><p><a href="https://bitbucket.org/ecommerce-webtutsplus/ecommerce/src/master/">Bitbucket link</a> for Spring Backend Project Repository</p></li>\n<li><p><a href="https://bitbucket.org/ecommerce-webtutsplus/android-ui/src/c3b5df055d886b2aba3a6af9928b532f4808dd8a/">Bitbucket link</a> for Android Application Project Repository</p></li>\n<li><p><a href="http://104.236.26.66:8080/api/swagger-ui.html">Spring Backend</a> Swagger UI hosted on cloud</p></li>\n<li><p><a href="http://104.236.26.66:8080/api/">REST API</a> of our Spring Backend</p></li>\n<li><p><a href="https://medium.com/technology-hits/lets-develop-an-ecommerce-application-from-scratch-using-java-and-spring-6dfac6ce5a9f">Tutorial</a> for the creating Spring Backend API</p></li>\n<li><p><a href="https://medium.com/technology-hits/lets-add-products-in-android-for-e-commerce-app-b8468e055001">Tutorial</a> for creating the products application</p></li>\n<li><p><a href="https://developer.android.com/studio/install">Steps</a> to install and set up Android Studio</p></li>\n</ol>\n\n<p>Yahoo! That’s it! Hope you have learned many things from this tutorial. Stay tuned for such an awesome series of tutorials!</p>\n\n<p><strong><em>Happy Learning!</em></strong></p>\n\n	0	t	2021-02-23 11:20:12.413066	f	0	0	8	t	0	\N	\N	t	let-s-build-signup-signin-and-role-based-access-in-our-e-commerce-app-343d	\N	25	Let’s Build Signup, SignIn, and Role-Based Access in Our E-Commerce App	2021-02-23 11:41:00.262561	1	0	\N	\N	\N	0	\N	\N	\N
63	f	f	f	\N	Lets create authentication api i.e signup and login with java and spring\n\n![learn spring boot](https://cdn-images-1.medium.com/max/2000/1*o5FmjKTPdJTbhGE2MIjo6w.jpeg)\n\n## **Introduction**\n\nThese days it’s easier than ever to make a proper application that can do what you need it to do. There are thousands of application development frameworks out there, in whatever programming language you are currently using. Spring is one of those frameworks that you can use to develop your dream application, website or server.\n\n[Spring ](https://medium.com/javarevisited/10-best-online-courses-to-learn-spring-framework-in-2020-f7f73599c2fd)is a popular application development framework, developed for the enterprise edition of the Java programming language.\n\nAccording to the [Spring website](https://spring.io/why-spring): “Spring makes programming Java quicker, easier, and safer for everybody. Spring’s focus on speed, simplicity, and productivity has made it the world’s most popular Java framework.”\n\n[MySQL ](https://medium.com/javarevisited/top-5-courses-to-learn-mysql-in-2020-4ffada70656f)is an open-source relational database management system. It is the database that we will be using to store our registered users. Swagger is an open-source project used to describe and document our API.\n\nThe side effect of such a big and popular framework is that it can sometimes be daunting to approach it and start learning how it works. Usually, it helps if you have some idea of what you want to do with the framework but following a step-for-step guide is just as useful.\n\nSo, today we are gonna **build a very basic User Authentication API**, which will allow the user to register new users and also log in. This will by no means be a project from which you can build the back-end of your new business or personal project, but it will give you a foot in the door of the Spring framework.\n\n## Requirements\n\nTo start off you will need a few things installed on your computer:\n\n* You will need to have a Java JDK installed on your system. You can find the instructions for installing the JDK [here](https://docs.oracle.com/javase/8/docs/technotes/guides/install/install_overview.html).\n\n* You will need an Integrated Development Environment installed. Personally, I would recommend [IntelliJ IDEA Community Edition](https://www.jetbrains.com/idea/download).\n\n* You will need a terminal and the Curl CLI. If you are on MacOS or [Linux](https://medium.com/javarevisited/top-10-courses-to-learn-linux-command-line-in-2020-best-and-free-f3ee4a78d0c0?source=collection_home---4------0-----------------------), then you should be covered. If you are on Windows then you can either try installing [Curl](https://curl.se/windows/) or you can use the [Windows Subsystem for Linux](https://docs.microsoft.com/en-us/windows/wsl/install-win10), this will just allow you to use the Linux terminal on windows.\n\n* Lastly, we need to install [MySQL](https://javarevisited.blogspot.com/2018/05/top-5-sql-and-database-courses-to-learn-online.html#axzz6iNNhKZui). You can follow the [steps](https://dev.mysql.com/doc/mysql-installation-excerpt/5.7/en/) that they gave on their website.\n\n## Setup\n\nOnce you have your development environment up and running you can head over to the [Spring Initializr](https://start.spring.io/) page. This site is used to create the basic startup package for your application so that you have to do less to achieve more. If you wanna follow along precisely then you should setup your project as follows:\n\n![](https://cdn-images-1.medium.com/max/2000/0*YUSm1Y5Dazab05fF)\n\nThe way I have my project set up is as follows:\n\n* Project: [Maven Project](https://medium.com/javarevisited/6-best-maven-courses-for-beginners-in-2020-23ea3cba89).\n\n* Language: Java.\n\n* Spring Boot: 2.4.0\n\n* Group: (Left empty).\n\n* Artifact: tutorial.\n\n* Name: tutorial.\n\n* Description: Basic user authentication application made using Spring and Spring Boot.\n\n* Package name: .tutorial\n\n* Packaging: Jar\n\n* Java: 8\n\n* Dependencies: Spring Web, MySQL Driver, Spring Data JPA\n\nThe dependencies aren’t as important because I will give you a list of the dependencies that we will use, as to ensure that we are both on the same page with the project. Once you have everything selected you can click on “Generate”. This will create a zip file that you should download and unzip into your development folder. Import the project into your IDE of choice. If you are using [IntelliJ ](https://medium.com/javarevisited/7-best-courses-to-learn-intellij-idea-for-beginners-and-experienced-java-programmers-2e9aa9bb0c05)the steps for importing the project is as follows:\n\n* Open IntelliJ.\n\n* Click on “Open or Import”.\n\n* Navigate to the file that you just unzipped.\n\n* Click on it once, as to highlight it, then click on “Okay”.\n\nThe project will be imported into your IDE and it should start off by downloading the dependencies and indexing your files so that it will know how to setup your project. Feel free to explore around, look in all the folders and open up a few files, just be sure to not accidentally change any files, as that might lead to your project not being able to compile.\n\n![](https://cdn-images-1.medium.com/max/2000/0*xntBYCtuGJm64Kfg)\n\nOpen up the file called “TutorialApplication”. This is your main file. When you run the program it will start here before running the other files. Take a moment to just look at the file and try to see if you can understand what is going on there.\n\nDon’t forget to also realize that you have technically created your first [Spring application](https://www.java67.com/2018/05/difference-between-springbootapplication-vs-EnableAutoConfiguration-annotations-Spring-Boot.html). Before we can run the program we have to edit some files first. So go into “src/main/resources”, and double click on “application.properties”. This is where your application properties are kept, as the name indicates. Type this into the file:\n\n    spring.datasource.url = jdbc:mysql://localhost:3306/users\n    spring.datasource.username = USERNAME\n    spring.datasource.password = PASSWORD\n    spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5InnoDBDialect\n    spring.jpa.hibernate.ddl-auto = update\n\n    springdoc.api-docs.path=/api-docs\n\nSo what this block of code sets the path to the database as “jbdc:mysql://localhost:3306/users” (the database is hosted on the computer at port 3306, and we are specifically interested in the “users” database). We set the username, you will have to set the username you setup, usually it is “root”.\n\nNext we set the password for our database, you will put your password here. In the next two lines we just say how the [Spring framework](https://medium.com/javarevisited/top-10-free-courses-to-learn-spring-framework-for-java-developers-639db9348d25?source=---------6------------------) should interact with the database and that we wanna be able to update the database when we work with it. The last line is a lot less important, it just points to the new path of our API documentation.\n\nSee that wasn’t so bad, although it wasn’t very interesting either. You can now close that file, we won’t be touching on it again in this tutorial. Next, open the “pom.xml” file in your main folder. This is another file that handles your project setup. It is also where we state what dependencies we are gonna use. I am not gonna explain what each dependency does, since we’ll be here all day if we did that.\n\nFind the “<dependencies></dependencies> bracket, it should be between line 21 and 41. Once you found it you can replace it with this block of code:\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-jpa</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-devtools</artifactId>\n        <scope>runtime</scope>\n        <optional>true</optional>\n        </dependency>\n        <dependency>\n        <groupId>mysql</groupId>\n        <artifactId>mysql-connector-java</artifactId>\n        <scope>runtime</scope>\n        </dependency>\n        <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-test</artifactId>\n        <scope>test</scope>\n        </dependency>\n        <dependency>\n        <groupId>javax.validation</groupId>\n        <artifactId>validation-api</artifactId>\n        <version>2.0.1.Final</version>\n        </dependency>\n        <dependency>\n        <groupId>org.springdoc</groupId>\n        <artifactId>springdoc-openapi-ui</artifactId>\n        <version>1.2.32</version>\n        </dependency>\n    </dependencies>\n\nOnce you saved your project there will popup an “m” with a reload icon on it. Click on it. It will download the dependencies and ensure that everything is valid. The last thing we need to do is create the “users” database. Open up your terminal and type in this command:\n\n    mysql -u root -p\n\nIt will ask you for your password, enter the password. You should now see something like this:\n\n![](https://cdn-images-1.medium.com/max/2000/0*dSSLTcanFibbLV_b)\n\nNext type this command to show all your active databases:\n\n    SHOW DATABASES;\n\nRemember to add the semi-colon on the end otherwise, it will just go on to the next line, I have made those mistakes so many times now. You should now see a table with all your databases. Next lets create the users database. Type this command:\n\n    CREATE DATABASE users;\n\nThis will create the new users database. That should be all we have to do to setup the [database](https://medium.com/hackernoon/top-5-sql-and-database-courses-to-learn-online-48424533ac61). You can now type\n\n    exit\n\nto exit out of the MySQL terminal. Go back to your IDE and open up “TutorialApplication”, its under “src/main/java/tutorial”. Right click in the file and click on the green triangle, with “Run TutorialApplic…main()” next to it. The bottom terminal will open up and you will see a lot of text being printed out.\n\nYou did it! You created the foundation on which you can build a better application. Take this time to appreciate the work you have put in to get the foundation done. Next we need to create the the rest of the application, so lets get cracking.\n\n![](https://cdn-images-1.medium.com/max/2000/0*eFPdW11U9pzqhR0H)\n\n## Setting up the files\n\nIn the project tab on the left, right click on the “tutorial” package and then click on “new” and then “package”. Name this new package “user”. Right click on the newly created package, “user”, and then click “new”, and “Java Class”. The first class will be called “User”:\n\n![](https://cdn-images-1.medium.com/max/2000/0*-LMeT33ufghz3llZ)\n\nYou should now have a new file, Java class, under your user package, called User, with content similar to this:\n\n    package tutorial.user;\n\n    public class User {\n        \n    }\n\nWe will also need another Java class, called “UserController”, so go through those same steps that you went trough before to create the Java class. Next we will need to create an Interface, called “UserRepository”. The steps are similar to creating the class but instead of click on Class you will click on Interface:\n\n![](https://cdn-images-1.medium.com/max/2000/0*3nqRH4LQ3yajX5vj)\n\nThe final piece of our puzzle is an [Enum](https://www.java67.com/2013/07/15-java-enum-interview-questions-amswers-for-experienced-programmers.html), called “Status”. So as before create the Enum under the “user” package. We will start by editing the “User” class. I will put the code first and then go through it afterwards, that way you can copy and paste it in your IDE and make notes via comments.\n\n## Adding code to the project\n\ntutorial/src/main/java/tutorial/user/User.java:\n\n    import javax.persistence.Entity;\n    import javax.persistence.GeneratedValue;\n    import javax.persistence.Id;\n    import javax.persistence.Table;\n    import javax.validation.constraints.NotBlank;\n    import java.util.Objects;\n\n    @Entity\n    @Table(name = "users")\n    public class User {\n        private @Id @GeneratedValue long id;\n        private @NotBlank String username;\n        private @NotBlank String password;\n        private @NotBlank boolean loggedIn;\n\n        public User() {\n        }\n\n        public User(@NotBlank String username, \n                    @NotBlank String password) {\n            this.username = username;\n            this.password = password;\n            this.loggedIn = false;\n        }\n\n        public long getId() {\n            return id;\n        }\n\n        public String getUsername() {\n            return username;\n        }\n\n        public void setUsername(String username) {\n            this.username = username;\n        }\n\n        public String getPassword() {\n            return password;\n        }\n\n        public void setPassword(String password) {\n            this.password = password;\n        }\n\n        public boolean isLoggedIn() {\n            return loggedIn;\n        }\n\n        public void setLoggedIn(boolean loggedIn) {\n            this.loggedIn = loggedIn;\n        }\n\n        @Override\n        public boolean equals(Object o) {\n            if (this == o) return true;\n            if (!(o instanceof User)) return false;\n            User user = (User) o;\n            return Objects.equals(username, user.username) &&\n                    Objects.equals(password, user.password);\n        }\n\n        @Override\n        public int hashCode() {\n            return Objects.hash(id, username, password, \n                                loggedIn);\n        }\n\n        @Override\n        public String toString() {\n            return "User{" +\n                    "id=" + id +\n                    ", username='" + username + '\\'' +\n                    ", password='" + password + '\\'' +\n                    ", loggedIn=" + loggedIn +\n                    '}';\n        }\n    }\n\nSo going from the top:\n\n* @Entity: This annotation allows our class to be serialized and deserialized into and from [JSON](https://javarevisited.blogspot.com/2017/02/how-to-consume-json-from-restful-web-services-Spring-RESTTemplate-Example.html). It also allows us to create a table in the database we created earlier.\n\n* @Table(name = “users”): This annotation tells the program to call the table “users”.\n\n* The variables: Each variable is representative to a field in our database. So in our database table will contain records. Each record will have a field of id (long), a field of username (String), a field of password (String), and a field of loggedIn (boolean).\n\n* @Id: This sets the id variable as the id field in the database. Databases records work with id’s.\n\n* @GeneratedValue: This tells the program to generate the id value when a new record is added, that way we won’t have to worry about accidentally overriding records in our database.\n\n* @NotBlank: This ensures that we won’t be able to add a record to the database that doesn’t have a name, password or value for loggedIn.\n\n* User(@NotBlank String username, @NotBlank String password): This is a constructor. Its a function that will be ran when this class object is created. It takes a username and password, and then sets the username and the password to the ones that were given, it also sets the value for loggedIn as false so that the user isn’t automatically logged in when their profile has been added.\n\n* Getters and Setters: These are used to set and return the various variables in our class. The reason for these have more to do with Java and the prefer method for data handling and less to do with the Spring framework.\n\n* equals(Object o): This will be used later when we want to compare an object passed to the program with an object from our database.\n\n* hashCode(): This function is used to generate a hash value of our object.\n\n* toString(): This function, has the name might suggest, is used to return some information about our class object in the form of a String. This is especially useful during debugging. I used it a lot when I initially created this program as I had issue with comparing objects to one another.\n\nThe next file we will work on is the UserRepository file.\n\ntutorial/src/main/java/tutorial/user/UserRepository.java:\n\n    import org.springframework.data.jpa.repository.JpaRepository;\n    import org.springframework.stereotype.Repository;\n\n    @Repository\n    public interface UserRepository extends JpaRepository<User, Long> {\n    }\n\nNow I will admit this file looks a bit empty, especially in comparison to the User.java file, but don’t let the simplicity fool you, it is a very powerful file. The framework does a lot of work under the hood so you don’t necessarily see it, but this file will allow us to interface with our database.\n\n* [@Repository](https://javarevisited.blogspot.com/2017/11/difference-between-component-service.html): This tells Spring that this is the interface to use for our database management functions.\n\n* JpaRepository<User, Long>: This links the interface to our database table. We tell it to look at our User table, and we tell it that the value of our id field is Long.\n\nNext up is our Status enum:\n\ntutorial/src/main/java/tutorial/user/Status.java:\n\n    public enum Status {\n        SUCCESS,\n        USER_ALREADY_EXISTS,\n        FAILURE\n    }\n\nThere isn’t really anything interesting about this enum, it will be used as a way to give feedback to the user as to whether their current action was successful or whether it failed.\n\nLastly is the UserController class:\n\ntutorial/src/main/java/tutorial/user/UserController.java:\n\n    import org.springframework.beans.factory.annotation.Autowired;\n    import org.springframework.web.bind.annotation.*;\n\n    import javax.validation.Valid;\n    import java.util.List;\n\n    @RestController\n    public class UserController {\n        @Autowired\n        UserRepository userRepository;\n\n        @PostMapping("/users/register")\n        public Status registerUser(@Valid @RequestBody User newUser) {\n            List<User> users = userRepository.findAll();\n\n            System.out.println("New user: " + newUser.toString());\n\n            for (User user : users) {\n                System.out.println("Registered user: " + newUser.toString());\n\n                if (user.equals(newUser)) {\n                    System.out.println("User Already exists!");\n                    return Status.USER_ALREADY_EXISTS;\n                }\n            }\n\n            userRepository.save(newUser);\n            return Status.SUCCESS;\n        }\n\n        @PostMapping("/users/login")\n        public Status loginUser(@Valid @RequestBody User user) {\n            List<User> users = userRepository.findAll();\n\n            for (User other : users) {\n                if (other.equals(user)) {\n                    user.setLoggedIn(true);\n                    userRepository.save(user);\n                    return Status.SUCCESS;\n                }\n            }\n\n            return Status.FAILURE;\n        }\n\n        @PostMapping("/users/logout")\n        public Status logUserOut(@Valid @RequestBody User user) {\n            List<User> users = userRepository.findAll();\n\n            for (User other : users) {\n                if (other.equals(user)) {\n                    user.setLoggedIn(false);\n                    userRepository.save(user);\n                    return Status.SUCCESS;\n                }\n            }\n\n            return Status.FAILURE;\n        }\n\n        @DeleteMapping("/users/all")\n        public Status deleteUsers() {\n            userRepository.deleteAll();\n            return Status.SUCCESS;\n        }\n    }\n\nThis is the business class of your program. Here is where we handle the requests sent to our program.\n\n* [@RestController](https://javarevisited.blogspot.com/2017/08/difference-between-restcontroller-and-controller-annotations-spring-mvc-rest.html#ixzz6OYNB9oii): This tells Spring that this will be used to control the functionality of our API, and any requests sent to our program.\n\n* [@Autowired](https://www.java67.com/2018/11/top-10-spring-framework-annotations-for-java-developers.html): This just handles the code injection for our UserRepository so that we won’t have to setup a constructor.\n\n* @PostMapping(“/users/register”): This tells Spring that whenever our program receives a Post Request to /users/register that the registerUser function should be called and then it pasts the received data to the registerUser function.\n\n* registerUser(@Valid @RequestBody User newUser): This function requires a valid json object similar to our User class, that way we will be sure that the object we receive is useable in our program. The function starts by creating a list of users in our database, called users. Note the part of “userRepository.findAll()”, this queries our database and returns all the users we have currently saved. The function then loops over all the users in our database and compares it to the user we just got, it does this to ensure that the user isn’t already part of our database. If it find that the user is already in our database, it returns Status.USER_ALREADY_EXITS. Otherwise it will add the new user into our database and return a status of SUCCESS.\n\n* loginUser(@Valid @RequestBody User user): Same as before, this function receives a user object and then compares it against the users in our database. If it find that this user is in our database it will set it’s loggedIn variable to true, to indicate that our user has just logged in. If the user was successfully logged in it returns a status of SUCCESS. If it fails it returns a status of FAILURE.\n\n* logUserOut(@Valid @RequestBody User user): This function is similar to loginUser, except this time we set the user’s loggedIn variable to false to indicate that the user isn’t currently logged in. If the logout was successful we return a status of SUCCESS, otherwise we return a status of FAILURE.\n\n* @DeleteMapping(“/users/all”): This tells Spring to call the following function whenever a Delete Request has been issued to /users/all.\n\n* deleteAll(): This function simply deletes all the users in our database. It is a useful function to have during testing.\n\nAnd that is it for our program, you should now be able to run the program and interact with it through your terminal.\n\n## Testing our program\n\nLet’s first test whether or not we can register a new user into our database, open your terminal and paste this bit of code into your terminal:\n\n    curl -H "Content-Type: application/json" -X POST -d '{\n        "username": "test",\n        "password": "test"\n    }'  [http://localhost:8080/users/register](http://localhost:8080/users/register)\n\nThis commands sends a post request to our program with a json package. The json package contains a username and a password, you might’ve noticed that in our User class constructor we specifically requested a username and password. We specifically send this Post Request to [http://localhost:8080/users/register.](http://localhost:8080/users/register.) Our program is running on localhost on port 8080, and we have a PostMapping listening for when data is sent to “/users/register”. If we run this in our terminal (whilst our application is running in the background) we’ll see something like this:\n\n![](https://cdn-images-1.medium.com/max/2000/0*_FvzEeYjAxpEzKA3)\n\nNotice that we received back a String with the content of “SUCCESS”, meaning our application received the new user and added them to our database. What happens when we run that same command again?\n\n![](https://cdn-images-1.medium.com/max/2000/0*bLcb4E2cSnv65W_l)\n\nThis time we received a message of “USER_ALREADY_EXISTS”, so our program made sure not to add multiples of the same user to our database. Next lets see if we can log our new user in, you can run this command in your terminal:\n\n    curl -H "Content-Type: application/json" -X POST -d '{\n        "username": "test",\n        "password": "test"\n    }'  [http://localhost:8080/users/login](http://localhost:8080/users/login)\n\nSame as before it sends a json object with our user credentials to “/users/login”, the part of our program that specifically handles user login. This is what it looks like when we run the command:\n\n![](https://cdn-images-1.medium.com/max/2000/0*RXCq0gZbeerzc5rj)\n\nWe get back a message of “SUCCESS” so now our user is logged in, but what would’ve happened if we sent the wrong user credentials? Lets test that by running this command:\n\n    curl -H "Content-Type: application/json" -X POST -d '{\n        "username": "hello",\n        "password": "world"\n    }'  [http://localhost:8080/users/login](http://localhost:8080/users/login)\n\nWe never registered the user so that user shouldn’t be in our database and thus shouldn’t be able to log into our application. This is what it looks like:\n\n![](https://cdn-images-1.medium.com/max/2000/0*r_BLrt-RWOD2ltJK)\n\nAs seen here, our program sends back a message of “FAILURE” indicating that it was able to stop an unregistered user of logging in. That’s it, that’s our entire program. We were able to create a user registration and authentication system using Java and Spring. If you want to clean up after yourself you can clear the database with this command:\n\n    curl -X DELETE [http://localhost:8080/users/all](http://localhost:8080/users/all)\n\n## Cleanup\n\nAnd if you also wanna delete the users database from your system, then you can do this. Open your terminal and type\n\n    mysql -u root -p\n\nand then enter your password. You should now be back in your MySQL terminal and now if you want to delete the “users” database you can run this command:\n\n    DROP DATABASE users;\n\nOne last thing before we end this tutorial, you can look at your API setup if you open your browser tab and then go to: [http://localhost:8080/api-docs.](http://localhost:8080/api-docs.) This will open up some JSON about your API.\n\nThe complete code for this project can be found at [bitbucket](https://bitbucket.org/java-spring-1994/api-tutorial).\n\nNext, we will develop an android app, which will use this backend code and implement login.\n\n{% medium https://medium.com/technology-hits/android-app-for-spring-backend-68f39dca8b72 %}\n\n## ***Want to learn how to code your own e-commerce platform with mobile apps and deploy it to AWS? follow our publication, we are launching series of tutorials soon.***\n\n## Have a lovely day!\n	{"boosted_additional_tags": "", "boosted_dev_digest_email": false, "boosted_additional_articles": false}	\N	ecommerce, backend	--- !ruby/struct:Articles::CachedEntity\nname: nilmadhab mondal\nusername: nilmadhab\nslug: nilmadhab\nprofile_image_90: "/uploads/user/profile_image/1/d9b0e3b7-ad59-45d5-b516-4e8ffd0a6958.jpeg"\nprofile_image_url: "/uploads/user/profile_image/1/d9b0e3b7-ad59-45d5-b516-4e8ffd0a6958.jpeg"\n	nilmadhab mondal	nilmadhab	\N	{}	\N	0	\N	0	2021-02-23 11:43:06.394807	\N	Lets create authentication api i.e signup and login with java and spring             Introduction   T...	2021-02-23 11:45:43.736839	t	5	5	\N	f	1614080586	\N	354595	en	\N	2021-02-23 11:43:06.386198	\N	/i/w6imhmraq4fxlp0a6f86.png	#dddddd	29	0	0	0	\N	\N	0	79e407a97daf38558fea734b712d72aabb4aa68e622f78fc861f3028897f7c5c8007540ba56937623c331ef86a6f51f10148494f0b4f7ebb1564951f	/nilmadhab/login-and-signup-with-java-and-spring-boot-cki	0	0	0	<p>Lets create authentication api i.e signup and login with java and spring</p>\n\n<p><a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--qwkYv06w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2Ao5FmjKTPdJTbhGE2MIjo6w.jpeg" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--qwkYv06w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2Ao5FmjKTPdJTbhGE2MIjo6w.jpeg" alt="learn spring boot" loading="lazy"></a></p>\n\n<h2>\n  <a name="introduction" href="#introduction" class="anchor">\n  </a>\n  <strong>Introduction</strong>\n</h2>\n\n<p>These days it’s easier than ever to make a proper application that can do what you need it to do. There are thousands of application development frameworks out there, in whatever programming language you are currently using. Spring is one of those frameworks that you can use to develop your dream application, website or server.</p>\n\n<p><a href="https://medium.com/javarevisited/10-best-online-courses-to-learn-spring-framework-in-2020-f7f73599c2fd">Spring </a>is a popular application development framework, developed for the enterprise edition of the Java programming language.</p>\n\n<p>According to the <a href="https://spring.io/why-spring">Spring website</a>: “Spring makes programming Java quicker, easier, and safer for everybody. Spring’s focus on speed, simplicity, and productivity has made it the world’s most popular Java framework.”</p>\n\n<p><a href="https://medium.com/javarevisited/top-5-courses-to-learn-mysql-in-2020-4ffada70656f">MySQL </a>is an open-source relational database management system. It is the database that we will be using to store our registered users. Swagger is an open-source project used to describe and document our API.</p>\n\n<p>The side effect of such a big and popular framework is that it can sometimes be daunting to approach it and start learning how it works. Usually, it helps if you have some idea of what you want to do with the framework but following a step-for-step guide is just as useful.</p>\n\n<p>So, today we are gonna <strong>build a very basic User Authentication API</strong>, which will allow the user to register new users and also log in. This will by no means be a project from which you can build the back-end of your new business or personal project, but it will give you a foot in the door of the Spring framework.</p>\n\n<h2>\n  <a name="requirements" href="#requirements" class="anchor">\n  </a>\n  Requirements\n</h2>\n\n<p>To start off you will need a few things installed on your computer:</p>\n\n<ul>\n<li><p>You will need to have a Java JDK installed on your system. You can find the instructions for installing the JDK <a href="https://docs.oracle.com/javase/8/docs/technotes/guides/install/install_overview.html">here</a>.</p></li>\n<li><p>You will need an Integrated Development Environment installed. Personally, I would recommend <a href="https://www.jetbrains.com/idea/download">IntelliJ IDEA Community Edition</a>.</p></li>\n<li><p>You will need a terminal and the Curl CLI. If you are on MacOS or <a href="https://medium.com/javarevisited/top-10-courses-to-learn-linux-command-line-in-2020-best-and-free-f3ee4a78d0c0?source=collection_home---4------0-----------------------">Linux</a>, then you should be covered. If you are on Windows then you can either try installing <a href="https://curl.se/windows/">Curl</a> or you can use the <a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10">Windows Subsystem for Linux</a>, this will just allow you to use the Linux terminal on windows.</p></li>\n<li><p>Lastly, we need to install <a href="https://javarevisited.blogspot.com/2018/05/top-5-sql-and-database-courses-to-learn-online.html#axzz6iNNhKZui">MySQL</a>. You can follow the <a href="https://dev.mysql.com/doc/mysql-installation-excerpt/5.7/en/">steps</a> that they gave on their website.</p></li>\n</ul>\n\n<h2>\n  <a name="setup" href="#setup" class="anchor">\n  </a>\n  Setup\n</h2>\n\n<p>Once you have your development environment up and running you can head over to the <a href="https://start.spring.io/">Spring Initializr</a> page. This site is used to create the basic startup package for your application so that you have to do less to achieve more. If you wanna follow along precisely then you should setup your project as follows:</p>\n\n<p><a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--388c1exB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/0%2AYUSm1Y5Dazab05fF" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--388c1exB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/0%2AYUSm1Y5Dazab05fF" alt="" loading="lazy"></a></p>\n\n<p>The way I have my project set up is as follows:</p>\n\n<ul>\n<li><p>Project: <a href="https://medium.com/javarevisited/6-best-maven-courses-for-beginners-in-2020-23ea3cba89">Maven Project</a>.</p></li>\n<li><p>Language: Java.</p></li>\n<li><p>Spring Boot: 2.4.0</p></li>\n<li><p>Group: (Left empty).</p></li>\n<li><p>Artifact: tutorial.</p></li>\n<li><p>Name: tutorial.</p></li>\n<li><p>Description: Basic user authentication application made using Spring and Spring Boot.</p></li>\n<li><p>Package name: .tutorial</p></li>\n<li><p>Packaging: Jar</p></li>\n<li><p>Java: 8</p></li>\n<li><p>Dependencies: Spring Web, MySQL Driver, Spring Data JPA</p></li>\n</ul>\n\n<p>The dependencies aren’t as important because I will give you a list of the dependencies that we will use, as to ensure that we are both on the same page with the project. Once you have everything selected you can click on “Generate”. This will create a zip file that you should download and unzip into your development folder. Import the project into your IDE of choice. If you are using <a href="https://medium.com/javarevisited/7-best-courses-to-learn-intellij-idea-for-beginners-and-experienced-java-programmers-2e9aa9bb0c05">IntelliJ </a>the steps for importing the project is as follows:</p>\n\n<ul>\n<li><p>Open IntelliJ.</p></li>\n<li><p>Click on “Open or Import”.</p></li>\n<li><p>Navigate to the file that you just unzipped.</p></li>\n<li><p>Click on it once, as to highlight it, then click on “Okay”.</p></li>\n</ul>\n\n<p>The project will be imported into your IDE and it should start off by downloading the dependencies and indexing your files so that it will know how to setup your project. Feel free to explore around, look in all the folders and open up a few files, just be sure to not accidentally change any files, as that might lead to your project not being able to compile.</p>\n\n<p><a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--szz0TVQd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/0%2AxntBYCtuGJm64Kfg" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--szz0TVQd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/0%2AxntBYCtuGJm64Kfg" alt="" loading="lazy"></a></p>\n\n<p>Open up the file called “TutorialApplication”. This is your main file. When you run the program it will start here before running the other files. Take a moment to just look at the file and try to see if you can understand what is going on there.</p>\n\n<p>Don’t forget to also realize that you have technically created your first <a href="https://www.java67.com/2018/05/difference-between-springbootapplication-vs-EnableAutoConfiguration-annotations-Spring-Boot.html">Spring application</a>. Before we can run the program we have to edit some files first. So go into “src/main/resources”, and double click on “application.properties”. This is where your application properties are kept, as the name indicates. Type this into the file:</p>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>spring.datasource.url = jdbc:mysql://localhost:3306/users\nspring.datasource.username = USERNAME\nspring.datasource.password = PASSWORD\nspring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5InnoDBDialect\nspring.jpa.hibernate.ddl-auto = update\n\nspringdoc.api-docs.path=/api-docs\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n<p>So what this block of code sets the path to the database as “jbdc:mysql://localhost:3306/users” (the database is hosted on the computer at port 3306, and we are specifically interested in the “users” database). We set the username, you will have to set the username you setup, usually it is “root”.</p>\n\n<p>Next we set the password for our database, you will put your password here. In the next two lines we just say how the <a href="https://medium.com/javarevisited/top-10-free-courses-to-learn-spring-framework-for-java-developers-639db9348d25?source=---------6------------------">Spring framework</a> should interact with the database and that we wanna be able to update the database when we work with it. The last line is a lot less important, it just points to the new path of our API documentation.</p>\n\n<p>See that wasn’t so bad, although it wasn’t very interesting either. You can now close that file, we won’t be touching on it again in this tutorial. Next, open the “pom.xml” file in your main folder. This is another file that handles your project setup. It is also where we state what dependencies we are gonna use. I am not gonna explain what each dependency does, since we’ll be here all day if we did that.</p>\n\n<p>Find the “ bracket, it should be between line 21 and 41. Once you found it you can replace it with this block of code:</p>\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;\n    &lt;scope&gt;runtime&lt;/scope&gt;\n    &lt;optional&gt;true&lt;/optional&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n    &lt;groupId&gt;mysql&lt;/groupId&gt;\n    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;\n    &lt;scope&gt;runtime&lt;/scope&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;\n    &lt;scope&gt;test&lt;/scope&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n    &lt;groupId&gt;javax.validation&lt;/groupId&gt;\n    &lt;artifactId&gt;validation-api&lt;/artifactId&gt;\n    &lt;version&gt;2.0.1.Final&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n    &lt;groupId&gt;org.springdoc&lt;/groupId&gt;\n    &lt;artifactId&gt;springdoc-openapi-ui&lt;/artifactId&gt;\n    &lt;version&gt;1.2.32&lt;/version&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n<p>Once you saved your project there will popup an “m” with a reload icon on it. Click on it. It will download the dependencies and ensure that everything is valid. The last thing we need to do is create the “users” database. Open up your terminal and type in this command:</p>\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>mysql -u root -p\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n<p>It will ask you for your password, enter the password. You should now see something like this:</p>\n\n<p><a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--g9pLI4bE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/0%2AdSSLTcanFibbLV_b" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--g9pLI4bE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/0%2AdSSLTcanFibbLV_b" alt="" loading="lazy"></a></p>\n\n<p>Next type this command to show all your active databases:</p>\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>SHOW DATABASES;\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n<p>Remember to add the semi-colon on the end otherwise, it will just go on to the next line, I have made those mistakes so many times now. You should now see a table with all your databases. Next lets create the users database. Type this command:</p>\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>CREATE DATABASE users;\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n<p>This will create the new users database. That should be all we have to do to setup the <a href="https://medium.com/hackernoon/top-5-sql-and-database-courses-to-learn-online-48424533ac61">database</a>. You can now type</p>\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>exit\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n<p>to exit out of the MySQL terminal. Go back to your IDE and open up “TutorialApplication”, its under “src/main/java/tutorial”. Right click in the file and click on the green triangle, with “Run TutorialApplic…main()” next to it. The bottom terminal will open up and you will see a lot of text being printed out.</p>\n\n<p>You did it! You created the foundation on which you can build a better application. Take this time to appreciate the work you have put in to get the foundation done. Next we need to create the the rest of the application, so lets get cracking.</p>\n\n<p><a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s---5sGWOPO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/0%2AeFPdW11U9pzqhR0H" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s---5sGWOPO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/0%2AeFPdW11U9pzqhR0H" alt="" loading="lazy"></a></p>\n<h2>\n  <a name="setting-up-the-files" href="#setting-up-the-files" class="anchor">\n  </a>\n  Setting up the files\n</h2>\n\n<p>In the project tab on the left, right click on the “tutorial” package and then click on “new” and then “package”. Name this new package “user”. Right click on the newly created package, “user”, and then click “new”, and “Java Class”. The first class will be called “User”:</p>\n\n<p><a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--Pe55FZgt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/0%2A-LMeT33ufghz3llZ" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--Pe55FZgt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/0%2A-LMeT33ufghz3llZ" alt="" loading="lazy"></a></p>\n\n<p>You should now have a new file, Java class, under your user package, called User, with content similar to this:</p>\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>package tutorial.user;\n\npublic class User {\n\n}\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n<p>We will also need another Java class, called “UserController”, so go through those same steps that you went trough before to create the Java class. Next we will need to create an Interface, called “UserRepository”. The steps are similar to creating the class but instead of click on Class you will click on Interface:</p>\n\n<p><a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--WFzMPy_G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/0%2A3nqRH4LQ3yajX5vj" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--WFzMPy_G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/0%2A3nqRH4LQ3yajX5vj" alt="" loading="lazy"></a></p>\n\n<p>The final piece of our puzzle is an <a href="https://www.java67.com/2013/07/15-java-enum-interview-questions-amswers-for-experienced-programmers.html">Enum</a>, called “Status”. So as before create the Enum under the “user” package. We will start by editing the “User” class. I will put the code first and then go through it afterwards, that way you can copy and paste it in your IDE and make notes via comments.</p>\n<h2>\n  <a name="adding-code-to-the-project" href="#adding-code-to-the-project" class="anchor">\n  </a>\n  Adding code to the project\n</h2>\n\n<p>tutorial/src/main/java/tutorial/user/User.java:</p>\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>import javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.Id;\nimport javax.persistence.Table;\nimport javax.validation.constraints.NotBlank;\nimport java.util.Objects;\n\n@Entity\n@Table(name = "users")\npublic class User {\n    private @Id @GeneratedValue long id;\n    private @NotBlank String username;\n    private @NotBlank String password;\n    private @NotBlank boolean loggedIn;\n\n    public User() {\n    }\n\n    public User(@NotBlank String username, \n                @NotBlank String password) {\n        this.username = username;\n        this.password = password;\n        this.loggedIn = false;\n    }\n\n    public long getId() {\n        return id;\n    }\n\n    public String getUsername() {\n        return username;\n    }\n\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    public String getPassword() {\n        return password;\n    }\n\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    public boolean isLoggedIn() {\n        return loggedIn;\n    }\n\n    public void setLoggedIn(boolean loggedIn) {\n        this.loggedIn = loggedIn;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (!(o instanceof User)) return false;\n        User user = (User) o;\n        return Objects.equals(username, user.username) &amp;&amp;\n                Objects.equals(password, user.password);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(id, username, password, \n                            loggedIn);\n    }\n\n    @Override\n    public String toString() {\n        return "User{" +\n                "id=" + id +\n                ", username='" + username + '\\'' +\n                ", password='" + password + '\\'' +\n                ", loggedIn=" + loggedIn +\n                '}';\n    }\n}\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n<p>So going from the top:</p>\n\n<ul>\n<li><p>@Entity: This annotation allows our class to be serialized and deserialized into and from <a href="https://javarevisited.blogspot.com/2017/02/how-to-consume-json-from-restful-web-services-Spring-RESTTemplate-Example.html">JSON</a>. It also allows us to create a table in the database we created earlier.</p></li>\n<li><p>@Table(name = “users”): This annotation tells the program to call the table “users”.</p></li>\n<li><p>The variables: Each variable is representative to a field in our database. So in our database table will contain records. Each record will have a field of id (long), a field of username (String), a field of password (String), and a field of loggedIn (boolean).</p></li>\n<li><p>@Id: This sets the id variable as the id field in the database. Databases records work with id’s.</p></li>\n<li><p>@GeneratedValue: This tells the program to generate the id value when a new record is added, that way we won’t have to worry about accidentally overriding records in our database.</p></li>\n<li><p>@NotBlank: This ensures that we won’t be able to add a record to the database that doesn’t have a name, password or value for loggedIn.</p></li>\n<li><p>User(@NotBlank String username, @NotBlank String password): This is a constructor. Its a function that will be ran when this class object is created. It takes a username and password, and then sets the username and the password to the ones that were given, it also sets the value for loggedIn as false so that the user isn’t automatically logged in when their profile has been added.</p></li>\n<li><p>Getters and Setters: These are used to set and return the various variables in our class. The reason for these have more to do with Java and the prefer method for data handling and less to do with the Spring framework.</p></li>\n<li><p>equals(Object o): This will be used later when we want to compare an object passed to the program with an object from our database.</p></li>\n<li><p>hashCode(): This function is used to generate a hash value of our object.</p></li>\n<li><p>toString(): This function, has the name might suggest, is used to return some information about our class object in the form of a String. This is especially useful during debugging. I used it a lot when I initially created this program as I had issue with comparing objects to one another.</p></li>\n</ul>\n\n<p>The next file we will work on is the UserRepository file.</p>\n\n<p>tutorial/src/main/java/tutorial/user/UserRepository.java:</p>\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>import org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface UserRepository extends JpaRepository&lt;User, Long&gt; {\n}\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n<p>Now I will admit this file looks a bit empty, especially in comparison to the User.java file, but don’t let the simplicity fool you, it is a very powerful file. The framework does a lot of work under the hood so you don’t necessarily see it, but this file will allow us to interface with our database.</p>\n\n<ul>\n<li><p><a href="https://javarevisited.blogspot.com/2017/11/difference-between-component-service.html">@Repository</a>: This tells Spring that this is the interface to use for our database management functions.</p></li>\n<li><p>JpaRepository: This links the interface to our database table. We tell it to look at our User table, and we tell it that the value of our id field is Long.</p></li>\n</ul>\n\n<p>Next up is our Status enum:</p>\n\n<p>tutorial/src/main/java/tutorial/user/Status.java:</p>\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>public enum Status {\n    SUCCESS,\n    USER_ALREADY_EXISTS,\n    FAILURE\n}\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n<p>There isn’t really anything interesting about this enum, it will be used as a way to give feedback to the user as to whether their current action was successful or whether it failed.</p>\n\n<p>Lastly is the UserController class:</p>\n\n<p>tutorial/src/main/java/tutorial/user/UserController.java:</p>\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>import org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.validation.Valid;\nimport java.util.List;\n\n@RestController\npublic class UserController {\n    @Autowired\n    UserRepository userRepository;\n\n    @PostMapping("/users/register")\n    public Status registerUser(@Valid @RequestBody User newUser) {\n        List&lt;User&gt; users = userRepository.findAll();\n\n        System.out.println("New user: " + newUser.toString());\n\n        for (User user : users) {\n            System.out.println("Registered user: " + newUser.toString());\n\n            if (user.equals(newUser)) {\n                System.out.println("User Already exists!");\n                return Status.USER_ALREADY_EXISTS;\n            }\n        }\n\n        userRepository.save(newUser);\n        return Status.SUCCESS;\n    }\n\n    @PostMapping("/users/login")\n    public Status loginUser(@Valid @RequestBody User user) {\n        List&lt;User&gt; users = userRepository.findAll();\n\n        for (User other : users) {\n            if (other.equals(user)) {\n                user.setLoggedIn(true);\n                userRepository.save(user);\n                return Status.SUCCESS;\n            }\n        }\n\n        return Status.FAILURE;\n    }\n\n    @PostMapping("/users/logout")\n    public Status logUserOut(@Valid @RequestBody User user) {\n        List&lt;User&gt; users = userRepository.findAll();\n\n        for (User other : users) {\n            if (other.equals(user)) {\n                user.setLoggedIn(false);\n                userRepository.save(user);\n                return Status.SUCCESS;\n            }\n        }\n\n        return Status.FAILURE;\n    }\n\n    @DeleteMapping("/users/all")\n    public Status deleteUsers() {\n        userRepository.deleteAll();\n        return Status.SUCCESS;\n    }\n}\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n<p>This is the business class of your program. Here is where we handle the requests sent to our program.</p>\n\n<ul>\n<li><p><a href="https://javarevisited.blogspot.com/2017/08/difference-between-restcontroller-and-controller-annotations-spring-mvc-rest.html#ixzz6OYNB9oii">@RestController</a>: This tells Spring that this will be used to control the functionality of our API, and any requests sent to our program.</p></li>\n<li><p><a href="https://www.java67.com/2018/11/top-10-spring-framework-annotations-for-java-developers.html">@Autowired</a>: This just handles the code injection for our UserRepository so that we won’t have to setup a constructor.</p></li>\n<li><p>@PostMapping(“/users/register”): This tells Spring that whenever our program receives a Post Request to /users/register that the registerUser function should be called and then it pasts the received data to the registerUser function.</p></li>\n<li><p>registerUser(@Valid @RequestBody User newUser): This function requires a valid json object similar to our User class, that way we will be sure that the object we receive is useable in our program. The function starts by creating a list of users in our database, called users. Note the part of “userRepository.findAll()”, this queries our database and returns all the users we have currently saved. The function then loops over all the users in our database and compares it to the user we just got, it does this to ensure that the user isn’t already part of our database. If it find that the user is already in our database, it returns Status.USER_ALREADY_EXITS. Otherwise it will add the new user into our database and return a status of SUCCESS.</p></li>\n<li><p>loginUser(@Valid @RequestBody User user): Same as before, this function receives a user object and then compares it against the users in our database. If it find that this user is in our database it will set it’s loggedIn variable to true, to indicate that our user has just logged in. If the user was successfully logged in it returns a status of SUCCESS. If it fails it returns a status of FAILURE.</p></li>\n<li><p>logUserOut(@Valid @RequestBody User user): This function is similar to loginUser, except this time we set the user’s loggedIn variable to false to indicate that the user isn’t currently logged in. If the logout was successful we return a status of SUCCESS, otherwise we return a status of FAILURE.</p></li>\n<li><p>@DeleteMapping(“/users/all”): This tells Spring to call the following function whenever a Delete Request has been issued to /users/all.</p></li>\n<li><p>deleteAll(): This function simply deletes all the users in our database. It is a useful function to have during testing.</p></li>\n</ul>\n\n<p>And that is it for our program, you should now be able to run the program and interact with it through your terminal.</p>\n<h2>\n  <a name="testing-our-program" href="#testing-our-program" class="anchor">\n  </a>\n  Testing our program\n</h2>\n\n<p>Let’s first test whether or not we can register a new user into our database, open your terminal and paste this bit of code into your terminal:</p>\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>curl -H "Content-Type: application/json" -X POST -d '{\n    "username": "test",\n    "password": "test"\n}'  [http://localhost:8080/users/register](http://localhost:8080/users/register)\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n<p>This commands sends a post request to our program with a json package. The json package contains a username and a password, you might’ve noticed that in our User class constructor we specifically requested a username and password. We specifically send this Post Request to <a href="http://localhost:8080/users/register.">http://localhost:8080/users/register.</a> Our program is running on localhost on port 8080, and we have a PostMapping listening for when data is sent to “/users/register”. If we run this in our terminal (whilst our application is running in the background) we’ll see something like this:</p>\n\n<p><a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--QrIsfmTF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/0%2A_FvzEeYjAxpEzKA3" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--QrIsfmTF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/0%2A_FvzEeYjAxpEzKA3" alt="" loading="lazy"></a></p>\n\n<p>Notice that we received back a String with the content of “SUCCESS”, meaning our application received the new user and added them to our database. What happens when we run that same command again?</p>\n\n<p><a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--C8pHFMSo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/0%2AbLcb4E2cSnv65W_l" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--C8pHFMSo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/0%2AbLcb4E2cSnv65W_l" alt="" loading="lazy"></a></p>\n\n<p>This time we received a message of “USER_ALREADY_EXISTS”, so our program made sure not to add multiples of the same user to our database. Next lets see if we can log our new user in, you can run this command in your terminal:</p>\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>curl -H "Content-Type: application/json" -X POST -d '{\n    "username": "test",\n    "password": "test"\n}'  [http://localhost:8080/users/login](http://localhost:8080/users/login)\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n<p>Same as before it sends a json object with our user credentials to “/users/login”, the part of our program that specifically handles user login. This is what it looks like when we run the command:</p>\n\n<p><a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--GjnsVPQF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/0%2ARXCq0gZbeerzc5rj" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--GjnsVPQF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/0%2ARXCq0gZbeerzc5rj" alt="" loading="lazy"></a></p>\n\n<p>We get back a message of “SUCCESS” so now our user is logged in, but what would’ve happened if we sent the wrong user credentials? Lets test that by running this command:</p>\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>curl -H "Content-Type: application/json" -X POST -d '{\n    "username": "hello",\n    "password": "world"\n}'  [http://localhost:8080/users/login](http://localhost:8080/users/login)\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n<p>We never registered the user so that user shouldn’t be in our database and thus shouldn’t be able to log into our application. This is what it looks like:</p>\n\n<p><a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--MQ4sBRV6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/0%2Ar_BLrt-RWOD2ltJK" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--MQ4sBRV6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/0%2Ar_BLrt-RWOD2ltJK" alt="" loading="lazy"></a></p>\n\n<p>As seen here, our program sends back a message of “FAILURE” indicating that it was able to stop an unregistered user of logging in. That’s it, that’s our entire program. We were able to create a user registration and authentication system using Java and Spring. If you want to clean up after yourself you can clear the database with this command:</p>\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>curl -X DELETE [http://localhost:8080/users/all](http://localhost:8080/users/all)\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n<h2>\n  <a name="cleanup" href="#cleanup" class="anchor">\n  </a>\n  Cleanup\n</h2>\n\n<p>And if you also wanna delete the users database from your system, then you can do this. Open your terminal and type</p>\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>mysql -u root -p\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n<p>and then enter your password. You should now be back in your MySQL terminal and now if you want to delete the “users” database you can run this command:</p>\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>DROP DATABASE users;\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n<p>One last thing before we end this tutorial, you can look at your API setup if you open your browser tab and then go to: <a href="http://localhost:8080/api-docs.">http://localhost:8080/api-docs.</a> This will open up some JSON about your API.</p>\n\n<p>The complete code for this project can be found at <a href="https://bitbucket.org/java-spring-1994/api-tutorial">bitbucket</a>.</p>\n\n<p>Next, we will develop an android app, which will use this backend code and implement login.</p>\n\n\n<div class="ltag__link">\n  <a href="https://medium.com/technology-hits/android-app-for-spring-backend-68f39dca8b72" class="ltag__link__link">\n    <div class="ltag__link__pic">\n      <img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--tLzMBohE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/fit/c/96/96/1%2AhNjwft_dNBxvTr6g6TOVGg.jpeg" alt="Nil Madhab" loading="lazy">\n    </div>\n  </a>\n  <a href="https://medium.com/technology-hits/android-app-for-spring-backend-68f39dca8b72" class="ltag__link__link">\n    <div class="ltag__link__content">\n      <h2>User Authentication Android Application for Java and Spring Backend | Javarevisited</h2>\n      <h3>Nil Madhab ・ <time datetime="2021-01-08T13:58:44.559Z">Jan 8, 2021</time> ・ 6 min read\n      <div class="ltag__link__servicename">\n        <img src="/assets/medium_icon.svg" alt="Medium Logo" aria-label="Medium Logo" loading="lazy">\n        Medium\n      </div>\n    </h3>\n</div>\n  </a>\n</div>\n\n\n\n<h2>\n  <a name="want-to-learn-how-to-code-your-own-ecommerce-platform-with-mobile-apps-and-deploy-it-to-aws-follow-our-publication-we-are-launching-series-of-tutorials-soon" href="#want-to-learn-how-to-code-your-own-ecommerce-platform-with-mobile-apps-and-deploy-it-to-aws-follow-our-publication-we-are-launching-series-of-tutorials-soon" class="anchor">\n  </a>\n  <strong><em>Want to learn how to code your own e-commerce platform with mobile apps and deploy it to AWS? follow our publication, we are launching series of tutorials soon.</em></strong>\n</h2>\n\n<h2>\n  <a name="have-a-lovely-day" href="#have-a-lovely-day" class="anchor">\n  </a>\n  Have a lovely day!\n</h2>\n\n	0	t	2021-02-23 11:43:06.386198	f	0	0	15	t	0	\N	\N	t	login-and-signup-with-java-and-spring-boot-cki	\N	25	Login and Signup with Java and Spring Boot	2021-02-23 11:45:46.085606	1	0	\N	\N	\N	0	\N	\N	\N
41	f	f	f	\N	**Part 1 : Understanding WebRTC**\nThis is the first tutorial in our WebRTC series. The aim of this series is to explain what WebRTC is and how we can use it in web apps.\n\nIn this part, we will understand the various concepts required to develop an app using WebRTC.\n## Tutorials in this Series\n\n 1. Understanding WebRTC (this tutorial)\n 2. [Implementing WebRTC in code] (https://dev.to/nilmadhabmondal/let-s-build-a-video-chat-app-with-javascript-and-webrtc-27l3)\n\n## Introduction\n\nIf you weren’t familiar with web video-conferencing platforms and apps before the Covid-19 pandemic, we bet you know all about them now and must have used one of them.\n\nThe ongoing COVID-19 situation has many more people working from home than ever before and companies using web conferencing as their primary means of communication between employees and clients.\n\nAnd with much of the world on lockdown with social distancing measures enforced, even spending time with family and friends is now largely restricted to online video calls. From parties to business meetings, these video conferencing platforms are now commonplace for virtually everyone.\n\nThe aim of this tutorial series is to teach how to develop such a video-conferencing web application. Also, this series will definitely help all those developers who would like to learn how to build applications such as real-time advertising, multiplayer games, live broadcasting, e-learning, to name a few, where the action takes place in real time.\n## Fundamentals\n\nBefore we begin to develop such a web app, we need to understand how an e-conferencing application is different from a simple chatting web app.\n\nIn a simple chatting web app, when two browsers need to send messages to each other, they typically need a server in between for coordination and passing the messages. But having a server in the middle results in a delay in communication between the browsers. This delay hardly affects the utility of the chatting app. Even if this delay is (say) 5 secs, we would still be able to use this chatting application.\n\nHowever, in the case of a video conferencing application, this delay is significant. It will be extremely difficult to talk to someone using such an application. Imagine yourself talking to someone who receives your voice 5 secs later. You can realize how annoying it will be.\n\nHence, for video conferencing, we require **Real-Time Communication** between the browsers. Such communication is possible if we eliminate the server from between. This is why we will have to use **WebRTC** — an open-source framework providing web browsers and mobile applications with real-time communication via simple APIs.\n## WebRTC\n\nWebRTC stands for Web Real-Time Communication. It enables peer-to-peer communication without any server in between and allows the exchange of audio, video, and data between the connected peers. With WebRTC, the role of the server is limited to just helping the two peers discover each other and set up a direct connection.\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/50ju7jxgjl3gm4xb31rp.png)\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/qq6zmeitrkq6u73xs2tl.png)\nTo build an application (that requires peer-to-peer communication) from scratch without WebRTC, you would need a wealth of frameworks and libraries dealing with typical issues like\n\n* data loss\n* connection dropping\n* NAT traversal\n* Echo cancellation\n* Bandwidth adaptivity\n* Dynamic jitter buffering\n* Automatic gain control\n* Noise reduction and suppression\n\nWith WebRTC, all of this comes **built-in into the browser out-of-the-box.** WebRTC **automatically handles all of these concerns under the hood.**This technology doesn’t need any plugins or third-party software. It is open-sourced and its source code is freely available at http://www.webrtc.org/.\n\nThough most of the major browsers (like Chrome, Firefox etc. ) have implemented WebRTC framework and have exposed WebRTC’s APIs for the developers, it is better to confirm that your browser version supports it. You can find the list of all the browsers supporting WebRTC here.\n## WebRTC APIs\n\nWebRTC consists of several interrelated APIs and protocols which work together to achieve Real Time Communication. The most important APIs that we will use in this tutorial series are — click links to see demos\n\n* `getUserMedia()`: capture audio and video.\n* `MediaRecorder:` record audio and video.\n* `RTCPeerConnection:` stream audio and video between users.\n* `RTCDataChannel:` stream data between users.\n\n## Signaling\n\nBefore the two peers can start communicating with each other, they need to know a lot of information about each other like —\n\n* If there is any other peer available for communication.\n* Network data, such as a peer’s IP address and port as seen by the outside world\n* Session-control messages — used to open or close communication\n* Error messages\n* Media metadata, such as codecs, codec settings, bandwidth, and media types that will be sent by a peer\n* Key data used to establish secure connections\n\nDon’t worry if you do not understand what the above information represents. The important thing is to realize that a lot of information needs to be exchanged before a direct connection can be set-up. Such information can be termed as **metadata.**\n\nSignaling refers to the mechanism which coordinates initial communication and enables sending of metadata between the peers (browsers). Hence, initially, the peers communicate with each other using the signaling mechanism — primarily, for discovering other peers and sharing the information needed to create a direct connection between them. Once the direct connection has been established, there is no role of signaling thereafter.\n\n**Remember** — For signaling, we need a server.\n\n**Session Description Protocol:-**\n\n* The signaling mechanism (methods, protocols, etc.) is not specified by WebRTC. We need to build it ourselves. (Although this seems to be a complicated task, believe us — it is not. In this series, we will use Socket.IO for signaling, but there are many alternatives).\n* WebRTC only requires the exchange of the media metadata mentioned above between peers as **offers and answers.** Offers and answers are communicated in **Session Description Protocol** (SDP) format which looks like the following:-\n`\nv=0\no=- 7614219274584779017 2 IN IP4 127.0.0.1\ns=-\nt=0 0\na=group:BUNDLE audio video\na=msid-semantic: WMS\nm=audio 1 RTP/SAVPF 111 103 104 0 8 107 106 105 13 126\nc=IN IP4 0.0.0.0`\n...\n\n* If you are wondering what each line means in the above format, don’t worry. WebRTC creates this automatically according to the audio/video device present on your laptop/PC.\n\n## So how does a WebRTC Application work?\n\nUp till now, we have described what is WebRTC, what is Signalling and what are the various APIs can be used by the developers. Now, let’s discuss how all this works together. Once we know this, we can begin writing the code.\n\nBefore we discuss, you must understand what are IP Addresses and PORTS.\n\n* Each device that is connected to the internet, is identified using an IP address.\n* Port number identifies a specific process to which an Internet or other network message is to be forwarded when it arrives at the device. The port number is used so the data from the internet is directed to the correct location within the device.\n\nSo, each device that is connected to the internet, has an IP Address and many PORTs (typically 65,536).\n`RTCPeerConnection` **API and signaling: Offer, answer, and candidate**\n\nAs we discussed before `RTCPeerConnection` API of WebRTC is used to stream audio and video between users. Hence, Signalling works together with `RTCPeerConnection` to establish a direct connection between the browsers.\n\nTo initialize this process `RTCPeerConnection` has two tasks:\n\n* Ascertain local media conditions (audio and video), such as resolution and codec capabilities. This is the metadata used for the offer-and-answer and is sent via signaling.\n* Get potential network addresses (known as candidates) (which consists of an IP Address and a PORT number) for the app’s host which must be also sent by signalling\n\nOnce this local data has been ascertained, it must be exchanged through a signaling mechanism with the remote peer.\n\nImagine **Amy** is trying to call **Bernadette**. Here’s the full offer/answer mechanism in all its detail: First let’s discuss how they will share information regarding media conditions.\n\n1. Amy creates an `RTCPeerConnection` object.\n2. Amy creates an offer (an SDP session description) with the `RTCPeerConnection` `createOffer()` method.\n3. Amy calls `setLocalDescription()` to set the created offer (Session Description) as the description of local media in the connection that will be created.\n4. Amy stringifies the offer and uses a signaling mechanism to send it to Bernadette.\n5. Bernadette calls `setRemoteDescription()` with Amy's offer, so that her `RTCPeerConnection` knows about Amy's setup.\n6. Bernadette calls `createAnswer()` and the success callback function for this is passed a local session description—Bernadette's answer.\n7. Bernadette sets her answer as the local description by calling `setLocalDescription()`.\n8. Bernadette then uses the signaling mechanism to send her stringified answer to Amy.\n9. Amy sets Bernadette’s answer as the remote session description using `setRemoteDescription()`.\n\nNow Amy and Bernadette also need to exchange network information as well. The expression “finding candidates” refers to the process of finding network interfaces and ports (present on a peer and are available for establishing a direct connection with the other peer) using the ICE [framework](https://en.wikipedia.org/wiki/Interactive_Connectivity_Establishment).\n\n1. **Amy** creates an `RTCPeerConnection` object with an `onicecandidate` handler.\n2. The handler is called when network candidates become available.\n3. In the handler, **Amy** sends stringified candidate data to **Bernadette** through their signaling channel.\n4. When **Bernadette** gets a candidate message from **Amy**, she calls `addIceCandidate()` to add the candidate to the remote peer description.\n\nWebRTC supports [ICE Candidate Trickling](https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-03#section-3.4.1), which allows the caller to incrementally and automatically provide candidates to the callee after the initial offer, and for the callee to automatically begin acting on the call and set up a connection without waiting for all candidates to arrive. Don’t worry if you do not understand [ICE Candidate Trickling](https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-03#section-3.4.1). The important thing is WebRTC automatically creates ICE candidates (containing IP address) once a peer creates the offer. We only have to implement the methods that are required to receive and send these candidates via signaling.\n\n\nOnce the information regarding the media conditions and ice candidates are shared between the two peers, WebRTC automatically creates a direct connection between the peers.\n\n## After Signalling — Use ICE to cope with NATs and firewalls\n\nSo, it is natural that you would expect that every WebRTC Connection endpoint would have a unique IP address and PORT number that it could exchange with other peers in order to communicate directly.\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/056ldb15krtoiwd9ogfm.png)\nBut it is not so simple. There are two factors which can cause problems here. We must deal with those before we can use our web conferencing application.\n\n**Problem 1 — NAT**\n\nIf you are familiar with Computer Networks, you would know what NAT is. If don’t know, do not worry. We will explain it here:\n\nYou already know what IP addresses are. It is an address that identifies a device connected on the internet. Logically, you would expect that each device (which is connected to the Internet) must have a UNIQUE IP Address. But this is not entirely true.\n\nAn IPv4 address is 32 bits long which implies that there are about 4 billion unique address (2³² = 4,294,967,296). At the end of 2018, there were about 22 billion devices connected to the internet. So, you must be wondering — if there are only 4 billion IP addresses, how can 22 billion devices be connected on the internet ? The answer to this is NAT.\n\nThe guys, who maintain the internet, came up with the following solution — They divided the whole IPv4 address range into two groups — public IP Addresses and private IP Addresses. Now, each public IP address can be assigned only to one device but the same is not true for private IP addresses. See the image below for more clarification.\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/qdwrx7f03l81nfil5wdu.png)\nIn the above picture, each router has two IP addresses — one Public IP Address (facing the server) and one Private IP Address (facing the Internal Network). So, if any device inside Internal Network 1 sends a request to the server, the server will see the request coming from the same IP Address i.e. 180.190.104.50\n\nSo this implies that each router maps one Public IP Address to multiple Private IP Addresses of the devices. This also implies that each device (laptop, PC, Smartphone) only knows its private IP Address and not the public IP Address of the router. ( Also, if you search on Google — my IP Address, Google will tell you the public IP Address of the router (you are connected to) because Google sees the Public IP Address of the router and not your Private IP Address.)\n\nHence, in a way, we can say that each device has two IP addresses — a Private IP address (assigned to the device) and the Public IP address (assigned to the router to which the device is connected to).\n\nThis can cause problem for WebRTC as the network ICE candidates (generated by the browser) contain the private IP address and not the public IP address of the device. Hence, we must find a way for the browser to know the Public IP Address so that it can create candidates containing the Public IP Address. The solution is a STUN (Session Traversal Utilities for NAT) server. When a device makes a request to the STUN server, the STUN server responds back with a message containing the public IP of the router to which the device is connected to. In this way, the STUN server helps the browser to generate candidates.\n\nWe will see how to integrate STUN with WebRTC later in the tutorial.\n\n**Problem 2 — Firewall**\n\nIn reality, most devices live behind one or more layers of firewalls which are like antivirus softwares that blocks certain ports and protocols. A firewall and a NAT may in fact be implemented by the same device, such as a home WIFI router. Since WebRTC uses a number of non-standard Ports, some Firewalls do not allow a direct connection to be made between the two browsers.\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/1agqkaz7r1yfq9zr4nf5.png)\nHence, to solve this, we need a TURN (Traversal Using Relay NAT) server. TURN server basically acts a Relay Server i.e. the relay traffic directly between the two peers if direct (peer-to-peer) connection fails. Following image illustrates:-\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/aoep0a2c6x63vskws24u.png)\n**Solution**\n\nAs we discussed before, we need to use STUN and TURN servers while making a peer-to-peer connection using WebRTC. To integrate TURN and STUN with webrtc, we only have to pass a object containing the URLs of TURN and STUN servers to the RTCPeerConnection() as its argument. Following code illustrates:-\n\n```\n//Object containing TURN/STUN URLs.\nvar pcConfig = {\n  'iceServers': [\n\t{\n  \t'urls': 'stun:stun.l.google.com:19302'\n\t},\n\t{\n  \t'urls': 'turn:192.158.29.39:3478?transport=udp',\n  \t'credential': 'JZEOEt2V3Qb0y27GRntt2u2PAYA=',\n  \t'username': '28224511:1379330808'\n\t},\n\t{\n  \t'urls': 'turn:192.158.29.39:3478?transport=tcp',\n  \t'credential': 'JZEOEt2V3Qb0y27GRntt2u2PAYA=',\n  \t'username': '28224511:1379330808'\n\t}\n  ]\n}........\n//Passing the above object to RTCPeerConnection\nRTCPeerConnection(pcConfig);\n```\n\nAs illustrated above, we only have to pass the URLs. WebRTC manages everything else under the hood.\n\nFollowing diagram illustrates all the connections made during a WebRTC call\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/bs9tjk3vyqksx11c9nn7.png)\n**Note:-**\n\n* Most of the times, a successful connection will be made using a STUN server only and without the need of a TURN server. Only for a few times, you will require a TURN server for a successful call.\n* There are companies (like XirSys) that provide free TURN/STUN server.\n\n## Congratulations\n\nYou have made it to the end of this tutorial. You must now have a clear understanding of how WebRTC works.\n\nUntil now, we have only described the set of events that occur when one person (in our example, **Amy**) tries to call another person (in our example, Bernadette) using WebRTC. If you are wondering how to implement all this in code, stay tuned with us. We will write and explain the code that implements all these concepts in the next tutorial.\n\n[Continue reading part 2 here](https://medium.com/javascript-in-plain-english/lets-develop-a-video-chat-app-using-javascript-and-webrtc-71d86cff8faf?sk=a2850b64c5cfd7b581526cc62e57a919)\n\n## Sources\n\n* [WebRTC.org](https://webrtc.org/)\n* [Wikipedia](https://en.wikipedia.org/wiki/WebRTC)\n* [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API)\n* [HTML5Rocks](https://www.html5rocks.com/en/tutorials/webrtc/infrastructure/)\n	{"boosted_additional_tags": "", "boosted_dev_digest_email": false, "boosted_additional_articles": false}	\N	frontend, backend, webrtc, videochat	--- !ruby/struct:Articles::CachedEntity\nname: nilmadhab mondal\nusername: nilmadhab\nslug: nilmadhab\nprofile_image_90: "/uploads/user/profile_image/1/d9b0e3b7-ad59-45d5-b516-4e8ffd0a6958.jpeg"\nprofile_image_url: "/uploads/user/profile_image/1/d9b0e3b7-ad59-45d5-b516-4e8ffd0a6958.jpeg"\n	nilmadhab mondal	nilmadhab	\N	{}	\N	0	\N	0	2021-02-17 22:09:29.073407	\N	Part 1 : Understanding WebRTC This is the first tutorial in our WebRTC series. The aim of this series...	2021-02-18 08:04:32.670939	t	5	5	\N	f	1613599769	\N	354005	en	\N	2021-02-17 22:09:29.065271	\N	/i/2dkx1x1h1g6hutp0zics.png	#dddddd	11	0	0	0	\N	\N	5	f2418b8f1124c7685e6501014cf23d3cd63201c234b1ffe8f24c16e827cde2e39939eb865699cf180be8ed02b75cdc314c6c5988f2cbbff99030fa04	/nilmadhab/let-s-build-a-video-chat-app-with-javascript-and-webrtc-1c16	0	0	0	<p><strong>Part 1 : Understanding WebRTC</strong><br>\nThis is the first tutorial in our WebRTC series. The aim of this series is to explain what WebRTC is and how we can use it in web apps.</p>\n\n<p>In this part, we will understand the various concepts required to develop an app using WebRTC.</p>\n<h2>\n  <a name="tutorials-in-this-series" href="#tutorials-in-this-series" class="anchor">\n  </a>\n  Tutorials in this Series\n</h2>\n\n<ol>\n<li>Understanding WebRTC (this tutorial)</li>\n<li><a href="https://dev.to/nilmadhabmondal/let-s-build-a-video-chat-app-with-javascript-and-webrtc-27l3">Implementing WebRTC in code</a></li>\n</ol>\n<h2>\n  <a name="introduction" href="#introduction" class="anchor">\n  </a>\n  Introduction\n</h2>\n\n<p>If you weren’t familiar with web video-conferencing platforms and apps before the Covid-19 pandemic, we bet you know all about them now and must have used one of them.</p>\n\n<p>The ongoing COVID-19 situation has many more people working from home than ever before and companies using web conferencing as their primary means of communication between employees and clients.</p>\n\n<p>And with much of the world on lockdown with social distancing measures enforced, even spending time with family and friends is now largely restricted to online video calls. From parties to business meetings, these video conferencing platforms are now commonplace for virtually everyone.</p>\n\n<p>The aim of this tutorial series is to teach how to develop such a video-conferencing web application. Also, this series will definitely help all those developers who would like to learn how to build applications such as real-time advertising, multiplayer games, live broadcasting, e-learning, to name a few, where the action takes place in real time.</p>\n<h2>\n  <a name="fundamentals" href="#fundamentals" class="anchor">\n  </a>\n  Fundamentals\n</h2>\n\n<p>Before we begin to develop such a web app, we need to understand how an e-conferencing application is different from a simple chatting web app.</p>\n\n<p>In a simple chatting web app, when two browsers need to send messages to each other, they typically need a server in between for coordination and passing the messages. But having a server in the middle results in a delay in communication between the browsers. This delay hardly affects the utility of the chatting app. Even if this delay is (say) 5 secs, we would still be able to use this chatting application.</p>\n\n<p>However, in the case of a video conferencing application, this delay is significant. It will be extremely difficult to talk to someone using such an application. Imagine yourself talking to someone who receives your voice 5 secs later. You can realize how annoying it will be.</p>\n\n<p>Hence, for video conferencing, we require <strong>Real-Time Communication</strong> between the browsers. Such communication is possible if we eliminate the server from between. This is why we will have to use <strong>WebRTC</strong> — an open-source framework providing web browsers and mobile applications with real-time communication via simple APIs.</p>\n<h2>\n  <a name="webrtc" href="#webrtc" class="anchor">\n  </a>\n  WebRTC\n</h2>\n\n<p>WebRTC stands for Web Real-Time Communication. It enables peer-to-peer communication without any server in between and allows the exchange of audio, video, and data between the connected peers. With WebRTC, the role of the server is limited to just helping the two peers discover each other and set up a direct connection.<br>\n<a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--GkG3feGQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/50ju7jxgjl3gm4xb31rp.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--GkG3feGQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/50ju7jxgjl3gm4xb31rp.png" alt="Alt Text" loading="lazy"></a><br>\n<a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--jyIwp8qz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/qq6zmeitrkq6u73xs2tl.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--jyIwp8qz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/qq6zmeitrkq6u73xs2tl.png" alt="Alt Text" loading="lazy"></a><br>\nTo build an application (that requires peer-to-peer communication) from scratch without WebRTC, you would need a wealth of frameworks and libraries dealing with typical issues like</p>\n\n<ul>\n<li>data loss</li>\n<li>connection dropping</li>\n<li>NAT traversal</li>\n<li>Echo cancellation</li>\n<li>Bandwidth adaptivity</li>\n<li>Dynamic jitter buffering</li>\n<li>Automatic gain control</li>\n<li>Noise reduction and suppression</li>\n</ul>\n\n<p>With WebRTC, all of this comes <strong>built-in into the browser out-of-the-box.</strong> WebRTC <strong>automatically handles all of these concerns under the hood.</strong>This technology doesn’t need any plugins or third-party software. It is open-sourced and its source code is freely available at <a href="http://www.webrtc.org/">http://www.webrtc.org/</a>.</p>\n\n<p>Though most of the major browsers (like Chrome, Firefox etc. ) have implemented WebRTC framework and have exposed WebRTC’s APIs for the developers, it is better to confirm that your browser version supports it. You can find the list of all the browsers supporting WebRTC here.</p>\n<h2>\n  <a name="webrtc-apis" href="#webrtc-apis" class="anchor">\n  </a>\n  WebRTC APIs\n</h2>\n\n<p>WebRTC consists of several interrelated APIs and protocols which work together to achieve Real Time Communication. The most important APIs that we will use in this tutorial series are — click links to see demos</p>\n\n<ul>\n<li>\n<code>getUserMedia()</code>: capture audio and video.</li>\n<li>\n<code>MediaRecorder:</code> record audio and video.</li>\n<li>\n<code>RTCPeerConnection:</code> stream audio and video between users.</li>\n<li>\n<code>RTCDataChannel:</code> stream data between users.</li>\n</ul>\n<h2>\n  <a name="signaling" href="#signaling" class="anchor">\n  </a>\n  Signaling\n</h2>\n\n<p>Before the two peers can start communicating with each other, they need to know a lot of information about each other like —</p>\n\n<ul>\n<li>If there is any other peer available for communication.</li>\n<li>Network data, such as a peer’s IP address and port as seen by the outside world</li>\n<li>Session-control messages — used to open or close communication</li>\n<li>Error messages</li>\n<li>Media metadata, such as codecs, codec settings, bandwidth, and media types that will be sent by a peer</li>\n<li>Key data used to establish secure connections</li>\n</ul>\n\n<p>Don’t worry if you do not understand what the above information represents. The important thing is to realize that a lot of information needs to be exchanged before a direct connection can be set-up. Such information can be termed as <strong>metadata.</strong></p>\n\n<p>Signaling refers to the mechanism which coordinates initial communication and enables sending of metadata between the peers (browsers). Hence, initially, the peers communicate with each other using the signaling mechanism — primarily, for discovering other peers and sharing the information needed to create a direct connection between them. Once the direct connection has been established, there is no role of signaling thereafter.</p>\n\n<p><strong>Remember</strong> — For signaling, we need a server.</p>\n\n<p><strong>Session Description Protocol:-</strong></p>\n\n<ul>\n<li>The signaling mechanism (methods, protocols, etc.) is not specified by WebRTC. We need to build it ourselves. (Although this seems to be a complicated task, believe us — it is not. In this series, we will use Socket.IO for signaling, but there are many alternatives).</li>\n<li><p>WebRTC only requires the exchange of the media metadata mentioned above between peers as <strong>offers and answers.</strong> Offers and answers are communicated in <strong>Session Description Protocol</strong> (SDP) format which looks like the following:-<br>\n<code><br>\nv=0<br>\no=- 7614219274584779017 2 IN IP4 127.0.0.1<br>\ns=-<br>\nt=0 0<br>\na=group:BUNDLE audio video<br>\na=msid-semantic: WMS<br>\nm=audio 1 RTP/SAVPF 111 103 104 0 8 107 106 105 13 126<br>\nc=IN IP4 0.0.0.0</code><br>\n...</p></li>\n<li><p>If you are wondering what each line means in the above format, don’t worry. WebRTC creates this automatically according to the audio/video device present on your laptop/PC.</p></li>\n</ul>\n<h2>\n  <a name="so-how-does-a-webrtc-application-work" href="#so-how-does-a-webrtc-application-work" class="anchor">\n  </a>\n  So how does a WebRTC Application work?\n</h2>\n\n<p>Up till now, we have described what is WebRTC, what is Signalling and what are the various APIs can be used by the developers. Now, let’s discuss how all this works together. Once we know this, we can begin writing the code.</p>\n\n<p>Before we discuss, you must understand what are IP Addresses and PORTS.</p>\n\n<ul>\n<li>Each device that is connected to the internet, is identified using an IP address.</li>\n<li>Port number identifies a specific process to which an Internet or other network message is to be forwarded when it arrives at the device. The port number is used so the data from the internet is directed to the correct location within the device.</li>\n</ul>\n\n<p>So, each device that is connected to the internet, has an IP Address and many PORTs (typically 65,536).<br>\n<code>RTCPeerConnection</code> <strong>API and signaling: Offer, answer, and candidate</strong></p>\n\n<p>As we discussed before <code>RTCPeerConnection</code> API of WebRTC is used to stream audio and video between users. Hence, Signalling works together with <code>RTCPeerConnection</code> to establish a direct connection between the browsers.</p>\n\n<p>To initialize this process <code>RTCPeerConnection</code> has two tasks:</p>\n\n<ul>\n<li>Ascertain local media conditions (audio and video), such as resolution and codec capabilities. This is the metadata used for the offer-and-answer and is sent via signaling.</li>\n<li>Get potential network addresses (known as candidates) (which consists of an IP Address and a PORT number) for the app’s host which must be also sent by signalling</li>\n</ul>\n\n<p>Once this local data has been ascertained, it must be exchanged through a signaling mechanism with the remote peer.</p>\n\n<p>Imagine <strong>Amy</strong> is trying to call <strong>Bernadette</strong>. Here’s the full offer/answer mechanism in all its detail: First let’s discuss how they will share information regarding media conditions.</p>\n\n<ol>\n<li>Amy creates an <code>RTCPeerConnection</code> object.</li>\n<li>Amy creates an offer (an SDP session description) with the <code>RTCPeerConnection</code> <code>createOffer()</code> method.</li>\n<li>Amy calls <code>setLocalDescription()</code> to set the created offer (Session Description) as the description of local media in the connection that will be created.</li>\n<li>Amy stringifies the offer and uses a signaling mechanism to send it to Bernadette.</li>\n<li>Bernadette calls <code>setRemoteDescription()</code> with Amy's offer, so that her <code>RTCPeerConnection</code> knows about Amy's setup.</li>\n<li>Bernadette calls <code>createAnswer()</code> and the success callback function for this is passed a local session description—Bernadette's answer.</li>\n<li>Bernadette sets her answer as the local description by calling <code>setLocalDescription()</code>.</li>\n<li>Bernadette then uses the signaling mechanism to send her stringified answer to Amy.</li>\n<li>Amy sets Bernadette’s answer as the remote session description using <code>setRemoteDescription()</code>.</li>\n</ol>\n\n<p>Now Amy and Bernadette also need to exchange network information as well. The expression “finding candidates” refers to the process of finding network interfaces and ports (present on a peer and are available for establishing a direct connection with the other peer) using the ICE <a href="https://en.wikipedia.org/wiki/Interactive_Connectivity_Establishment">framework</a>.</p>\n\n<ol>\n<li>\n<strong>Amy</strong> creates an <code>RTCPeerConnection</code> object with an <code>onicecandidate</code> handler.</li>\n<li>The handler is called when network candidates become available.</li>\n<li>In the handler, <strong>Amy</strong> sends stringified candidate data to <strong>Bernadette</strong> through their signaling channel.</li>\n<li>When <strong>Bernadette</strong> gets a candidate message from <strong>Amy</strong>, she calls <code>addIceCandidate()</code> to add the candidate to the remote peer description.</li>\n</ol>\n\n<p>WebRTC supports <a href="https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-03#section-3.4.1">ICE Candidate Trickling</a>, which allows the caller to incrementally and automatically provide candidates to the callee after the initial offer, and for the callee to automatically begin acting on the call and set up a connection without waiting for all candidates to arrive. Don’t worry if you do not understand <a href="https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-03#section-3.4.1">ICE Candidate Trickling</a>. The important thing is WebRTC automatically creates ICE candidates (containing IP address) once a peer creates the offer. We only have to implement the methods that are required to receive and send these candidates via signaling.</p>\n\n<p>Once the information regarding the media conditions and ice candidates are shared between the two peers, WebRTC automatically creates a direct connection between the peers.</p>\n<h2>\n  <a name="after-signalling-use-ice-to-cope-with-nats-and-firewalls" href="#after-signalling-use-ice-to-cope-with-nats-and-firewalls" class="anchor">\n  </a>\n  After Signalling — Use ICE to cope with NATs and firewalls\n</h2>\n\n<p>So, it is natural that you would expect that every WebRTC Connection endpoint would have a unique IP address and PORT number that it could exchange with other peers in order to communicate directly.<br>\n<a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--vZejFzGa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/056ldb15krtoiwd9ogfm.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--vZejFzGa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/056ldb15krtoiwd9ogfm.png" alt="Alt Text" loading="lazy"></a><br>\nBut it is not so simple. There are two factors which can cause problems here. We must deal with those before we can use our web conferencing application.</p>\n\n<p><strong>Problem 1 — NAT</strong></p>\n\n<p>If you are familiar with Computer Networks, you would know what NAT is. If don’t know, do not worry. We will explain it here:</p>\n\n<p>You already know what IP addresses are. It is an address that identifies a device connected on the internet. Logically, you would expect that each device (which is connected to the Internet) must have a UNIQUE IP Address. But this is not entirely true.</p>\n\n<p>An IPv4 address is 32 bits long which implies that there are about 4 billion unique address (2³² = 4,294,967,296). At the end of 2018, there were about 22 billion devices connected to the internet. So, you must be wondering — if there are only 4 billion IP addresses, how can 22 billion devices be connected on the internet ? The answer to this is NAT.</p>\n\n<p>The guys, who maintain the internet, came up with the following solution — They divided the whole IPv4 address range into two groups — public IP Addresses and private IP Addresses. Now, each public IP address can be assigned only to one device but the same is not true for private IP addresses. See the image below for more clarification.<br>\n<a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--4Cxt5HZA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/qdwrx7f03l81nfil5wdu.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--4Cxt5HZA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/qdwrx7f03l81nfil5wdu.png" alt="Alt Text" loading="lazy"></a><br>\nIn the above picture, each router has two IP addresses — one Public IP Address (facing the server) and one Private IP Address (facing the Internal Network). So, if any device inside Internal Network 1 sends a request to the server, the server will see the request coming from the same IP Address i.e. 180.190.104.50</p>\n\n<p>So this implies that each router maps one Public IP Address to multiple Private IP Addresses of the devices. This also implies that each device (laptop, PC, Smartphone) only knows its private IP Address and not the public IP Address of the router. ( Also, if you search on Google — my IP Address, Google will tell you the public IP Address of the router (you are connected to) because Google sees the Public IP Address of the router and not your Private IP Address.)</p>\n\n<p>Hence, in a way, we can say that each device has two IP addresses — a Private IP address (assigned to the device) and the Public IP address (assigned to the router to which the device is connected to).</p>\n\n<p>This can cause problem for WebRTC as the network ICE candidates (generated by the browser) contain the private IP address and not the public IP address of the device. Hence, we must find a way for the browser to know the Public IP Address so that it can create candidates containing the Public IP Address. The solution is a STUN (Session Traversal Utilities for NAT) server. When a device makes a request to the STUN server, the STUN server responds back with a message containing the public IP of the router to which the device is connected to. In this way, the STUN server helps the browser to generate candidates.</p>\n\n<p>We will see how to integrate STUN with WebRTC later in the tutorial.</p>\n\n<p><strong>Problem 2 — Firewall</strong></p>\n\n<p>In reality, most devices live behind one or more layers of firewalls which are like antivirus softwares that blocks certain ports and protocols. A firewall and a NAT may in fact be implemented by the same device, such as a home WIFI router. Since WebRTC uses a number of non-standard Ports, some Firewalls do not allow a direct connection to be made between the two browsers.<br>\n<a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--0n2lBI7j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1agqkaz7r1yfq9zr4nf5.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--0n2lBI7j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1agqkaz7r1yfq9zr4nf5.png" alt="Alt Text" loading="lazy"></a><br>\nHence, to solve this, we need a TURN (Traversal Using Relay NAT) server. TURN server basically acts a Relay Server i.e. the relay traffic directly between the two peers if direct (peer-to-peer) connection fails. Following image illustrates:-<br>\n<a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--IKNovf6G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/aoep0a2c6x63vskws24u.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--IKNovf6G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/aoep0a2c6x63vskws24u.png" alt="Alt Text" loading="lazy"></a><br>\n<strong>Solution</strong></p>\n\n<p>As we discussed before, we need to use STUN and TURN servers while making a peer-to-peer connection using WebRTC. To integrate TURN and STUN with webrtc, we only have to pass a object containing the URLs of TURN and STUN servers to the RTCPeerConnection() as its argument. Following code illustrates:-<br>\n</p>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>//Object containing TURN/STUN URLs.\nvar pcConfig = {\n  'iceServers': [\n    {\n    'urls': 'stun:stun.l.google.com:19302'\n    },\n    {\n    'urls': 'turn:192.158.29.39:3478?transport=udp',\n    'credential': 'JZEOEt2V3Qb0y27GRntt2u2PAYA=',\n    'username': '28224511:1379330808'\n    },\n    {\n    'urls': 'turn:192.158.29.39:3478?transport=tcp',\n    'credential': 'JZEOEt2V3Qb0y27GRntt2u2PAYA=',\n    'username': '28224511:1379330808'\n    }\n  ]\n}........\n//Passing the above object to RTCPeerConnection\nRTCPeerConnection(pcConfig);\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>As illustrated above, we only have to pass the URLs. WebRTC manages everything else under the hood.</p>\n\n<p>Following diagram illustrates all the connections made during a WebRTC call<br>\n<a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--dYqq_Hly--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bs9tjk3vyqksx11c9nn7.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--dYqq_Hly--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bs9tjk3vyqksx11c9nn7.png" alt="Alt Text" loading="lazy"></a><br>\n<strong>Note:-</strong></p>\n\n<ul>\n<li>Most of the times, a successful connection will be made using a STUN server only and without the need of a TURN server. Only for a few times, you will require a TURN server for a successful call.</li>\n<li>There are companies (like XirSys) that provide free TURN/STUN server.</li>\n</ul>\n\n<h2>\n  <a name="congratulations" href="#congratulations" class="anchor">\n  </a>\n  Congratulations\n</h2>\n\n<p>You have made it to the end of this tutorial. You must now have a clear understanding of how WebRTC works.</p>\n\n<p>Until now, we have only described the set of events that occur when one person (in our example, <strong>Amy</strong>) tries to call another person (in our example, Bernadette) using WebRTC. If you are wondering how to implement all this in code, stay tuned with us. We will write and explain the code that implements all these concepts in the next tutorial.</p>\n\n<p><a href="https://medium.com/javascript-in-plain-english/lets-develop-a-video-chat-app-using-javascript-and-webrtc-71d86cff8faf?sk=a2850b64c5cfd7b581526cc62e57a919">Continue reading part 2 here</a></p>\n\n<h2>\n  <a name="sources" href="#sources" class="anchor">\n  </a>\n  Sources\n</h2>\n\n<ul>\n<li><a href="https://webrtc.org/">WebRTC.org</a></li>\n<li><a href="https://en.wikipedia.org/wiki/WebRTC">Wikipedia</a></li>\n<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API">MDN Web Docs</a></li>\n<li><a href="https://www.html5rocks.com/en/tutorials/webrtc/infrastructure/">HTML5Rocks</a></li>\n</ul>\n\n	0	t	2021-02-17 22:09:29.065271	f	0	0	11	t	0	\N	\N	t	let-s-build-a-video-chat-app-with-javascript-and-webrtc-1c16	\N	25	Let’s Build a Video Chat App with JavaScript and WebRTC	2021-02-18 08:04:33.042316	1	0	\N	\N	\N	0	\N	\N	\N
46	f	f	f	\N	 **We are going to build an e-commerce application using Java, Spring backend, build web UI in Vue.js, and mobile UI using android. Stay tuned!**\n![](/api/collection/5948990638522368/5499519291097088/page/6412630948839424/image/4964528199041024)\n\nEvery E-Commerce platform needs users, so in the first tutorial, we are going to create and display user-profiles. We are going to first build the backend APIs using Java and Springboot, then we are going to create UI in Vue.js and android mobile app. \n\n## Live Demo\n\nYou can test the API at the following swagger link. You can create and list all the users.\n\n[Link] (http://remotedevs.org:8080/api/swagger-ui.html)\n \n## About Spring Framework\nThe Spring Framework is a major open-source Java/J2EE application development framework for more productive application development. It is the most popular Java framework with a 30% share of usage. The Spring Framework features enable efficient development from simple Web to complex enterprise applications.\n\nThe main concepts that the Spring Framework depends on are:\n1. Dependency Injection (DI)\n2. Aspect-Oriented Programming (AOP)\n3. Java Persistence API (JPA)\n## Prerequisites\n1. Knowledge in Core Java\n2. Coding skills\n3. Knowledge in Servlet and JSP\n4. Java Development Kit (JDK)\n5. IntelliJ IDEA Ultimate — open-source (recommended)\n6. MySQL database — You can get it here!\n7. A good browser (Chrome — recommended)\n\nMake sure you have all the listed prerequisites software installed and have basic knowledge of the request-response cycle as well as web containers. What more? Let’s jump into the tutorial!\n## Project Setup\n* Open Spring Tool Suite application\n* Click File -> New -> Project ->Spring Starter Project\n* Give the essential data in the opened dialog box\n## Dependencies\nThe dependencies I am adding to this project are given below. You can either add them during the creation of the project itself or later search for them in the Maven repository and add the tags of the required version in the pom.xml file.\n* Spring boot starter web\n* Tomcat embed jasper\n* Spring boot starter Data JPA\n* Mysql connector java\n* Spring boot starter test\n* Swagger 2\n* Swagger UI\n## Project Hierarchy\nThe hierarchy is the important thing to notice in the Spring boot Application design structure. My project hierarchy is as below.\n\n![](/api/collection/5948990638522368/5499519291097088/page/6412630948839424/image/5498746733854720)\n\n## Overview of our Backend Application\nIn this Spring Application following are important packages that you have to know before starting.\n\nThis is the spring architecture. The outside world calls the REST Apis, which interacts with the Service. Service calls the repository. The repository interacts with the database. We follow this pattern to make the codebase maintainable, instead of having spaghetti code which can be a nightmare in long term.![](/api/collection/5948990638522368/5499519291097088/page/6412630948839424/image/4565464181637120)\n\nLet's look at first Rest controllers\n## Controller\n\n```\npackage com.webtutsplus.ecommerce.controller;\n\nimport java.util.List;\n\nimport javax.validation.Valid;\n\nimport com.webtutsplus.ecommerce.model.UserProfile;\nimport com.webtutsplus.ecommerce.service.UserService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport com.webtutsplus.ecommerce.common.ApiResponse;\n\n@RestController\n@RequestMapping("/user")\npublic class \tUserController {\n\n\t@Autowired private UserService userService;\n\n\t@GetMapping("/")\n\tpublic ResponseEntity<List<UserProfile>> getUsers() {\n\t\tList<UserProfile> dtos = userService.listProfiles();\n\t\treturn new ResponseEntity<List<UserProfile>>(dtos, HttpStatus.OK);\n\t}\n\n\t@PostMapping("/add")\n\tpublic ResponseEntity<ApiResponse> addSurvey(@RequestBody @Valid UserProfile profile) {\n\t\tuserService.addProfile(profile);\n\t\treturn new ResponseEntity<>(new ApiResponse(true, "Profile has been created."), HttpStatus.CREATED);\n\t}\t\n}\n```\nThe User Controller class provides two HTTP methods GET and Post. The Get mapping function return a complete list of Users and the Post Mapping Function saves the new user profile in the Database.\n\nAs we can see UserControllers has a reference to UserService.\n## Service\nAs we know the spring boot framework follows the POJO model and every controller has its own service interface, which provides the methods / Operation that is performed in the application.\n\nIn service class, there are only two methods list Profiles and add Profiles, which provide information. We can extend or add more functionality in the future according to requirements.\n```\npackage com.webtutsplus.ecommerce.service;\n\nimport java.util.List;\n\nimport com.webtutsplus.ecommerce.model.UserProfile;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport com.webtutsplus.ecommerce.repository.UserProfileRepository;\n\n@Service\npublic class UserService {\n\n\t@Autowired private UserProfileRepository userRepo;\n\t\n\n\tpublic void addProfile(UserProfile userProfile) {\n\t\tuserRepo.save(userProfile);\n\t}\n\t\n\tpublic List<UserProfile> listProfiles(){\n\t\treturn userRepo.findAll();\t\t\n\t}\n\t\n}\n```\nService calls UserProfileRepository which interacts with the database in form of models. Let's have a look at UserModel.\n## Model\nThe model class is a mirror of the user_profile table in the database in form of a java object. All attributes can be accessed through this class. You can also update the attribute values using the model class, which also makes changes in a database table.\n```\npackage com.webtutsplus.ecommerce.model;\n\n\nimport javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.GenerationType;\nimport javax.persistence.Id;\nimport javax.persistence.Table;\n\n\n@Entity\n@Table(name="user_profile")\npublic class UserProfile {\n\n\tprivate long id;\n\tprivate String username;\n\tprivate String email;\n\tprivate String firstName;\n\tprivate String lastName;\n\n\tpublic UserProfile() {}\n\t\n\tpublic UserProfile(long id, String username, String email, String firstName, String lastName) {\n\t\tsuper();\n\t\tthis.id = id;\n\t\tthis.username = username;\n\t\tthis.email = email;\n\t\tthis.firstName = firstName;\n\t\tthis.lastName = lastName;\n\t}\n\t\n\t@Id\t\n\t@GeneratedValue(strategy = GenerationType.IDENTITY)\n\tpublic long getId() {\n\t\treturn id;\n\t}\n\tpublic void setId(long id) {\n\t\tthis.id = id;\n\t}\n\tpublic String getUsername() {\n\t\treturn username;\n\t}\n\tpublic void setUsername(String username) {\n\t\tthis.username = username;\n\t}\n\tpublic String getEmail() {\n\t\treturn email;\n\t}\n\tpublic void setEmail(String email) {\n\t\tthis.email = email;\n\t}\n\tpublic String getFirstName() {\n\t\treturn firstName;\n\t}\n\tpublic void setFirstName(String firstName) {\n\t\tthis.firstName = firstName;\n\t}\n\tpublic String getLastName() {\n\t\treturn lastName;\n\t}\n\tpublic void setLastName(String lastName) {\n\t\tthis.lastName = lastName;\n\t}\n\t\n}\n```\n## Result\n\nAfter this save the file and run the application. Now you tomcat is listening on 8182 port.\n\n[Link] 138.68.64.95:8080/api/swagger-ui.html#/user-controller\n\n## What is Swagger\n\nSwagger is an Interface Description Language for describing RESTful APIs expressed using JSON. Swagger is used together with a set of open-source software tools to design, build, document, and use RESTful web services. Swagger includes automated documentation, code generation, and test-case generation.\n\nYou can access the application documentation by entering the following URL in your browser.\n![](/api/collection/5948990638522368/5499519291097088/page/6412630948839424/image/5382097586356224)\n\nYou can edit your API information in documentation.swaggerConfig.java class and getApiInfo() method.\n\nSwagger is very useful on the developer side because it provides very user-friendly API information as well as provide a way to test the API.\n```\n\tprivate ApiInfo getApiInfo() {\n        Contact contact = new Contact("webtutsplus", "http://webtutsplus.com", "contact.webtutsplus@gmail.com");\n        return new ApiInfoBuilder()\n                .title("User Profile API")\n                .description("Documentation User profile api")\n                .version("1.0.0")\n                .license("Apache 2.0")\n                .licenseUrl("http://www.apache.org/licenses/LICENSE-2.0")\n                .contact(contact)\n                .build();\n}\n```\nNow we are going to look at some extra classes, which play an important role too.\n## common\nIn this package, there are two classes\n\n**· ApiResponse.java**\n```\npackage com.webtutsplus.ecommerce.common;\n\nimport java.time.LocalDateTime;\n\npublic class ApiResponse {\n\tprivate final boolean success;\n\tprivate final String message;\n\t\n\tpublic ApiResponse(boolean success, String message) {\n\t\tthis.success = success;\n\t\tthis.message = message;\n\t}\n\n\tpublic boolean isSuccess() {\n\t\treturn success;\n\t}\n\n\tpublic String getMessage() {\n\t\treturn message;\n\t}\n\t\n\tpublic String getTimestamp() {\n\t\treturn LocalDateTime.now().toString();\n\t}\n}\n```\nThis class provides the status of API response. It has three methods is Success (), get Message (), get Timestamp (). The get Timestamp () method returns the Current Date and Time in String format.\n**PagedList.java**\n```\npackage com.webtutsplus.ecommerce.common;\n\nimport java.util.List;\n\npublic class PagedList<T> {\n\tprivate int totalPages;\n\tprivate long totalElements;\n\tprivate boolean hasNext;\n\tprivate boolean hasPrevious;\n\t\n\tprivate List<T> data;\n\t\n\tpublic int getTotalPages() {\n\t\treturn totalPages;\n\t}\n\tpublic void setTotalPages(int totalPages) {\n\t\tthis.totalPages = totalPages;\n\t}\n\tpublic long getTotalElements() {\n\t\treturn totalElements;\n\t}\n\tpublic void setTotalElements(long totalElements) {\n\t\tthis.totalElements = totalElements;\n\t}\n\tpublic boolean isHasNext() {\n\t\treturn hasNext;\n\t}\n\tpublic void setHasNext(boolean hasNext) {\n\t\tthis.hasNext = hasNext;\n\t}\n\tpublic boolean isHasPrevious() {\n\t\treturn hasPrevious;\n\t}\n\tpublic void setHasPrevious(boolean hasPrevious) {\n\t\tthis.hasPrevious = hasPrevious;\n\t}\n\t\n\tpublic List<T> getData() {\n\t\treturn data;\n\t}\n\tpublic void setData(List<T> data) {\n\t\tthis.data = data;\n\t}\n}\n```\nThis class contains all the information about the pages in the List data structure and provides total Pages, total Elements, has Next, has Previous attributes getter and setter.\n\n## Config\nIn these packages, there are two sub-packages named documentation and security.\n\n· Documentation\n\nIn this Package, it provides information about the product and API.\n\nProduct API method provides information about the product and gets the Api Info method return information about Api like contact, Title, version, license.\n```\npackage com.webtutsplus.ecommerce.config.documentation;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport springfox.documentation.builders.ApiInfoBuilder;\nimport springfox.documentation.builders.PathSelectors;\nimport springfox.documentation.builders.RequestHandlerSelectors;\nimport springfox.documentation.service.ApiInfo;\nimport springfox.documentation.service.Contact;\nimport springfox.documentation.spi.DocumentationType;\nimport springfox.documentation.spring.web.plugins.Docket;\nimport springfox.documentation.swagger2.annotations.EnableSwagger2;\n\n@Configuration\n@EnableSwagger2\npublic class SwaggerConfig {\n\t@Bean\n    public Docket productApi() {\n        return new Docket(DocumentationType.SWAGGER_2)\n        \t\t.apiInfo(getApiInfo())\n                .select()\n                .apis(RequestHandlerSelectors.basePackage("com.webtutsplus.ecommerce"))\n                .paths(PathSelectors.any())\n                .build();\n    }\n\t\n\tprivate ApiInfo getApiInfo() {\n        Contact contact = new Contact("Umar Draz", "-", "umar.umar82@gmail.com");\n        return new ApiInfoBuilder()\n                .title("User Profile API")\n                .description("Documentation User profile api")\n                .version("1.0.0")\n                .license("Apache 2.0")\n                .licenseUrl("http://www.apache.org/licenses/LICENSE-2.0")\n                .contact(contact)\n                .build();\n    }\n}\n```\n## Security\n\nThis class is very important for applications because it provides the basic security for the whole application over HTTP or HTTPS protocol. It also implements configuration for users that which users have access to which pages or repositories.\n```\npackage com.webtutsplus.ecommerce.config.security;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.builders.WebSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n\n@Configuration\npublic class SecurityConfig extends WebSecurityConfigurerAdapter\n{\n    @Override\n    protected void configure(HttpSecurity http) throws Exception \n    {\n        http\n         .csrf().disable()\n         .authorizeRequests().anyRequest().authenticated()\n         .and()\n         .httpBasic();\n    }\n  \n    @Autowired\n    public void configureGlobal(AuthenticationManagerBuilder auth) \n            throws Exception \n    {\n        auth.inMemoryAuthentication()\n            .withUser("admin")\n            .password("admin")\n            .roles("USER");\n    }\n    \n\t@Override\n\tpublic void configure(WebSecurity registry) throws Exception {\n\t\tregistry.ignoring()\n\t\t.antMatchers("/docs/**").antMatchers("/actuator/**").antMatchers("/v2/api-docs", "/configuration/ui",\n\t\t\t\t"/swagger-resources/**", "/configuration/security", "/swagger-ui.html", "/webjars/**");\n\t}\n}\n```\n## Exception\n\nThis class is used in case of exception in any stage of the application. It has two classes Exception handler and validation exception, which throws when there is a validation error in the application at run time.\n\n`ExceptionHandlerAdvice.java`\n```\npackage com.webtutsplus.ecommerce.exception;\n\nimport com.webtutsplus.ecommerce.common.ApiResponse;\nimport org.springframework.core.NestedExceptionUtils;\nimport org.springframework.dao.DataIntegrityViolationException;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.ControllerAdvice;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\nimport org.springframework.web.method.annotation.MethodArgumentTypeMismatchException;\n\n\n@ControllerAdvice\npublic class ExceptionHandlerAdvice {\n\t\n\t@ExceptionHandler(DataIntegrityViolationException.class)\n\tpublic ResponseEntity<ApiResponse> conflict(DataIntegrityViolationException ex){\n\t\tString message = getMostSpecificMessage(ex);\n\t\t\n\t\treturn new ResponseEntity<ApiResponse>(new ApiResponse(false, message), HttpStatus.CONFLICT);\n\t}\n\t\n//\t@ExceptionHandler(AccessDeniedException.class)\n//\tpublic ResponseEntity<ApiResponse> accessDenied(AccessDeniedException ex){\n//\t\tString message = ex.getMessage();\n//\t\t\n//\t\treturn new ResponseEntity<ApiResponse>(new ApiResponse(false, message), HttpStatus.FORBIDDEN);\n//\t}\n\t\n\t@ExceptionHandler(ValidationException.class)\n\tpublic ResponseEntity<ApiResponse> validationException(ValidationException ex){\n\t\tString message = ex.getMessage();\n\t\t\n\t\treturn new ResponseEntity<ApiResponse>(new ApiResponse(false, message), HttpStatus.UNPROCESSABLE_ENTITY);\n\t}\n\t\n\t@ExceptionHandler(MethodArgumentTypeMismatchException.class)\n\tpublic ResponseEntity<ApiResponse> methodArgumentTypeMismatchException(MethodArgumentTypeMismatchException ex){\n\t\tex.printStackTrace();\n\t\t\n\t\tString message = ex.getMessage();\n\t\treturn new ResponseEntity<ApiResponse>(new ApiResponse(false, message), HttpStatus.INTERNAL_SERVER_ERROR);\n\t}\n\t\n\t@ExceptionHandler(Exception.class)\n\tpublic ResponseEntity<ApiResponse> unhandledExceptions(Exception ex){\n\t\tString message = NestedExceptionUtils.getMostSpecificCause(ex).getMessage();\n\t\t\n\t\tex.printStackTrace();\n\t\t\n\t\treturn new ResponseEntity<ApiResponse>(new ApiResponse(false, message), HttpStatus.INTERNAL_SERVER_ERROR);\n\t}\n\t\n\tprivate String getMostSpecificMessage(DataIntegrityViolationException ex) {\n\t\tString message = NestedExceptionUtils.getMostSpecificCause(ex).getMessage();\n\t\t\n\t\tif(message.contains("Detail:")) {\n\t\t\tmessage = message.substring(message.indexOf("Detail:")+"Detail:".length());\n\t\t}\n\t\t\n\t\treturn message;\n\t}\n}\n```\n`ValidationException.java`\n```\npackage com.webtutsplus.ecommerce.exception;\n\npublic class ValidationException extends RuntimeException{\n\tprivate static final long serialVersionUID = 6064663768170825752L;\n\n\tpublic ValidationException(String message) {\n        super(message);\n    }\n\t\n\tpublic ValidationException(String message, Throwable cause) {\n        super(message, cause);\n    }\n}\n```\n**Hope you had a great session with us! Follow us for such great and awesome tutorials!**\n\nFollow the next tutorial where we will build UI in both Vue.js and Android.\n\n	{"boosted_additional_tags": "", "boosted_dev_digest_email": false, "boosted_additional_articles": false}	\N	backend, ecommerce	--- !ruby/struct:Articles::CachedEntity\nname: nilmadhab mondal\nusername: nilmadhab\nslug: nilmadhab\nprofile_image_90: "/uploads/user/profile_image/1/d9b0e3b7-ad59-45d5-b516-4e8ffd0a6958.jpeg"\nprofile_image_url: "/uploads/user/profile_image/1/d9b0e3b7-ad59-45d5-b516-4e8ffd0a6958.jpeg"\n	nilmadhab mondal	nilmadhab	\N	{}	\N	0	\N	0	2021-02-18 21:37:48.648648	\N	We are going to build an e-commerce application using Java, Spring backend, build web UI in Vue.js, a...	2021-02-19 15:03:09.506201	t	5	5	\N	f	1613684268	\N	353810	en	\N	2021-02-18 21:37:48.640258	\N	/i/x5cc436pypedkglvctaf.png	#dddddd	16	0	0	0	\N	\N	3	498f744379e0c6c27c553c2c7794499ed160082e151a44098c493bf4f2f24d88067c2127319630ceeb63357f9e401c435a5820f6d141e900566dc69d	/nilmadhab/let-s-develop-an-e-commerce-application-from-scratch-using-java-1ik9	0	0	0	<p><strong>We are going to build an e-commerce application using Java, Spring backend, build web UI in Vue.js, and mobile UI using android. Stay tuned!</strong><br>\n<a href="/api/collection/5948990638522368/5499519291097088/page/6412630948839424/image/4964528199041024" class="article-body-image-wrapper"><img src="/api/collection/5948990638522368/5499519291097088/page/6412630948839424/image/4964528199041024" alt="" loading="lazy"></a></p>\n\n<p>Every E-Commerce platform needs users, so in the first tutorial, we are going to create and display user-profiles. We are going to first build the backend APIs using Java and Springboot, then we are going to create UI in Vue.js and android mobile app. </p>\n<h2>\n  <a name="live-demo" href="#live-demo" class="anchor">\n  </a>\n  Live Demo\n</h2>\n\n<p>You can test the API at the following swagger link. You can create and list all the users.</p>\n\n<p><a href="http://remotedevs.org:8080/api/swagger-ui.html">Link</a></p>\n<h2>\n  <a name="about-spring-framework" href="#about-spring-framework" class="anchor">\n  </a>\n  About Spring Framework\n</h2>\n\n<p>The Spring Framework is a major open-source Java/J2EE application development framework for more productive application development. It is the most popular Java framework with a 30% share of usage. The Spring Framework features enable efficient development from simple Web to complex enterprise applications.</p>\n\n<p>The main concepts that the Spring Framework depends on are:</p>\n\n<ol>\n<li>Dependency Injection (DI)</li>\n<li>Aspect-Oriented Programming (AOP)</li>\n<li>Java Persistence API (JPA)\n## Prerequisites</li>\n<li>Knowledge in Core Java</li>\n<li>Coding skills</li>\n<li>Knowledge in Servlet and JSP</li>\n<li>Java Development Kit (JDK)</li>\n<li>IntelliJ IDEA Ultimate — open-source (recommended)</li>\n<li>MySQL database — You can get it here!</li>\n<li>A good browser (Chrome — recommended)</li>\n</ol>\n\n<p>Make sure you have all the listed prerequisites software installed and have basic knowledge of the request-response cycle as well as web containers. What more? Let’s jump into the tutorial!</p>\n<h2>\n  <a name="project-setup" href="#project-setup" class="anchor">\n  </a>\n  Project Setup\n</h2>\n\n<ul>\n<li>Open Spring Tool Suite application</li>\n<li>Click File -&gt; New -&gt; Project -&gt;Spring Starter Project</li>\n<li>Give the essential data in the opened dialog box\n## Dependencies\nThe dependencies I am adding to this project are given below. You can either add them during the creation of the project itself or later search for them in the Maven repository and add the tags of the required version in the pom.xml file.</li>\n<li>Spring boot starter web</li>\n<li>Tomcat embed jasper</li>\n<li>Spring boot starter Data JPA</li>\n<li>Mysql connector java</li>\n<li>Spring boot starter test</li>\n<li>Swagger 2</li>\n<li>Swagger UI\n## Project Hierarchy\nThe hierarchy is the important thing to notice in the Spring boot Application design structure. My project hierarchy is as below.</li>\n</ul>\n\n<p><a href="/api/collection/5948990638522368/5499519291097088/page/6412630948839424/image/5498746733854720" class="article-body-image-wrapper"><img src="/api/collection/5948990638522368/5499519291097088/page/6412630948839424/image/5498746733854720" alt="" loading="lazy"></a></p>\n<h2>\n  <a name="overview-of-our-backend-application" href="#overview-of-our-backend-application" class="anchor">\n  </a>\n  Overview of our Backend Application\n</h2>\n\n<p>In this Spring Application following are important packages that you have to know before starting.</p>\n\n<p>This is the spring architecture. The outside world calls the REST Apis, which interacts with the Service. Service calls the repository. The repository interacts with the database. We follow this pattern to make the codebase maintainable, instead of having spaghetti code which can be a nightmare in long term.<a href="/api/collection/5948990638522368/5499519291097088/page/6412630948839424/image/4565464181637120" class="article-body-image-wrapper"><img src="/api/collection/5948990638522368/5499519291097088/page/6412630948839424/image/4565464181637120" alt="" loading="lazy"></a></p>\n\n<p>Let's look at first Rest controllers</p>\n<h2>\n  <a name="controller" href="#controller" class="anchor">\n  </a>\n  Controller\n</h2>\n\n\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>package com.webtutsplus.ecommerce.controller;\n\nimport java.util.List;\n\nimport javax.validation.Valid;\n\nimport com.webtutsplus.ecommerce.model.UserProfile;\nimport com.webtutsplus.ecommerce.service.UserService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport com.webtutsplus.ecommerce.common.ApiResponse;\n\n@RestController\n@RequestMapping("/user")\npublic class    UserController {\n\n    @Autowired private UserService userService;\n\n    @GetMapping("/")\n    public ResponseEntity&lt;List&lt;UserProfile&gt;&gt; getUsers() {\n        List&lt;UserProfile&gt; dtos = userService.listProfiles();\n        return new ResponseEntity&lt;List&lt;UserProfile&gt;&gt;(dtos, HttpStatus.OK);\n    }\n\n    @PostMapping("/add")\n    public ResponseEntity&lt;ApiResponse&gt; addSurvey(@RequestBody @Valid UserProfile profile) {\n        userService.addProfile(profile);\n        return new ResponseEntity&lt;&gt;(new ApiResponse(true, "Profile has been created."), HttpStatus.CREATED);\n    }   \n}\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n<p>The User Controller class provides two HTTP methods GET and Post. The Get mapping function return a complete list of Users and the Post Mapping Function saves the new user profile in the Database.</p>\n\n<p>As we can see UserControllers has a reference to UserService.</p>\n<h2>\n  <a name="service" href="#service" class="anchor">\n  </a>\n  Service\n</h2>\n\n<p>As we know the spring boot framework follows the POJO model and every controller has its own service interface, which provides the methods / Operation that is performed in the application.</p>\n\n<p>In service class, there are only two methods list Profiles and add Profiles, which provide information. We can extend or add more functionality in the future according to requirements.<br>\n</p>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>package com.webtutsplus.ecommerce.service;\n\nimport java.util.List;\n\nimport com.webtutsplus.ecommerce.model.UserProfile;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport com.webtutsplus.ecommerce.repository.UserProfileRepository;\n\n@Service\npublic class UserService {\n\n    @Autowired private UserProfileRepository userRepo;\n\n\n    public void addProfile(UserProfile userProfile) {\n        userRepo.save(userProfile);\n    }\n\n    public List&lt;UserProfile&gt; listProfiles(){\n        return userRepo.findAll();      \n    }\n\n}\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Service calls UserProfileRepository which interacts with the database in form of models. Let's have a look at UserModel.</p>\n\n<h2>\n  <a name="model" href="#model" class="anchor">\n  </a>\n  Model\n</h2>\n\n<p>The model class is a mirror of the user_profile table in the database in form of a java object. All attributes can be accessed through this class. You can also update the attribute values using the model class, which also makes changes in a database table.<br>\n</p>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>package com.webtutsplus.ecommerce.model;\n\n\nimport javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.GenerationType;\nimport javax.persistence.Id;\nimport javax.persistence.Table;\n\n\n@Entity\n@Table(name="user_profile")\npublic class UserProfile {\n\n    private long id;\n    private String username;\n    private String email;\n    private String firstName;\n    private String lastName;\n\n    public UserProfile() {}\n\n    public UserProfile(long id, String username, String email, String firstName, String lastName) {\n        super();\n        this.id = id;\n        this.username = username;\n        this.email = email;\n        this.firstName = firstName;\n        this.lastName = lastName;\n    }\n\n    @Id \n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    public long getId() {\n        return id;\n    }\n    public void setId(long id) {\n        this.id = id;\n    }\n    public String getUsername() {\n        return username;\n    }\n    public void setUsername(String username) {\n        this.username = username;\n    }\n    public String getEmail() {\n        return email;\n    }\n    public void setEmail(String email) {\n        this.email = email;\n    }\n    public String getFirstName() {\n        return firstName;\n    }\n    public void setFirstName(String firstName) {\n        this.firstName = firstName;\n    }\n    public String getLastName() {\n        return lastName;\n    }\n    public void setLastName(String lastName) {\n        this.lastName = lastName;\n    }\n\n}\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h2>\n  <a name="result" href="#result" class="anchor">\n  </a>\n  Result\n</h2>\n\n<p>After this save the file and run the application. Now you tomcat is listening on 8182 port.</p>\n\n<p>[Link] 138.68.64.95:8080/api/swagger-ui.html#/user-controller</p>\n\n<h2>\n  <a name="what-is-swagger" href="#what-is-swagger" class="anchor">\n  </a>\n  What is Swagger\n</h2>\n\n<p>Swagger is an Interface Description Language for describing RESTful APIs expressed using JSON. Swagger is used together with a set of open-source software tools to design, build, document, and use RESTful web services. Swagger includes automated documentation, code generation, and test-case generation.</p>\n\n<p>You can access the application documentation by entering the following URL in your browser.<br>\n<a href="/api/collection/5948990638522368/5499519291097088/page/6412630948839424/image/5382097586356224" class="article-body-image-wrapper"><img src="/api/collection/5948990638522368/5499519291097088/page/6412630948839424/image/5382097586356224" alt="" loading="lazy"></a></p>\n\n<p>You can edit your API information in documentation.swaggerConfig.java class and getApiInfo() method.</p>\n\n<p>Swagger is very useful on the developer side because it provides very user-friendly API information as well as provide a way to test the API.<br>\n</p>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>    private ApiInfo getApiInfo() {\n        Contact contact = new Contact("webtutsplus", "http://webtutsplus.com", "contact.webtutsplus@gmail.com");\n        return new ApiInfoBuilder()\n                .title("User Profile API")\n                .description("Documentation User profile api")\n                .version("1.0.0")\n                .license("Apache 2.0")\n                .licenseUrl("http://www.apache.org/licenses/LICENSE-2.0")\n                .contact(contact)\n                .build();\n}\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Now we are going to look at some extra classes, which play an important role too.</p>\n\n<h2>\n  <a name="common" href="#common" class="anchor">\n  </a>\n  common\n</h2>\n\n<p>In this package, there are two classes</p>\n\n<p><strong>· ApiResponse.java</strong><br>\n</p>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>package com.webtutsplus.ecommerce.common;\n\nimport java.time.LocalDateTime;\n\npublic class ApiResponse {\n    private final boolean success;\n    private final String message;\n\n    public ApiResponse(boolean success, String message) {\n        this.success = success;\n        this.message = message;\n    }\n\n    public boolean isSuccess() {\n        return success;\n    }\n\n    public String getMessage() {\n        return message;\n    }\n\n    public String getTimestamp() {\n        return LocalDateTime.now().toString();\n    }\n}\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>This class provides the status of API response. It has three methods is Success (), get Message (), get Timestamp (). The get Timestamp () method returns the Current Date and Time in String format.<br>\n<strong>PagedList.java</strong><br>\n</p>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>package com.webtutsplus.ecommerce.common;\n\nimport java.util.List;\n\npublic class PagedList&lt;T&gt; {\n    private int totalPages;\n    private long totalElements;\n    private boolean hasNext;\n    private boolean hasPrevious;\n\n    private List&lt;T&gt; data;\n\n    public int getTotalPages() {\n        return totalPages;\n    }\n    public void setTotalPages(int totalPages) {\n        this.totalPages = totalPages;\n    }\n    public long getTotalElements() {\n        return totalElements;\n    }\n    public void setTotalElements(long totalElements) {\n        this.totalElements = totalElements;\n    }\n    public boolean isHasNext() {\n        return hasNext;\n    }\n    public void setHasNext(boolean hasNext) {\n        this.hasNext = hasNext;\n    }\n    public boolean isHasPrevious() {\n        return hasPrevious;\n    }\n    public void setHasPrevious(boolean hasPrevious) {\n        this.hasPrevious = hasPrevious;\n    }\n\n    public List&lt;T&gt; getData() {\n        return data;\n    }\n    public void setData(List&lt;T&gt; data) {\n        this.data = data;\n    }\n}\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>This class contains all the information about the pages in the List data structure and provides total Pages, total Elements, has Next, has Previous attributes getter and setter.</p>\n\n<h2>\n  <a name="config" href="#config" class="anchor">\n  </a>\n  Config\n</h2>\n\n<p>In these packages, there are two sub-packages named documentation and security.</p>\n\n<p>· Documentation</p>\n\n<p>In this Package, it provides information about the product and API.</p>\n\n<p>Product API method provides information about the product and gets the Api Info method return information about Api like contact, Title, version, license.<br>\n</p>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>package com.webtutsplus.ecommerce.config.documentation;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport springfox.documentation.builders.ApiInfoBuilder;\nimport springfox.documentation.builders.PathSelectors;\nimport springfox.documentation.builders.RequestHandlerSelectors;\nimport springfox.documentation.service.ApiInfo;\nimport springfox.documentation.service.Contact;\nimport springfox.documentation.spi.DocumentationType;\nimport springfox.documentation.spring.web.plugins.Docket;\nimport springfox.documentation.swagger2.annotations.EnableSwagger2;\n\n@Configuration\n@EnableSwagger2\npublic class SwaggerConfig {\n    @Bean\n    public Docket productApi() {\n        return new Docket(DocumentationType.SWAGGER_2)\n                .apiInfo(getApiInfo())\n                .select()\n                .apis(RequestHandlerSelectors.basePackage("com.webtutsplus.ecommerce"))\n                .paths(PathSelectors.any())\n                .build();\n    }\n\n    private ApiInfo getApiInfo() {\n        Contact contact = new Contact("Umar Draz", "-", "umar.umar82@gmail.com");\n        return new ApiInfoBuilder()\n                .title("User Profile API")\n                .description("Documentation User profile api")\n                .version("1.0.0")\n                .license("Apache 2.0")\n                .licenseUrl("http://www.apache.org/licenses/LICENSE-2.0")\n                .contact(contact)\n                .build();\n    }\n}\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h2>\n  <a name="security" href="#security" class="anchor">\n  </a>\n  Security\n</h2>\n\n<p>This class is very important for applications because it provides the basic security for the whole application over HTTP or HTTPS protocol. It also implements configuration for users that which users have access to which pages or repositories.<br>\n</p>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>package com.webtutsplus.ecommerce.config.security;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.builders.WebSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n\n@Configuration\npublic class SecurityConfig extends WebSecurityConfigurerAdapter\n{\n    @Override\n    protected void configure(HttpSecurity http) throws Exception \n    {\n        http\n         .csrf().disable()\n         .authorizeRequests().anyRequest().authenticated()\n         .and()\n         .httpBasic();\n    }\n\n    @Autowired\n    public void configureGlobal(AuthenticationManagerBuilder auth) \n            throws Exception \n    {\n        auth.inMemoryAuthentication()\n            .withUser("admin")\n            .password("admin")\n            .roles("USER");\n    }\n\n    @Override\n    public void configure(WebSecurity registry) throws Exception {\n        registry.ignoring()\n        .antMatchers("/docs/**").antMatchers("/actuator/**").antMatchers("/v2/api-docs", "/configuration/ui",\n                "/swagger-resources/**", "/configuration/security", "/swagger-ui.html", "/webjars/**");\n    }\n}\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h2>\n  <a name="exception" href="#exception" class="anchor">\n  </a>\n  Exception\n</h2>\n\n<p>This class is used in case of exception in any stage of the application. It has two classes Exception handler and validation exception, which throws when there is a validation error in the application at run time.</p>\n\n<p><code>ExceptionHandlerAdvice.java</code><br>\n</p>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>package com.webtutsplus.ecommerce.exception;\n\nimport com.webtutsplus.ecommerce.common.ApiResponse;\nimport org.springframework.core.NestedExceptionUtils;\nimport org.springframework.dao.DataIntegrityViolationException;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.ControllerAdvice;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\nimport org.springframework.web.method.annotation.MethodArgumentTypeMismatchException;\n\n\n@ControllerAdvice\npublic class ExceptionHandlerAdvice {\n\n    @ExceptionHandler(DataIntegrityViolationException.class)\n    public ResponseEntity&lt;ApiResponse&gt; conflict(DataIntegrityViolationException ex){\n        String message = getMostSpecificMessage(ex);\n\n        return new ResponseEntity&lt;ApiResponse&gt;(new ApiResponse(false, message), HttpStatus.CONFLICT);\n    }\n\n//  @ExceptionHandler(AccessDeniedException.class)\n//  public ResponseEntity&lt;ApiResponse&gt; accessDenied(AccessDeniedException ex){\n//      String message = ex.getMessage();\n//      \n//      return new ResponseEntity&lt;ApiResponse&gt;(new ApiResponse(false, message), HttpStatus.FORBIDDEN);\n//  }\n\n    @ExceptionHandler(ValidationException.class)\n    public ResponseEntity&lt;ApiResponse&gt; validationException(ValidationException ex){\n        String message = ex.getMessage();\n\n        return new ResponseEntity&lt;ApiResponse&gt;(new ApiResponse(false, message), HttpStatus.UNPROCESSABLE_ENTITY);\n    }\n\n    @ExceptionHandler(MethodArgumentTypeMismatchException.class)\n    public ResponseEntity&lt;ApiResponse&gt; methodArgumentTypeMismatchException(MethodArgumentTypeMismatchException ex){\n        ex.printStackTrace();\n\n        String message = ex.getMessage();\n        return new ResponseEntity&lt;ApiResponse&gt;(new ApiResponse(false, message), HttpStatus.INTERNAL_SERVER_ERROR);\n    }\n\n    @ExceptionHandler(Exception.class)\n    public ResponseEntity&lt;ApiResponse&gt; unhandledExceptions(Exception ex){\n        String message = NestedExceptionUtils.getMostSpecificCause(ex).getMessage();\n\n        ex.printStackTrace();\n\n        return new ResponseEntity&lt;ApiResponse&gt;(new ApiResponse(false, message), HttpStatus.INTERNAL_SERVER_ERROR);\n    }\n\n    private String getMostSpecificMessage(DataIntegrityViolationException ex) {\n        String message = NestedExceptionUtils.getMostSpecificCause(ex).getMessage();\n\n        if(message.contains("Detail:")) {\n            message = message.substring(message.indexOf("Detail:")+"Detail:".length());\n        }\n\n        return message;\n    }\n}\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p><code>ValidationException.java</code><br>\n</p>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>package com.webtutsplus.ecommerce.exception;\n\npublic class ValidationException extends RuntimeException{\n    private static final long serialVersionUID = 6064663768170825752L;\n\n    public ValidationException(String message) {\n        super(message);\n    }\n\n    public ValidationException(String message, Throwable cause) {\n        super(message, cause);\n    }\n}\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p><strong>Hope you had a great session with us! Follow us for such great and awesome tutorials!</strong></p>\n\n<p>Follow the next tutorial where we will build UI in both Vue.js and Android.</p>\n\n	0	t	2021-02-18 21:37:48.640258	f	0	0	8	t	0	\N	\N	t	let-s-develop-an-e-commerce-application-from-scratch-using-java-1ik9	\N	25	Let’s Develop an E-Commerce Application From Scratch Using Java	2021-02-19 15:03:09.921071	1	0	\N	\N	\N	0	\N	\N	\N
34	f	f	f	\N	We will deploy our online code execution system in google cloud.\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/cw2i784dz1rxge87y1gm.jpg)\n\n<figcaption>Photo by Rajeshwar Bachu on Unsplash\n</figcaption>\n\n## Tutorials in this Series\n\n   * Deploy our Online Code Executor in Google Cloud (this tutorial)\n   * [Understanding the API of Judge0](https://levelup.gitconnected.com/lets-develop-an-online-code-editor-compiler-like-hackerrank-c433d8db060d)\n   * [Creating an online code editor front-end](https://medium.com/javascript-in-plain-english/lets-develop-an-online-code-editor-compiler-like-hackerrank-702881803eee) \n\n## Youtube Demo\n\nThis is what we will be creating finally\n{% youtube x5YD1yOC8_c %}\n<figcaption>Final Result</figcaption>\n\n## Introduction\n\n**Judge0** is a robust, scalable, and open-source **online code execution** system that can be used to build a wide range of applications that need online code execution features. It is used in multiple competitive programming platforms, code editors, e-learning platforms.\n\nWe will deploy judge0 in google cloud for our online code execution.\n**Step 1: Create a project in google cloud and enable billing**\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/dhc2oo7kmqbeezo8dbdo.png)\n**Step 2: Create a VM instance from Compute Engine**\nThings to Note\n\n 1. You get $300 free credits when you open the account.\n 2. you have per-second billing, which is super awesome, pay as you use.\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/w28yun7gstz6kfxydzaf.png)\n\n<figcaption>go to compute engine and VM instance</figcaption>\n\nYou can select default options and check for firewall HTTP and HTTPS for incoming traffic.\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/niqwtjwp3csbg39fqu9g.png)\n<figcaption>create VM instance</figcaption>\n**Step3: SSH to the terminal from the browser of the new VM**\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/lam6l7b75v5e18mz2dpj.png)\n<figcaption>open the terminal</figcaption>\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/wm719pmsp905r1h5pmtw.png)\n\n**Step 4: Install Docker and Docker Compose in the VM** \n\nFollow this page for detailed instructions for self-hosting of judge-0\n\n{% github judge0/judge0 %}\n\nInstall docker and docker-compose from the official page.\n\nMake sure [docker](https://medium.com/javarevisited/top-15-online-courses-to-learn-docker-kubernetes-and-aws-for-fullstack-developers-and-devops-d8cc4f16e773) is running\n\n`sudo systemctl status docker`\n\nMake docker-compose is running\n\n`docker-compose --version`\n\nDownload and extract release judge0 archive\n\n`wget https://github.com/judge0/judge0/releases/download/v1.12.0/judge0-v1.12.0.zip\nunzip judge0-v1.12.0.zip`\n\nRun all services and wait a few seconds until everything is initialized\n\n`cd judge0-v1.12.0\nsudo docker-compose up -d db redis\nsleep 10s\nsudo docker-compose up -d\nsleep 5s`\n\n## Resizing Disk space\n\nYou might get an error no space left on the device\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/67qsdmemuspwflhh2dcn.png)\n\nYou need to go to the Manage disk page, edit and increase the disk size\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/59215njxiciknyhul8n6.png)\n\nStop and start the VM again, so that resize works properly.\n\nRun the last command again\n\n`sudo docker-compose up -d`\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/b1i4fwb2k3hfcy6fx5zy.png)\n<figcaption>Docker is working</figcaption>\n\nIf everything goes well, you will see this screen.\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/8h0qh0z1jvnyluzn3sma.png)\n\nYour instance of Judge0 v1.12.0 is now available at `http://<IP ADDRESS OF YOUR SERVER>`\n\nIf you open http://34.72.83.62/dummy-client.html and execute a sample code.\n[Judge0 Dummy Client](http://34.72.83.62/dummy-client.html)\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/h6iacy5jm262ybouadif.png)\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/ewtzpk6oxg4tmri252et.png)\n\n<figcaption>Running hello world in the online judge</figcaption>\n\nWe will deep dive into the API and create front-end in upcoming tutorials\n\n## Tutorials in this Series\n\n1. Deploy our Online Code Executor in Google Cloud (this tutorial)\n2. [Understanding the API of Judge0](https://levelup.gitconnected.com/lets-develop-an-online-code-editor-compiler-like-hackerrank-c433d8db060d)\n3. [Creating an online code editor front-end](https://medium.com/javascript-in-plain-english/lets-develop-an-online-code-editor-compiler-like-hackerrank-702881803eee)\n\n\n	{"boosted_additional_tags": "", "boosted_dev_digest_email": false, "boosted_additional_articles": false}	\N	devops, onlinecompiler	--- !ruby/struct:Articles::CachedEntity\nname: nilmadhab mondal\nusername: nilmadhab\nslug: nilmadhab\nprofile_image_90: "/uploads/user/profile_image/1/d9b0e3b7-ad59-45d5-b516-4e8ffd0a6958.jpeg"\nprofile_image_url: "/uploads/user/profile_image/1/d9b0e3b7-ad59-45d5-b516-4e8ffd0a6958.jpeg"\n	nilmadhab mondal	nilmadhab	\N	{}	\N	0	\N	0	2021-02-17 21:38:30.888144	\N	We will deploy our online code execution system in google cloud.  Photo by Rajeshwar Bachu on Unsplas...	2021-02-18 08:12:14.16959	t	5	5	\N	f	1613597973	\N	354003	en	\N	2021-02-17 21:39:33.128849	\N	/i/k8ajv0oli9s76j6o7cpw.png	#dddddd	4	0	0	0	\N	\N	5	c8fe02d09f4dc49de7b63632f8b9899943d0c4c27d67273fb2e41449c436ad4f0a0db61f197ca2949f9ddc7ac20410c235d82892b4d5e04e32dbdec3	/nilmadhab/let-s-deploy-our-online-code-executor-in-google-cloud-3o32	0	0	0	<figure><p>We will deploy our online code execution system in google cloud.<br>\n<a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--QuS5HQ7d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cw2i784dz1rxge87y1gm.jpg" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--QuS5HQ7d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cw2i784dz1rxge87y1gm.jpg" alt="Alt Text" loading="lazy"></a></p>\n<figcaption>Photo by Rajeshwar Bachu on Unsplash\n</figcaption></figure>\n\n\n<h2>\n  <a name="tutorials-in-this-series" href="#tutorials-in-this-series" class="anchor">\n  </a>\n  Tutorials in this Series\n</h2>\n\n<ul>\n<li>Deploy our Online Code Executor in Google Cloud (this tutorial)</li>\n<li><a href="https://levelup.gitconnected.com/lets-develop-an-online-code-editor-compiler-like-hackerrank-c433d8db060d">Understanding the API of Judge0</a></li>\n<li>\n<a href="https://medium.com/javascript-in-plain-english/lets-develop-an-online-code-editor-compiler-like-hackerrank-702881803eee">Creating an online code editor front-end</a> </li>\n</ul>\n<h2>\n  <a name="youtube-demo" href="#youtube-demo" class="anchor">\n  </a>\n  Youtube Demo\n</h2>\n\n<figure><p>This is what we will be creating finally<br>\n<iframe width="710" height="399" src="https://www.youtube.com/embed/x5YD1yOC8_c" allowfullscreen loading="lazy">\n</iframe>\n</p>\n<figcaption>Final Result</figcaption></figure>\n\n\n\n<h2>\n  <a name="introduction" href="#introduction" class="anchor">\n  </a>\n  Introduction\n</h2>\n\n<p><strong>Judge0</strong> is a robust, scalable, and open-source <strong>online code execution</strong> system that can be used to build a wide range of applications that need online code execution features. It is used in multiple competitive programming platforms, code editors, e-learning platforms.</p>\n\n<p>We will deploy judge0 in google cloud for our online code execution.<br>\n<strong>Step 1: Create a project in google cloud and enable billing</strong><br>\n<a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--5qU3pwG3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dhc2oo7kmqbeezo8dbdo.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--5qU3pwG3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dhc2oo7kmqbeezo8dbdo.png" alt="Alt Text" loading="lazy"></a><br>\n<strong>Step 2: Create a VM instance from Compute Engine</strong><br>\nThings to Note</p>\n\n<ol>\n<li>You get $300 free credits when you open the account.</li>\n<li>you have per-second billing, which is super awesome, pay as you use.</li>\n</ol>\n\n<figure><p><a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--iiCL6tLX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/w28yun7gstz6kfxydzaf.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--iiCL6tLX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/w28yun7gstz6kfxydzaf.png" alt="Alt Text" loading="lazy"></a></p>\n<figcaption>go to compute engine and VM instance</figcaption></figure>\n\n\n\n<figure><p>You can select default options and check for firewall HTTP and HTTPS for incoming traffic.<br>\n<a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--8GlWcUzg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/niqwtjwp3csbg39fqu9g.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--8GlWcUzg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/niqwtjwp3csbg39fqu9g.png" alt="Alt Text" loading="lazy"></a></p>\n<figcaption>create VM instance</figcaption></figure>\n\n\n\n<figure><p><strong>Step3: SSH to the terminal from the browser of the new VM</strong><br>\n<a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--3zHttmAB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lam6l7b75v5e18mz2dpj.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--3zHttmAB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lam6l7b75v5e18mz2dpj.png" alt="Alt Text" loading="lazy"></a></p>\n<figcaption>open the terminal</figcaption></figure>\n\n\n\n<p><a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--3r92sOWg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/wm719pmsp905r1h5pmtw.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--3r92sOWg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/wm719pmsp905r1h5pmtw.png" alt="Alt Text" loading="lazy"></a></p>\n\n<p><strong>Step 4: Install Docker and Docker Compose in the VM</strong> </p>\n\n<p>Follow this page for detailed instructions for self-hosting of judge-0</p>\n\n\n<div class="ltag-github-readme-tag">\n  <div class="readme-overview">\n    <h2>\n      <img src="/assets/github-logo.svg" alt="GitHub logo" loading="lazy">\n      <a href="https://github.com/judge0">\n        judge0\n      </a> / <a style="font-weight: 600;" href="https://github.com/judge0/judge0">\n        judge0\n      </a>\n    </h2>\n    <h3>\n      🔥 The most advanced open-source online code execution system in the world.\n    </h3>\n  </div>\n  <div class="ltag-github-body">\n    \n<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1>\nJudge0</h1>\n<p><a href="https://ce.judge0.com" rel="nofollow"><img src="https://camo.githubusercontent.com/745d46493e7dc8a15ebe10398ffbf3d457570c8c18f4b0c9cbe7ffe108f04a8b/68747470733a2f2f6d696e696f2e6a75646765302e636f6d2f7075626c69632f7765622f696d6167652e706e67" alt="Judge0 Wallpaper" data-canonical-src="https://minio.judge0.com/public/web/image.png" style="max-width:100%;"></a></p>\n<p><a href="https://raw.githubusercontent.com/judge0/judge0/master/LICENSE"><img src="https://camo.githubusercontent.com/43d6f4598350d3926cdc3ea97cf55be08705e032f92993462662de85bb5d037a/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f6a75646765302f6a75646765303f636f6c6f723d323138356430267374796c653d666c61742d737175617265" alt="License" data-canonical-src="https://img.shields.io/github/license/judge0/judge0?color=2185d0&amp;style=flat-square" style="max-width:100%;"></a>\n<a href="https://github.com/judge0/judge0/releases"><img src="https://camo.githubusercontent.com/758b7671d1d147a7dd7aa4ed42c859b0a37b333c9330534b80fab06689a61f6f/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f762f72656c656173652f6a75646765302f6a75646765303f636f6c6f723d323138356430267374796c653d666c61742d737175617265" alt="Release" data-canonical-src="https://img.shields.io/github/v/release/judge0/judge0?color=2185d0&amp;style=flat-square" style="max-width:100%;"></a>\n<a href="https://github.com/judge0/judge0/stargazers"><img src="https://camo.githubusercontent.com/82eb15181ac09025fc5eaa96658c8009dba70ca8d0dd5056882dcf9062439cbd/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f6a75646765302f6a75646765303f636f6c6f723d323138356430267374796c653d666c61742d737175617265" alt="Stars" data-canonical-src="https://img.shields.io/github/stars/judge0/judge0?color=2185d0&amp;style=flat-square" style="max-width:100%;"></a></p>\n<p><a href="https://www.producthunt.com/posts/judge0-ide" rel="nofollow"><img src="https://camo.githubusercontent.com/a643eec0db461954e24f91f630f4ab3411f15bc517794d26f379114d30fbb719/68747470733a2f2f6170692e70726f6475637468756e742e636f6d2f776964676574732f656d6265642d696d6167652f76312f66656174757265642e7376673f706f73745f69643d313739383835267468656d653d6c69676874" alt="" height="43px" data-canonical-src="https://api.producthunt.com/widgets/embed-image/v1/featured.svg?post_id=179885&amp;theme=light" style="max-width:100%;"></a>\n<a href="https://patreon.com/hermanzdosilovic" rel="nofollow"><img src="https://camo.githubusercontent.com/ca317983c1ee436cd8c1157c5d2769c641372ee441af705dc0a32e3654fcbc9f/68747470733a2f2f63352e70617472656f6e2e636f6d2f65787465726e616c2f6c6f676f2f6265636f6d655f615f706174726f6e5f627574746f6e4032782e706e67" alt="" height="43px" data-canonical-src="https://c5.patreon.com/external/logo/become_a_patron_button@2x.png" style="max-width:100%;"></a>\n<a href="https://paypal.me/hermanzdosilovic" rel="nofollow"><img src="https://camo.githubusercontent.com/361950b331ef676b7eec436a4dbe5a7ce47211a6623dcc889b1f5b7b611b27df/68747470733a2f2f7777772e70617970616c6f626a656374732e636f6d2f656e5f55532f692f62746e2f62746e5f646f6e61746543435f4c472e676966" alt="Donate with PayPal" height="43px" data-canonical-src="https://www.paypalobjects.com/en_US/i/btn/btn_donateCC_LG.gif" style="max-width:100%;"></a></p>\n<p><g-emoji class="g-emoji" alias="fire" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f525.png">🔥</g-emoji> The most advanced open-source online code execution system in the world.</p>\n<h2>\nTable of Contents</h2>\n<ul>\n<li><a href="https://raw.githubusercontent.com/judge0/judge0/master/#about">About</a></li>\n<li><a href="https://raw.githubusercontent.com/judge0/judge0/master/#features">Features</a></li>\n<li><a href="https://raw.githubusercontent.com/judge0/judge0/master/#get-started">Get Started</a></li>\n<li><a href="https://raw.githubusercontent.com/judge0/judge0/master/#flavors">Flavors</a></li>\n<li><a href="https://raw.githubusercontent.com/judge0/judge0/master/#supported-languages">Supported Languages</a></li>\n<li><a href="https://raw.githubusercontent.com/judge0/judge0/master/#references">References</a></li>\n<li><a href="https://raw.githubusercontent.com/judge0/judge0/master/#community">Community</a></li>\n<li><a href="https://raw.githubusercontent.com/judge0/judge0/master/#author-and-contributors">Author and Contributors</a></li>\n<li><a href="https://raw.githubusercontent.com/judge0/judge0/master/#changelog">Changelog</a></li>\n<li><a href="https://raw.githubusercontent.com/judge0/judge0/master/#special-thanks">Special Thanks</a></li>\n<li><a href="https://raw.githubusercontent.com/judge0/judge0/master/#supporters">Supporters</a></li>\n<li><a href="https://raw.githubusercontent.com/judge0/judge0/master/#donate">Donate</a></li>\n<li><a href="https://raw.githubusercontent.com/judge0/judge0/master/#license">License</a></li>\n</ul>\n<h2>\nAbout</h2>\n<p><a href="https://ce.judge0.com" rel="nofollow">Judge0</a> is a robust, scalable, and open-source <strong>online code execution system</strong> that can be used to build a wide range of applications that need online code execution features. Some examples include competitive programming platforms, e-learning platforms, candidate assessment and recruitment platforms, online code editors, online IDEs, and many more.</p>\n<p>In our research paper <a href="https://paper.judge0.com" rel="nofollow">Robust and Scalable Online Code Execution System</a> we present Judge0's modern modular architecture that can be easily deployed and scaled. We study its design, comment on the various challenges that arise in building such systems, and compare it with other available online code execution systems and online judge systems.</p>\n<p>To see Judge0 in action, try <a href="https://ide.judge0.com" rel="nofollow">Judge0 IDE</a> - our free and open-source…</p></article></div>\n  </div>\n  <div class="gh-btn-container"><a class="gh-btn" href="https://github.com/judge0/judge0">View on GitHub</a></div>\n</div>\n\n\n<p>Install docker and docker-compose from the official page.</p>\n\n<p>Make sure <a href="https://medium.com/javarevisited/top-15-online-courses-to-learn-docker-kubernetes-and-aws-for-fullstack-developers-and-devops-d8cc4f16e773">docker</a> is running</p>\n\n<p><code>sudo systemctl status docker</code></p>\n\n<p>Make docker-compose is running</p>\n\n<p><code>docker-compose --version</code></p>\n\n<p>Download and extract release judge0 archive</p>\n\n<p><code>wget https://github.com/judge0/judge0/releases/download/v1.12.0/judge0-v1.12.0.zip<br>\nunzip judge0-v1.12.0.zip</code></p>\n\n<p>Run all services and wait a few seconds until everything is initialized</p>\n\n<p><code>cd judge0-v1.12.0<br>\nsudo docker-compose up -d db redis<br>\nsleep 10s<br>\nsudo docker-compose up -d<br>\nsleep 5s</code></p>\n\n<h2>\n  <a name="resizing-disk-space" href="#resizing-disk-space" class="anchor">\n  </a>\n  Resizing Disk space\n</h2>\n\n<p>You might get an error no space left on the device</p>\n\n<p><a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--zU_YInMW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/67qsdmemuspwflhh2dcn.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--zU_YInMW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/67qsdmemuspwflhh2dcn.png" alt="Alt Text" loading="lazy"></a></p>\n\n<p>You need to go to the Manage disk page, edit and increase the disk size</p>\n\n<p><a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--Jh2FHHsP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/59215njxiciknyhul8n6.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--Jh2FHHsP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/59215njxiciknyhul8n6.png" alt="Alt Text" loading="lazy"></a></p>\n\n<p>Stop and start the VM again, so that resize works properly.</p>\n\n<p>Run the last command again</p>\n\n<p><code>sudo docker-compose up -d</code></p>\n\n<figure><p><a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--x9W6xaCx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/b1i4fwb2k3hfcy6fx5zy.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--x9W6xaCx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/b1i4fwb2k3hfcy6fx5zy.png" alt="Alt Text" loading="lazy"></a></p>\n<figcaption>Docker is working</figcaption></figure>\n\n\n\n<p>If everything goes well, you will see this screen.</p>\n\n<p><a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--crOVunrR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8h0qh0z1jvnyluzn3sma.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--crOVunrR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8h0qh0z1jvnyluzn3sma.png" alt="Alt Text" loading="lazy"></a></p>\n\n<p>Your instance of Judge0 v1.12.0 is now available at <code>http://&lt;IP ADDRESS OF YOUR SERVER&gt;</code></p>\n\n<p>If you open <a href="http://34.72.83.62/dummy-client.html">http://34.72.83.62/dummy-client.html</a> and execute a sample code.<br>\n<a href="http://34.72.83.62/dummy-client.html">Judge0 Dummy Client</a></p>\n\n<p><a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--HOAIXagZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/h6iacy5jm262ybouadif.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--HOAIXagZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/h6iacy5jm262ybouadif.png" alt="Alt Text" loading="lazy"></a></p>\n\n<figure><p><a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--UymJ1bfa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ewtzpk6oxg4tmri252et.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--UymJ1bfa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ewtzpk6oxg4tmri252et.png" alt="Alt Text" loading="lazy"></a></p>\n<figcaption>Running hello world in the online judge</figcaption></figure>\n\n\n\n<p>We will deep dive into the API and create front-end in upcoming tutorials</p>\n\n<h2>\n  <a name="tutorials-in-this-series" href="#tutorials-in-this-series" class="anchor">\n  </a>\n  Tutorials in this Series\n</h2>\n\n<ol>\n<li>Deploy our Online Code Executor in Google Cloud (this tutorial)</li>\n<li><a href="https://levelup.gitconnected.com/lets-develop-an-online-code-editor-compiler-like-hackerrank-c433d8db060d">Understanding the API of Judge0</a></li>\n<li><a href="https://medium.com/javascript-in-plain-english/lets-develop-an-online-code-editor-compiler-like-hackerrank-702881803eee">Creating an online code editor front-end</a></li>\n</ol>\n\n	0	t	2021-02-17 21:39:33.128849	f	0	0	3	t	0	\N	\N	t	let-s-deploy-our-online-code-executor-in-google-cloud-3o32	\N	25	Let’s Deploy our Online Code Executor in Google Cloud	2021-02-18 08:12:15.07823	1	0	\N	\N	\N	0	\N	\N	\N
51	f	f	f	\N	\nLeetcode 442: Find All Duplicates in an Array\n\n![](https://cdn-images-1.medium.com/max/2560/1*RX7r92Sb63OVTxLKlwc5FA.png)\n\nIn this series, I am going to solve Leetcode medium problems live with my friends, which you can see on our youtube channel, Today we will do Problem Leetcode 442: **Find All Duplicates in an Array**.\n\nA little bit about me, I have offers from **Uber** **India** and **Amazon** **India** in the past, and I am currently working for **Booking.com** in Amsterdam.\n\n## Motivation to learn algorithms\n{% medium https://medium.com/leetcode-simplified/solve-leetcode-problems-and-get-offers-from-your-dream-companies-2786415be0b7 %}\n\n## Problem Statement\n\nGiven an array of integers, 1 ≤ a[i] ≤ *n* (*n* = size of the array), some elements appear **twice** and others appear **once**.\n\nFind all the elements that appear **twice** in this array.\n\nCould you do it without extra space and in O(*n*) runtime?\n\n**Example:**\n\n    **Input:**\n    [4,3,2,7,8,2,3,1]\n\n    **Output:**\n    [2,3]\n\n## Youtube Discussion\n\n{% youtube YzVVYYNF-bs %}\n\n## **Solution**\n\nAs we are given integers from 1 to n (size of the array), we can use two nested loops and check for the occurrence of integers from 1 to n. If we find one element twice, we add it to the list. This will give us a time complexity of O(n²). But we can improve it by using a HashSet or a HashMap.\n\nIn our approach, we will use a HashSet. So once we encounter one element, we put it into the HashSet and if we find that element once again we put that element into a list. At last, we return that list.\n\n{% gist https://gist.github.com/sksaikia/8c1abe4b0a3844cb04eb59ce427e411c.js %}\n\nWith this approach, we can improve our time complexity to O(n), but our space complexity is O(n). We can further improve it.\n\nNow, as we know that our integers range from 1 to n, we can add a constant to each element we find in the list. If one element occurs twice, we will add that constant twice. So at last, we will iterate over the whole array again, and if we find an element’s value greater than twice of that constant, we got our element which occurs twice. In our case, we have used the constant as the size of the array (n).\n\n {% gist https://gist.github.com/sksaikia/437b179cf16931a1ca733b7dd297ba50.js %}\n\nThe C++ code is given below.\n\n{% gist https://gist.github.com/sksaikia/eaccd86b484e495e6b513d1152f6b8c3.js %}\n\nWith this approach, we improve our space complexity to O(1), the time complexity is also O(n) in this case.\n\nWe can also use the following code for this problem. This approach is almost similar to the above one, here we just multiply that number with -1.\n\n{% gist https://gist.github.com/sksaikia/7ce8c3daddbed1730d1dea3e6239eb3b.js %}\n\nAll the codes can be found in the following repository.\n{% github webtutsplus/LeetCode %}\n\n## Thank You for reading and Follow this publication for more LeetCode problems!😃\n[**LeetCode Simplified**\n*We are going to solve Leetcode problems live, which you can watch on our youtube channel*medium.com](https://medium.com/leetcode-simplified)\n	{"boosted_additional_tags": "", "boosted_dev_digest_email": false, "boosted_additional_articles": false}	\N	leetcode, algorithms	--- !ruby/struct:Articles::CachedEntity\nname: nilmadhab mondal\nusername: nilmadhab\nslug: nilmadhab\nprofile_image_90: "/uploads/user/profile_image/1/d9b0e3b7-ad59-45d5-b516-4e8ffd0a6958.jpeg"\nprofile_image_url: "/uploads/user/profile_image/1/d9b0e3b7-ad59-45d5-b516-4e8ffd0a6958.jpeg"\n	nilmadhab mondal	nilmadhab	\N	{}	\N	0	\N	0	2021-02-20 13:53:49.868107	\N	Leetcode 442: Find All Duplicates in an Array    In this series, I am going to solve Leetcode medium...	\N	t	5	5	\N	f	1613829229	\N	354469	en	\N	2021-02-20 13:53:49.85884	\N	/i/16xqlqgra4juuhx7jlxv.png	#dddddd	21	0	0	0	\N	\N	8	a2882344b51b3a940cd07165e91d5bada523923f0c89e91e9b4f69c69d75c9d22458e0e1b547bee490a73ccb8603a67b28b4987d89f2a09a03bfce4c	/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-find-all-duplicates-in-an-array-1cbe	0	0	0	<p>Leetcode 442: Find All Duplicates in an Array</p>\n\n<p><a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--7cwK6t3a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2560/1%2ARX7r92Sb63OVTxLKlwc5FA.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--7cwK6t3a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2560/1%2ARX7r92Sb63OVTxLKlwc5FA.png" alt="" loading="lazy"></a></p>\n\n<p>In this series, I am going to solve Leetcode medium problems live with my friends, which you can see on our youtube channel, Today we will do Problem Leetcode 442: <strong>Find All Duplicates in an Array</strong>.</p>\n\n<p>A little bit about me, I have offers from <strong>Uber</strong> <strong>India</strong> and <strong>Amazon</strong> <strong>India</strong> in the past, and I am currently working for <strong>Booking.com</strong> in Amsterdam.</p>\n\n<h2>\n  <a name="motivation-to-learn-algorithms" href="#motivation-to-learn-algorithms" class="anchor">\n  </a>\n  Motivation to learn algorithms\n</h2>\n\n\n<div class="ltag__link">\n  <a href="https://medium.com/leetcode-simplified/solve-leetcode-problems-and-get-offers-from-your-dream-companies-2786415be0b7" class="ltag__link__link">\n    <div class="ltag__link__pic">\n      <img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--tLzMBohE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/fit/c/96/96/1%2AhNjwft_dNBxvTr6g6TOVGg.jpeg" alt="Nil Madhab" loading="lazy">\n    </div>\n  </a>\n  <a href="https://medium.com/leetcode-simplified/solve-leetcode-problems-and-get-offers-from-your-dream-companies-2786415be0b7" class="ltag__link__link">\n    <div class="ltag__link__content">\n      <h2>Solve Leetcode Problems and Get Offers From Your Dream Companies | by Nil Madhab | LeetCode Simplified | Jan, 2021 | Medium</h2>\n      <h3>Nil Madhab ・ <time datetime="2021-02-06T16:44:52.884Z">Feb 6, 2021</time> ・ 3 min read\n      <div class="ltag__link__servicename">\n        <img src="/assets/medium_icon.svg" alt="Medium Logo" aria-label="Medium Logo" loading="lazy">\n        Medium\n      </div>\n    </h3>\n</div>\n  </a>\n</div>\n\n\n<h2>\n  <a name="problem-statement" href="#problem-statement" class="anchor">\n  </a>\n  Problem Statement\n</h2>\n\n<p>Given an array of integers, 1 ≤ a[i] ≤ <em>n</em> (<em>n</em> = size of the array), some elements appear <strong>twice</strong> and others appear <strong>once</strong>.</p>\n\n<p>Find all the elements that appear <strong>twice</strong> in this array.</p>\n\n<p>Could you do it without extra space and in O(<em>n</em>) runtime?</p>\n\n<p><strong>Example:</strong></p>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>**Input:**\n[4,3,2,7,8,2,3,1]\n\n**Output:**\n[2,3]\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n<h2>\n  <a name="youtube-discussion" href="#youtube-discussion" class="anchor">\n  </a>\n  Youtube Discussion\n</h2>\n\n<p><iframe width="710" height="399" src="https://www.youtube.com/embed/YzVVYYNF-bs" allowfullscreen loading="lazy">\n</iframe>\n</p>\n<h2>\n  <a name="solution" href="#solution" class="anchor">\n  </a>\n  <strong>Solution</strong>\n</h2>\n\n<p>As we are given integers from 1 to n (size of the array), we can use two nested loops and check for the occurrence of integers from 1 to n. If we find one element twice, we add it to the list. This will give us a time complexity of O(n²). But we can improve it by using a HashSet or a HashMap.</p>\n\n<p>In our approach, we will use a HashSet. So once we encounter one element, we put it into the HashSet and if we find that element once again we put that element into a list. At last, we return that list.</p>\n\n\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/sksaikia/8c1abe4b0a3844cb04eb59ce427e411c.js"></script>\n</div>\n\n\n\n<p>With this approach, we can improve our time complexity to O(n), but our space complexity is O(n). We can further improve it.</p>\n\n<p>Now, as we know that our integers range from 1 to n, we can add a constant to each element we find in the list. If one element occurs twice, we will add that constant twice. So at last, we will iterate over the whole array again, and if we find an element’s value greater than twice of that constant, we got our element which occurs twice. In our case, we have used the constant as the size of the array (n).</p>\n\n\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/sksaikia/437b179cf16931a1ca733b7dd297ba50.js"></script>\n</div>\n\n\n<p>The C++ code is given below.</p>\n\n\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/sksaikia/eaccd86b484e495e6b513d1152f6b8c3.js"></script>\n</div>\n\n\n<p>With this approach, we improve our space complexity to O(1), the time complexity is also O(n) in this case.</p>\n\n<p>We can also use the following code for this problem. This approach is almost similar to the above one, here we just multiply that number with -1.</p>\n\n\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/sksaikia/7ce8c3daddbed1730d1dea3e6239eb3b.js"></script>\n</div>\n\n\n<p>All the codes can be found in the following repository.<br>\n</p>\n<div class="ltag-github-readme-tag">\n  <div class="readme-overview">\n    <h2>\n      <img src="/assets/github-logo.svg" alt="GitHub logo" loading="lazy">\n      <a href="https://github.com/webtutsplus">\n        webtutsplus\n      </a> / <a style="font-weight: 600;" href="https://github.com/webtutsplus/LeetCode">\n        LeetCode\n      </a>\n    </h2>\n    <h3>\n      \n    </h3>\n  </div>\n</div>\n\n\n<h2>\n  <a name="thank-you-for-reading-and-follow-this-publication-for-more-leetcode-problems" href="#thank-you-for-reading-and-follow-this-publication-for-more-leetcode-problems" class="anchor">\n  </a>\n  Thank You for reading and Follow this publication for more LeetCode problems!😃\n</h2>\n\n<p><a href="https://medium.com/leetcode-simplified"><strong>LeetCode Simplified</strong><br>\n*We are going to solve Leetcode problems live, which you can watch on our youtube channel*medium.com</a></p>\n\n	0	t	2021-02-20 13:53:49.85884	f	0	0	2	t	0	\N	\N	t	solve-leetcode-problems-and-get-offers-from-your-dream-companies-find-all-duplicates-in-an-array-1cbe	\N	25	Solve Leetcode Problems and Get Offers From Your Dream Companies | Find All Duplicates in an Array	2021-02-20 13:53:49.868107	1	0	\N	\N	\N	0	\N	\N	\N
36	f	f	f	\N	Question number 22. Generate Parentheses\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/i83o2wl8riy6uk9ndtt2.png)\nIn this series, I am going to solve Leetcode medium problems live with my friends, which you can see on our youtube channel, Today we will do Problem Problem 22. Generate Parentheses.\n\nA little bit about me, I have offers from Uber India and Amazon India in the past, and I am currently working for Booking.com in Amsterdam.\n\n## Motivation to learn algorithms\n{% medium https://medium.com/leetcode-simplified/solve-leetcode-problems-and-get-offers-from-your-dream-companies-2786415be0b7 %}\n\n## Problem Statement:\n\nGiven n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.\n\n**Example 1:**\n\n`Input: n = 3\nOutput: ["((()))","(()())","(())()","()(())","()()()"]`\n\n**Example 2:**\n\n`Input: n = 1\nOutput: ["()"]`\n\n**Constraints:**\n\n* 1 <= n <= 8\n\n## Youtube Discussion\n\n{% youtube zbUaPatPpvU %}\n\n## Solution\n\nThis is a backtracking problem. We have to generate all valid combinations of parentheses. First, we must identify what are the characteristics of a valid string. Their length should be 2*n, where n is the given number. Also, the order of the parenthesis is also important. We can only put opening parenthesis first and the no of opening and closing parenthesis should be same. Therefore we need to keep track of opening and closing parenthesis too.\n\nTherefore at first, we called the solve method with left and right value as 0 and empty string. We add an opening string to the string and call this method again with modified parameters. If it is not possible to add an opening parenthesis, we add one closing parenthesis and backtrack again. When we find the length of the string as 2*n we add that string to our global list. This can be understood with the dry run given in the code.\n\nThe following is the Java code for this problem.\n\n{% gist https://gist.github.com/sksaikia/b1e230841ba5bca299aab2803339354f.js %}\n\nThe C++ code is given below.\n\n{% gist https://gist.github.com/sksaikia/21a731a0dbebb14abc834a840c4af7a4.js %}\nThe code can be found in this repository.\n\n{% github webtutsplus/Leetcode %}\n\n**Sign up for Leetcode Simplified**\nBy LeetCode Simplified\n\nGet latest leetcode solution with youtube breakdown [Take a look](https://medium.com/leetcode-simplified/newsletters/leetcode-simplified?source=newsletter_v3_promo--------------------------newsletter_v3_promo-----------)\nYou're an editor of Leetcode Simplified\n\n\n\n\n	{"boosted_additional_tags": "", "boosted_dev_digest_email": false, "boosted_additional_articles": false}	\N	algorithms, leetcode, programming, career	--- !ruby/struct:Articles::CachedEntity\nname: nilmadhab mondal\nusername: nilmadhab\nslug: nilmadhab\nprofile_image_90: "/uploads/user/profile_image/1/d9b0e3b7-ad59-45d5-b516-4e8ffd0a6958.jpeg"\nprofile_image_url: "/uploads/user/profile_image/1/d9b0e3b7-ad59-45d5-b516-4e8ffd0a6958.jpeg"\n	nilmadhab mondal	nilmadhab	\N	{}	\N	0	\N	0	2021-02-17 21:46:22.330492	\N	Question number 22. Generate Parentheses  In this series, I am going to solve Leetcode medium problem...	2021-02-20 13:27:59.346985	t	5	5	\N	f	1613598382	\N	352099	en	\N	2021-02-17 21:46:22.32165	\N	/i/5pwygxaydh1m51csv08n.png	#dddddd	6	0	0	0	\N	\N	6	be5a15aa337d346f628b11208e46a1d67a130847b2516f56dec7f8d2c1c8746c12464a0e5ce95d949ccbad10d41d7d717aaa63e3240da68a9b269a67	/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-generate-parentheses-hmd	0	0	0	<p>Question number 22. Generate Parentheses<br>\n<a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--M-EKOAty--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/i83o2wl8riy6uk9ndtt2.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--M-EKOAty--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/i83o2wl8riy6uk9ndtt2.png" alt="Alt Text" loading="lazy"></a><br>\nIn this series, I am going to solve Leetcode medium problems live with my friends, which you can see on our youtube channel, Today we will do Problem Problem 22. Generate Parentheses.</p>\n\n<p>A little bit about me, I have offers from Uber India and Amazon India in the past, and I am currently working for Booking.com in Amsterdam.</p>\n<h2>\n  <a name="motivation-to-learn-algorithms" href="#motivation-to-learn-algorithms" class="anchor">\n  </a>\n  Motivation to learn algorithms\n</h2>\n\n\n<div class="ltag__link">\n  <a href="https://medium.com/leetcode-simplified/solve-leetcode-problems-and-get-offers-from-your-dream-companies-2786415be0b7" class="ltag__link__link">\n    <div class="ltag__link__pic">\n      <img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--tLzMBohE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/fit/c/96/96/1%2AhNjwft_dNBxvTr6g6TOVGg.jpeg" alt="Nil Madhab" loading="lazy">\n    </div>\n  </a>\n  <a href="https://medium.com/leetcode-simplified/solve-leetcode-problems-and-get-offers-from-your-dream-companies-2786415be0b7" class="ltag__link__link">\n    <div class="ltag__link__content">\n      <h2>Solve Leetcode Problems and Get Offers From Your Dream Companies | by Nil Madhab | LeetCode Simplified | Jan, 2021 | Medium</h2>\n      <h3>Nil Madhab ・ <time datetime="2021-02-06T16:44:52.884Z">Feb 6, 2021</time> ・ 3 min read\n      <div class="ltag__link__servicename">\n        <img src="/assets/medium_icon.svg" alt="Medium Logo" aria-label="Medium Logo" loading="lazy">\n        Medium\n      </div>\n    </h3>\n</div>\n  </a>\n</div>\n\n\n<h2>\n  <a name="problem-statement" href="#problem-statement" class="anchor">\n  </a>\n  Problem Statement:\n</h2>\n\n<p>Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.</p>\n\n<p><strong>Example 1:</strong></p>\n\n<p><code>Input: n = 3<br>\nOutput: ["((()))","(()())","(())()","()(())","()()()"]</code></p>\n\n<p><strong>Example 2:</strong></p>\n\n<p><code>Input: n = 1<br>\nOutput: ["()"]</code></p>\n\n<p><strong>Constraints:</strong></p>\n\n<ul>\n<li>1 &lt;= n &lt;= 8</li>\n</ul>\n<h2>\n  <a name="youtube-discussion" href="#youtube-discussion" class="anchor">\n  </a>\n  Youtube Discussion\n</h2>\n\n<p><iframe width="710" height="399" src="https://www.youtube.com/embed/zbUaPatPpvU" allowfullscreen loading="lazy">\n</iframe>\n</p>\n\n<h2>\n  <a name="solution" href="#solution" class="anchor">\n  </a>\n  Solution\n</h2>\n\n<p>This is a backtracking problem. We have to generate all valid combinations of parentheses. First, we must identify what are the characteristics of a valid string. Their length should be 2*n, where n is the given number. Also, the order of the parenthesis is also important. We can only put opening parenthesis first and the no of opening and closing parenthesis should be same. Therefore we need to keep track of opening and closing parenthesis too.</p>\n\n<p>Therefore at first, we called the solve method with left and right value as 0 and empty string. We add an opening string to the string and call this method again with modified parameters. If it is not possible to add an opening parenthesis, we add one closing parenthesis and backtrack again. When we find the length of the string as 2*n we add that string to our global list. This can be understood with the dry run given in the code.</p>\n\n<p>The following is the Java code for this problem.</p>\n\n\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/sksaikia/b1e230841ba5bca299aab2803339354f.js"></script>\n</div>\n\n\n<p>The C++ code is given below.</p>\n\n\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/sksaikia/21a731a0dbebb14abc834a840c4af7a4.js"></script>\n</div>\n<br>\nThe code can be found in this repository.\n\n\n<div class="ltag-github-readme-tag">\n  <div class="readme-overview">\n    <h2>\n      <img src="/assets/github-logo.svg" alt="GitHub logo" loading="lazy">\n      <a href="https://github.com/webtutsplus">\n        webtutsplus\n      </a> / <a style="font-weight: 600;" href="https://github.com/webtutsplus/LeetCode">\n        LeetCode\n      </a>\n    </h2>\n    <h3>\n      \n    </h3>\n  </div>\n</div>\n\n\n<p><strong>Sign up for Leetcode Simplified</strong><br>\nBy LeetCode Simplified</p>\n\n<p>Get latest leetcode solution with youtube breakdown <a href="https://medium.com/leetcode-simplified/newsletters/leetcode-simplified?source=newsletter_v3_promo--------------------------newsletter_v3_promo-----------">Take a look</a><br>\nYou're an editor of Leetcode Simplified</p>\n\n	0	t	2021-02-17 21:46:22.32165	f	0	0	2	t	0	\N	\N	t	solve-leetcode-problems-and-get-offers-from-your-dream-companies-generate-parentheses-hmd	\N	25	Solve Leetcode Problems and Get Offers From Your Dream Companies || Generate Parentheses	2021-02-20 13:28:00.446401	1	0	\N	\N	\N	0	\N	\N	\N
37	f	f	f	\N	LeetCode 14 | Longest Common Prefix (Easy)\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/9yscc1og4e6llzg2msvg.jpg)\nIn this series, I am going to solve Leetcode medium problems live with my friend, which you can see on our youtube channel, Today we will do Problem Problem 1429. First Unique Number.\n\nA little bit about me, I have offers from Uber India and Amazon India in the past, and I am currently working for Booking.com in Amsterdam.\n## Motivation to Learn Algorithms\n{% medium https://medium.com/leetcode-simplified/solve-leetcode-problems-and-get-offers-from-your-dream-companies-2786415be0b7 %}\n## Problem Statement\n\nWrite a function to find the longest common prefix string amongst an array of strings. If there is no common prefix, return an empty string.\n### Sample Input\n\n**Example 1:**\n\n`Input: strs = ["flower","flow","flight"]\nOutput: "fl" `\n\n**Example 2:**\n\n`Input: strs = ["dog","racecar","car"]\nOutput: ""\nExplanation: There is no common prefix among the input strings.`\n\n**Constraints**\n\n* `0 <= strs.length <= 200`\n* `0 <= strs[i].length <= 200`\n* `strs[i]` consists of only lower-case English letters.\n\nYou can find the problem [here](https://leetcode.com/problems/longest-common-prefix/).\n## Let's get Started\n### What is Prefix\n\nA prefix of a [string](https://medium.com/javarevisited/top-21-string-programming-interview-questions-for-beginners-and-experienced-developers-56037048de45) is any substring that starts from the first character. The number of different prefixes of a string is equal to its length. For example, the string “flower” will have 6 different prefixes:\n\n`f\nfl\nflo\nflow\nflowe\nflower`\n\nIn the problem statement, we are given an array of strings. We have to return the longest string which occurs as a prefix in all our strings.\n**Observation**\n\nIs there any upper limit on the length of our answer string?\n\nYes. As said earlier, the number of different prefixes of a string is equal to its length. So the maximum possible length of the common prefix for a group of strings is equal to the length of the smallest string.\n\n`flower\nflow\nflowchartIn this the upper limit on LCP length is 4, and the length of answer is also 4\nAnswer = flow`\n\nRemember, the upper limit does not mean the length of our answer always!\n\n`flower\nflow\nflagIn this the upper limit on LCP length is 4, but the length of answer is 2\nAnswer = fl`\n\n**Solution**\n\nLet `minLen` be the length of the smallest string. So from our observation, we can conclude that while finding the [LCP](https://javarevisited.blogspot.com/2016/07/how-to-calculate-gcf-and-lcm-of-two-numbers-in-java-example.html#axzz6kGEVKsf7) we have to only consider the first `minLen` characters of every string.\n\nIn the beginning, we may assume that all the strings do not share any common prefix. So our `ans` variable will store an empty string. Then we will gradually expand our answer character by character. We will loop from the index `0` to `minLen-1`. If all the strings have the same character at a given index, this means this character is a part of our LCP. We will append this character to our answer. But if we find an index `i` at which all the strings do not share a common character, we will stop the process. After this, our answer string will not expand any further.\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/g0x4an0gjpd6w8ssc3f9.png)\nIn the above example, our `minLen` is 4. The character at the first two indexes are the same across all the strings, so they are part of our answer. The third character is not the same across all the strings, hence we stop our process and return the answer.\n## Code in Java:\n{% gist https://gist.github.com/ChitreshApte/ffe93650b03c640a4857d06ff15ead43.js %}\n## Code in C++:\n{% gist https://gist.github.com/ChitreshApte/8b2a3eee87f4d20aed17c9844d805910.js %}\n## Time and Space Complexity\n\nThe time complexity of our solution is O(n*m), where n is the size of `strs` array and `m` is the length of the [longest string](https://medium.com/hackernoon/50-data-structure-and-algorithms-interview-questions-for-programmers-b4b1ac61f5b0) in our array. In the worst case, we may have to check every character of all the strings. For example, we may have an array in which all the strings are equal.\n\nThe space complexity of our solution is O(1). Apart from the function argument(input) and our answer variable, we are only using some constant space that is independent of our input size.\n**Practice Makes Perfect**\n\nCan this problem be solved using a Trie data structure? Think about it.\n### Thank You for reading and Follow this publication for more Leetcode Solutions!😃\n\n\n\n	{"boosted_additional_tags": "", "boosted_dev_digest_email": false, "boosted_additional_articles": false}	\N	algorithms, programming, leetcode	--- !ruby/struct:Articles::CachedEntity\nname: nilmadhab mondal\nusername: nilmadhab\nslug: nilmadhab\nprofile_image_90: "/uploads/user/profile_image/1/d9b0e3b7-ad59-45d5-b516-4e8ffd0a6958.jpeg"\nprofile_image_url: "/uploads/user/profile_image/1/d9b0e3b7-ad59-45d5-b516-4e8ffd0a6958.jpeg"\n	nilmadhab mondal	nilmadhab	\N	{}	\N	0	\N	0	2021-02-17 21:51:43.85497	\N	LeetCode 14 | Longest Common Prefix (Easy)  In this series, I am going to solve Leetcode medium probl...	2021-02-20 13:30:57.766973	t	5	5	\N	f	1613598703	\N	352099	en	\N	2021-02-17 21:51:43.846518	\N	/i/e6qapvdfmyzyeplj3nmk.png	#dddddd	7	0	0	0	\N	\N	8	275026a96d8492ae68ded42a0090153ddf19df1f1a71201863fc36f6b32e78885c5c77588de9a25c900f698d1dca6eab8496535de75fd7b6212491d6	/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-problem-14-longest-common-prefix-easy-38gf	0	0	0	<p>LeetCode 14 | Longest Common Prefix (Easy)<br>\n<a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--MDX3UrCG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9yscc1og4e6llzg2msvg.jpg" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--MDX3UrCG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9yscc1og4e6llzg2msvg.jpg" alt="Alt Text" loading="lazy"></a><br>\nIn this series, I am going to solve Leetcode medium problems live with my friend, which you can see on our youtube channel, Today we will do Problem Problem 1429. First Unique Number.</p>\n\n<p>A little bit about me, I have offers from Uber India and Amazon India in the past, and I am currently working for Booking.com in Amsterdam.</p>\n<h2>\n  <a name="motivation-to-learn-algorithms" href="#motivation-to-learn-algorithms" class="anchor">\n  </a>\n  Motivation to Learn Algorithms\n</h2>\n\n\n<div class="ltag__link">\n  <a href="https://medium.com/leetcode-simplified/solve-leetcode-problems-and-get-offers-from-your-dream-companies-2786415be0b7" class="ltag__link__link">\n    <div class="ltag__link__pic">\n      <img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--tLzMBohE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/fit/c/96/96/1%2AhNjwft_dNBxvTr6g6TOVGg.jpeg" alt="Nil Madhab" loading="lazy">\n    </div>\n  </a>\n  <a href="https://medium.com/leetcode-simplified/solve-leetcode-problems-and-get-offers-from-your-dream-companies-2786415be0b7" class="ltag__link__link">\n    <div class="ltag__link__content">\n      <h2>Solve Leetcode Problems and Get Offers From Your Dream Companies | by Nil Madhab | LeetCode Simplified | Jan, 2021 | Medium</h2>\n      <h3>Nil Madhab ・ <time datetime="2021-02-06T16:44:52.884Z">Feb 6, 2021</time> ・ 3 min read\n      <div class="ltag__link__servicename">\n        <img src="/assets/medium_icon.svg" alt="Medium Logo" aria-label="Medium Logo" loading="lazy">\n        Medium\n      </div>\n    </h3>\n</div>\n  </a>\n</div>\n\n\n<h2>\n  <a name="problem-statement" href="#problem-statement" class="anchor">\n  </a>\n  Problem Statement\n</h2>\n\n<p>Write a function to find the longest common prefix string amongst an array of strings. If there is no common prefix, return an empty string.</p>\n\n<h3>\n  <a name="sample-input" href="#sample-input" class="anchor">\n  </a>\n  Sample Input\n</h3>\n\n<p><strong>Example 1:</strong></p>\n\n<p><code>Input: strs = ["flower","flow","flight"]<br>\nOutput: "fl"</code></p>\n\n<p><strong>Example 2:</strong></p>\n\n<p><code>Input: strs = ["dog","racecar","car"]<br>\nOutput: ""<br>\nExplanation: There is no common prefix among the input strings.</code></p>\n\n<p><strong>Constraints</strong></p>\n\n<ul>\n<li><code>0 &lt;= strs.length &lt;= 200</code></li>\n<li><code>0 &lt;= strs[i].length &lt;= 200</code></li>\n<li>\n<code>strs[i]</code> consists of only lower-case English letters.</li>\n</ul>\n\n<p>You can find the problem <a href="https://leetcode.com/problems/longest-common-prefix/">here</a>.</p>\n<h2>\n  <a name="lets-get-started" href="#lets-get-started" class="anchor">\n  </a>\n  Let's get Started\n</h2>\n<h3>\n  <a name="what-is-prefix" href="#what-is-prefix" class="anchor">\n  </a>\n  What is Prefix\n</h3>\n\n<p>A prefix of a <a href="https://medium.com/javarevisited/top-21-string-programming-interview-questions-for-beginners-and-experienced-developers-56037048de45">string</a> is any substring that starts from the first character. The number of different prefixes of a string is equal to its length. For example, the string “flower” will have 6 different prefixes:</p>\n\n<p><code>f<br>\nfl<br>\nflo<br>\nflow<br>\nflowe<br>\nflower</code></p>\n\n<p>In the problem statement, we are given an array of strings. We have to return the longest string which occurs as a prefix in all our strings.<br>\n<strong>Observation</strong></p>\n\n<p>Is there any upper limit on the length of our answer string?</p>\n\n<p>Yes. As said earlier, the number of different prefixes of a string is equal to its length. So the maximum possible length of the common prefix for a group of strings is equal to the length of the smallest string.</p>\n\n<p><code>flower<br>\nflow<br>\nflowchartIn this the upper limit on LCP length is 4, and the length of answer is also 4<br>\nAnswer = flow</code></p>\n\n<p>Remember, the upper limit does not mean the length of our answer always!</p>\n\n<p><code>flower<br>\nflow<br>\nflagIn this the upper limit on LCP length is 4, but the length of answer is 2<br>\nAnswer = fl</code></p>\n\n<p><strong>Solution</strong></p>\n\n<p>Let <code>minLen</code> be the length of the smallest string. So from our observation, we can conclude that while finding the <a href="https://javarevisited.blogspot.com/2016/07/how-to-calculate-gcf-and-lcm-of-two-numbers-in-java-example.html#axzz6kGEVKsf7">LCP</a> we have to only consider the first <code>minLen</code> characters of every string.</p>\n\n<p>In the beginning, we may assume that all the strings do not share any common prefix. So our <code>ans</code> variable will store an empty string. Then we will gradually expand our answer character by character. We will loop from the index <code>0</code> to <code>minLen-1</code>. If all the strings have the same character at a given index, this means this character is a part of our LCP. We will append this character to our answer. But if we find an index <code>i</code> at which all the strings do not share a common character, we will stop the process. After this, our answer string will not expand any further.<br>\n<a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--y95k4TJi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/g0x4an0gjpd6w8ssc3f9.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--y95k4TJi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/g0x4an0gjpd6w8ssc3f9.png" alt="Alt Text" loading="lazy"></a><br>\nIn the above example, our <code>minLen</code> is 4. The character at the first two indexes are the same across all the strings, so they are part of our answer. The third character is not the same across all the strings, hence we stop our process and return the answer.</p>\n<h2>\n  <a name="code-in-java" href="#code-in-java" class="anchor">\n  </a>\n  Code in Java:\n</h2>\n\n\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/ChitreshApte/ffe93650b03c640a4857d06ff15ead43.js"></script>\n</div>\n\n\n<h2>\n  <a name="code-in-c" href="#code-in-c" class="anchor">\n  </a>\n  Code in C++:\n</h2>\n\n\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/ChitreshApte/8b2a3eee87f4d20aed17c9844d805910.js"></script>\n</div>\n\n\n<h2>\n  <a name="time-and-space-complexity" href="#time-and-space-complexity" class="anchor">\n  </a>\n  Time and Space Complexity\n</h2>\n\n<p>The time complexity of our solution is O(n*m), where n is the size of <code>strs</code> array and <code>m</code> is the length of the <a href="https://medium.com/hackernoon/50-data-structure-and-algorithms-interview-questions-for-programmers-b4b1ac61f5b0">longest string</a> in our array. In the worst case, we may have to check every character of all the strings. For example, we may have an array in which all the strings are equal.</p>\n\n<p>The space complexity of our solution is O(1). Apart from the function argument(input) and our answer variable, we are only using some constant space that is independent of our input size.<br>\n<strong>Practice Makes Perfect</strong></p>\n\n<p>Can this problem be solved using a Trie data structure? Think about it.</p>\n\n<h3>\n  <a name="thank-you-for-reading-and-follow-this-publication-for-more-leetcode-solutions" href="#thank-you-for-reading-and-follow-this-publication-for-more-leetcode-solutions" class="anchor">\n  </a>\n  Thank You for reading and Follow this publication for more Leetcode Solutions!😃\n</h3>\n\n	0	t	2021-02-17 21:51:43.846518	f	0	0	3	t	0	\N	\N	t	solve-leetcode-problems-and-get-offers-from-your-dream-companies-problem-14-longest-common-prefix-easy-38gf	\N	25	Solve Leetcode Problems and Get Offers From Your Dream Companies | Problem 14. Longest Common Prefix (Easy)	2021-02-20 13:30:58.66999	1	0	\N	\N	\N	0	\N	\N	\N
43	f	f	f	\N	**Part 2: SignUp and SignIn for E-Commerce App**\nWe will now create the front-end of a very important feature in every e-Commerce site — **Sign In & Sign Up**, using Vue.Js\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/i95qdpk14tb5kwhpghy8.jpg)\nIn the [previous tutorial](https://medium.com/javarevisited/a-simple-user-authentication-api-made-with-spring-boot-4a7135ff1eca), we added the Sign In & Sign Up API to our Spring Boot backend. Now, let’s learn how to use this API in our front-end.\n## Live Demo\n\nYou can see the Sign In & Sign Up API (integrated with Vue.Js) live in action at the link mentioned below. You will be able to experience this feature if you click on the buttons — **Sign In OR Sign Up.**\n[Webtutsplus E-commerce APP](http://remotedevs.org:8000/Signin)\n## Backend Tutorial\n{% medium https://medium.com/javarevisited/lets-build-signup-signin-and-role-based-access-in-our-e-commerce-app-f499a4b71f48 %}\n\n## Pre-Requisites\n\n1. Knowledge about Vue.Js & Vue.Js CLI\n2. JavaScript\n3. Code Editor (like Microsoft Visual Code with Veture extension)\n4. A good browser (like Google Chrome)\n\nThis tutorial is part of our series — [Frontend with Vue.js/Javascript](https://nilmadhab.medium.com/). We will extend the code which we developed in the previous tutorials in this series. So, if you have any doubt regarding anything that we developed earlier, you can read about it in the corresponding tutorial in the series.\n{% medium https://medium.com/javarevisited/lets-develop-an-ecommerce-application-from-scratch-using-java-and-spring-6dfac6ce5a9f %}\nSince this tutorial is based on the work we have done so far, it is recommended to go through the following tutorials as well.\n{% medium https://medium.com/javascript-in-plain-english/lets-create-vue-js-frontend-for-products-in-our-e-commerce-app-14cc8c3459c8 %}\n\n{% medium https://medium.com/javascript-in-plain-english/lets-link-product-with-category-for-our-ecommerce-app-28100657a848 %}\n\n## Project Structure\n\nThe product and category pages are already developed in our e-commerce frontend using Vue.Js 3 framework. Up to now, we have the following project structure and frontend design.\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/o8qa7rv2hy1av4pnz4wb.jpg)\n\nWe will now describe the following directories:-\n\n* **public** — contains the main HTML file of our project\n* **src/assets** — stores the media files like images, logos, etc.\n* **src/components** — stores all the reusable components of our project. These components are not unique to some specific route.\n* **src/router** — contains the index.js file which keeps a record of all the routes\n* **src/views** — stores all the router components. These are the components that are rendered as per the current route.\n\nApart from this, we have some important files too\n\n * **App.vue** — it is the root component of our project\n * **main.js** — it is the starting point of our project. Here we import our root component **App.vue**, our router file **index.js** and **createApp** method. After this, we mount our root component to the DOM using the following statement:\n\n## API Design\n\nWe designed the WishList API for our backend in the previous tutorial. You can try this API using the following Swagger link.\n[Swagger UI](http://remotedevs.org:8080/api/swagger-ui.html#/wish-list-controller)\nIf you have not read the previous tutorial, do not worry. We will now describe this API so that you can feel comfortable when we use the API in our front-end.\n\nFollowing are the API end-points to\n\n1. Get a list of all the users\n2. Sign In with username and password\n3. Sign Up and create a username and password\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/k6jh74q9zzx8fvb5gb44.png)\nWe will only use the Sign In and Sign Up API for our application. Now let’s discuss the body and response of the two POST requests:-\n## POST Sign In\n\nBody:\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/bosv8556ispih5lwo4d2.png)\nRespose:\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/du5rj2li8qsvi9x8w882.png)\n* Note that the response returns a token. We must save this token to a gobal object because other API End-points like Wishlist API End-point might use this token to recognise the user.\n\n## POST Sign Up\n\nBody:\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/kwj4nbb682ksv8euiuem.png)\nRespose:\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/kwj4nbb682ksv8euiuem.png)\n## Front-End Design\n\nBefore we begin to write code, it is very important that we have a very clear picture of what we are going to do. So, let’s discuss this.\n\n * We are going to create separate SignUp, SignIn, and Admin pages.\n * The admin page will be restricted to the logged in users. If someone tries to access the Admin page without logging into the system, she/he will be redirected back to the Login page.\n * To easily access Admin and Login pages, we’ll put two links in the top navigation bar.\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/tf63euqs1q08gwrzzqbu.png)\n* Also, we’ll link the Login and Signup pages with each other by placing a link at the bottom of each page.\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/usczmw4wowwlokveil3l.png)\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/usczmw4wowwlokveil3l.png)\n## Let’s Code\n\nWe will now begin to write code.\n## Let’s Create the Required Components\n\nEven if we can create Vue.js components manually, it is easy to use a component generator. We will use the package called `vue-generate-component` for generating Vue.js components. Install `vue-generate-component` package with the following command.\n\n`npm install -g vue-generate-component`\n\nAfter installing `vue-generate-component` package, generate three components for Signup, Signin, and Admin page. We’ll use `vgc` command with `-s` flag for generating Vue Single File Components (SFC).\n`\ncd src/views\nvgc -s Admin\nvgc -s Signup\nvgc -s Signin\n`\nNow, you will get three blank Vue component files under the `views` folder containing a code block similar to the following.\n{% gist https://gist.github.com/chathurabuddi/f5dacd198279458bc31eb43724ed043f.js %}\n## Make them Accessible!\n\nOnce we have created the components, you need to make them accessible by creating routes for each component. Open the `src/router/index.js` file and add the following routes under the `routes` array.\n{% gist https://gist.github.com/chathurabuddi/a7287c220c150d4dc9c25791ff7d1a51.js %}\nStart the development server by either executing the following command from the root of the project folder or clicking on the small run button in front of the `serve` command under `NPM SCRIPTS.`\n\n`npm run serve`\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/72m6mp7q9w9e6t3mln1x.png)\nNow you should be able to navigate to the components we have created in the previous step with the following URLs.\n`\n[http://localhost:8080/signin](http://localhost:8080/signin)\n[http://localhost:8080/signup](http://localhost:8080/signup)\n[http://localhost:8080/admin](http://localhost:8080/admin)\n`\n## Allow Users to Self-Register with Sign-Up Form\n\nLet’s begin with the Sign-Up form first. Now we have blank components for each page. Let’s design our sign-up page first. It will contain a form with the required fields for user signup. Modify your `Signup.vue` component as following code block.\n{% gist https://gist.github.com/chathurabuddi/f4972dcf835ba172a13d3eaa6c10ed2e.js %}\n\nSince we are using [Bootstrap](https://getbootstrap.com/) in our application, this will render with default bootstrap styles. The `required` attribute in each form element will trigger HTML5 form validations before submitting the form.\n\nNote that we have defined our data in the component and linked each form field to the corresponding data field using the `v-model` directive. The `v-model` directive is used to create two-way data binding.\n## Oh wait, What is two-way data binding?\n\n* It means that any data changes in the view elements ( like input boxes, text areas, and checkboxes) should be immediately reflected in the underlying model ( a plain JavaScript object with data fields, you can also think of it as a variable).\n* Same is true for the other way around, i.e. Any data changes in the model are immediately propagated to the matching view(s).\n* In simple words, whenever application data changes, the UI also changes and vice-versa.\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/l1kb5q97umfxckosqqab.png)\nOk, let’s get back to the tutorial. Now if we run the application and navigate to [http://localhost:8080/signup](http://localhost:8080/signup), you will see a UI similar to the following.\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/ye914rl88subv56nqm4r.png)\nNow that we have made the form, we need to submit its data to the server. To do that we have to call `/user/signup` backend API with the data filled in UI. We will call the API (i.e. submit the form) when the user clicks the “Signup” button.\n\nAfter the user clicks the sign up button, it will validate the password with the confirm-password field and if the values are equal, proceed to the API call. Once you have signed up successfully, the page will be redirected to the Home page and will display a success message.\n\nLet’s add a separate method for Calling the API. Modify the methods section under `<script>` tag as follows.\n{% gist https://gist.github.com/shivamag00/4d1f754377665368130e9825971c62ac.js %}\n\nNote the following:-\n\n* We are using `axios` library to make the API call.\n* `swal` is a function similar to `alert` function of JavaScript.\n* The `e.preventDefault()`function is called to avoid the default behavior which is submitting the form and refresh the page when the user clicks on the “Submit” button.\n\nNow we have to call this function whenever the user submits the form, either by clicking on the “Submit” button or pressing the “Enter” key. This can be done by adding `v-on:submit` directive to the form element as follows\n\n{% gist https://gist.github.com/chathurabuddi/c99693eff69e162d3548e92da071af57.js %}\n\n**You said we’ll use `v-on:submit`. Isn’t it?**\n\nYes, of course. `@submit` is a shorthand for `v-on:submit`. While v- prefix provides a visual cue for Vue.js specific attributes in our templates, it can be verbose for some frequently used directives. Therefore, Vue provides special shorthands for v-on and v-bind directives since those are the most often used directives. @ for `v-on` and : for `v-bind.`\n\nNow we can fill the form and sign-up users successfully. But as you can see `[http://remotedevs.org:8080/api/](http://remotedevs.org:8080/api/)` part of the URL is hardcoded in the component and possibly repeated the same in many other components as well. As a best practice, we will move this base URL to a common place, so that it’s easy to modify it, in case if the API host is changed in the future.\n\nSince `App.vue` component is the base component for all other components, let’s define our base URL in that file. Add the following code block to the `App.vue` component if it is not already there.\n{% gist https://gist.github.com/chathurabuddi/5c3f7f838f8415be0bb5fdb1f759f29a.js %}\nThen we can bind this value to a property of `<router-view>` element. As we mentioned in the previous tutorials, this `<router-view>` element will be replaced with the relevant components according to the router definitions. Therefore, this `baseURL` property will be available in any components which will be replaced by the router. Note that we have used `:` shorthand instead of `v-bind` which is explained previously.\n{% gist https://gist.github.com/chathurabuddi/f192b28c9b59c43fbc75dd1a7b109494.js %}\nNow we can use this property in our `Signup.vue` component. Define the `props` in `Signup.vue` component to match with the bonded value in previous step and modify the URL to use that value.\n{% gist https://gist.github.com/chathurabuddi/3c7ed13d3eafdeb8c2d7263063ad2bb3.js %}\nNow our signup page is completed. Let’s design and implement the login functionality.\n## Allow Users to Login to the Application\n\nNow that our sign up page is up and running, let’s begin implementing the login page for our app. The login page should contain two input fields for entering email and password. To create the HTML template, open `Signin.vue` component and modify it as following code block.\n{% gist https://gist.github.com/chathurabuddi/9104b2228172120dfd77125452807cb9.js %}\nNow run the application and navigate to `[thehttp://localhost:8080/signin.](http://localhost:8080/signin)` Then you will see an UI similar to the following.\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/3nzc6magp4tfe5coh88b.png)\nWe have now created the form for Sign In. Now we have to call `user/signIn` backend API with the login data when the user clicks on the “Signin” button. Modify the `method` section under `<script>` tag as follows to add a separate method for that.\n{% gist https://gist.github.com/shivamag00/657954047a9bbc4a7c160d10a64e826f.js %}\nNote:-\n\n* If you could not understand the purpose of `localStorage.setItem()` , do not worry. We will explain it later in the article.\n\nNow this `sigin` function should be called whenever the user submits the form. This can be done by adding `v-on:submit` directive to the form element as follows. Now, if you fill the form with correct login details and hit “Signin” button, you will see a success alert.\n{% gist https://gist.github.com/chathurabuddi/7c24eb5508c750f338529fe793b30161.js %}\nNow if you look at the signin API call response body, you will see that there is a unique token issued for an every successful login session. We have to use this token in subsequent calls to access secured API resources. That means we have to store this token somewhere in our application for later usage. So, here comes the use of local storage.\n## Wait, what is local storage?\n\nThere is an implementation called `localStorage` in JavaScript which allows web applications to save data in the web browser without any expiration time. That means even if you closed the browser, the data will not be deleted. `localStorage` is a map like implementation which allows saving key-value pairs.\n## Okay, let’s get back to the tutorial\n\nOnce we have received the token from the API, we will store it in the `localStorage` with `localStorage.setItem()` method. And then user should be redirected back to the previous router location. This can be done by replacing the signin success alert with the following code block.\n{% gist https://gist.github.com/chathurabuddi/738582ad80d336616e8a3b7d402d6a8b.js %}\nNow try to sign in from the UI and check the “Application” tab of the web browser developer console. You can see our token is saved to the local storage.\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/w4g1hjyl1pma4idriwt8.png)\nThe signin page is now almost completed. Let’s add one more element, a loading spinner! We will add a spinner icon which will be showed upon clicking on the “Signin” button and will be dismissed after receiving the signin response from backend server.\n\nModify the “Signin” button HTML code, `signin` method, `mounted()` function and `style` section as follows\n{% gist https://gist.github.com/chathurabuddi/25c98d4ad2c545806923911519adeb06.js %}\nThe loading spinner visibility will be set to `true` when it starts to make the backend API call. Note that we have used the `finally()` block to stop the spinner and `mounted()` method to specify the default behavior of spinner while loading the page.\n## Let’s Make a Restricted Area! — The Admin Page\n\nNow we will add an admin page and restrict it only to the logged in users. Modify your `Admin.vue` component with following code block to\n{% gist https://gist.github.com/chathurabuddi/f784a89ba5e8fd7493334545a786615c.js %}\nIn the `mounted()` function we have checked the value of `token` which is stored in the `localStorage` while signing in. Now if you try to access Admin page without signing in, you will be redirected to the signin page. The `$router.push()` command is used to navigate the user to the signin page instead of the `$router.replace()` method. This will allow the user to redirect back to the same page after logging into the system.\n## Add the Navigation Links\n\nWe have almost finished the signup and signin functionalities in our e-commerce app. Let’s add the navigation links to the navigation bar at the top of the screen. Open your `Navbar.vue` file and modify the `template` as shown below.\n{% gist https://gist.github.com/chathurabuddi/803d244fd2ccf800c63d6d5d61b938c9.js %}\nThis will add the “ADMIN” and “SIGNIN” navigation links to the top navigation bar as below.\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/j36lx3u2soue040bxten.png)\n## Let’s Add the Sign Out Feature\n\nOkay, as you can see, one important feature is still missing from our application. There should be a way to sign out after signing in. Also, The sign out link should be appear only after signing in and the sign in link should be hidden at the same time. This can be done by checking the existence of the token while rendering the Navbar.vue component.\n{% gist https://gist.github.com/chathurabuddi/6c7a29aa438156b130cba9575508b63e.js %}\nNote that we have defined a `signout()` method and bind it to the “SIGNOUT” navigation link. We are removing the `token` from `localStorage` so that user will not be signed in anymore.\n\nNow, try to sign out and sign in again. You will notice a little bug there. The “SIGNIN” link will not be replaced by the “SIGNOUT” link as soon as you signed in to the system. You have to manually refresh the page. Let’s fix this!. Open the App.vue component and modify it as following code block.\n{% gist https://gist.github.com/chathurabuddi/5fd3e05aef0142c0e5de4395060841df.js %}\nWe have added a component `key` to the navigation component and define a method called `refreshNav()` to change that key. The trick is change the component properties so that the component will be reloaded at the run time. Then use `signin()` method in the `Signin.vue` component to call this method as soon as user gets logged in as shown in the following code block.\n{% gist https://gist.github.com/chathurabuddi/a751d8a55d00d5cd4bc3db1ecdfc577b.js %}\n## Add links between Signup and Signin Pages\n\nNow let’s add links to each other in Signup and Signin pages so that the users can easily navigate between these components. To do that, modify the `template` of each page as follows.\n{% gist https://gist.github.com/chathurabuddi/05f3c220f95b838568d2c402e31f8199.js %}\n{% gist https://gist.github.com/chathurabuddi/5957d5ab68a7dc8a055c9076695cd854.js %}\nThe above code will cause the following change in the UI.\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/8yiozv8d87yf8n1bnbrd.png)\n\n## Congratulations\n\nYou have now successfully added the Wishlist feature in your Vue.Js frontend. It was a really long and challenging task. Congratulations on completing the tutorial.\n\nThe complete code can be found in this [GitHub repository](https://github.com/webtutsplus/ecommerce-vuejs/tree/master/src/views)\n\n\n\n\n	{"boosted_additional_tags": "", "boosted_dev_digest_email": false, "boosted_additional_articles": false}	\N	webdev, javascript, frontend, ecommerce	--- !ruby/struct:Articles::CachedEntity\nname: nilmadhab mondal\nusername: nilmadhab\nslug: nilmadhab\nprofile_image_90: "/uploads/user/profile_image/1/d9b0e3b7-ad59-45d5-b516-4e8ffd0a6958.jpeg"\nprofile_image_url: "/uploads/user/profile_image/1/d9b0e3b7-ad59-45d5-b516-4e8ffd0a6958.jpeg"\n	nilmadhab mondal	nilmadhab	\N	{}	\N	0	\N	0	2021-02-17 22:28:00.221888	\N	Part 2: SignUp and SignIn for E-Commerce App We will now create the front-end of a very important fea...	2021-02-18 07:58:56.777404	t	5	5	\N	f	1613600880	\N	354006	en	\N	2021-02-17 22:28:00.215202	\N	/i/840v33lggn1gjixripnk.png	#dddddd	13	0	0	0	\N	\N	3	21f737676500ca90cd7a641b7b8165d7c37a1c21f3efc6177bcf9d33e71926b119fc2c8172e5a12f8e8c49489a7537c5c9e8ee23559e6bab2612f511	/nilmadhab/creating-an-ecommerce-frontend-with-vue-js-3onh	0	0	0	<p><strong>Part 2: SignUp and SignIn for E-Commerce App</strong><br>\nWe will now create the front-end of a very important feature in every e-Commerce site — <strong>Sign In &amp; Sign Up</strong>, using Vue.Js<br>\n<a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--R-RrDXtd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/i95qdpk14tb5kwhpghy8.jpg" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--R-RrDXtd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/i95qdpk14tb5kwhpghy8.jpg" alt="Alt Text" loading="lazy"></a><br>\nIn the <a href="https://medium.com/javarevisited/a-simple-user-authentication-api-made-with-spring-boot-4a7135ff1eca">previous tutorial</a>, we added the Sign In &amp; Sign Up API to our Spring Boot backend. Now, let’s learn how to use this API in our front-end.</p>\n<h2>\n  <a name="live-demo" href="#live-demo" class="anchor">\n  </a>\n  Live Demo\n</h2>\n\n<p>You can see the Sign In &amp; Sign Up API (integrated with Vue.Js) live in action at the link mentioned below. You will be able to experience this feature if you click on the buttons — <strong>Sign In OR Sign Up.</strong><br>\n<a href="http://remotedevs.org:8000/Signin">Webtutsplus E-commerce APP</a></p>\n<h2>\n  <a name="backend-tutorial" href="#backend-tutorial" class="anchor">\n  </a>\n  Backend Tutorial\n</h2>\n\n\n<div class="ltag__link">\n  <a href="https://medium.com/javarevisited/lets-build-signup-signin-and-role-based-access-in-our-e-commerce-app-f499a4b71f48" class="ltag__link__link">\n    <div class="ltag__link__pic">\n      <img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--tLzMBohE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/fit/c/96/96/1%2AhNjwft_dNBxvTr6g6TOVGg.jpeg" alt="Nil Madhab" loading="lazy">\n    </div>\n  </a>\n  <a href="https://medium.com/javarevisited/lets-build-signup-signin-and-role-based-access-in-our-e-commerce-app-f499a4b71f48" class="ltag__link__link">\n    <div class="ltag__link__content">\n      <h2>Let’s Build Signup, SignIn, and Role-Based Access in Our E-Commerce App | by Nil Madhab | Javarevisited | Jan, 2021 | Medium</h2>\n      <h3>Nil Madhab ・ <time datetime="2021-01-18T21:08:34.886Z">Jan 18, 2021</time> ・ 8 min read\n      <div class="ltag__link__servicename">\n        <img src="/assets/medium_icon.svg" alt="Medium Logo" aria-label="Medium Logo" loading="lazy">\n        Medium\n      </div>\n    </h3>\n</div>\n  </a>\n</div>\n\n\n<h2>\n  <a name="prerequisites" href="#prerequisites" class="anchor">\n  </a>\n  Pre-Requisites\n</h2>\n\n<ol>\n<li>Knowledge about Vue.Js &amp; Vue.Js CLI</li>\n<li>JavaScript</li>\n<li>Code Editor (like Microsoft Visual Code with Veture extension)</li>\n<li>A good browser (like Google Chrome)</li>\n</ol>\n\n<p>This tutorial is part of our series — <a href="https://nilmadhab.medium.com/">Frontend with Vue.js/Javascript</a>. We will extend the code which we developed in the previous tutorials in this series. So, if you have any doubt regarding anything that we developed earlier, you can read about it in the corresponding tutorial in the series.<br>\n</p>\n<div class="ltag__link">\n  <a href="https://medium.com/javarevisited/lets-develop-an-ecommerce-application-from-scratch-using-java-and-spring-6dfac6ce5a9f" class="ltag__link__link">\n    <div class="ltag__link__pic">\n      <img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--tLzMBohE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/fit/c/96/96/1%2AhNjwft_dNBxvTr6g6TOVGg.jpeg" alt="Nil Madhab" loading="lazy">\n    </div>\n  </a>\n  <a href="https://medium.com/javarevisited/lets-develop-an-ecommerce-application-from-scratch-using-java-and-spring-6dfac6ce5a9f" class="ltag__link__link">\n    <div class="ltag__link__content">\n      <h2>Let’s Develop an E-Commerce Application From Scratch Using Java and Spring | by Nil Madhab | Javarevisited | Medium</h2>\n      <h3>Nil Madhab ・ <time datetime="2021-01-22T09:01:39.496Z">Jan 22, 2021</time> ・ 6 min read\n      <div class="ltag__link__servicename">\n        <img src="/assets/medium_icon.svg" alt="Medium Logo" aria-label="Medium Logo" loading="lazy">\n        Medium\n      </div>\n    </h3>\n</div>\n  </a>\n</div>\n<br>\nSince this tutorial is based on the work we have done so far, it is recommended to go through the following tutorials as well.<br>\n<div class="ltag__link">\n  <a href="https://medium.com/javascript-in-plain-english/lets-create-vue-js-frontend-for-products-in-our-e-commerce-app-14cc8c3459c8" class="ltag__link__link">\n    <div class="ltag__link__pic">\n      <img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--tLzMBohE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/fit/c/96/96/1%2AhNjwft_dNBxvTr6g6TOVGg.jpeg" alt="Nil Madhab" loading="lazy">\n    </div>\n  </a>\n  <a href="https://medium.com/javascript-in-plain-english/lets-create-vue-js-frontend-for-products-in-our-e-commerce-app-14cc8c3459c8" class="ltag__link__link">\n    <div class="ltag__link__content">\n      <h2>Let’s Add Products for our eCommerce App with Vue.js | by Nil Madhab | JavaScript in Plain English | Dec, 2020 | Medium</h2>\n      <h3>Nil Madhab ・ <time datetime="2021-01-12T10:25:19.100Z">Jan 12, 2021</time> ・ 10 min read\n      <div class="ltag__link__servicename">\n        <img src="/assets/medium_icon.svg" alt="Medium Logo" aria-label="Medium Logo" loading="lazy">\n        Medium\n      </div>\n    </h3>\n</div>\n  </a>\n</div>\n\n\n\n<div class="ltag__link">\n  <a href="https://medium.com/javascript-in-plain-english/lets-link-product-with-category-for-our-ecommerce-app-28100657a848" class="ltag__link__link">\n    <div class="ltag__link__pic">\n      <img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--tLzMBohE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/fit/c/96/96/1%2AhNjwft_dNBxvTr6g6TOVGg.jpeg" alt="Nil Madhab" loading="lazy">\n    </div>\n  </a>\n  <a href="https://medium.com/javascript-in-plain-english/lets-link-product-with-category-for-our-ecommerce-app-28100657a848" class="ltag__link__link">\n    <div class="ltag__link__content">\n      <h2>Let’s Link Products With Category for our E-Commerce App | by Nil Madhab | webtutsplus | Dec, 2020 | Medium</h2>\n      <h3>Nil Madhab ・ <time datetime="2021-01-02T15:57:07.738Z">Jan 2, 2021</time> ・ 10 min read\n      <div class="ltag__link__servicename">\n        <img src="/assets/medium_icon.svg" alt="Medium Logo" aria-label="Medium Logo" loading="lazy">\n        Medium\n      </div>\n    </h3>\n</div>\n  </a>\n</div>\n\n\n<h2>\n  <a name="project-structure" href="#project-structure" class="anchor">\n  </a>\n  Project Structure\n</h2>\n\n<p>The product and category pages are already developed in our e-commerce frontend using Vue.Js 3 framework. Up to now, we have the following project structure and frontend design.<br>\n<a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--ruw2aXBN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/o8qa7rv2hy1av4pnz4wb.jpg" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--ruw2aXBN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/o8qa7rv2hy1av4pnz4wb.jpg" alt="Alt Text" loading="lazy"></a></p>\n\n<p>We will now describe the following directories:-</p>\n\n<ul>\n<li>\n<strong>public</strong> — contains the main HTML file of our project</li>\n<li>\n<strong>src/assets</strong> — stores the media files like images, logos, etc.</li>\n<li>\n<strong>src/components</strong> — stores all the reusable components of our project. These components are not unique to some specific route.</li>\n<li>\n<strong>src/router</strong> — contains the index.js file which keeps a record of all the routes</li>\n<li>\n<strong>src/views</strong> — stores all the router components. These are the components that are rendered as per the current route.</li>\n</ul>\n\n<p>Apart from this, we have some important files too</p>\n\n<ul>\n<li>\n<strong>App.vue</strong> — it is the root component of our project</li>\n<li>\n<strong>main.js</strong> — it is the starting point of our project. Here we import our root component <strong>App.vue</strong>, our router file <strong>index.js</strong> and <strong>createApp</strong> method. After this, we mount our root component to the DOM using the following statement:</li>\n</ul>\n<h2>\n  <a name="api-design" href="#api-design" class="anchor">\n  </a>\n  API Design\n</h2>\n\n<p>We designed the WishList API for our backend in the previous tutorial. You can try this API using the following Swagger link.<br>\n<a href="http://remotedevs.org:8080/api/swagger-ui.html#/wish-list-controller">Swagger UI</a><br>\nIf you have not read the previous tutorial, do not worry. We will now describe this API so that you can feel comfortable when we use the API in our front-end.</p>\n\n<p>Following are the API end-points to</p>\n\n<ol>\n<li>Get a list of all the users</li>\n<li>Sign In with username and password</li>\n<li>Sign Up and create a username and password</li>\n</ol>\n\n<p><a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--cFYhaQvY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/k6jh74q9zzx8fvb5gb44.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--cFYhaQvY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/k6jh74q9zzx8fvb5gb44.png" alt="Alt Text" loading="lazy"></a><br>\nWe will only use the Sign In and Sign Up API for our application. Now let’s discuss the body and response of the two POST requests:-</p>\n<h2>\n  <a name="post-sign-in" href="#post-sign-in" class="anchor">\n  </a>\n  POST Sign In\n</h2>\n\n<p>Body:<br>\n<a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--FVrngBCk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bosv8556ispih5lwo4d2.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--FVrngBCk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bosv8556ispih5lwo4d2.png" alt="Alt Text" loading="lazy"></a><br>\nRespose:<br>\n<a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--kuZG6Py3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/du5rj2li8qsvi9x8w882.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--kuZG6Py3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/du5rj2li8qsvi9x8w882.png" alt="Alt Text" loading="lazy"></a></p>\n\n<ul>\n<li>Note that the response returns a token. We must save this token to a gobal object because other API End-points like Wishlist API End-point might use this token to recognise the user.</li>\n</ul>\n<h2>\n  <a name="post-sign-up" href="#post-sign-up" class="anchor">\n  </a>\n  POST Sign Up\n</h2>\n\n<p>Body:<br>\n<a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--kLYNoQwO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/kwj4nbb682ksv8euiuem.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--kLYNoQwO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/kwj4nbb682ksv8euiuem.png" alt="Alt Text" loading="lazy"></a><br>\nRespose:</p>\n\n<p><a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--kLYNoQwO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/kwj4nbb682ksv8euiuem.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--kLYNoQwO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/kwj4nbb682ksv8euiuem.png" alt="Alt Text" loading="lazy"></a></p>\n<h2>\n  <a name="frontend-design" href="#frontend-design" class="anchor">\n  </a>\n  Front-End Design\n</h2>\n\n<p>Before we begin to write code, it is very important that we have a very clear picture of what we are going to do. So, let’s discuss this.</p>\n\n<ul>\n<li>We are going to create separate SignUp, SignIn, and Admin pages.</li>\n<li>The admin page will be restricted to the logged in users. If someone tries to access the Admin page without logging into the system, she/he will be redirected back to the Login page.</li>\n<li>To easily access Admin and Login pages, we’ll put two links in the top navigation bar.\n<img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--WSu2vs1B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/tf63euqs1q08gwrzzqbu.png" alt="Alt Text" loading="lazy">\n\n<ul>\n<li>Also, we’ll link the Login and Signup pages with each other by placing a link at the bottom of each page.\n<img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--MgUPCsus--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/usczmw4wowwlokveil3l.png" alt="Alt Text" loading="lazy">\n</li>\n</ul>\n</li>\n</ul>\n\n<p><a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--MgUPCsus--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/usczmw4wowwlokveil3l.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--MgUPCsus--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/usczmw4wowwlokveil3l.png" alt="Alt Text" loading="lazy"></a></p>\n<h2>\n  <a name="lets-code" href="#lets-code" class="anchor">\n  </a>\n  Let’s Code\n</h2>\n\n<p>We will now begin to write code.</p>\n<h2>\n  <a name="lets-create-the-required-components" href="#lets-create-the-required-components" class="anchor">\n  </a>\n  Let’s Create the Required Components\n</h2>\n\n<p>Even if we can create Vue.js components manually, it is easy to use a component generator. We will use the package called <code>vue-generate-component</code> for generating Vue.js components. Install <code>vue-generate-component</code> package with the following command.</p>\n\n<p><code>npm install -g vue-generate-component</code></p>\n\n<p>After installing <code>vue-generate-component</code> package, generate three components for Signup, Signin, and Admin page. We’ll use <code>vgc</code> command with <code>-s</code> flag for generating Vue Single File Components (SFC).<br>\n<code><br>\ncd src/views<br>\nvgc -s Admin<br>\nvgc -s Signup<br>\nvgc -s Signin<br>\n</code><br>\nNow, you will get three blank Vue component files under the <code>views</code> folder containing a code block similar to the following.<br>\n</p>\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/chathurabuddi/f5dacd198279458bc31eb43724ed043f.js"></script>\n</div>\n\n\n<h2>\n  <a name="make-them-accessible" href="#make-them-accessible" class="anchor">\n  </a>\n  Make them Accessible!\n</h2>\n\n<p>Once we have created the components, you need to make them accessible by creating routes for each component. Open the <code>src/router/index.js</code> file and add the following routes under the <code>routes</code> array.<br>\n</p>\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/chathurabuddi/a7287c220c150d4dc9c25791ff7d1a51.js"></script>\n</div>\n<br>\nStart the development server by either executing the following command from the root of the project folder or clicking on the small run button in front of the <code>serve</code> command under <code>NPM SCRIPTS.</code>\n\n<p><code>npm run serve</code><br>\n<a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--0MH6ytuK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/72m6mp7q9w9e6t3mln1x.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--0MH6ytuK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/72m6mp7q9w9e6t3mln1x.png" alt="Alt Text" loading="lazy"></a><br>\nNow you should be able to navigate to the components we have created in the previous step with the following URLs.<br>\n<code><br>\n[http://localhost:8080/signin](http://localhost:8080/signin)<br>\n[http://localhost:8080/signup](http://localhost:8080/signup)<br>\n[http://localhost:8080/admin](http://localhost:8080/admin)<br>\n</code></p>\n<h2>\n  <a name="allow-users-to-selfregister-with-signup-form" href="#allow-users-to-selfregister-with-signup-form" class="anchor">\n  </a>\n  Allow Users to Self-Register with Sign-Up Form\n</h2>\n\n<p>Let’s begin with the Sign-Up form first. Now we have blank components for each page. Let’s design our sign-up page first. It will contain a form with the required fields for user signup. Modify your <code>Signup.vue</code> component as following code block.<br>\n</p>\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/chathurabuddi/f4972dcf835ba172a13d3eaa6c10ed2e.js"></script>\n</div>\n\n\n<p>Since we are using <a href="https://getbootstrap.com/">Bootstrap</a> in our application, this will render with default bootstrap styles. The <code>required</code> attribute in each form element will trigger HTML5 form validations before submitting the form.</p>\n\n<p>Note that we have defined our data in the component and linked each form field to the corresponding data field using the <code>v-model</code> directive. The <code>v-model</code> directive is used to create two-way data binding.</p>\n\n<h2>\n  <a name="oh-wait-what-is-twoway-data-binding" href="#oh-wait-what-is-twoway-data-binding" class="anchor">\n  </a>\n  Oh wait, What is two-way data binding?\n</h2>\n\n<ul>\n<li>It means that any data changes in the view elements ( like input boxes, text areas, and checkboxes) should be immediately reflected in the underlying model ( a plain JavaScript object with data fields, you can also think of it as a variable).</li>\n<li>Same is true for the other way around, i.e. Any data changes in the model are immediately propagated to the matching view(s).</li>\n<li>In simple words, whenever application data changes, the UI also changes and vice-versa.\n<img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--DXyi4nbb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/l1kb5q97umfxckosqqab.png" alt="Alt Text" loading="lazy">\nOk, let’s get back to the tutorial. Now if we run the application and navigate to <a href="http://localhost:8080/signup">http://localhost:8080/signup</a>, you will see a UI similar to the following.\n<img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--9UsrN1Lx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ye914rl88subv56nqm4r.png" alt="Alt Text" loading="lazy">\nNow that we have made the form, we need to submit its data to the server. To do that we have to call <code>/user/signup</code> backend API with the data filled in UI. We will call the API (i.e. submit the form) when the user clicks the “Signup” button.</li>\n</ul>\n\n<p>After the user clicks the sign up button, it will validate the password with the confirm-password field and if the values are equal, proceed to the API call. Once you have signed up successfully, the page will be redirected to the Home page and will display a success message.</p>\n\n<p>Let’s add a separate method for Calling the API. Modify the methods section under <code>&lt;script&gt;</code> tag as follows.<br>\n</p>\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/shivamag00/4d1f754377665368130e9825971c62ac.js"></script>\n</div>\n\n\n<p>Note the following:-</p>\n\n<ul>\n<li>We are using <code>axios</code> library to make the API call.</li>\n<li>\n<code>swal</code> is a function similar to <code>alert</code> function of JavaScript.</li>\n<li>The <code>e.preventDefault()</code>function is called to avoid the default behavior which is submitting the form and refresh the page when the user clicks on the “Submit” button.</li>\n</ul>\n\n<p>Now we have to call this function whenever the user submits the form, either by clicking on the “Submit” button or pressing the “Enter” key. This can be done by adding <code>v-on:submit</code> directive to the form element as follows</p>\n\n\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/chathurabuddi/c99693eff69e162d3548e92da071af57.js"></script>\n</div>\n\n\n<p><strong>You said we’ll use <code>v-on:submit</code>. Isn’t it?</strong></p>\n\n<p>Yes, of course. <code>@submit</code> is a shorthand for <code>v-on:submit</code>. While v- prefix provides a visual cue for Vue.js specific attributes in our templates, it can be verbose for some frequently used directives. Therefore, Vue provides special shorthands for v-on and v-bind directives since those are the most often used directives. @ for <code>v-on</code> and : for <code>v-bind.</code></p>\n\n<p>Now we can fill the form and sign-up users successfully. But as you can see <code>[http://remotedevs.org:8080/api/](http://remotedevs.org:8080/api/)</code> part of the URL is hardcoded in the component and possibly repeated the same in many other components as well. As a best practice, we will move this base URL to a common place, so that it’s easy to modify it, in case if the API host is changed in the future.</p>\n\n<p>Since <code>App.vue</code> component is the base component for all other components, let’s define our base URL in that file. Add the following code block to the <code>App.vue</code> component if it is not already there.<br>\n</p>\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/chathurabuddi/5c3f7f838f8415be0bb5fdb1f759f29a.js"></script>\n</div>\n<br>\nThen we can bind this value to a property of <code>&lt;router-view&gt;</code> element. As we mentioned in the previous tutorials, this <code>&lt;router-view&gt;</code> element will be replaced with the relevant components according to the router definitions. Therefore, this <code>baseURL</code> property will be available in any components which will be replaced by the router. Note that we have used <code>:</code> shorthand instead of <code>v-bind</code> which is explained previously.<br>\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/chathurabuddi/f192b28c9b59c43fbc75dd1a7b109494.js"></script>\n</div>\n<br>\nNow we can use this property in our <code>Signup.vue</code> component. Define the <code>props</code> in <code>Signup.vue</code> component to match with the bonded value in previous step and modify the URL to use that value.<br>\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/chathurabuddi/3c7ed13d3eafdeb8c2d7263063ad2bb3.js"></script>\n</div>\n<br>\nNow our signup page is completed. Let’s design and implement the login functionality.\n<h2>\n  <a name="allow-users-to-login-to-the-application" href="#allow-users-to-login-to-the-application" class="anchor">\n  </a>\n  Allow Users to Login to the Application\n</h2>\n\n<p>Now that our sign up page is up and running, let’s begin implementing the login page for our app. The login page should contain two input fields for entering email and password. To create the HTML template, open <code>Signin.vue</code> component and modify it as following code block.<br>\n</p>\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/chathurabuddi/9104b2228172120dfd77125452807cb9.js"></script>\n</div>\n<br>\nNow run the application and navigate to <code>[thehttp://localhost:8080/signin.](http://localhost:8080/signin)</code> Then you will see an UI similar to the following.<br>\n<img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--hVcoPeuF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3nzc6magp4tfe5coh88b.png" alt="Alt Text" loading="lazy"><br>\nWe have now created the form for Sign In. Now we have to call <code>user/signIn</code> backend API with the login data when the user clicks on the “Signin” button. Modify the <code>method</code> section under <code>&lt;script&gt;</code> tag as follows to add a separate method for that.<br>\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/shivamag00/657954047a9bbc4a7c160d10a64e826f.js"></script>\n</div>\n<br>\nNote:-\n\n<ul>\n<li>If you could not understand the purpose of <code>localStorage.setItem()</code> , do not worry. We will explain it later in the article.</li>\n</ul>\n\n<p>Now this <code>sigin</code> function should be called whenever the user submits the form. This can be done by adding <code>v-on:submit</code> directive to the form element as follows. Now, if you fill the form with correct login details and hit “Signin” button, you will see a success alert.<br>\n</p>\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/chathurabuddi/7c24eb5508c750f338529fe793b30161.js"></script>\n</div>\n<br>\nNow if you look at the signin API call response body, you will see that there is a unique token issued for an every successful login session. We have to use this token in subsequent calls to access secured API resources. That means we have to store this token somewhere in our application for later usage. So, here comes the use of local storage.\n<h2>\n  <a name="wait-what-is-local-storage" href="#wait-what-is-local-storage" class="anchor">\n  </a>\n  Wait, what is local storage?\n</h2>\n\n<p>There is an implementation called <code>localStorage</code> in JavaScript which allows web applications to save data in the web browser without any expiration time. That means even if you closed the browser, the data will not be deleted. <code>localStorage</code> is a map like implementation which allows saving key-value pairs.</p>\n<h2>\n  <a name="okay-lets-get-back-to-the-tutorial" href="#okay-lets-get-back-to-the-tutorial" class="anchor">\n  </a>\n  Okay, let’s get back to the tutorial\n</h2>\n\n<p>Once we have received the token from the API, we will store it in the <code>localStorage</code> with <code>localStorage.setItem()</code> method. And then user should be redirected back to the previous router location. This can be done by replacing the signin success alert with the following code block.<br>\n</p>\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/chathurabuddi/738582ad80d336616e8a3b7d402d6a8b.js"></script>\n</div>\n<br>\nNow try to sign in from the UI and check the “Application” tab of the web browser developer console. You can see our token is saved to the local storage.<br>\n<img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--c4lw0F4_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/w4g1hjyl1pma4idriwt8.png" alt="Alt Text" loading="lazy"><br>\nThe signin page is now almost completed. Let’s add one more element, a loading spinner! We will add a spinner icon which will be showed upon clicking on the “Signin” button and will be dismissed after receiving the signin response from backend server.\n\n<p>Modify the “Signin” button HTML code, <code>signin</code> method, <code>mounted()</code> function and <code>style</code> section as follows<br>\n</p>\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/chathurabuddi/25c98d4ad2c545806923911519adeb06.js"></script>\n</div>\n<br>\nThe loading spinner visibility will be set to <code>true</code> when it starts to make the backend API call. Note that we have used the <code>finally()</code> block to stop the spinner and <code>mounted()</code> method to specify the default behavior of spinner while loading the page.\n<h2>\n  <a name="lets-make-a-restricted-area-the-admin-page" href="#lets-make-a-restricted-area-the-admin-page" class="anchor">\n  </a>\n  Let’s Make a Restricted Area! — The Admin Page\n</h2>\n\n<p>Now we will add an admin page and restrict it only to the logged in users. Modify your <code>Admin.vue</code> component with following code block to<br>\n</p>\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/chathurabuddi/f784a89ba5e8fd7493334545a786615c.js"></script>\n</div>\n<br>\nIn the <code>mounted()</code> function we have checked the value of <code>token</code> which is stored in the <code>localStorage</code> while signing in. Now if you try to access Admin page without signing in, you will be redirected to the signin page. The <code>$router.push()</code> command is used to navigate the user to the signin page instead of the <code>$router.replace()</code> method. This will allow the user to redirect back to the same page after logging into the system.\n<h2>\n  <a name="add-the-navigation-links" href="#add-the-navigation-links" class="anchor">\n  </a>\n  Add the Navigation Links\n</h2>\n\n<p>We have almost finished the signup and signin functionalities in our e-commerce app. Let’s add the navigation links to the navigation bar at the top of the screen. Open your <code>Navbar.vue</code> file and modify the <code>template</code> as shown below.<br>\n</p>\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/chathurabuddi/803d244fd2ccf800c63d6d5d61b938c9.js"></script>\n</div>\n<br>\nThis will add the “ADMIN” and “SIGNIN” navigation links to the top navigation bar as below.<br>\n<img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--QP_QBLdD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/j36lx3u2soue040bxten.png" alt="Alt Text" loading="lazy">\n<h2>\n  <a name="lets-add-the-sign-out-feature" href="#lets-add-the-sign-out-feature" class="anchor">\n  </a>\n  Let’s Add the Sign Out Feature\n</h2>\n\n<p>Okay, as you can see, one important feature is still missing from our application. There should be a way to sign out after signing in. Also, The sign out link should be appear only after signing in and the sign in link should be hidden at the same time. This can be done by checking the existence of the token while rendering the Navbar.vue component.<br>\n</p>\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/chathurabuddi/6c7a29aa438156b130cba9575508b63e.js"></script>\n</div>\n<br>\nNote that we have defined a <code>signout()</code> method and bind it to the “SIGNOUT” navigation link. We are removing the <code>token</code> from <code>localStorage</code> so that user will not be signed in anymore.\n\n<p>Now, try to sign out and sign in again. You will notice a little bug there. The “SIGNIN” link will not be replaced by the “SIGNOUT” link as soon as you signed in to the system. You have to manually refresh the page. Let’s fix this!. Open the App.vue component and modify it as following code block.<br>\n</p>\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/chathurabuddi/5fd3e05aef0142c0e5de4395060841df.js"></script>\n</div>\n<br>\nWe have added a component <code>key</code> to the navigation component and define a method called <code>refreshNav()</code> to change that key. The trick is change the component properties so that the component will be reloaded at the run time. Then use <code>signin()</code> method in the <code>Signin.vue</code> component to call this method as soon as user gets logged in as shown in the following code block.<br>\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/chathurabuddi/a751d8a55d00d5cd4bc3db1ecdfc577b.js"></script>\n</div>\n\n\n<h2>\n  <a name="add-links-between-signup-and-signin-pages" href="#add-links-between-signup-and-signin-pages" class="anchor">\n  </a>\n  Add links between Signup and Signin Pages\n</h2>\n\n<p>Now let’s add links to each other in Signup and Signin pages so that the users can easily navigate between these components. To do that, modify the <code>template</code> of each page as follows.<br>\n</p>\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/chathurabuddi/05f3c220f95b838568d2c402e31f8199.js"></script>\n</div>\n<br>\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/chathurabuddi/5957d5ab68a7dc8a055c9076695cd854.js"></script>\n</div>\n<br>\nThe above code will cause the following change in the UI.<br>\n<img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--L9Lj4Dln--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8yiozv8d87yf8n1bnbrd.png" alt="Alt Text" loading="lazy">\n\n<h2>\n  <a name="congratulations" href="#congratulations" class="anchor">\n  </a>\n  Congratulations\n</h2>\n\n<p>You have now successfully added the Wishlist feature in your Vue.Js frontend. It was a really long and challenging task. Congratulations on completing the tutorial.</p>\n\n<p>The complete code can be found in this <a href="https://github.com/webtutsplus/ecommerce-vuejs/tree/master/src/views">GitHub repository</a></p>\n\n	0	t	2021-02-17 22:28:00.215202	f	0	0	12	t	0	\N	\N	t	creating-an-ecommerce-frontend-with-vue-js-3onh	\N	25	Creating an eCommerce Frontend with Vue.js	2021-02-18 07:59:02.304682	1	0	\N	\N	\N	0	\N	\N	\N
44	f	f	f	\N	We will create a back-end of a very important feature in every e-Commerce site — **Wishlist**, using Java and Spring Boot\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/ypbf2gy79b6qwegwijtn.png)\nA Wishlist is an eCommerce feature that allows shoppers to create personalized collections of products they want to buy and save them in their user account. It is a must-have feature for eCommerce applications.\nWe will first develop the back-end API using Java & Spring Boot (in this tutorial). After the API has been created, we will use that API in our Vue.Js front-end and Android front-end (in other tutorials).\n## Youtube Discussion\n{% youtube hYpp3MukGqc %}\n<figcaption>Discussion about Wishlist feature of E-commerce app</figcaption>\n## Live Demo\nYou can test the API at the following swagger link. You will find the wishlist API in `wish-list-controller` section.\n[Swagger UI](http://remotedevs.org:8080/api/swagger-ui.html#/wish-list-controller)\nYou can find the complete code at [Github.](https://github.com/webtutsplus/ecommerce-backend)\n## Pre-requisites\n 1. Knowledge of Java, [OOP](https://medium.com/javarevisited/my-favorite-courses-to-learn-object-oriented-programming-and-design-in-2019-197bab351733) & Spring Boot Framework\n 2. Java Development Kit (JDK)\n 3. [IntelliJ IDEA Ultimate](https://www.jetbrains.com/idea/download/) — open-source (Recommended)\n 4. [MySQL](https://medium.com/javarevisited/top-5-courses-to-learn-mysql-in-2020-4ffada70656f)/MariaDB Database\n 5. A good browser (Chrome — recommended)\nThis tutorial is part of our series on [Back-end Development with Java](https://nilmadhab.medium.com/). We will extend the code which we developed in the previous tutorials in this series. So, if you have any doubt regarding anything that we developed earlier, you can read about it in the corresponding tutorial in the series.\n## Project Structure\nIf you have not read the previous tutorials in the back-end series, don’t worry. This section is specifically for you. As we will use the project structure that we created in the previous tutorials, we intend to describe the structure here before we begin working on the Wishlist feature. This will help you in understanding the code in a better way.\nFollowing is the project structure:\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/aofaf0wgmu86k79wr7ad.png)\n<figcaption>Project Structure of the API</figcaption>\nWe will now describe the following directories:-\n1. `controller`— contains the controllers for various API endpoints\n2. `dto` — contains the Data Transfer Objects (DTO) for our back-end. In client-server projects, data is often structured differently. There are some details in the database that we do not want to send as a response to the API calls. So, the server stores its information in a database-friendly way. While retrieving that information from the database, it can use DTOs to filter this information and then send it to the client. Don’t worry if you could not understand DTOs. You will understand it when we implement Wishlist DTO in this tutorial.\n3. `model` — contains the data models (and entities)\n4. `repository` — contains the methods for CRUD operations in corresponding tables of the database\n5. `service` — contains the class files with `@service` annotations. These class files are used to write business logic in a different layer, separated from `@RestController` class files. [Business logic](http://en.wikipedia.org/wiki/Business_logic) or domain logic is that part of the program which **encodes the real-world business rules** that determine how data can be created, stored, and changed inside the database.\n## API Design\nBefore we begin to code, we must spend some time to think about the API design and the [database design.](https://medium.com/javarevisited/5-best-books-to-learn-sql-and-database-design-for-programmers-and-developers-1e7839df2f3e) Let’s begin with the API design.\nCurrently, we need only two API endpoints:-\n1. Adding to wishlist\n2. Getting wishlist\nAlso, we had already added the token-based authorization in our eCommerce backend. So, instead of user id, we will pass the token to every endpoint of the API. Hence, we decide to have the following endpoints.\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/8baray2ominano8zbwqh.png)\nAlso, in the body of the POST method, we will have to send the id of the product so that the given product can be added to the corresponding user’s wishlist. Hence, the body of the POST request should look like the following\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/051wyg8pkj2kjv13n48a.png)\nNow, the response of the POST request should send the list of all products in the wishlist with the necessary details. Hence, the response should look like the following\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/xh4cb58tdw464mno5q7x.png)\n## Table Design\nNow, let’s discuss the table design. We had already created the `ecommerce` database in previous tutorials. In this database, we will create a new table called `wishlist.` We will keep the design simple.\nThe database should have three columns — `id, user_id, product_id,created_date`. Here,\n* `id` is the primary key and will be auto-generated\n* `user_id` — stores userId\n* `product_id` — stores the product id\n* `created_date` — stores the data & time at which the entry was created\nThe schema of the database looks like the following:-\n{% gist https://gist.github.com/shivamag00/0c24e97fe9b9fdc2529adc6b81176f74.js %}\nIdeally, each user’s wishlist should have a particular product only once. But for simplicity, we are not considering such cases.\n## Let’s Code\nWe will now begin to write code.\n## Model (Entity)\nLet’s begin with writing the code for the Model class of each entry in the wishlist table. If you are familiar with [Spring Boot](https://medium.com/javarevisited/10-free-spring-boot-tutorials-and-courses-for-java-developers-53dfe084587e?source=collection_home---4------7-----------------------) or any other MVC framework, you would know that Model class is used to store each entry of the table. In [Spring Boot](https://medium.com/hackernoon/top-5-spring-boot-and-spring-cloud-books-for-java-developers-75df155dcedc), we use Annotations to map the columns of the table with the class members.\nTo create the model class, create a new class inside the `Model` directory. We will call this class — `WishList`.\n* We have already described the schema of the table. Using the schema, we will create the class variables of the model class representing each column of the database.\n* We will also create one class object of `Product` class. This object will store all the details of the product like name, price, description etc.\n* Also, note that the column `created_date` should be filled with the current date and time. For this, we will use the `java.util.Date` class.\nFollowing is the complete code of `WishList.java`\n{% gist https://gist.github.com/shivamag00/a73acb8c046ca36df1c3ebca8130c1be.js %}\n## Repository\nIt is time to create the `repository interface` for the `wishlist` table. Create a new file called `WishListRepository.java` inside the Repository directory.\nIf you are familiar with [Spring Boot](https://medium.com/javarevisited/10-best-java-microservices-courses-with-spring-boot-and-spring-cloud-6d04556bdfed), you would know that `Repository` the interface contains methods to fetch data from the table.\nCreating CRUD methods manually means writing a lot of boilerplate code unless you let the `JPARepository` interface carry about routine implementations for you. So, we will extend the `JPARepository` and create the interface `WishListRepository `.\n* Extending `JPARepository` will automatically create and implement methods for the basic CRUD operations.\n* We will define a method `findAllByUserIdOrderByCreatedDateDesc()` to fetch the wishlist of a user and order the list by created the date of each entry in the wishlist. The implementation of this method will be managed automatically by the `JPARepository `.\nFollowing is the complete code of `WishListRepository.java`\n{% gist https://gist.github.com/shivamag00/990ee37e1388fb30dc0478d06700bcfd.js %}\n## Service\nNow, let's implement the `Service` class to interact with the `wishlist` table. In the `WishListRepository` interface, we defined the methods to interact with the database.\nIn the `Service` class, we will call these methods and implement the so-called business logic. To keep things simple, we do not have any business logic, i.e. business constraints or rules defined. So, we will simply create two methods `createWishlist()` and `readWishlist()` . Inside these methods, we will call the methods defined in the WishListRepository interface.\nFollowing is the complete code of `WishListService.java`\n{% gist https://gist.github.com/shivamag00/48fb2efafe0333ab7f3aa747d9063dd4.js %}\n## Controller\nNow, Let’s begin with writing code for the controller. If you are familiar with [Spring Boot](https://www.java67.com/2017/11/top-5-free-core-spring-mvc-courses-learn-online.html) or any other [MVC framework](https://medium.com/javarevisited/21-spring-mvc-rest-interview-questions-answers-for-beginners-and-experienced-developers-21ad3d4c9b82), you would already know that controller defines the endpoints of the API.\nCreate a new file inside the Controller directory with the name `WishlistController.java` . Since we have two endpoints, we will create two methods in the `WishlistController` class.\n* To use the `WishListService` and `AuthenticationService` , we will create the two objects of respective types. We have already created the `WishListService` in the previous section and is used to interact with the database. We created `AuthenticationService` in a previous tutorial and is used to fetch user id of the corresponding token\n* We will create one method with `@GetMapping` for the GET request and `@PostMapping` for the POST request.\n* Now, each table entry contains the `created_date` value also. We do not want to send that with the response. So, here comes the use of DTO. Using the `getDtoFromProduct()` method of the `ProductService` Class, we will store only that information about each product which we want to send as response. Hence, we create a list of `ProductDto` object and store only the required details. We will send this list in the response.\nThe following is the complete code of `WishlistController.java`\n{% gist https://gist.github.com/shivamag00/ea72aec0be49bb1fc5e6a630241f8cbc.js %}\n## Congratulations!!!\nCongratulations, we have now added the wishlist feature to our backend.\n## Suggested PRs\nIf you wish to contribute to our eCommerce-backend, you clone this Github repository and work on the following features related to the wishlist\n* Create an API end-point for Deleting a Product from Wishlist\nAfter you have implemented the feature, send us a PR. We will review and merge it into our master branch\n## Reference\n{% medium https://medium.com/javarevisited/lets-develop-an-ecommerce-application-from-scratch-using-java-and-spring-6dfac6ce5a9f %}\n{% medium https://medium.com/javarevisited/lets-build-signup-signin-and-role-based-access-in-our-e-commerce-app-f499a4b71f48 %}\n{% medium https://medium.com/javascript-in-plain-english/lets-create-vue-js-frontend-for-products-in-our-e-commerce-app-14cc8c3459c8 %}	{"boosted_additional_tags": "", "boosted_dev_digest_email": false, "boosted_additional_articles": false}	\N	ecommerce, backend, webdev	--- !ruby/struct:Articles::CachedEntity\nname: nilmadhab mondal\nusername: nilmadhab\nslug: nilmadhab\nprofile_image_90: "/uploads/user/profile_image/1/d9b0e3b7-ad59-45d5-b516-4e8ffd0a6958.jpeg"\nprofile_image_url: "/uploads/user/profile_image/1/d9b0e3b7-ad59-45d5-b516-4e8ffd0a6958.jpeg"\n	nilmadhab mondal	nilmadhab	\N	{}	\N	0	\N	0	2021-02-18 21:27:33.205123	\N	We will create a back-end of a very important feature in every e-Commerce site — Wishlist, using Java...	2021-02-19 15:07:55.196162	t	5	5	\N	f	1613683653	\N	353809	en	\N	2021-02-18 21:27:33.190566	\N	/i/4w3i4tcz9496xyedt2s8.jpg	#dddddd	14	0	0	0	\N	\N	3	b885a3d8ba27d30788d83f21430b38cd9fdc7d68dd5538c6332c8eda4c7066583a464a325e4356de4bb42e480355339fd9c15210221ad2fb15bd4f7e	/nilmadhab/wishlist-feature-for-ecommerce-app-using-java-and-spring-boot-44oh	0	0	0	<p>We will create a back-end of a very important feature in every e-Commerce site — <strong>Wishlist</strong>, using Java and Spring Boot<br>\n<a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--WWHDcac9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ypbf2gy79b6qwegwijtn.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--WWHDcac9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ypbf2gy79b6qwegwijtn.png" alt="Alt Text" loading="lazy"></a><br>\nA Wishlist is an eCommerce feature that allows shoppers to create personalized collections of products they want to buy and save them in their user account. It is a must-have feature for eCommerce applications.<br>\nWe will first develop the back-end API using Java &amp; Spring Boot (in this tutorial). After the API has been created, we will use that API in our Vue.Js front-end and Android front-end (in other tutorials).</p>\n<h2>\n  <a name="youtube-discussion" href="#youtube-discussion" class="anchor">\n  </a>\n  Youtube Discussion\n</h2>\n\n<figure><p><iframe width="710" height="399" src="https://www.youtube.com/embed/hYpp3MukGqc" allowfullscreen loading="lazy">\n</iframe>\n</p>\n<figcaption>Discussion about Wishlist feature of E-commerce app</figcaption></figure>\n\n\n\n<h2>\n  <a name="live-demo" href="#live-demo" class="anchor">\n  </a>\n  Live Demo\n</h2>\n\n<p>You can test the API at the following swagger link. You will find the wishlist API in <code>wish-list-controller</code> section.<br>\n<a href="http://remotedevs.org:8080/api/swagger-ui.html#/wish-list-controller">Swagger UI</a><br>\nYou can find the complete code at <a href="https://github.com/webtutsplus/ecommerce-backend">Github.</a></p>\n\n<h2>\n  <a name="prerequisites" href="#prerequisites" class="anchor">\n  </a>\n  Pre-requisites\n</h2>\n\n<ol>\n<li>Knowledge of Java, <a href="https://medium.com/javarevisited/my-favorite-courses-to-learn-object-oriented-programming-and-design-in-2019-197bab351733">OOP</a> &amp; Spring Boot Framework</li>\n<li>Java Development Kit (JDK)</li>\n<li>\n<a href="https://www.jetbrains.com/idea/download/">IntelliJ IDEA Ultimate</a> — open-source (Recommended)</li>\n<li>\n<a href="https://medium.com/javarevisited/top-5-courses-to-learn-mysql-in-2020-4ffada70656f">MySQL</a>/MariaDB Database</li>\n<li>A good browser (Chrome — recommended)\nThis tutorial is part of our series on <a href="https://nilmadhab.medium.com/">Back-end Development with Java</a>. We will extend the code which we developed in the previous tutorials in this series. So, if you have any doubt regarding anything that we developed earlier, you can read about it in the corresponding tutorial in the series.\n## Project Structure\nIf you have not read the previous tutorials in the back-end series, don’t worry. This section is specifically for you. As we will use the project structure that we created in the previous tutorials, we intend to describe the structure here before we begin working on the Wishlist feature. This will help you in understanding the code in a better way.\nFollowing is the project structure:\n<figure><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--Kq0ZaCDb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/aofaf0wgmu86k79wr7ad.png" alt="Alt Text" loading="lazy"><figcaption>Project Structure of the API</figcaption></figure>\n\nWe will now describe the following directories:-\n\n<ol>\n<li>\n<code>controller</code>— contains the controllers for various API endpoints</li>\n<li>\n<code>dto</code> — contains the Data Transfer Objects (DTO) for our back-end. In client-server projects, data is often structured differently. There are some details in the database that we do not want to send as a response to the API calls. So, the server stores its information in a database-friendly way. While retrieving that information from the database, it can use DTOs to filter this information and then send it to the client. Don’t worry if you could not understand DTOs. You will understand it when we implement Wishlist DTO in this tutorial.</li>\n<li>\n<code>model</code> — contains the data models (and entities)</li>\n<li>\n<code>repository</code> — contains the methods for CRUD operations in corresponding tables of the database</li>\n<li>\n<code>service</code> — contains the class files with <code>@service</code> annotations. These class files are used to write business logic in a different layer, separated from <code>@RestController</code> class files. <a href="http://en.wikipedia.org/wiki/Business_logic">Business logic</a> or domain logic is that part of the program which <strong>encodes the real-world business rules</strong> that determine how data can be created, stored, and changed inside the database.\n## API Design\nBefore we begin to code, we must spend some time to think about the API design and the <a href="https://medium.com/javarevisited/5-best-books-to-learn-sql-and-database-design-for-programmers-and-developers-1e7839df2f3e">database design.</a> Let’s begin with the API design.\nCurrently, we need only two API endpoints:-</li>\n<li>Adding to wishlist</li>\n<li>Getting wishlist\nAlso, we had already added the token-based authorization in our eCommerce backend. So, instead of user id, we will pass the token to every endpoint of the API. Hence, we decide to have the following endpoints.\n<img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--xeim9xxZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8baray2ominano8zbwqh.png" alt="Alt Text" loading="lazy">\nAlso, in the body of the POST method, we will have to send the id of the product so that the given product can be added to the corresponding user’s wishlist. Hence, the body of the POST request should look like the following\n<img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--7fiE9F2E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/051wyg8pkj2kjv13n48a.png" alt="Alt Text" loading="lazy">\nNow, the response of the POST request should send the list of all products in the wishlist with the necessary details. Hence, the response should look like the following\n<img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--wQD8-AX5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xh4cb58tdw464mno5q7x.png" alt="Alt Text" loading="lazy">\n## Table Design\nNow, let’s discuss the table design. We had already created the <code>ecommerce</code> database in previous tutorials. In this database, we will create a new table called <code>wishlist.</code> We will keep the design simple.\nThe database should have three columns — <code>id, user_id, product_id,created_date</code>. Here,</li>\n<li>\n<code>id</code> is the primary key and will be auto-generated</li>\n<li>\n<code>user_id</code> — stores userId</li>\n<li>\n<code>product_id</code> — stores the product id</li>\n<li>\n<code>created_date</code> — stores the data &amp; time at which the entry was created\nThe schema of the database looks like the following:-\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/shivamag00/0c24e97fe9b9fdc2529adc6b81176f74.js"></script>\n</div>\n\nIdeally, each user’s wishlist should have a particular product only once. But for simplicity, we are not considering such cases.\n## Let’s Code\nWe will now begin to write code.\n## Model (Entity)\nLet’s begin with writing the code for the Model class of each entry in the wishlist table. If you are familiar with <a href="https://medium.com/javarevisited/10-free-spring-boot-tutorials-and-courses-for-java-developers-53dfe084587e?source=collection_home---4------7-----------------------">Spring Boot</a> or any other MVC framework, you would know that Model class is used to store each entry of the table. In <a href="https://medium.com/hackernoon/top-5-spring-boot-and-spring-cloud-books-for-java-developers-75df155dcedc">Spring Boot</a>, we use Annotations to map the columns of the table with the class members.\nTo create the model class, create a new class inside the <code>Model</code> directory. We will call this class — <code>WishList</code>.</li>\n<li>We have already described the schema of the table. Using the schema, we will create the class variables of the model class representing each column of the database.</li>\n<li>We will also create one class object of <code>Product</code> class. This object will store all the details of the product like name, price, description etc.</li>\n<li>Also, note that the column <code>created_date</code> should be filled with the current date and time. For this, we will use the <code>java.util.Date</code> class.\nFollowing is the complete code of <code>WishList.java</code>\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/shivamag00/a73acb8c046ca36df1c3ebca8130c1be.js"></script>\n</div>\n\n## Repository\nIt is time to create the <code>repository interface</code> for the <code>wishlist</code> table. Create a new file called <code>WishListRepository.java</code> inside the Repository directory.\nIf you are familiar with <a href="https://medium.com/javarevisited/10-best-java-microservices-courses-with-spring-boot-and-spring-cloud-6d04556bdfed">Spring Boot</a>, you would know that <code>Repository</code> the interface contains methods to fetch data from the table.\nCreating CRUD methods manually means writing a lot of boilerplate code unless you let the <code>JPARepository</code> interface carry about routine implementations for you. So, we will extend the <code>JPARepository</code> and create the interface <code>WishListRepository</code>.</li>\n<li>Extending <code>JPARepository</code> will automatically create and implement methods for the basic CRUD operations.</li>\n<li>We will define a method <code>findAllByUserIdOrderByCreatedDateDesc()</code> to fetch the wishlist of a user and order the list by created the date of each entry in the wishlist. The implementation of this method will be managed automatically by the <code>JPARepository</code>.\nFollowing is the complete code of <code>WishListRepository.java</code>\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/shivamag00/990ee37e1388fb30dc0478d06700bcfd.js"></script>\n</div>\n\n## Service\nNow, let's implement the <code>Service</code> class to interact with the <code>wishlist</code> table. In the <code>WishListRepository</code> interface, we defined the methods to interact with the database.\nIn the <code>Service</code> class, we will call these methods and implement the so-called business logic. To keep things simple, we do not have any business logic, i.e. business constraints or rules defined. So, we will simply create two methods <code>createWishlist()</code> and <code>readWishlist()</code> . Inside these methods, we will call the methods defined in the WishListRepository interface.\nFollowing is the complete code of <code>WishListService.java</code>\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/shivamag00/48fb2efafe0333ab7f3aa747d9063dd4.js"></script>\n</div>\n\n## Controller\nNow, Let’s begin with writing code for the controller. If you are familiar with <a href="https://www.java67.com/2017/11/top-5-free-core-spring-mvc-courses-learn-online.html">Spring Boot</a> or any other <a href="https://medium.com/javarevisited/21-spring-mvc-rest-interview-questions-answers-for-beginners-and-experienced-developers-21ad3d4c9b82">MVC framework</a>, you would already know that controller defines the endpoints of the API.\nCreate a new file inside the Controller directory with the name <code>WishlistController.java</code> . Since we have two endpoints, we will create two methods in the <code>WishlistController</code> class.</li>\n<li>To use the <code>WishListService</code> and <code>AuthenticationService</code> , we will create the two objects of respective types. We have already created the <code>WishListService</code> in the previous section and is used to interact with the database. We created <code>AuthenticationService</code> in a previous tutorial and is used to fetch user id of the corresponding token</li>\n<li>We will create one method with <code>@GetMapping</code> for the GET request and <code>@PostMapping</code> for the POST request.</li>\n<li>Now, each table entry contains the <code>created_date</code> value also. We do not want to send that with the response. So, here comes the use of DTO. Using the <code>getDtoFromProduct()</code> method of the <code>ProductService</code> Class, we will store only that information about each product which we want to send as response. Hence, we create a list of <code>ProductDto</code> object and store only the required details. We will send this list in the response.\nThe following is the complete code of <code>WishlistController.java</code>\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/shivamag00/ea72aec0be49bb1fc5e6a630241f8cbc.js"></script>\n</div>\n\n## Congratulations!!!\nCongratulations, we have now added the wishlist feature to our backend.\n## Suggested PRs\nIf you wish to contribute to our eCommerce-backend, you clone this Github repository and work on the following features related to the wishlist</li>\n<li>Create an API end-point for Deleting a Product from Wishlist\nAfter you have implemented the feature, send us a PR. We will review and merge it into our master branch\n## Reference\n<div class="ltag__link">\n  <a href="https://medium.com/javarevisited/lets-develop-an-ecommerce-application-from-scratch-using-java-and-spring-6dfac6ce5a9f" class="ltag__link__link">\n    <div class="ltag__link__pic">\n      <img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--tLzMBohE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/fit/c/96/96/1%2AhNjwft_dNBxvTr6g6TOVGg.jpeg" alt="Nil Madhab" loading="lazy">\n    </div>\n  </a>\n  <a href="https://medium.com/javarevisited/lets-develop-an-ecommerce-application-from-scratch-using-java-and-spring-6dfac6ce5a9f" class="ltag__link__link">\n    <div class="ltag__link__content">\n      <h2>Let’s Develop an E-Commerce Application From Scratch Using Java and Spring | by Nil Madhab | Javarevisited | Medium</h2>\n      <h3>Nil Madhab ・ <time datetime="2021-01-22T09:01:39.496Z">Jan 22, 2021</time> ・ 6 min read\n      <div class="ltag__link__servicename">\n        <img src="/assets/medium_icon.svg" alt="Medium Logo" aria-label="Medium Logo" loading="lazy">\n        Medium\n      </div>\n    </h3>\n</div>\n  </a>\n</div>\n\n<div class="ltag__link">\n  <a href="https://medium.com/javarevisited/lets-build-signup-signin-and-role-based-access-in-our-e-commerce-app-f499a4b71f48" class="ltag__link__link">\n    <div class="ltag__link__pic">\n      <img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--tLzMBohE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/fit/c/96/96/1%2AhNjwft_dNBxvTr6g6TOVGg.jpeg" alt="Nil Madhab" loading="lazy">\n    </div>\n  </a>\n  <a href="https://medium.com/javarevisited/lets-build-signup-signin-and-role-based-access-in-our-e-commerce-app-f499a4b71f48" class="ltag__link__link">\n    <div class="ltag__link__content">\n      <h2>Let’s Build Signup, SignIn, and Role-Based Access in Our E-Commerce App | by Nil Madhab | Javarevisited | Jan, 2021 | Medium</h2>\n      <h3>Nil Madhab ・ <time datetime="2021-01-18T21:08:34.886Z">Jan 18, 2021</time> ・ 8 min read\n      <div class="ltag__link__servicename">\n        <img src="/assets/medium_icon.svg" alt="Medium Logo" aria-label="Medium Logo" loading="lazy">\n        Medium\n      </div>\n    </h3>\n</div>\n  </a>\n</div>\n\n<div class="ltag__link">\n  <a href="https://medium.com/javascript-in-plain-english/lets-create-vue-js-frontend-for-products-in-our-e-commerce-app-14cc8c3459c8" class="ltag__link__link">\n    <div class="ltag__link__pic">\n      <img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--tLzMBohE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/fit/c/96/96/1%2AhNjwft_dNBxvTr6g6TOVGg.jpeg" alt="Nil Madhab" loading="lazy">\n    </div>\n  </a>\n  <a href="https://medium.com/javascript-in-plain-english/lets-create-vue-js-frontend-for-products-in-our-e-commerce-app-14cc8c3459c8" class="ltag__link__link">\n    <div class="ltag__link__content">\n      <h2>Let’s Add Products for our eCommerce App with Vue.js | by Nil Madhab | JavaScript in Plain English</h2>\n      <h3>Nil Madhab ・ <time datetime="2021-01-12T10:25:19.100Z">Jan 12, 2021</time> ・ 10 min read\n      <div class="ltag__link__servicename">\n        <img src="/assets/medium_icon.svg" alt="Medium Logo" aria-label="Medium Logo" loading="lazy">\n        Medium\n      </div>\n    </h3>\n</div>\n  </a>\n</div>\n</li>\n</ol>\n\n\n</li>\n</ol>\n\n	0	t	2021-02-18 21:27:33.190566	f	0	0	7	t	0	\N	\N	t	wishlist-feature-for-ecommerce-app-using-java-and-spring-boot-44oh	\N	25	WishList Feature for eCommerce App using Java and Spring Boot	2021-02-19 15:07:59.964563	1	0	\N	\N	\N	0	\N	\N	\N
53	f	f	f	\N	{% medium https://medium.com/webtutsplus/lets-link-product-with-category-for-our-ecommerce-app-28100657a848 %}\n\n**Table of Contents**\n\n* Introduction\n* Requirements\n* Setting up the Project\n* Vue Components\n* Vue Router\n* Our Application\n* Why use Vue Router\n* Resources\n\n**Introduction**\n\nWe are building a complete E-Commerce application.\nSo in this series of tutorials, we will now link our products with a category and design the user interface for it using Vue.js 3. In the past tutorial, we had designed the user interface for displaying products. Now, our products will have added information about their category.\nIf you are new to Vue.js, it is recommended to glance at the above article before moving on. So, our application will list all the products and categories and provide us with the following capabilities :\n* Add a product\n* Edit a product\n* Add a category\n* Edit a category\n\n**Requirements**\n\nWe will use the Vue CLI tool to set up our project. You also need to have Node.js installed before proceeding with the tutorial. We will not write any Node.js specific code but still, our Vue.js project requires Node. Apart from this, I will also be using Bootstrap, some Google Fonts and VS code as my editor. These things are up to your preferences.\n\n**Setting up the Project**\n\nThe detailed instructions for setting up a Vue project can be found here, but let's quickly go through the process once. First, we will have to install the Vue CLI tool. It can be installed in the system with the following command:\n\n`npm install -g @vue/cli`\n\nAfter installing the Vue CLI, the following command is used for creating a new project:\n\n`vue create project_name`\n\nNext, it will ask for some project configurations. Here is my project configuration:\n\n[View image](https://miro.medium.com/max/3000/1*jrUHjXFuC7qXpwYAgBMB2g.png)\n\nAfter confirming all the details, we will have a project folder created for us by Vue CLI.\n[View image]\n(https://miro.medium.com/max/328/1*wcvsKdxiZ_zefXQaJ7_Ong.png)\n\n**Folder Structure**\n\nLet’s go through the folder structure of our newly created Vue project\n* public - contains the main HTML file of our project\n* src/assets - stores the media files like images, logos, etc.\n* src/components - stores all the reusable components of our project. These components are not unique to some specific route.\n* src/router - contains the index.js file which keeps a record of all the routes\n* src/views - stores all the router components. These are the components that are rendered as per the current route.\n\nApart from this, we have some important files too\n* App.vue - it is the root component of our project\n* main.js - it is the starting point of our project. Here we import our root component App.vue, our router file index.js and createApp method. After this, we mount our root component to the DOM using the following statement:\n\n`createApp(App).use(router).mount('#app');`\n\nThe folder structure is not enforced by Vue, we can customize this as per our requirements.\n\n**Vue Components**\n\nAlmost all frontend frameworks allow us to create components that we can reuse at multiple places on the same or different websites. Some examples include a search bar, login form, product display component etc. In Vue, files with “.vue” extension are known as single file components. These single file components are composed of HTML, JavaScript, and CSS.\n\n```\n<template>\n</template>\n<script>\nexport default {\n}\n</script>\n<style>\n</style>\n```\n\nThe template part contains the HTML of the component. The script tag contains the code defining the custom behavior of the component. And style tag houses the CSS of the component. As mentioned earlier, src/components and src/views contain all our components.\n\n**Vue Router**\n\nThe Vue router enables us to link our browser URL and our components. This helps us define paths that get coupled with our components. This way Vue renders components based on the URL. The official page of Vue router lists all its features. The most important of all these is the ease of creating Single page applications (SPAs) using Vue router.\nIn Single page applications designed using Vue, the very first request sent to the server responds with a single HTML file and the JavaScript bundle. Then in the browser, Vue takes complete control over the application. After this, no further requests are sent to the server for new pages even if we change routes. This means once everything is loaded, navigating through different routes of our web application becomes very smooth. As an example, head over to Vue router guide and disconnect your internet once the page has loaded, even without the internet you will be able to use most of the features available there (even changing the guide language).\nThe src/router/index.js file contains information about all the router paths. Folder src/views contain the components which we couple with router paths. Because of their usage, these components are also known as router views.\nIn index.js file, we import all the router components and create an array of objects called routes. Objects of this array represent different routes of our application. Every route has a path, a name associated with it, and the component to be rendered for this path. For our project, I will be keeping the name property same as component name.\n\n```\nconst routes = [\n  {\n    path: '/',\n    name: 'Home',\n    component: Home\n  }\n]\n```\nAfter creating this routes array, we use the createRouter method to create and export our router. Vue CLI is kind enough to do this task for us while creating our project.\n\n**Our Application**\n\nNow after understanding the Vue project structure and the requirement of different Vue features, we can dive into our E-Commerce project. For creating our application, we will be using many Vue components. So, there needs to be a structural hierarchy of components in our project. We can use the component tree to define this structure.\n\n[View image](https://miro.medium.com/max/1250/1*lMJP_8YkvKaOph-95vwLgQ.png)\n\n**App.vue** is the root component of our application. It is the first one to be rendered onto the DOM. Then we have our reusable components (in blue boxes) and router view components (in yellow boxes).\nIn **App.vue**, we have the data properties **baseURL**, **products** and **categories**. The **baseURL** refers to our backend API from where we fetch data and send requests for data addition and modification. The products and categories arrays, as their name suggests, stores our products and categories. We also have the components property which lists all the components which we use in the current component.\n\n**API call**\nIn the mounted Lifecycle hook of our root component **App.vue**, we make the API call to fetch our products and categories. For this, we use JavaScript’s Fetch API.\n\n```\nconst res  = await fetch(this.baseURL + "product/");\nthis.products = await res.json();\n```\nFetching data from backend API is an asynchronous task. Hence the fetch method returns a promise. If our internet connection is stable and the server is up and running, the res variable will store the server response. Now to extract our data from this response, we use the json method. The json method reads the response stream, and since this stream could be very large, it takes time and returns a promise on completion. This promise once resolved returns a JavaScript object. In JavaScript, an array is also an object which can be represented in JSON.\n\nThe root component is the best place to fetch data from backend API because from here we can pass on this data as props to our child component. Let’s get this terminology clear. When we use a component inside of some other component, they are referred to as child and parent component respectively. A parent component can pass its data to a child component, this data is known as props. You can think of it as passing arguments to a function.\n\n**Router paths**\n\nIn App.vue, we have used the components Navbar and Footer. Apart from this we also have a Vue tag <router-view>. This router-view tag renders component based on the URL path. Along with this, we also have the <router-link> tag. It acts as an anchor tag for a router-enabled app. The target location for this link is specified using the to prop. Let’s have a look at index.js file where we have defined all our routes.\n\n```\nimport { createRouter, createWebHistory } from 'vue-router'\nimport Home from '../views/Home.vue'\nimport Product from '../views/Product/Product.vue'\nimport AddProduct from '../views/Product/AddProduct.vue'\nimport EditProduct from '../views/Product/EditProduct.vue'\nimport Category from '../views/Category/Category.vue'\nimport AddCategory from '../views/Category/AddCategory.vue'\nimport EditCategory from '../views/Category/EditCategory.vue'\nconst routes = [\n{\npath: '/',\nname: 'Home',\ncomponent: Home\n},\n//Product routes\n{\npath: '/product',\nname: 'Product',\ncomponent: Product\n},\n{\npath: '/product/add',\nname: 'AddProduct',\ncomponent: AddProduct\n},\n{\npath: '/product/edit/:id',\nname: 'EditProduct',\ncomponent: EditProduct,\n},\n//Category routes\n{\npath: '/category',\nname: 'Category',\ncomponent: Category\n},\n{\npath: '/category/add',\nname: 'AddCategory',\ncomponent: AddCategory\n},\n{\npath: '/category/update/:id',\nname: 'EditCategory',\ncomponent: EditCategory\n}\n]\nconst router = createRouter({\nhistory: createWebHistory(process.env.BASE_URL),\nroutes\n})\nexport default router\n```\n\nSo to summarize the above file, we have set up the routing of our application in the following manner:\n\n[View image](https://miro.medium.com/max/875/1*DA9Ze-tcUT79DLzhtptcMQ.png)\n\n**Passing props**\nIn App.vue, we have passed props to the router view components. As mentioned earlier, it is the parent component which can pass props to its child component. To send these props, we can either give them some value or bind them with the data properties of the parent component.\n\n`<router-view :baseURL="baseURL" ></router-view>`\n\nHere baseURL written after the colon (short for v-bind directive) is the name with which this prop will be available in the child component. baseURL inside the double quotes is the parent component’s data field. We can name these props differently also, but I have used the same name to maintain consistency. Now in the child component, it is necessary to register these props in the component object’s props property. A child component may skip some props if it doesn't require them.\n\nIn App.vue, we have also used the “v-show” directive to show the Footer component only when we are at some path other than the Home. We can get the current path name from this.$route.name property. So now, let's take a look at our App.vue file:\n\n```\n<template>\n  <Navbar/>\n  <router-view :baseURL="baseURL" :products="products" :categories="categories"></router-view>\n  <Footer v-show="this.$route.name != 'Home'" />\n</template>\n\n<script>\nimport Navbar from "./components/Navbar.vue"\nimport Footer from "./components/Footer.vue"\nexport default {\n  data() {\n    return {\n      baseURL : "http://104.236.26.66:8080/api/",\n      products : null,\n      categories : null,\n    }\n  },\n  components : {Footer, Navbar},\n  mounted : async function mounted() {\n    // fetch products\n    fetch(this.baseURL + "product/")\n      .then(res => res.json())\n      .then(data => this.products = data)\n      .catch(err => console.log(err));\n    //fetch categories\n    fetch(this.baseURL + "category/")\n      .then(res => res.json())\n      .then(data => this.categories = data)\n      .catch(err => console.log(err));\n  }\n}\n</script>\n\n<style>\n</style>\n```\n\n**Navbar**\n\nThe Navbar component is used for navigating through our web application. We have used the Navbar component inside our App.vue above the router-view tag. Hence, every route of our website will have the Navbar at the top. We have designed our Navbar with three router links to Home, Product and Category route.\n\n```\n<template>\n  <div class="nav">\n    <router-link :to="{name : 'Home'}">\n      <img src="../assets/logo.png" alt="Webtutsplus logo" class="logo">\n    </router-link>\n    <ul class="main-nav">\n      <li><router-link :to="{name : 'Home'}" >HOME</router-link></li>\n      <li><router-link :to="{name : 'Product'}">PRODUCT</router-link></li>\n      <li><router-link :to="{name : 'Category'}">CATEGORY</router-link></li>\n    </ul>\n  </div>\n</template>\n\n<script>\nexport default {\n  name : "Navbar"\n}\n</script>\n\n<style>\n</style>\n```\n\n**Home**\n\nThe Home component is the landing page of our web application. It is the first impression of our app which plays a crucial role in our advertising campaign.\n\n[View image](https://miro.medium.com/max/875/1*EDvz2gx3N0f6ATrlT-BE-Q.png)\n\n**Footer**\n\nThe Footer component is present at the bottom of our websites. Here we can place the About Us, Contact and some other important pages link. Along with these, we can also place links to our social media handles. I have used this icons library to use logos of some popular social media platforms.\nProducts\nAs the basic structure of our website is in place, we can start working on the core functionality. Let us start with components related to products.\n\n**Product.vue**: This component lists all the products of our application. In the component template, we first design a button for adding new products inside a router-link to AddProduct router view component. Then we use the v-for directive to loop through all the products inside the products array. For every product, we render the ProductBox component passing the product as a prop. In the component object, we list the required props that we get from our parent component. Along with this, we also mention ProductBox as a child component.\n\n```\n<template>\n  <div class="products-box container">\n    <h2>Our Products</h2>\n    <router-link :to="{name : 'AddProduct'}">\n        <button type="button" class="btn btn-success add-btn btn-lg">Add a new Product</button>\n    </router-link>\n    <div v-for="product of products" :key="product.id">\n      <ProductBox :product="product">\n      </ProductBox>\n    </div>\n  </div>\n</template>\n\n<script>\nimport ProductBox from '../../components/ProductBox';\nexport default {\n  name: 'Product',\n  components : {ProductBox}, \n  props : [ "baseURL" , "products" ],\n}\n</script>\n\n<style>\n</style>\n```\n\n**AddProduct.vue**: This component presents a form for adding a new product into our backend API database. We define five data fields to track user input. Here, the v-model directive helps us to make a two-way binding between the user input and our component data fields. We also attach a click event to the submit button of our form. Once the user submits the form, we call the addProduct method of our component. This method creates our newProduct and makes a POST request to our backend API to add this product. Once this process completes we redirect to our Product route.\n\n```\n<template>\n  <div class="addProduct container">\n    <h2>Add new Product</h2>\n    <form>\n      <div class="form-group">\n        <label>Category</label>\n        <select class="form-control" v-model="category_id" required>\n          <option v-for="category of categories" :key="category.id" :value="category.id">{{category.categoryName}}</option>\n        </select>\n      </div>\n      <div class="form-group">\n        <label>Name</label>\n        <input type="text" class="form-control" v-model="name" required>\n      </div>\n      <div class="form-group">\n        <label>Description</label>\n        <input type="text" class="form-control" v-model="description" required>\n      </div>\n      <div class="form-group">\n        <label>ImageURL</label>\n        <input type="url" class="form-control" v-model="imageURL" required>\n      </div>\n      <div class="form-group">\n        <label>Price</label>\n        <input type="number" class="form-control" v-model="price" required>\n      </div>\n      <button type="button" class="btn btn-primary" @click="addProduct">Submit</button>\n  </form>\n  </div>\n</template>\n\n<script>\nexport default {\n  data(){\n    return {\n      category_id : null,\n      name : null, \n      description : null,\n      imageURL : null, \n      price : null\n    }\n  },\n  props : ["baseURL", "products", "categories"],\n  methods : {\n    addProduct : async function() {\n      const newProduct = {\n        category_id : this.category_id,\n        name : this.name, \n        description : this.description,\n        imageURL : this.imageURL,\n        price : this.price \n      }\n      console.log(newProduct);\n      await fetch(this.baseURL+"product/add", {\n          method : "POST",\n          body : JSON.stringify(newProduct),\n          headers: {\n              'Content-Type': 'application/json'\n          }\n      })\n      .then((res) => {\n          this.products.push(newProduct);\n          this.$router.replace("/product");\n          alert("Product Added Successfully!");\n      })\n      .catch((err) => console.log(err));\n    }\n  }\n}\n</script>\n\n<style>\n</style>\n```\n[View image](https://miro.medium.com/max/875/1*EUreIC-olVivnh0bV_bfBg.png)\n\n**ProductBox.vue**: This component displays the details of a product. First, we design a button for editing the product inside a router-link to EditProduct router view component. This router link takes the product id inside the params object. Remember, we defined the path for EditProduct with a dynamic segment denoted by a colon. When the route is matched, the value of the dynamic segments will be exposed as this.$route.params in every component. This is defined in the Vue documentation as Dynamic Route Matching. Then we display the product’s image, name, description and price.\n\n```\n<template>\n  <div class="product-box">\n      <div class="row">\n        <div class="col-4">\n            <img class="img-fluid" v-bind:src="product.imageURL" alt="product-image">\n        </div>\n        <div class="col-8">\n            <router-link :to="{name : 'EditProduct', params : {id : product.id} }">\n                <button class="btn btn-primary edit_btn">Edit</button>\n            </router-link>\n            <h3 class="product_name">{{product.name}}</h3>\n            <h3 class="product_description">{{product.description}}</h3>\n            <h3 class="product_price"><span>$</span>{{product.price}}</h3>\n            <button type="button" class="buy_btn btn btn-lg btn-outline-success">Buy Now</button>\n        </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n    name : "ProductBox",\n    props : ["product"]\n}\n</script>\n\n<style>\n</style>\n```\n**EditProduct.vue**: This component displays the form for editing details of an existing product. Remember this.$route.params.id stores the id of product for which this form was invoked. We use this id to find our product and fill the default input values with its current details. Similar to the AddProduct form, once the user submits the form, we create the newProduct and make a POST request to our backend API to update the current product. Then we redirect to the Product route.\n\n```\n<template>\n  <div class="editProduct container">\n    <h2>Edit Product</h2>\n    <form>\n      <div class="form-group">\n        <label>Category</label>\n        <select class="form-control" v-model="category_id" required>\n          <option v-for="category of categories" :key="category.id" :value="category.id">{{category.categoryName}}</option>\n        </select>\n      </div>\n      <div class="form-group">\n        <label>Name</label>\n        <input type="text" class="form-control" v-model="name" required>\n      </div>\n      <div class="form-group">\n        <label>Description</label>\n        <input type="text" class="form-control" v-model="description" required>\n      </div>\n      <div class="form-group">\n        <label>ImageURL</label>\n        <input type="url" class="form-control" v-model="imageURL" required>\n      </div>\n      <div class="form-group">\n        <label>Price</label>\n        <input type="number" class="form-control" v-model="price" required>\n      </div>\n      <button type="button" class="btn btn-primary" @click="editProduct">Submit</button>\n  </form>\n  </div>\n</template>\n\n<script>\nexport default {\n  data(){\n    return {\n      category_id : 0,\n      name : null, \n      description : null,\n      imageURL : null,\n      price : 0,\n      productIndex : null,\n      id : null\n    }\n  },\n  props : ["baseURL", "products", "categories"],\n  methods : {\n    editProduct : async function() {\n      const newProduct = {\n        category_id : this.category_id,\n        name : this.name, \n        description : this.description,\n        imageURL : this.imageURL,\n        price : this.price \n      }\n      const url = this.baseURL+"product/update/"+this.id.toString(10);\n      await fetch(url, {\n          method : "POST",\n          body : JSON.stringify(newProduct),\n          headers: {\n              'Content-Type': 'application/json'\n          }\n      })\n      .then((res) => {\n          this.products[this.productIndex] = newProduct;\n          this.$router.replace("/product");\n          alert("Product Updated Successfully!");\n      })\n      .catch((err) => console.log(err));\n    }\n  },\n  mounted() {\n    this.id = this.$route.params.id;\n    this.productIndex = this.products.findIndex(product => product.id == this.id);\n    //input fields\n    this.category_id = this.products[this.productIndex].category_id;\n    this.name = this.products[this.productIndex].name;\n    this.description = this.products[this.productIndex].description;\n    this.imageURL = this.products[this.productIndex].imageURL;\n    this.price = this.products[this.productIndex].price;\n  }\n}\n</script>\n\n<style>\n</style>\n```\n\n[View image](https://miro.medium.com/max/875/1*60wdvDqzWY-KMUrUpohOuA.png)\n\n**Categories**\n\nOnce we are done with the product’s components, working with categories is not a creative task. The code which goes inside is very similar. The categories also provide us with the same functionality as products.\n\n#Why use Vue Router\nThe Vue router is a very powerful tool, yet easy to learn. Vue router as its landing page says makes building SPAs a breeze. It provides us with a modular, component-based router configuration. Using Vue router improves the responsiveness of our application to a good extent.\n\nThe complete code can be found [here](https://bitbucket.org/ecommerce-webtutsplus/ecommerce-ui/src/f77c335cd9b1b777cff065f4396af6b1cefcef0e/?at=chitresh%2Fvue.js-product-category)\n\n#Resources\n\n* [Vuejs](https://v3.vuejs.org/guide/introduction.html)\n* [Frontend code](https://bitbucket.org/ecommerce-webtutsplus/ecommerce-ui/src/f77c335cd9b1b777cff065f4396af6b1cefcef0e/?at=chitresh%2Fvue.js-product-category)\n* [Backend API Repository](https://bitbucket.org/ecommerce-webtutsplus/ecommerce/src/master/)\n* [Swagger-UI for the API](http://104.236.26.66:8080/api/swagger-ui.html#/)\n* [Node.js](https://nodejs.org/en/)\n* [Google Fonts](https://fonts.google.com/)\n* [Bootstrap](https://getbootstrap.com/docs/4.5/getting-started/introduction/)\n* [Ionicons](https://ionicons.com/)\n\n\n\n	{"boosted_additional_tags": "", "boosted_dev_digest_email": false, "boosted_additional_articles": false}	\N	frontend, ecommerce, vuejs	--- !ruby/struct:Articles::CachedEntity\nname: nilmadhab mondal\nusername: nilmadhab\nslug: nilmadhab\nprofile_image_90: "/uploads/user/profile_image/1/d9b0e3b7-ad59-45d5-b516-4e8ffd0a6958.jpeg"\nprofile_image_url: "/uploads/user/profile_image/1/d9b0e3b7-ad59-45d5-b516-4e8ffd0a6958.jpeg"\n	nilmadhab mondal	nilmadhab	\N	{}	\N	0	\N	0	2021-02-21 07:19:51.455085	\N	Let’s Link Products With Category for our E-Commerce App | by N...	\N	t	5	5	\N	f	1613891991	\N	354531	en	\N	2021-02-21 07:19:51.444902	\N	/i/1zh6y1pa5ehjfjswyldx.png	#dddddd	22	0	0	0	\N	\N	2	414d9c45b509f9aad6f35e38949beb799cc7748e5a9d01b00800201eaf073cc6429dcc697b45827327fe8f0fc83556bb3372e21aeaecb528b23e2d08	/nilmadhab/let-s-link-products-with-category-for-our-e-commerce-app-5eap	0	0	0	<div class="ltag__link">\n  <a href="https://medium.com/webtutsplus/lets-link-product-with-category-for-our-ecommerce-app-28100657a848" class="ltag__link__link">\n    <div class="ltag__link__pic">\n      <img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--tLzMBohE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/fit/c/96/96/1%2AhNjwft_dNBxvTr6g6TOVGg.jpeg" alt="Nil Madhab" loading="lazy">\n    </div>\n  </a>\n  <a href="https://medium.com/webtutsplus/lets-link-product-with-category-for-our-ecommerce-app-28100657a848" class="ltag__link__link">\n    <div class="ltag__link__content">\n      <h2>Let’s Link Products With Category for our E-Commerce App | by Nil Madhab | webtutsplus | Dec, 2020 | Medium</h2>\n      <h3>Nil Madhab ・ <time datetime="2021-01-02T15:57:07.738Z">Jan 2, 2021</time> ・ 10 min read\n      <div class="ltag__link__servicename">\n        <img src="/assets/medium_icon.svg" alt="Medium Logo" aria-label="Medium Logo" loading="lazy">\n        Medium\n      </div>\n    </h3>\n</div>\n  </a>\n</div>\n\n\n<p><strong>Table of Contents</strong></p>\n\n<ul>\n<li>Introduction</li>\n<li>Requirements</li>\n<li>Setting up the Project</li>\n<li>Vue Components</li>\n<li>Vue Router</li>\n<li>Our Application</li>\n<li>Why use Vue Router</li>\n<li>Resources</li>\n</ul>\n\n<p><strong>Introduction</strong></p>\n\n<p>We are building a complete E-Commerce application.<br>\nSo in this series of tutorials, we will now link our products with a category and design the user interface for it using Vue.js 3. In the past tutorial, we had designed the user interface for displaying products. Now, our products will have added information about their category.<br>\nIf you are new to Vue.js, it is recommended to glance at the above article before moving on. So, our application will list all the products and categories and provide us with the following capabilities :</p>\n\n<ul>\n<li>Add a product</li>\n<li>Edit a product</li>\n<li>Add a category</li>\n<li>Edit a category</li>\n</ul>\n\n<p><strong>Requirements</strong></p>\n\n<p>We will use the Vue CLI tool to set up our project. You also need to have Node.js installed before proceeding with the tutorial. We will not write any Node.js specific code but still, our Vue.js project requires Node. Apart from this, I will also be using Bootstrap, some Google Fonts and VS code as my editor. These things are up to your preferences.</p>\n\n<p><strong>Setting up the Project</strong></p>\n\n<p>The detailed instructions for setting up a Vue project can be found here, but let's quickly go through the process once. First, we will have to install the Vue CLI tool. It can be installed in the system with the following command:</p>\n\n<p><code>npm install -g @vue/cli</code></p>\n\n<p>After installing the Vue CLI, the following command is used for creating a new project:</p>\n\n<p><code>vue create project_name</code></p>\n\n<p>Next, it will ask for some project configurations. Here is my project configuration:</p>\n\n<p><a href="https://miro.medium.com/max/3000/1*jrUHjXFuC7qXpwYAgBMB2g.png">View image</a></p>\n\n<p>After confirming all the details, we will have a project folder created for us by Vue CLI.<br>\n<a href="https://miro.medium.com/max/328/1*wcvsKdxiZ_zefXQaJ7_Ong.png">View image</a></p>\n\n<p><strong>Folder Structure</strong></p>\n\n<p>Let’s go through the folder structure of our newly created Vue project</p>\n\n<ul>\n<li>public - contains the main HTML file of our project</li>\n<li>src/assets - stores the media files like images, logos, etc.</li>\n<li>src/components - stores all the reusable components of our project. These components are not unique to some specific route.</li>\n<li>src/router - contains the index.js file which keeps a record of all the routes</li>\n<li>src/views - stores all the router components. These are the components that are rendered as per the current route.</li>\n</ul>\n\n<p>Apart from this, we have some important files too</p>\n\n<ul>\n<li>App.vue - it is the root component of our project</li>\n<li>main.js - it is the starting point of our project. Here we import our root component App.vue, our router file index.js and createApp method. After this, we mount our root component to the DOM using the following statement:</li>\n</ul>\n\n<p><code>createApp(App).use(router).mount('#app');</code></p>\n\n<p>The folder structure is not enforced by Vue, we can customize this as per our requirements.</p>\n\n<p><strong>Vue Components</strong></p>\n\n<p>Almost all frontend frameworks allow us to create components that we can reuse at multiple places on the same or different websites. Some examples include a search bar, login form, product display component etc. In Vue, files with “.vue” extension are known as single file components. These single file components are composed of HTML, JavaScript, and CSS.<br>\n</p>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>&lt;template&gt;\n&lt;/template&gt;\n&lt;script&gt;\nexport default {\n}\n&lt;/script&gt;\n&lt;style&gt;\n&lt;/style&gt;\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>The template part contains the HTML of the component. The script tag contains the code defining the custom behavior of the component. And style tag houses the CSS of the component. As mentioned earlier, src/components and src/views contain all our components.</p>\n\n<p><strong>Vue Router</strong></p>\n\n<p>The Vue router enables us to link our browser URL and our components. This helps us define paths that get coupled with our components. This way Vue renders components based on the URL. The official page of Vue router lists all its features. The most important of all these is the ease of creating Single page applications (SPAs) using Vue router.<br>\nIn Single page applications designed using Vue, the very first request sent to the server responds with a single HTML file and the JavaScript bundle. Then in the browser, Vue takes complete control over the application. After this, no further requests are sent to the server for new pages even if we change routes. This means once everything is loaded, navigating through different routes of our web application becomes very smooth. As an example, head over to Vue router guide and disconnect your internet once the page has loaded, even without the internet you will be able to use most of the features available there (even changing the guide language).<br>\nThe src/router/index.js file contains information about all the router paths. Folder src/views contain the components which we couple with router paths. Because of their usage, these components are also known as router views.<br>\nIn index.js file, we import all the router components and create an array of objects called routes. Objects of this array represent different routes of our application. Every route has a path, a name associated with it, and the component to be rendered for this path. For our project, I will be keeping the name property same as component name.<br>\n</p>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>const routes = [\n  {\n    path: '/',\n    name: 'Home',\n    component: Home\n  }\n]\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>After creating this routes array, we use the createRouter method to create and export our router. Vue CLI is kind enough to do this task for us while creating our project.</p>\n\n<p><strong>Our Application</strong></p>\n\n<p>Now after understanding the Vue project structure and the requirement of different Vue features, we can dive into our E-Commerce project. For creating our application, we will be using many Vue components. So, there needs to be a structural hierarchy of components in our project. We can use the component tree to define this structure.</p>\n\n<p><a href="https://miro.medium.com/max/1250/1*lMJP_8YkvKaOph-95vwLgQ.png">View image</a></p>\n\n<p><strong>App.vue</strong> is the root component of our application. It is the first one to be rendered onto the DOM. Then we have our reusable components (in blue boxes) and router view components (in yellow boxes).<br>\nIn <strong>App.vue</strong>, we have the data properties <strong>baseURL</strong>, <strong>products</strong> and <strong>categories</strong>. The <strong>baseURL</strong> refers to our backend API from where we fetch data and send requests for data addition and modification. The products and categories arrays, as their name suggests, stores our products and categories. We also have the components property which lists all the components which we use in the current component.</p>\n\n<p><strong>API call</strong><br>\nIn the mounted Lifecycle hook of our root component <strong>App.vue</strong>, we make the API call to fetch our products and categories. For this, we use JavaScript’s Fetch API.<br>\n</p>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>const res  = await fetch(this.baseURL + "product/");\nthis.products = await res.json();\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Fetching data from backend API is an asynchronous task. Hence the fetch method returns a promise. If our internet connection is stable and the server is up and running, the res variable will store the server response. Now to extract our data from this response, we use the json method. The json method reads the response stream, and since this stream could be very large, it takes time and returns a promise on completion. This promise once resolved returns a JavaScript object. In JavaScript, an array is also an object which can be represented in JSON.</p>\n\n<p>The root component is the best place to fetch data from backend API because from here we can pass on this data as props to our child component. Let’s get this terminology clear. When we use a component inside of some other component, they are referred to as child and parent component respectively. A parent component can pass its data to a child component, this data is known as props. You can think of it as passing arguments to a function.</p>\n\n<p><strong>Router paths</strong></p>\n\n<p>In App.vue, we have used the components Navbar and Footer. Apart from this we also have a Vue tag . This router-view tag renders component based on the URL path. Along with this, we also have the  tag. It acts as an anchor tag for a router-enabled app. The target location for this link is specified using the to prop. Let’s have a look at index.js file where we have defined all our routes.<br>\n</p>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>import { createRouter, createWebHistory } from 'vue-router'\nimport Home from '../views/Home.vue'\nimport Product from '../views/Product/Product.vue'\nimport AddProduct from '../views/Product/AddProduct.vue'\nimport EditProduct from '../views/Product/EditProduct.vue'\nimport Category from '../views/Category/Category.vue'\nimport AddCategory from '../views/Category/AddCategory.vue'\nimport EditCategory from '../views/Category/EditCategory.vue'\nconst routes = [\n{\npath: '/',\nname: 'Home',\ncomponent: Home\n},\n//Product routes\n{\npath: '/product',\nname: 'Product',\ncomponent: Product\n},\n{\npath: '/product/add',\nname: 'AddProduct',\ncomponent: AddProduct\n},\n{\npath: '/product/edit/:id',\nname: 'EditProduct',\ncomponent: EditProduct,\n},\n//Category routes\n{\npath: '/category',\nname: 'Category',\ncomponent: Category\n},\n{\npath: '/category/add',\nname: 'AddCategory',\ncomponent: AddCategory\n},\n{\npath: '/category/update/:id',\nname: 'EditCategory',\ncomponent: EditCategory\n}\n]\nconst router = createRouter({\nhistory: createWebHistory(process.env.BASE_URL),\nroutes\n})\nexport default router\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>So to summarize the above file, we have set up the routing of our application in the following manner:</p>\n\n<p><a href="https://miro.medium.com/max/875/1*DA9Ze-tcUT79DLzhtptcMQ.png">View image</a></p>\n\n<p><strong>Passing props</strong><br>\nIn App.vue, we have passed props to the router view components. As mentioned earlier, it is the parent component which can pass props to its child component. To send these props, we can either give them some value or bind them with the data properties of the parent component.</p>\n\n<p><code>&lt;router-view :baseURL="baseURL" &gt;&lt;/router-view&gt;</code></p>\n\n<p>Here baseURL written after the colon (short for v-bind directive) is the name with which this prop will be available in the child component. baseURL inside the double quotes is the parent component’s data field. We can name these props differently also, but I have used the same name to maintain consistency. Now in the child component, it is necessary to register these props in the component object’s props property. A child component may skip some props if it doesn't require them.</p>\n\n<p>In App.vue, we have also used the “v-show” directive to show the Footer component only when we are at some path other than the Home. We can get the current path name from this.$route.name property. So now, let's take a look at our App.vue file:<br>\n</p>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>&lt;template&gt;\n  &lt;Navbar/&gt;\n  &lt;router-view :baseURL="baseURL" :products="products" :categories="categories"&gt;&lt;/router-view&gt;\n  &lt;Footer v-show="this.$route.name != 'Home'" /&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport Navbar from "./components/Navbar.vue"\nimport Footer from "./components/Footer.vue"\nexport default {\n  data() {\n    return {\n      baseURL : "http://104.236.26.66:8080/api/",\n      products : null,\n      categories : null,\n    }\n  },\n  components : {Footer, Navbar},\n  mounted : async function mounted() {\n    // fetch products\n    fetch(this.baseURL + "product/")\n      .then(res =&gt; res.json())\n      .then(data =&gt; this.products = data)\n      .catch(err =&gt; console.log(err));\n    //fetch categories\n    fetch(this.baseURL + "category/")\n      .then(res =&gt; res.json())\n      .then(data =&gt; this.categories = data)\n      .catch(err =&gt; console.log(err));\n  }\n}\n&lt;/script&gt;\n\n&lt;style&gt;\n&lt;/style&gt;\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p><strong>Navbar</strong></p>\n\n<p>The Navbar component is used for navigating through our web application. We have used the Navbar component inside our App.vue above the router-view tag. Hence, every route of our website will have the Navbar at the top. We have designed our Navbar with three router links to Home, Product and Category route.<br>\n</p>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>&lt;template&gt;\n  &lt;div class="nav"&gt;\n    &lt;router-link :to="{name : 'Home'}"&gt;\n      &lt;img src="../assets/logo.png" alt="Webtutsplus logo" class="logo"&gt;\n    &lt;/router-link&gt;\n    &lt;ul class="main-nav"&gt;\n      &lt;li&gt;&lt;router-link :to="{name : 'Home'}" &gt;HOME&lt;/router-link&gt;&lt;/li&gt;\n      &lt;li&gt;&lt;router-link :to="{name : 'Product'}"&gt;PRODUCT&lt;/router-link&gt;&lt;/li&gt;\n      &lt;li&gt;&lt;router-link :to="{name : 'Category'}"&gt;CATEGORY&lt;/router-link&gt;&lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  name : "Navbar"\n}\n&lt;/script&gt;\n\n&lt;style&gt;\n&lt;/style&gt;\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p><strong>Home</strong></p>\n\n<p>The Home component is the landing page of our web application. It is the first impression of our app which plays a crucial role in our advertising campaign.</p>\n\n<p><a href="https://miro.medium.com/max/875/1*EDvz2gx3N0f6ATrlT-BE-Q.png">View image</a></p>\n\n<p><strong>Footer</strong></p>\n\n<p>The Footer component is present at the bottom of our websites. Here we can place the About Us, Contact and some other important pages link. Along with these, we can also place links to our social media handles. I have used this icons library to use logos of some popular social media platforms.<br>\nProducts<br>\nAs the basic structure of our website is in place, we can start working on the core functionality. Let us start with components related to products.</p>\n\n<p><strong>Product.vue</strong>: This component lists all the products of our application. In the component template, we first design a button for adding new products inside a router-link to AddProduct router view component. Then we use the v-for directive to loop through all the products inside the products array. For every product, we render the ProductBox component passing the product as a prop. In the component object, we list the required props that we get from our parent component. Along with this, we also mention ProductBox as a child component.<br>\n</p>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>&lt;template&gt;\n  &lt;div class="products-box container"&gt;\n    &lt;h2&gt;Our Products&lt;/h2&gt;\n    &lt;router-link :to="{name : 'AddProduct'}"&gt;\n        &lt;button type="button" class="btn btn-success add-btn btn-lg"&gt;Add a new Product&lt;/button&gt;\n    &lt;/router-link&gt;\n    &lt;div v-for="product of products" :key="product.id"&gt;\n      &lt;ProductBox :product="product"&gt;\n      &lt;/ProductBox&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport ProductBox from '../../components/ProductBox';\nexport default {\n  name: 'Product',\n  components : {ProductBox}, \n  props : [ "baseURL" , "products" ],\n}\n&lt;/script&gt;\n\n&lt;style&gt;\n&lt;/style&gt;\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p><strong>AddProduct.vue</strong>: This component presents a form for adding a new product into our backend API database. We define five data fields to track user input. Here, the v-model directive helps us to make a two-way binding between the user input and our component data fields. We also attach a click event to the submit button of our form. Once the user submits the form, we call the addProduct method of our component. This method creates our newProduct and makes a POST request to our backend API to add this product. Once this process completes we redirect to our Product route.<br>\n</p>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>&lt;template&gt;\n  &lt;div class="addProduct container"&gt;\n    &lt;h2&gt;Add new Product&lt;/h2&gt;\n    &lt;form&gt;\n      &lt;div class="form-group"&gt;\n        &lt;label&gt;Category&lt;/label&gt;\n        &lt;select class="form-control" v-model="category_id" required&gt;\n          &lt;option v-for="category of categories" :key="category.id" :value="category.id"&gt;{{category.categoryName}}&lt;/option&gt;\n        &lt;/select&gt;\n      &lt;/div&gt;\n      &lt;div class="form-group"&gt;\n        &lt;label&gt;Name&lt;/label&gt;\n        &lt;input type="text" class="form-control" v-model="name" required&gt;\n      &lt;/div&gt;\n      &lt;div class="form-group"&gt;\n        &lt;label&gt;Description&lt;/label&gt;\n        &lt;input type="text" class="form-control" v-model="description" required&gt;\n      &lt;/div&gt;\n      &lt;div class="form-group"&gt;\n        &lt;label&gt;ImageURL&lt;/label&gt;\n        &lt;input type="url" class="form-control" v-model="imageURL" required&gt;\n      &lt;/div&gt;\n      &lt;div class="form-group"&gt;\n        &lt;label&gt;Price&lt;/label&gt;\n        &lt;input type="number" class="form-control" v-model="price" required&gt;\n      &lt;/div&gt;\n      &lt;button type="button" class="btn btn-primary" @click="addProduct"&gt;Submit&lt;/button&gt;\n  &lt;/form&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  data(){\n    return {\n      category_id : null,\n      name : null, \n      description : null,\n      imageURL : null, \n      price : null\n    }\n  },\n  props : ["baseURL", "products", "categories"],\n  methods : {\n    addProduct : async function() {\n      const newProduct = {\n        category_id : this.category_id,\n        name : this.name, \n        description : this.description,\n        imageURL : this.imageURL,\n        price : this.price \n      }\n      console.log(newProduct);\n      await fetch(this.baseURL+"product/add", {\n          method : "POST",\n          body : JSON.stringify(newProduct),\n          headers: {\n              'Content-Type': 'application/json'\n          }\n      })\n      .then((res) =&gt; {\n          this.products.push(newProduct);\n          this.$router.replace("/product");\n          alert("Product Added Successfully!");\n      })\n      .catch((err) =&gt; console.log(err));\n    }\n  }\n}\n&lt;/script&gt;\n\n&lt;style&gt;\n&lt;/style&gt;\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p><a href="https://miro.medium.com/max/875/1*EUreIC-olVivnh0bV_bfBg.png">View image</a></p>\n\n<p><strong>ProductBox.vue</strong>: This component displays the details of a product. First, we design a button for editing the product inside a router-link to EditProduct router view component. This router link takes the product id inside the params object. Remember, we defined the path for EditProduct with a dynamic segment denoted by a colon. When the route is matched, the value of the dynamic segments will be exposed as this.$route.params in every component. This is defined in the Vue documentation as Dynamic Route Matching. Then we display the product’s image, name, description and price.<br>\n</p>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>&lt;template&gt;\n  &lt;div class="product-box"&gt;\n      &lt;div class="row"&gt;\n        &lt;div class="col-4"&gt;\n            &lt;img class="img-fluid" v-bind:src="product.imageURL" alt="product-image"&gt;\n        &lt;/div&gt;\n        &lt;div class="col-8"&gt;\n            &lt;router-link :to="{name : 'EditProduct', params : {id : product.id} }"&gt;\n                &lt;button class="btn btn-primary edit_btn"&gt;Edit&lt;/button&gt;\n            &lt;/router-link&gt;\n            &lt;h3 class="product_name"&gt;{{product.name}}&lt;/h3&gt;\n            &lt;h3 class="product_description"&gt;{{product.description}}&lt;/h3&gt;\n            &lt;h3 class="product_price"&gt;&lt;span&gt;$&lt;/span&gt;{{product.price}}&lt;/h3&gt;\n            &lt;button type="button" class="buy_btn btn btn-lg btn-outline-success"&gt;Buy Now&lt;/button&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n    name : "ProductBox",\n    props : ["product"]\n}\n&lt;/script&gt;\n\n&lt;style&gt;\n&lt;/style&gt;\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p><strong>EditProduct.vue</strong>: This component displays the form for editing details of an existing product. Remember this.$route.params.id stores the id of product for which this form was invoked. We use this id to find our product and fill the default input values with its current details. Similar to the AddProduct form, once the user submits the form, we create the newProduct and make a POST request to our backend API to update the current product. Then we redirect to the Product route.<br>\n</p>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>&lt;template&gt;\n  &lt;div class="editProduct container"&gt;\n    &lt;h2&gt;Edit Product&lt;/h2&gt;\n    &lt;form&gt;\n      &lt;div class="form-group"&gt;\n        &lt;label&gt;Category&lt;/label&gt;\n        &lt;select class="form-control" v-model="category_id" required&gt;\n          &lt;option v-for="category of categories" :key="category.id" :value="category.id"&gt;{{category.categoryName}}&lt;/option&gt;\n        &lt;/select&gt;\n      &lt;/div&gt;\n      &lt;div class="form-group"&gt;\n        &lt;label&gt;Name&lt;/label&gt;\n        &lt;input type="text" class="form-control" v-model="name" required&gt;\n      &lt;/div&gt;\n      &lt;div class="form-group"&gt;\n        &lt;label&gt;Description&lt;/label&gt;\n        &lt;input type="text" class="form-control" v-model="description" required&gt;\n      &lt;/div&gt;\n      &lt;div class="form-group"&gt;\n        &lt;label&gt;ImageURL&lt;/label&gt;\n        &lt;input type="url" class="form-control" v-model="imageURL" required&gt;\n      &lt;/div&gt;\n      &lt;div class="form-group"&gt;\n        &lt;label&gt;Price&lt;/label&gt;\n        &lt;input type="number" class="form-control" v-model="price" required&gt;\n      &lt;/div&gt;\n      &lt;button type="button" class="btn btn-primary" @click="editProduct"&gt;Submit&lt;/button&gt;\n  &lt;/form&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  data(){\n    return {\n      category_id : 0,\n      name : null, \n      description : null,\n      imageURL : null,\n      price : 0,\n      productIndex : null,\n      id : null\n    }\n  },\n  props : ["baseURL", "products", "categories"],\n  methods : {\n    editProduct : async function() {\n      const newProduct = {\n        category_id : this.category_id,\n        name : this.name, \n        description : this.description,\n        imageURL : this.imageURL,\n        price : this.price \n      }\n      const url = this.baseURL+"product/update/"+this.id.toString(10);\n      await fetch(url, {\n          method : "POST",\n          body : JSON.stringify(newProduct),\n          headers: {\n              'Content-Type': 'application/json'\n          }\n      })\n      .then((res) =&gt; {\n          this.products[this.productIndex] = newProduct;\n          this.$router.replace("/product");\n          alert("Product Updated Successfully!");\n      })\n      .catch((err) =&gt; console.log(err));\n    }\n  },\n  mounted() {\n    this.id = this.$route.params.id;\n    this.productIndex = this.products.findIndex(product =&gt; product.id == this.id);\n    //input fields\n    this.category_id = this.products[this.productIndex].category_id;\n    this.name = this.products[this.productIndex].name;\n    this.description = this.products[this.productIndex].description;\n    this.imageURL = this.products[this.productIndex].imageURL;\n    this.price = this.products[this.productIndex].price;\n  }\n}\n&lt;/script&gt;\n\n&lt;style&gt;\n&lt;/style&gt;\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p><a href="https://miro.medium.com/max/875/1*60wdvDqzWY-KMUrUpohOuA.png">View image</a></p>\n\n<p><strong>Categories</strong></p>\n\n<p>Once we are done with the product’s components, working with categories is not a creative task. The code which goes inside is very similar. The categories also provide us with the same functionality as products.</p>\n\n<h1>\n  <a name="why-use-vue-router" href="#why-use-vue-router" class="anchor">\n  </a>\n  Why use Vue Router\n</h1>\n\n<p>The Vue router is a very powerful tool, yet easy to learn. Vue router as its landing page says makes building SPAs a breeze. It provides us with a modular, component-based router configuration. Using Vue router improves the responsiveness of our application to a good extent.</p>\n\n<p>The complete code can be found <a href="https://bitbucket.org/ecommerce-webtutsplus/ecommerce-ui/src/f77c335cd9b1b777cff065f4396af6b1cefcef0e/?at=chitresh%2Fvue.js-product-category">here</a></p>\n\n<h1>\n  <a name="resources" href="#resources" class="anchor">\n  </a>\n  Resources\n</h1>\n\n<ul>\n<li><a href="https://v3.vuejs.org/guide/introduction.html">Vuejs</a></li>\n<li><a href="https://bitbucket.org/ecommerce-webtutsplus/ecommerce-ui/src/f77c335cd9b1b777cff065f4396af6b1cefcef0e/?at=chitresh%2Fvue.js-product-category">Frontend code</a></li>\n<li><a href="https://bitbucket.org/ecommerce-webtutsplus/ecommerce/src/master/">Backend API Repository</a></li>\n<li><a href="http://104.236.26.66:8080/api/swagger-ui.html#/">Swagger-UI for the API</a></li>\n<li><a href="https://nodejs.org/en/">Node.js</a></li>\n<li><a href="https://fonts.google.com/">Google Fonts</a></li>\n<li><a href="https://getbootstrap.com/docs/4.5/getting-started/introduction/">Bootstrap</a></li>\n<li><a href="https://ionicons.com/">Ionicons</a></li>\n</ul>\n\n	0	t	2021-02-21 07:19:51.444902	f	0	0	13	t	0	\N	\N	t	let-s-link-products-with-category-for-our-e-commerce-app-5eap	\N	25	Let’s Link Products With Category for our E-Commerce App	2021-02-21 07:19:51.455085	1	0	\N	\N	\N	0	\N	\N	\N
54	f	f	f	\N	{% medium https://medium.com/webtutsplus/lets-add-products-in-android-for-e-commerce-app-b8468e055001 %}\n\n[click to see the gif of final result](https://miro.medium.com/max/450/1*xpDkDzDXL3GNiwyuP9n8OA.gif)\n\n**Contents of this Tutorial**\n\n> Introduction\n> Requirements\n> Database Design\n> API Design\n> Project Creation\n> Dependencies\n> Permissions\n> Connecting the API\n> Creating Activities\n> The Main Page\n> List Products\n> Add Product\n> Update Product\n> Running the Application\n> Resources\n\n**Introduction**\nIn this tutorial series, we are building an e-commerce platform for all users. As a continuation of the previous tutorials, we are gonna build an android application to manage the products in our platform.\n\nUsing this application, we can see the products, add a product or update a product. Therefore, this tutorial is primarily composed of the following sections —\n> List Products\n> Add Product\n> Update Product\n\n**Requirements**\n* Android Studio (Completely Setup with SDK)\n* Android Virtual Device\n* Cloud Hosted E-Commerce Backend API\n* Retrofit\n* Glide\nSteps to set up your work environment in Android Studio can be found [here](https://developer.android.com/studio/install)\n\n**Database Design**\nThis is a sample JSON of a product, we will link it to a category and add other fields in later tutorials.\n\n```\n[  {\n    "id": 1,\n    "name": "Adidas Final UCL Ball",\n    "imageURL": "https://images.unsplash.com/photo-1589487391730-58f20eb2c308?ixid=MXwxMjA3fDB8MHxzZWFyY2h8OXx8Zm9vdGJhbGx8ZW58MHx8MHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60",\n    "price": 3000.0,\n    "description": "This is a football"\n  },\n  {\n    "id": 2,\n    "name": "Acer Nitro 5",\n    "imageURL": "https://images.unsplash.com/photo-1496181133206-80ce9b88a853?ixid=MXwxMjA3fDB8MHxzZWFyY2h8M3x8bGFwdG9wfGVufDB8fDB8&ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60",\n    "price": 55000.0,\n    "description": "This is a laptop"\n  }\n ]\n```\n```\nCREATE TABLE `products` (\n  `id` bigint NOT NULL,\n  `description` varchar(255) DEFAULT NULL,\n  `imageurl` varchar(255) DEFAULT NULL,\n  `name` varchar(255) DEFAULT NULL,\n  `price` double NOT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci \n```\nEach product has a unique ID, name, image URL, price, description. We can model it in [Springboot](https://medium.com/javarevisited/10-advanced-spring-boot-courses-for-experienced-java-developers-5e57606816bd) as\n\n```\n@Entity\n@Table(name = "products")\npublic class Product {\n    private @GeneratedValue @Id long id;\n    private @NotNull String name;\n    private @NotNull String imageURL;\n    private @NotNull double price;\n    private @NotNull String description;\n    ...\n}\n```\n\n**API Design**\nIn the real-world, we need to see the products, create new products, and update the products. So we will create 3 APIs. Later we will create many other real-world features like deleting, stocks, linking to categories, and adding tags. After this, we will create the UI.\n```\npackage com.webtutsplus.ecommerce.controller;\n\nimport com.webtutsplus.ecommerce.common.ApiResponse;\nimport com.webtutsplus.ecommerce.model.Product;\nimport com.webtutsplus.ecommerce.service.ProductService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.validation.Valid;\nimport java.util.List;\n\n@RestController\n@RequestMapping("/product")\npublic class ProductController {\n    @Autowired ProductService productService;\n\n    @GetMapping("/")\n    public ResponseEntity<List<Product>> getProducts() {\n        List<Product> body = productService.listProducts();\n        return new ResponseEntity<List<Product>>(body, HttpStatus.OK);\n    }\n\n    @PostMapping("/add")\n    public ResponseEntity<ApiResponse> addProduct(@RequestBody @Valid Product product) {\n        productService.addProduct(product);\n        return new ResponseEntity<ApiResponse>(new ApiResponse(true, "Product has been added"), HttpStatus.CREATED);\n    }\n\n    @PostMapping("/update/{productID}")\n    public ResponseEntity<ApiResponse> updateProduct(@PathVariable("productID") long productID, @RequestBody @Valid Product product) {\n        productService.updateProduct(productID, product);\n        return new ResponseEntity<ApiResponse>(new ApiResponse(true, "Product has been updated"), HttpStatus.OK);\n    }\n}\n```\n\n[View image](https://miro.medium.com/max/875/0*Q4hDUb9UDoXH7nWy.png)\n\nYou can find the backend code in this [branch](https://bitbucket.org/ecommerce-webtutsplus/ecommerce/src/596dd222404adcdd5541ddd04e48f9b75dfa3205/?at=nmadhab%2Fproducts-v1-first-tutorial).\n\n**Project Creation**\nAfter completing the IDE setup,\n1. Open Android Studio\n2. Click on New Project\n3. Select empty activity\n4. Select [Java](https://javarevisited.blogspot.com/2017/12/10-things-java-programmers-should-learn.html#axzz6n5gVwfTP) for Language\n5. Select Android SDK such that our app runs on all devices\n6. Click on finish\n7. Wait until all the gradle scripts get downloaded.\n\n[View image](https://miro.medium.com/max/875/0*lTwGWuJ50EpsjnY0.png)\n\nWe can start working on our project at once the build is successful. The project basically comes with the Main Activity from which our application starts, and the layout for the same called activity_main.xml, where we define its User Interface (UI)\n\n**Dependencies**\n\nTo build our application successfully, we need the following dependencies\n> Recycler View\n> Card View\n> Retrofit\n> Gson converter\n> Glide\n\nCopy-paste the dependencies given in the below blocks in the app level gradle file and click sync now on the top right corner of the IDE to get all the dependencies.\nRecycler View makes it easy to efficiently display large sets of data. We supply the data and define how each item looks, and the Recycler View library dynamically creates the elements when they’re needed. As the name implies, Recycler View recycles those individual elements.\n\n`implementation ‘androidx.recyclerview:recyclerview:1.1.0’`\n\nCard View is gonna act as the basic building block element for our Recycler View. The Card View contents will be decided by us and the same block of elements will be repeating in our Recycler View.\n\n`implementation 'androidx.cardview:cardview:1.0.0'`\n\nRetrofit is the REST API client that can send requests and receive response from our [RESTful](https://medium.com/javarevisited/top-5-books-and-courses-to-learn-restful-web-services-in-java-using-spring-mvc-and-spring-boot-79ec4b351d12?source=---------17------------------) service. Gson converter is used to send and receive data as JSON (JavaScript Object Notation).\n\n```\nimplementation 'com.squareup.retrofit2:retrofit:2.4.0'\nimplementation 'com.squareup.retrofit2:converter-gson:2.4.0'\n```\n\nWith Glide, you can load and display media from many different sources, such as remote servers or the local file system. This dependency is to display the image of a product with its URL.\n\n```\nimplementation 'com.github.bumptech.glide:glide:4.11.0'\nannotationProcessor 'com.github.bumptech.glide:compiler:4.11.0'\n```\n\nNow we have added all the required dependencies for the product.\n\n**Permissions**\nObviously, to perform operations using a remote REST API, we need internet permission. All the needed permissions are defined in the app/src/main/AndroidManifest.xml file.\n\n`<uses-permission android:name="android.permission.INTERNET" />`\n\nAnd also, android security policy restricts the application to interact with a REST API that runs on an HTTP protocol. As our backend runs on an HTTP protocol, we need to fix this by adding a special attribute to the application tag in the AndroidManifest.xml file. That special attribute is as below -\n\n`android:allowBackup="true"`\n\nYou can skip this special attribute adding step if your backend runs on HTTPS protocol. After giving all the permissions, our app/src/main/AndroidManifest.xml file looks as below-\n\n```\n<?xml version="1.0" encoding="utf-8"?>\n<manifest xmlns:android="http://schemas.android.com/apk/res/android"\n    package="com.webtutsplus.ecommerce">\n\n    <uses-permission android:name="android.permission.INTERNET" />\n\n    <application\n        android:allowBackup="true"\n        android:icon="@mipmap/ic_launcher"\n        android:label="@string/app_name"\n        android:roundIcon="@mipmap/ic_launcher_round"\n        android:supportsRtl="true"\n        android:theme="@style/AppTheme"\n        android:usesCleartextTraffic="true">\n        <activity android:name=".UpdateProductActivity"></activity>\n        <activity android:name=".AddProductActivity" />\n        <activity android:name=".ListProductsActivity" />\n        <activity android:name=".MainActivity">\n            <intent-filter>\n                <action android:name="android.intent.action.MAIN" />\n\n                <category android:name="android.intent.category.LAUNCHER" />\n            </intent-filter>\n        </activity>\n    </application>\n\n</manifest>\n```\n\nLet’s move into the coding section!\n\n**Connecting the API**\nWe will be using Retrofit to connect to our REST API. For performing the same, follow the instructions below-\n\n* Create a model class Product, whose objects we are going to send and receive through the API. It contains the following fields: Id — Name — ImageURL — Price — Description.\n\n```\npackage com.webtutsplus.ecommerce;\n\npublic class Product {\n    private long id;\n    private String name;\n    private String imageURL;\n    private double price;\n    private String description;\n\n    public long getId() {\n        return id;\n    }\n\n    public Product(long id, String name, String image, double price, String description) {\n        this.id = id;\n        this.name = name;\n        this.imageURL = image;\n        this.price = price;\n        this.description = description;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getImageURL() {\n        return imageURL;\n    }\n\n    public double getPrice() {\n        return price;\n    }\n\n    public String getDescription() {\n        return description;\n    }\n}\n```\n\n* Create an interface API.java, that helps us to make GET and POST requests to add, update, and fetch products in [REST API](https://www.java67.com/2017/06/top-10-rest-api-and-restful-web-services-book.html) and receive responses as mentioned.\n\n```\npackage com.webtutsplus.ecommerce;\n\nimport java.util.List;\n\nimport okhttp3.ResponseBody;\nimport retrofit2.Call;\nimport retrofit2.http.Body;\nimport retrofit2.http.GET;\nimport retrofit2.http.POST;\nimport retrofit2.http.Path;\n\npublic interface API {\n\n    @GET("product/")\n    Call<List<Product>> getProducts();\n\n    @POST("product/add/")\n    Call<ResponseBody> addProduct(@Body Product p);\n\n    @POST("product/update/{id}")\n    Call<ResponseBody> updateProduct(@Path("id") long productId, @Body Product p);\n}\n```\n\n* Create a singleton class for the Retrofit Client to communicate with the API service all along the application.\n```\npackage com.webtutsplus.ecommerce;\n\nimport retrofit2.Retrofit;\nimport retrofit2.converter.gson.GsonConverterFactory;\n\npublic class RetrofitClient {\n    private static final String BASE_URL = "http://remotedevs.org:8080/api/";\n    private static RetrofitClient mInstance;\n    private Retrofit retrofit;\n\n    private RetrofitClient() {\n        retrofit = new Retrofit.Builder()\n                .baseUrl(BASE_URL)\n                .addConverterFactory(GsonConverterFactory.create())\n                .build();\n    }\n\n    public static synchronized RetrofitClient getInstance() {\n        if (mInstance == null) mInstance = new RetrofitClient();\n        return mInstance;\n    }\n\n    public API getAPI() {\n        return retrofit.create(API.class);\n    }\n}\n```\n\nHurray! We are all set to communicate with the Backend API service!\n\n**Creating Activities**\nWe all know that activities are the basic building blocks of the application. An activity consists of a layout file and a java class to control the same.\nWe are provided with the pre-built activity called Main Activity. Therefore, we need three more activities to list the products, add a product and update a product respectively. Go ahead and create the following activities by following the steps: Right click on the MainActivity residing package -> New -> Activity -> Empty Activity\n\n> ListProducts Activity\n> AddProduct Activity\n> UpdateProduct Activity\n\n**The Main Page**\nThe front page (app/src/main/res/layout/activity_main.xml) of the application contains three buttons to navigate to list products, add products, and update products.\n\n```\n<?xml version="1.0" encoding="utf-8"?>\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"\n    xmlns:app="http://schemas.android.com/apk/res-auto"\n    xmlns:tools="http://schemas.android.com/tools"\n    android:layout_width="match_parent"\n    android:layout_height="match_parent"\n    android:background="@color/colorAccent"\n    android:padding="20dp"\n    tools:context=".MainActivity">\n\n    <TextView\n        android:id="@+id/tvTitle"\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:fontFamily="cursive"\n        android:padding="10dp"\n        android:text="E-Commerce"\n        android:textColor="@color/colorPrimaryDark"\n        android:textSize="60sp"\n        android:textStyle="bold"\n        app:layout_constraintEnd_toEndOf="parent"\n        app:layout_constraintStart_toStartOf="parent"\n        app:layout_constraintTop_toTopOf="parent" />\n\n    <TextView\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:text="PRODUCTS"\n        android:textColor="#000"\n        android:textSize="20sp"\n        android:textStyle="bold"\n        app:layout_constraintEnd_toEndOf="parent"\n        app:layout_constraintHorizontal_bias="0.5"\n        app:layout_constraintStart_toStartOf="parent"\n        app:layout_constraintTop_toBottomOf="@+id/tvTitle" />\n\n    <Button\n        android:id="@+id/btnToAddProduct"\n        android:layout_width="match_parent"\n        android:layout_height="wrap_content"\n        android:background="@color/colorPrimary"\n        android:text="ADD PRODUCT"\n        android:textColor="@android:color/background_dark"\n        android:textSize="16sp"\n        app:layout_constraintBottom_toBottomOf="parent"\n        app:layout_constraintEnd_toEndOf="parent"\n        app:layout_constraintStart_toStartOf="parent" />\n\n    <Button\n        android:id="@+id/btnToUpdateProduct"\n        android:layout_width="match_parent"\n        android:layout_height="wrap_content"\n        android:layout_marginBottom="76dp"\n        android:background="@color/colorPrimary"\n        android:text="UPDATE PRODUCT"\n        android:textColor="@android:color/background_dark"\n        android:textSize="16sp"\n        app:layout_constraintBottom_toBottomOf="@id/btnToAddProduct"\n        app:layout_constraintEnd_toEndOf="parent"\n        app:layout_constraintHorizontal_bias="0.5"\n        app:layout_constraintStart_toStartOf="parent" />\n\n    <Button\n        android:id="@+id/btnToViewProducts"\n        android:layout_width="match_parent"\n        android:layout_height="wrap_content"\n        android:layout_marginBottom="76dp"\n        android:background="@color/colorPrimary"\n        android:text="VIEW PRODUCTS"\n        android:textColor="@android:color/background_dark"\n        android:textSize="16sp"\n        app:layout_constraintBottom_toBottomOf="@+id/btnToUpdateProduct"\n        app:layout_constraintEnd_toEndOf="parent"\n        app:layout_constraintHorizontal_bias="0.5"\n        app:layout_constraintStart_toStartOf="parent" />\n</androidx.constraintlayout.widget.ConstraintLayout>\n```\n\nOnClick Listeners are set to the buttons respectively in the MainActivity.java file, through which the application is navigated to the respective sections.\n\n```\npackage com.webtutsplus.ecommerce;\n\nimport androidx.appcompat.app.AppCompatActivity;\n\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.view.View;\n\npublic class MainActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        findViewById(R.id.btnToViewProducts).setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                startActivity(new Intent(MainActivity.this, ListProductsActivity.class));\n            }\n        });\n\n        findViewById(R.id.btnToAddProduct).setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                startActivity(new Intent(MainActivity.this, AddProductActivity.class));\n            }\n        });\n\n        findViewById(R.id.btnToUpdateProduct).setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                startActivity(new Intent(MainActivity.this, UpdateProductActivity.class));\n            }\n        });\n\n    }\n}\n```\n\n**List Products**\nIn this section, we need to fetch all the products from the REST API, make a card view template, create a recycler view and dynamically add card view contents with the response from API and display the recycler view.\n* Add a recycler view to the app/src/main/res/layout/activity_list_products.xml layout file\n\n```\n<?xml version="1.0" encoding="utf-8"?>\n<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"\n    xmlns:app="http://schemas.android.com/apk/res-auto"\n    xmlns:tools="http://schemas.android.com/tools"\n    android:layout_width="match_parent"\n    android:layout_height="match_parent"\n    android:background="#333"\n    android:padding="2dp"\n    tools:context=".ListProductsActivity">\n\n    <androidx.recyclerview.widget.RecyclerView\n        android:id="@+id/revProducts"\n        android:layout_width="match_parent"\n        android:layout_height="match_parent"\n        android:background="#333"\n        android:padding="2dp" />\n\n\n</RelativeLayout>\n```\n* In our case, we are going to use Card View as the basic element for our recycler view. So, create a layout file called product_item.xml in the same location to design our card view. The contents of the card view element are as below -\n* An image view to display the product’s image\n* Four text views to display the product data\n* A relative layout to bind them all together\n\n```\n<?xml version="1.0" encoding="utf-8"?>\n<androidx.cardview.widget.CardView xmlns:android="http://schemas.android.com/apk/res/android"\n    android:layout_width="match_parent"\n    android:layout_height="wrap_content"\n    android:layout_margin="1dp"\n    xmlns:app="http://schemas.android.com/apk/res-auto"\n    app:cardCornerRadius="4dp">\n\n    <RelativeLayout\n        android:layout_width="match_parent"\n        android:layout_height="match_parent"\n        android:layout_margin="0dp">\n\n        <ImageView\n            android:id="@+id/ivProduct"\n            android:layout_width="100dp"\n            android:layout_height="100dp"\n            android:padding="2dp" />\n\n        <TextView\n            android:id="@+id/tvId"\n            android:layout_width="wrap_content"\n            android:layout_height="wrap_content"\n            android:layout_alignParentTop="true"\n            android:layout_marginStart="10dp"\n            android:layout_marginLeft="10dp"\n            android:layout_marginTop="5dp"\n            android:layout_toRightOf="@+id/ivProduct"\n            android:text="Id"\n            android:textColor="#000"\n            android:textSize="15sp" />\n\n        <TextView\n            android:id="@+id/tvName"\n            android:layout_width="wrap_content"\n            android:layout_height="wrap_content"\n            android:layout_below="@+id/tvId"\n            android:layout_marginStart="10dp"\n            android:layout_marginLeft="10dp"\n            android:layout_marginTop="5dp"\n            android:layout_toEndOf="@+id/ivProduct"\n            android:layout_toRightOf="@+id/ivProduct"\n            android:text="Iddddd2"\n            android:textColor="#000"\n            android:textSize="15sp" />\n\n        <TextView\n            android:id="@+id/tvPrice"\n            android:layout_width="wrap_content"\n            android:layout_height="wrap_content"\n            android:layout_below="@+id/tvName"\n            android:layout_marginStart="10dp"\n            android:layout_marginLeft="10dp"\n            android:layout_marginTop="5dp"\n            android:layout_toEndOf="@+id/ivProduct"\n            android:layout_toRightOf="@+id/ivProduct"\n            android:text="Iddddd2"\n            android:textColor="#000"\n            android:textSize="15sp" />\n\n        <TextView\n            android:id="@+id/tvDescription"\n            android:layout_width="wrap_content"\n            android:layout_height="wrap_content"\n            android:layout_below="@+id/tvPrice"\n            android:layout_marginStart="10dp"\n            android:layout_marginLeft="10dp"\n            android:layout_marginTop="5dp"\n            android:layout_toEndOf="@+id/ivProduct"\n            android:layout_toRightOf="@+id/ivProduct"\n            android:text="Iddddd2"\n            android:textColor="#000"\n            android:textSize="15sp" />\n\n    </RelativeLayout>\n\n</androidx.cardview.widget.CardView>\n```\n\n* Now, we have the required layouts. We need to set the recycler view by binding the card views to the adapter. To do so, we are creating a class called ProductAdapter and an inner class inside the same called ProductViewHolder, which takes a list of products and binds each one of them with a card view. The bound card views are further bound to the recycler view by the adapter class.\n* Each product’s Id, Name, Price, and Description are added to the respective text views in the card view.\n* The image from the product’s image URL is fetched and fitted to the image view in the card view by the Glide tool.\n\n```\npackage com.webtutsplus.ecommerce;\n\nimport android.content.Context;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.ImageView;\nimport android.widget.TextView;\n\nimport androidx.annotation.NonNull;\nimport androidx.recyclerview.widget.RecyclerView;\n\nimport com.bumptech.glide.Glide;\n\nimport java.util.List;\n\npublic class ProductAdapter extends RecyclerView.Adapter<ProductAdapter.ProductViewHolder> {\n\n    private Context context;\n    private List<Product> products;\n\n    public ProductAdapter(Context context, List<Product> products) {\n        this.context = context;\n        this.products = products;\n    }\n\n    @NonNull\n    @Override\n    public ProductViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\n        LayoutInflater inflater = LayoutInflater.from(context);\n        View view = inflater.inflate(R.layout.product_item, parent, false);\n        return new ProductViewHolder(view);\n    }\n\n    @Override\n    public void onBindViewHolder(@NonNull ProductViewHolder holder, int position) {\n        Product p = products.get(position);\n        String url = p.getImageURL();\n        Glide.with(context)\n                .load(url)\n                .centerCrop()\n                .placeholder(R.drawable.ic_launcher_foreground)\n                .into(holder.ivProduct);\n        holder.tvId.setText("Id: " + p.getId());\n        holder.tvName.setText(p.getName());\n        holder.tvPrice.setText("Price: " + p.getPrice());\n        holder.tvDescription.setText(p.getDescription());\n    }\n\n    @Override\n    public int getItemCount() {\n        return products.size();\n    }\n\n    public class ProductViewHolder extends RecyclerView.ViewHolder {\n\n        ImageView ivProduct;\n        TextView tvId, tvName, tvPrice, tvDescription;\n\n        public ProductViewHolder(@NonNull View itemView) {\n            super(itemView);\n            ivProduct = (ImageView) itemView.findViewById(R.id.ivProduct);\n            tvId = (TextView) itemView.findViewById(R.id.tvId);\n            tvName = (TextView) itemView.findViewById(R.id.tvName);\n            tvPrice = (TextView) itemView.findViewById(R.id.tvPrice);\n            tvDescription = (TextView) itemView.findViewById(R.id.tvDescription);\n        }\n    }\n}\n```\n\n* Go to the ListProductsActivity.java file. We have to fetch all the products from API with the help of the retrofit object, by making a GET request. The fetched products are stored in a List.\n* The recycler view is now built using the product adapter bypassing the fetched List of products.\n\n```\npackage com.webtutsplus.ecommerce;\n\nimport androidx.appcompat.app.AppCompatActivity;\nimport androidx.recyclerview.widget.LinearLayoutManager;\nimport androidx.recyclerview.widget.RecyclerView;\n\nimport android.os.Bundle;\nimport android.util.Log;\nimport android.view.View;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport java.util.List;\n\nimport retrofit2.Call;\nimport retrofit2.Callback;\nimport retrofit2.Response;\nimport retrofit2.Retrofit;\nimport retrofit2.converter.gson.GsonConverterFactory;\n\npublic class ListProductsActivity extends AppCompatActivity {\n\n    private RecyclerView revProducts;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_list_products);\n\n        API api = RetrofitClient.getInstance().getAPI();\n        Call<List<Product>> call = api.getProducts();\n\n        call.enqueue(new Callback<List<Product>>() {\n            @Override\n            public void onResponse(Call<List<Product>> call, Response<List<Product>> response) {\n                if (!response.isSuccessful()) {\n                    Toast.makeText(ListProductsActivity.this, response.code() + "", Toast.LENGTH_LONG).show();\n                    return;\n                }\n\n                List<Product> products = response.body();\n                revProducts = findViewById(R.id.revProducts);\n                revProducts.setLayoutManager(new LinearLayoutManager(ListProductsActivity.this));\n                revProducts.setAdapter(new ProductAdapter(ListProductsActivity.this, products));\n            }\n\n            @Override\n            public void onFailure(Call<List<Product>> call, Throwable t) {\n                Toast.makeText(ListProductsActivity.this, t.getMessage() + "", Toast.LENGTH_LONG).show();\n            }\n        });\n    }\n}\n```\n\nWe have listed the products in a recycler view successfully!\n\n**Add Product**\n* Create five edit text views to the layout file of AddProduct Activity (app/src/main/res/layout/activity_add_product.xml) to get the product details to add. Also add a button to submit the data.\n\n```\n<?xml version="1.0" encoding="utf-8"?>\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"\n    xmlns:app="http://schemas.android.com/apk/res-auto"\n    xmlns:tools="http://schemas.android.com/tools"\n    android:layout_width="match_parent"\n    android:layout_height="match_parent"\n    android:background="@color/colorAccent"\n    android:padding="20dp"\n    tools:context=".AddProductActivity">\n\n    <TextView\n        android:id="@+id/tvSubitle"\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:layout_marginTop="24dp"\n        android:text="ADD PRODUCT"\n        android:textColor="@color/colorPrimaryDark"\n        android:textSize="30sp"\n        android:textStyle="bold"\n        app:layout_constraintEnd_toEndOf="parent"\n        app:layout_constraintStart_toStartOf="parent"\n        app:layout_constraintTop_toTopOf="parent" />\n\n    <EditText\n        android:id="@+id/etId1"\n        android:layout_width="match_parent"\n        android:layout_height="wrap_content"\n        android:layout_marginTop="64dp"\n        android:hint="ID"\n        android:inputType="number"\n        app:layout_constraintEnd_toEndOf="parent"\n        app:layout_constraintHorizontal_bias="0.5"\n        app:layout_constraintStart_toStartOf="parent"\n        app:layout_constraintTop_toBottomOf="@+id/tvSubitle" />\n\n    <EditText\n        android:id="@+id/etName1"\n        android:layout_width="match_parent"\n        android:layout_height="wrap_content"\n        android:hint="Name"\n        app:layout_constraintEnd_toEndOf="parent"\n        app:layout_constraintHorizontal_bias="0.5"\n        app:layout_constraintStart_toStartOf="parent"\n        app:layout_constraintTop_toBottomOf="@+id/etId1" />\n\n    <EditText\n        android:id="@+id/etImageURL1"\n        android:layout_width="match_parent"\n        android:layout_height="wrap_content"\n        android:hint="Image URL"\n        app:layout_constraintEnd_toEndOf="parent"\n        app:layout_constraintHorizontal_bias="0.5"\n        app:layout_constraintStart_toStartOf="parent"\n        app:layout_constraintTop_toBottomOf="@+id/etName1" />\n\n    <EditText\n        android:id="@+id/etPrice1"\n        android:layout_width="match_parent"\n        android:layout_height="wrap_content"\n        android:hint="Price"\n        android:inputType="numberDecimal"\n        app:layout_constraintEnd_toEndOf="parent"\n        app:layout_constraintHorizontal_bias="0.5"\n        app:layout_constraintStart_toStartOf="parent"\n        app:layout_constraintTop_toBottomOf="@+id/etImageURL1" />\n\n    <EditText\n        android:id="@+id/etDescription1"\n        android:layout_width="match_parent"\n        android:layout_height="wrap_content"\n        android:hint="Description"\n        app:layout_constraintEnd_toEndOf="parent"\n        app:layout_constraintHorizontal_bias="0.5"\n        app:layout_constraintStart_toStartOf="parent"\n        app:layout_constraintTop_toBottomOf="@+id/etPrice1" />\n\n    <Button\n        android:id="@+id/btnAddProduct"\n        android:layout_width="match_parent"\n        android:layout_height="wrap_content"\n        android:background="@color/colorPrimary"\n        android:text="ADD"\n        android:textColor="#000"\n        android:textSize="16sp"\n        app:layout_constraintBottom_toBottomOf="parent"\n        tools:layout_editor_absoluteX="20dp" />\n\n</androidx.constraintlayout.widget.ConstraintLayout>\n```\n\n* Our UI is ready now. Go to the AddProductActivity class and add onClick listener to the button to add product.\n* In the on click listener, use the retrofit client to send the product object created using the data provided by the user\n* Notify the user if the product is added.\n\n```\npackage com.webtutsplus.ecommerce;\n\nimport androidx.appcompat.app.AppCompatActivity;\n\nimport android.os.Bundle;\nimport android.view.View;\nimport android.widget.EditText;\nimport android.widget.Toast;\n\nimport okhttp3.ResponseBody;\nimport retrofit2.Call;\nimport retrofit2.Callback;\nimport retrofit2.Response;\n\npublic class AddProductActivity extends AppCompatActivity {\n\n    private EditText etId, etName, etImageURL, etPrice, etDescription;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_add_product);\n\n        etId = findViewById(R.id.etId1);\n        etName = findViewById(R.id.etName1);\n        etImageURL = findViewById(R.id.etImageURL1);\n        etPrice = findViewById(R.id.etPrice1);\n        etDescription = findViewById(R.id.etDescription1);\n\n        findViewById(R.id.btnAddProduct).setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                addProduct();\n            }\n        });\n    }\n\n    private void addProduct() {\n        long id = Long.parseLong(etId.getText().toString().trim());\n        String name = etName.getText().toString().trim();\n        String imageURL = etImageURL.getText().toString().trim();\n        double price = Double.parseDouble(etPrice.getText().toString().trim());\n        String description = etDescription.getText().toString().trim();\n\n        API api = RetrofitClient.getInstance().getAPI();\n        Call<ResponseBody> call = api.addProduct(new Product(id, name, imageURL, price, description));\n\n        call.enqueue(new Callback<ResponseBody>() {\n            @Override\n            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {\n                try {\n                    String test = response.body().string();\n                    Toast.makeText(AddProductActivity.this, "Successfully Added!", Toast.LENGTH_LONG).show();\n                } catch (Exception e) {\n                    Toast.makeText(AddProductActivity.this, e.getMessage(), Toast.LENGTH_LONG).show();\n                }\n            }\n\n            @Override\n            public void onFailure(Call<ResponseBody> call, Throwable t) {\n                Toast.makeText(AddProductActivity.this, t.getMessage(), Toast.LENGTH_LONG).show();\n            }\n        });\n\n        etId.getText().clear();\n        etName.getText().clear();\n        etImageURL.getText().clear();\n        etPrice.getText().clear();\n        etDescription.getText().clear();\n    }\n}\n```\n\nAnd yes! We can add any number of products using our application!\n\n**Update Product**\n* Create five edit text views to the layout file of UpdateProduct Activity (app/src/main/res/layout/activity_update_product.xml) to get the product details to update. Also add a button to submit the data.\n```\n<?xml version="1.0" encoding="utf-8"?>\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"\n    xmlns:app="http://schemas.android.com/apk/res-auto"\n    xmlns:tools="http://schemas.android.com/tools"\n    android:layout_width="match_parent"\n    android:layout_height="match_parent"\n    android:background="@color/colorAccent"\n    android:padding="20dp"\n    tools:context=".UpdateProductActivity">\n\n    <TextView\n        android:id="@+id/tvSubitle"\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:layout_marginTop="24dp"\n        android:text="UPDATE PRODUCT"\n        android:textColor="@color/colorPrimaryDark"\n        android:textSize="30sp"\n        android:textStyle="bold"\n        app:layout_constraintEnd_toEndOf="parent"\n        app:layout_constraintStart_toStartOf="parent"\n        app:layout_constraintTop_toTopOf="parent" />\n\n    <EditText\n        android:id="@+id/etId2"\n        android:layout_width="match_parent"\n        android:layout_height="wrap_content"\n        android:layout_marginTop="64dp"\n        android:hint="ID"\n        app:layout_constraintEnd_toEndOf="parent"\n        app:layout_constraintHorizontal_bias="0.5"\n        app:layout_constraintStart_toStartOf="parent"\n        app:layout_constraintTop_toBottomOf="@+id/tvSubitle" />\n\n    <EditText\n        android:id="@+id/etName2"\n        android:layout_width="match_parent"\n        android:layout_height="wrap_content"\n        android:hint="Name"\n        app:layout_constraintEnd_toEndOf="parent"\n        app:layout_constraintHorizontal_bias="0.5"\n        app:layout_constraintStart_toStartOf="parent"\n        app:layout_constraintTop_toBottomOf="@+id/etId2" />\n\n    <EditText\n        android:id="@+id/etImageURL2"\n        android:layout_width="match_parent"\n        android:layout_height="wrap_content"\n        android:hint="Image URL"\n        app:layout_constraintEnd_toEndOf="parent"\n        app:layout_constraintHorizontal_bias="0.5"\n        app:layout_constraintStart_toStartOf="parent"\n        app:layout_constraintTop_toBottomOf="@+id/etName2" />\n\n    <EditText\n        android:id="@+id/etPrice2"\n        android:layout_width="match_parent"\n        android:layout_height="wrap_content"\n        android:hint="Price"\n        android:inputType="numberDecimal"\n        app:layout_constraintEnd_toEndOf="parent"\n        app:layout_constraintHorizontal_bias="0.5"\n        app:layout_constraintStart_toStartOf="parent"\n        app:layout_constraintTop_toBottomOf="@+id/etImageURL2" />\n\n    <EditText\n        android:id="@+id/etDescription2"\n        android:layout_width="match_parent"\n        android:layout_height="wrap_content"\n        android:hint="Description"\n        app:layout_constraintEnd_toEndOf="parent"\n        app:layout_constraintHorizontal_bias="0.5"\n        app:layout_constraintStart_toStartOf="parent"\n        app:layout_constraintTop_toBottomOf="@+id/etPrice2" />\n\n    <Button\n        android:id="@+id/btnUpdateProduct"\n        android:layout_width="match_parent"\n        android:layout_height="wrap_content"\n        android:background="@color/colorPrimary"\n        android:text="UPDATE"\n        android:textColor="#000"\n        android:textSize="16sp"\n        app:layout_constraintBottom_toBottomOf="parent"\n        tools:layout_editor_absoluteX="20dp" />\n\n</androidx.constraintlayout.widget.ConstraintLayout>\n```\n\n* Our UI is ready now. Go to the UpdateProductActivity class and add on click listener to the button to update the product.\n* In the on click listener, use the retrofit client to send the product object created using the data provided by the user.\n* Notify the user if the product is updated.\n\n```\npackage com.webtutsplus.ecommerce;\n\nimport androidx.appcompat.app.AppCompatActivity;\n\nimport android.os.Bundle;\nimport android.view.View;\nimport android.widget.EditText;\nimport android.widget.Toast;\n\nimport okhttp3.ResponseBody;\nimport retrofit2.Call;\nimport retrofit2.Callback;\nimport retrofit2.Response;\n\npublic class UpdateProductActivity extends AppCompatActivity {\n\n    private EditText etId, etName, etImageURL, etPrice, etDescription;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_update_product);\n\n        etId = findViewById(R.id.etId2);\n        etName = findViewById(R.id.etName2);\n        etImageURL = findViewById(R.id.etImageURL2);\n        etPrice = findViewById(R.id.etPrice2);\n        etDescription = findViewById(R.id.etDescription2);\n\n        findViewById(R.id.btnUpdateProduct).setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                updateProduct();\n            }\n        });\n    }\n\n    private void updateProduct() {\n        long id = Long.parseLong(etId.getText().toString().trim());\n        String name = etName.getText().toString().trim();\n        String imageURL = etImageURL.getText().toString().trim();\n        double price = Double.parseDouble(etPrice.getText().toString().trim());\n        String description = etDescription.getText().toString().trim();\n\n        API api = RetrofitClient.getInstance().getAPI();\n        Call<ResponseBody> call = api.updateProduct(id, new Product(id, name, imageURL, price, description));\n\n        call.enqueue(new Callback<ResponseBody>() {\n            @Override\n            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {\n                try {\n                    String test = response.body().string();\n                    Toast.makeText(UpdateProductActivity.this, "Successfully Updated!", Toast.LENGTH_LONG).show();\n                } catch (Exception e) {\n                    Toast.makeText(UpdateProductActivity.this, response.code()+"", Toast.LENGTH_LONG).show();\n                }\n            }\n\n            @Override\n            public void onFailure(Call<ResponseBody> call, Throwable t) {\n                Toast.makeText(UpdateProductActivity.this, t.getMessage(), Toast.LENGTH_LONG).show();\n            }\n        });\n\n        etId.getText().clear();\n        etName.getText().clear();\n        etImageURL.getText().clear();\n        etPrice.getText().clear();\n        etDescription.getText().clear();\n    }\n}\n```\n\nWe can update any number of products in the backend using our application!\n\nRunning the Application\nNow, it’s time for running the application, after adding the required functionalities. Select the required Android Virtual Device from the toolbar and click on the run button on the same(Green triangle icon)\nAfter a certain amount of time, your android virtual device will get the application installed and opened. You can completely use it now!\nThe demo of our application is as follows —\n\n[demo 1](https://miro.medium.com/max/450/1*xpDkDzDXL3GNiwyuP9n8OA.gif)\n[demo 2](https://miro.medium.com/max/638/1*DqCSXPeErKDL9OWqoV7btg.gif)\n[demo 3](https://miro.medium.com/max/638/1*1-Hlzm7QN4fuYFRjc0m1Ig.gif)\n\n**Resources**\n1. [Bitbucket link](https://bitbucket.org/ecommerce-webtutsplus/ecommerce/src/master/) for Spring Backend Project Repository\n2. [Bitbucket link](https://bitbucket.org/ecommerce-webtutsplus/android-ui/src/8568838ecd461c2e122c06c78699fd7f150e9953/?at=giridhara%2Fproducts) for Android Application Project Repository\n3. [Spring Backend](http://remotedevs.org:8080/api/swagger-ui.html) Swagger UI hosted on cloud\n4. [REST API](http://remotedevs.org:8080/api/) of our Spring Backend\n5. [Tutorial](https://medium.com/technology-hits/lets-develop-an-ecommerce-application-from-scratch-using-java-and-spring-6dfac6ce5a9f) for the creating Spring Backend API\n6. [Steps](https://developer.android.com/studio/install) to install and set up Android Studio\n\nThat’s it! Hope you have learned many things from this tutorial. \n\n	{"boosted_additional_tags": "", "boosted_dev_digest_email": false, "boosted_additional_articles": false}	\N	android, ecommerce	--- !ruby/struct:Articles::CachedEntity\nname: nilmadhab mondal\nusername: nilmadhab\nslug: nilmadhab\nprofile_image_90: "/uploads/user/profile_image/1/d9b0e3b7-ad59-45d5-b516-4e8ffd0a6958.jpeg"\nprofile_image_url: "/uploads/user/profile_image/1/d9b0e3b7-ad59-45d5-b516-4e8ffd0a6958.jpeg"\n	nilmadhab mondal	nilmadhab	\N	{}	\N	0	\N	0	2021-02-21 08:08:33.027514	\N	Let’s Add Products in Android for E-Commerce App | by Nil Madha...	\N	t	5	5	\N	f	1613894913	\N	354534	en	\N	2021-02-21 08:08:33.0186	\N	/i/t4itq1rgbswsyxxdcat2.png	#dddddd	23	0	0	0	\N	\N	4	b3c69d19eabcf1b264737d7b70329283de83b666596cd3770710decb6e11c4bab786816e8cf896baef1e766bbe8d3d4ed6beab906cf4900dfd54b211	/nilmadhab/products-page-android-4og4	0	0	0	<div class="ltag__link">\n  <a href="https://medium.com/webtutsplus/lets-add-products-in-android-for-e-commerce-app-b8468e055001" class="ltag__link__link">\n    <div class="ltag__link__pic">\n      <img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--tLzMBohE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/fit/c/96/96/1%2AhNjwft_dNBxvTr6g6TOVGg.jpeg" alt="Nil Madhab" loading="lazy">\n    </div>\n  </a>\n  <a href="https://medium.com/webtutsplus/lets-add-products-in-android-for-e-commerce-app-b8468e055001" class="ltag__link__link">\n    <div class="ltag__link__content">\n      <h2>Let’s Add Products in Android for E-Commerce App | by Nil Madhab | webtutsplus | Medium</h2>\n      <h3>Nil Madhab ・ <time datetime="2021-01-03T15:02:27.202Z">Jan 3, 2021</time> ・ 7 min read\n      <div class="ltag__link__servicename">\n        <img src="/assets/medium_icon.svg" alt="Medium Logo" aria-label="Medium Logo" loading="lazy">\n        Medium\n      </div>\n    </h3>\n</div>\n  </a>\n</div>\n\n\n<p><a href="https://miro.medium.com/max/450/1*xpDkDzDXL3GNiwyuP9n8OA.gif">click to see the gif of final result</a></p>\n\n<p><strong>Contents of this Tutorial</strong></p>\n\n<blockquote>\n<p>Introduction<br>\nRequirements<br>\nDatabase Design<br>\nAPI Design<br>\nProject Creation<br>\nDependencies<br>\nPermissions<br>\nConnecting the API<br>\nCreating Activities<br>\nThe Main Page<br>\nList Products<br>\nAdd Product<br>\nUpdate Product<br>\nRunning the Application<br>\nResources</p>\n</blockquote>\n\n<p><strong>Introduction</strong><br>\nIn this tutorial series, we are building an e-commerce platform for all users. As a continuation of the previous tutorials, we are gonna build an android application to manage the products in our platform.</p>\n\n<p>Using this application, we can see the products, add a product or update a product. Therefore, this tutorial is primarily composed of the following sections —</p>\n\n<blockquote>\n<p>List Products<br>\nAdd Product<br>\nUpdate Product</p>\n</blockquote>\n\n<p><strong>Requirements</strong></p>\n\n<ul>\n<li>Android Studio (Completely Setup with SDK)</li>\n<li>Android Virtual Device</li>\n<li>Cloud Hosted E-Commerce Backend API</li>\n<li>Retrofit</li>\n<li>Glide\nSteps to set up your work environment in Android Studio can be found <a href="https://developer.android.com/studio/install">here</a>\n</li>\n</ul>\n\n<p><strong>Database Design</strong><br>\nThis is a sample JSON of a product, we will link it to a category and add other fields in later tutorials.<br>\n</p>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>[  {\n    "id": 1,\n    "name": "Adidas Final UCL Ball",\n    "imageURL": "https://images.unsplash.com/photo-1589487391730-58f20eb2c308?ixid=MXwxMjA3fDB8MHxzZWFyY2h8OXx8Zm9vdGJhbGx8ZW58MHx8MHw%3D&amp;ixlib=rb-1.2.1&amp;auto=format&amp;fit=crop&amp;w=500&amp;q=60",\n    "price": 3000.0,\n    "description": "This is a football"\n  },\n  {\n    "id": 2,\n    "name": "Acer Nitro 5",\n    "imageURL": "https://images.unsplash.com/photo-1496181133206-80ce9b88a853?ixid=MXwxMjA3fDB8MHxzZWFyY2h8M3x8bGFwdG9wfGVufDB8fDB8&amp;ixlib=rb-1.2.1&amp;auto=format&amp;fit=crop&amp;w=500&amp;q=60",\n    "price": 55000.0,\n    "description": "This is a laptop"\n  }\n ]\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n\n\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>CREATE TABLE `products` (\n  `id` bigint NOT NULL,\n  `description` varchar(255) DEFAULT NULL,\n  `imageurl` varchar(255) DEFAULT NULL,\n  `name` varchar(255) DEFAULT NULL,\n  `price` double NOT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci \n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Each product has a unique ID, name, image URL, price, description. We can model it in <a href="https://medium.com/javarevisited/10-advanced-spring-boot-courses-for-experienced-java-developers-5e57606816bd">Springboot</a> as<br>\n</p>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>@Entity\n@Table(name = "products")\npublic class Product {\n    private @GeneratedValue @Id long id;\n    private @NotNull String name;\n    private @NotNull String imageURL;\n    private @NotNull double price;\n    private @NotNull String description;\n    ...\n}\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p><strong>API Design</strong><br>\nIn the real-world, we need to see the products, create new products, and update the products. So we will create 3 APIs. Later we will create many other real-world features like deleting, stocks, linking to categories, and adding tags. After this, we will create the UI.<br>\n</p>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>package com.webtutsplus.ecommerce.controller;\n\nimport com.webtutsplus.ecommerce.common.ApiResponse;\nimport com.webtutsplus.ecommerce.model.Product;\nimport com.webtutsplus.ecommerce.service.ProductService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.validation.Valid;\nimport java.util.List;\n\n@RestController\n@RequestMapping("/product")\npublic class ProductController {\n    @Autowired ProductService productService;\n\n    @GetMapping("/")\n    public ResponseEntity&lt;List&lt;Product&gt;&gt; getProducts() {\n        List&lt;Product&gt; body = productService.listProducts();\n        return new ResponseEntity&lt;List&lt;Product&gt;&gt;(body, HttpStatus.OK);\n    }\n\n    @PostMapping("/add")\n    public ResponseEntity&lt;ApiResponse&gt; addProduct(@RequestBody @Valid Product product) {\n        productService.addProduct(product);\n        return new ResponseEntity&lt;ApiResponse&gt;(new ApiResponse(true, "Product has been added"), HttpStatus.CREATED);\n    }\n\n    @PostMapping("/update/{productID}")\n    public ResponseEntity&lt;ApiResponse&gt; updateProduct(@PathVariable("productID") long productID, @RequestBody @Valid Product product) {\n        productService.updateProduct(productID, product);\n        return new ResponseEntity&lt;ApiResponse&gt;(new ApiResponse(true, "Product has been updated"), HttpStatus.OK);\n    }\n}\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p><a href="https://miro.medium.com/max/875/0*Q4hDUb9UDoXH7nWy.png">View image</a></p>\n\n<p>You can find the backend code in this <a href="https://bitbucket.org/ecommerce-webtutsplus/ecommerce/src/596dd222404adcdd5541ddd04e48f9b75dfa3205/?at=nmadhab%2Fproducts-v1-first-tutorial">branch</a>.</p>\n\n<p><strong>Project Creation</strong><br>\nAfter completing the IDE setup,</p>\n\n<ol>\n<li>Open Android Studio</li>\n<li>Click on New Project</li>\n<li>Select empty activity</li>\n<li>Select <a href="https://javarevisited.blogspot.com/2017/12/10-things-java-programmers-should-learn.html#axzz6n5gVwfTP">Java</a> for Language</li>\n<li>Select Android SDK such that our app runs on all devices</li>\n<li>Click on finish</li>\n<li>Wait until all the gradle scripts get downloaded.</li>\n</ol>\n\n<p><a href="https://miro.medium.com/max/875/0*lTwGWuJ50EpsjnY0.png">View image</a></p>\n\n<p>We can start working on our project at once the build is successful. The project basically comes with the Main Activity from which our application starts, and the layout for the same called activity_main.xml, where we define its User Interface (UI)</p>\n\n<p><strong>Dependencies</strong></p>\n\n<p>To build our application successfully, we need the following dependencies</p>\n\n<blockquote>\n<p>Recycler View<br>\nCard View<br>\nRetrofit<br>\nGson converter<br>\nGlide</p>\n</blockquote>\n\n<p>Copy-paste the dependencies given in the below blocks in the app level gradle file and click sync now on the top right corner of the IDE to get all the dependencies.<br>\nRecycler View makes it easy to efficiently display large sets of data. We supply the data and define how each item looks, and the Recycler View library dynamically creates the elements when they’re needed. As the name implies, Recycler View recycles those individual elements.</p>\n\n<p><code>implementation ‘androidx.recyclerview:recyclerview:1.1.0’</code></p>\n\n<p>Card View is gonna act as the basic building block element for our Recycler View. The Card View contents will be decided by us and the same block of elements will be repeating in our Recycler View.</p>\n\n<p><code>implementation 'androidx.cardview:cardview:1.0.0'</code></p>\n\n<p>Retrofit is the REST API client that can send requests and receive response from our <a href="https://medium.com/javarevisited/top-5-books-and-courses-to-learn-restful-web-services-in-java-using-spring-mvc-and-spring-boot-79ec4b351d12?source=---------17------------------">RESTful</a> service. Gson converter is used to send and receive data as JSON (JavaScript Object Notation).<br>\n</p>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>implementation 'com.squareup.retrofit2:retrofit:2.4.0'\nimplementation 'com.squareup.retrofit2:converter-gson:2.4.0'\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>With Glide, you can load and display media from many different sources, such as remote servers or the local file system. This dependency is to display the image of a product with its URL.<br>\n</p>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>implementation 'com.github.bumptech.glide:glide:4.11.0'\nannotationProcessor 'com.github.bumptech.glide:compiler:4.11.0'\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Now we have added all the required dependencies for the product.</p>\n\n<p><strong>Permissions</strong><br>\nObviously, to perform operations using a remote REST API, we need internet permission. All the needed permissions are defined in the app/src/main/AndroidManifest.xml file.</p>\n\n<p><code>&lt;uses-permission android:name="android.permission.INTERNET" /&gt;</code></p>\n\n<p>And also, android security policy restricts the application to interact with a REST API that runs on an HTTP protocol. As our backend runs on an HTTP protocol, we need to fix this by adding a special attribute to the application tag in the AndroidManifest.xml file. That special attribute is as below -</p>\n\n<p><code>android:allowBackup="true"</code></p>\n\n<p>You can skip this special attribute adding step if your backend runs on HTTPS protocol. After giving all the permissions, our app/src/main/AndroidManifest.xml file looks as below-<br>\n</p>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;\n&lt;manifest xmlns:android="http://schemas.android.com/apk/res/android"\n    package="com.webtutsplus.ecommerce"&gt;\n\n    &lt;uses-permission android:name="android.permission.INTERNET" /&gt;\n\n    &lt;application\n        android:allowBackup="true"\n        android:icon="@mipmap/ic_launcher"\n        android:label="@string/app_name"\n        android:roundIcon="@mipmap/ic_launcher_round"\n        android:supportsRtl="true"\n        android:theme="@style/AppTheme"\n        android:usesCleartextTraffic="true"&gt;\n        &lt;activity android:name=".UpdateProductActivity"&gt;&lt;/activity&gt;\n        &lt;activity android:name=".AddProductActivity" /&gt;\n        &lt;activity android:name=".ListProductsActivity" /&gt;\n        &lt;activity android:name=".MainActivity"&gt;\n            &lt;intent-filter&gt;\n                &lt;action android:name="android.intent.action.MAIN" /&gt;\n\n                &lt;category android:name="android.intent.category.LAUNCHER" /&gt;\n            &lt;/intent-filter&gt;\n        &lt;/activity&gt;\n    &lt;/application&gt;\n\n&lt;/manifest&gt;\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Let’s move into the coding section!</p>\n\n<p><strong>Connecting the API</strong><br>\nWe will be using Retrofit to connect to our REST API. For performing the same, follow the instructions below-</p>\n\n<ul>\n<li>Create a model class Product, whose objects we are going to send and receive through the API. It contains the following fields: Id — Name — ImageURL — Price — Description.\n</li>\n</ul>\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>package com.webtutsplus.ecommerce;\n\npublic class Product {\n    private long id;\n    private String name;\n    private String imageURL;\n    private double price;\n    private String description;\n\n    public long getId() {\n        return id;\n    }\n\n    public Product(long id, String name, String image, double price, String description) {\n        this.id = id;\n        this.name = name;\n        this.imageURL = image;\n        this.price = price;\n        this.description = description;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getImageURL() {\n        return imageURL;\n    }\n\n    public double getPrice() {\n        return price;\n    }\n\n    public String getDescription() {\n        return description;\n    }\n}\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n<ul>\n<li>Create an interface API.java, that helps us to make GET and POST requests to add, update, and fetch products in <a href="https://www.java67.com/2017/06/top-10-rest-api-and-restful-web-services-book.html">REST API</a> and receive responses as mentioned.\n</li>\n</ul>\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>package com.webtutsplus.ecommerce;\n\nimport java.util.List;\n\nimport okhttp3.ResponseBody;\nimport retrofit2.Call;\nimport retrofit2.http.Body;\nimport retrofit2.http.GET;\nimport retrofit2.http.POST;\nimport retrofit2.http.Path;\n\npublic interface API {\n\n    @GET("product/")\n    Call&lt;List&lt;Product&gt;&gt; getProducts();\n\n    @POST("product/add/")\n    Call&lt;ResponseBody&gt; addProduct(@Body Product p);\n\n    @POST("product/update/{id}")\n    Call&lt;ResponseBody&gt; updateProduct(@Path("id") long productId, @Body Product p);\n}\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n<ul>\n<li>Create a singleton class for the Retrofit Client to communicate with the API service all along the application.\n</li>\n</ul>\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>package com.webtutsplus.ecommerce;\n\nimport retrofit2.Retrofit;\nimport retrofit2.converter.gson.GsonConverterFactory;\n\npublic class RetrofitClient {\n    private static final String BASE_URL = "http://remotedevs.org:8080/api/";\n    private static RetrofitClient mInstance;\n    private Retrofit retrofit;\n\n    private RetrofitClient() {\n        retrofit = new Retrofit.Builder()\n                .baseUrl(BASE_URL)\n                .addConverterFactory(GsonConverterFactory.create())\n                .build();\n    }\n\n    public static synchronized RetrofitClient getInstance() {\n        if (mInstance == null) mInstance = new RetrofitClient();\n        return mInstance;\n    }\n\n    public API getAPI() {\n        return retrofit.create(API.class);\n    }\n}\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n<p>Hurray! We are all set to communicate with the Backend API service!</p>\n\n<p><strong>Creating Activities</strong><br>\nWe all know that activities are the basic building blocks of the application. An activity consists of a layout file and a java class to control the same.<br>\nWe are provided with the pre-built activity called Main Activity. Therefore, we need three more activities to list the products, add a product and update a product respectively. Go ahead and create the following activities by following the steps: Right click on the MainActivity residing package -&gt; New -&gt; Activity -&gt; Empty Activity</p>\n\n<blockquote>\n<p>ListProducts Activity<br>\nAddProduct Activity<br>\nUpdateProduct Activity</p>\n</blockquote>\n\n<p><strong>The Main Page</strong><br>\nThe front page (app/src/main/res/layout/activity_main.xml) of the application contains three buttons to navigate to list products, add products, and update products.<br>\n</p>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;\n&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"\n    xmlns:app="http://schemas.android.com/apk/res-auto"\n    xmlns:tools="http://schemas.android.com/tools"\n    android:layout_width="match_parent"\n    android:layout_height="match_parent"\n    android:background="@color/colorAccent"\n    android:padding="20dp"\n    tools:context=".MainActivity"&gt;\n\n    &lt;TextView\n        android:id="@+id/tvTitle"\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:fontFamily="cursive"\n        android:padding="10dp"\n        android:text="E-Commerce"\n        android:textColor="@color/colorPrimaryDark"\n        android:textSize="60sp"\n        android:textStyle="bold"\n        app:layout_constraintEnd_toEndOf="parent"\n        app:layout_constraintStart_toStartOf="parent"\n        app:layout_constraintTop_toTopOf="parent" /&gt;\n\n    &lt;TextView\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:text="PRODUCTS"\n        android:textColor="#000"\n        android:textSize="20sp"\n        android:textStyle="bold"\n        app:layout_constraintEnd_toEndOf="parent"\n        app:layout_constraintHorizontal_bias="0.5"\n        app:layout_constraintStart_toStartOf="parent"\n        app:layout_constraintTop_toBottomOf="@+id/tvTitle" /&gt;\n\n    &lt;Button\n        android:id="@+id/btnToAddProduct"\n        android:layout_width="match_parent"\n        android:layout_height="wrap_content"\n        android:background="@color/colorPrimary"\n        android:text="ADD PRODUCT"\n        android:textColor="@android:color/background_dark"\n        android:textSize="16sp"\n        app:layout_constraintBottom_toBottomOf="parent"\n        app:layout_constraintEnd_toEndOf="parent"\n        app:layout_constraintStart_toStartOf="parent" /&gt;\n\n    &lt;Button\n        android:id="@+id/btnToUpdateProduct"\n        android:layout_width="match_parent"\n        android:layout_height="wrap_content"\n        android:layout_marginBottom="76dp"\n        android:background="@color/colorPrimary"\n        android:text="UPDATE PRODUCT"\n        android:textColor="@android:color/background_dark"\n        android:textSize="16sp"\n        app:layout_constraintBottom_toBottomOf="@id/btnToAddProduct"\n        app:layout_constraintEnd_toEndOf="parent"\n        app:layout_constraintHorizontal_bias="0.5"\n        app:layout_constraintStart_toStartOf="parent" /&gt;\n\n    &lt;Button\n        android:id="@+id/btnToViewProducts"\n        android:layout_width="match_parent"\n        android:layout_height="wrap_content"\n        android:layout_marginBottom="76dp"\n        android:background="@color/colorPrimary"\n        android:text="VIEW PRODUCTS"\n        android:textColor="@android:color/background_dark"\n        android:textSize="16sp"\n        app:layout_constraintBottom_toBottomOf="@+id/btnToUpdateProduct"\n        app:layout_constraintEnd_toEndOf="parent"\n        app:layout_constraintHorizontal_bias="0.5"\n        app:layout_constraintStart_toStartOf="parent" /&gt;\n&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>OnClick Listeners are set to the buttons respectively in the MainActivity.java file, through which the application is navigated to the respective sections.<br>\n</p>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>package com.webtutsplus.ecommerce;\n\nimport androidx.appcompat.app.AppCompatActivity;\n\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.view.View;\n\npublic class MainActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        findViewById(R.id.btnToViewProducts).setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                startActivity(new Intent(MainActivity.this, ListProductsActivity.class));\n            }\n        });\n\n        findViewById(R.id.btnToAddProduct).setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                startActivity(new Intent(MainActivity.this, AddProductActivity.class));\n            }\n        });\n\n        findViewById(R.id.btnToUpdateProduct).setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                startActivity(new Intent(MainActivity.this, UpdateProductActivity.class));\n            }\n        });\n\n    }\n}\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p><strong>List Products</strong><br>\nIn this section, we need to fetch all the products from the REST API, make a card view template, create a recycler view and dynamically add card view contents with the response from API and display the recycler view.</p>\n\n<ul>\n<li>Add a recycler view to the app/src/main/res/layout/activity_list_products.xml layout file\n</li>\n</ul>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;\n&lt;RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"\n    xmlns:app="http://schemas.android.com/apk/res-auto"\n    xmlns:tools="http://schemas.android.com/tools"\n    android:layout_width="match_parent"\n    android:layout_height="match_parent"\n    android:background="#333"\n    android:padding="2dp"\n    tools:context=".ListProductsActivity"&gt;\n\n    &lt;androidx.recyclerview.widget.RecyclerView\n        android:id="@+id/revProducts"\n        android:layout_width="match_parent"\n        android:layout_height="match_parent"\n        android:background="#333"\n        android:padding="2dp" /&gt;\n\n\n&lt;/RelativeLayout&gt;\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<ul>\n<li>In our case, we are going to use Card View as the basic element for our recycler view. So, create a layout file called product_item.xml in the same location to design our card view. The contents of the card view element are as below -</li>\n<li>An image view to display the product’s image</li>\n<li>Four text views to display the product data</li>\n<li>A relative layout to bind them all together\n</li>\n</ul>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;\n&lt;androidx.cardview.widget.CardView xmlns:android="http://schemas.android.com/apk/res/android"\n    android:layout_width="match_parent"\n    android:layout_height="wrap_content"\n    android:layout_margin="1dp"\n    xmlns:app="http://schemas.android.com/apk/res-auto"\n    app:cardCornerRadius="4dp"&gt;\n\n    &lt;RelativeLayout\n        android:layout_width="match_parent"\n        android:layout_height="match_parent"\n        android:layout_margin="0dp"&gt;\n\n        &lt;ImageView\n            android:id="@+id/ivProduct"\n            android:layout_width="100dp"\n            android:layout_height="100dp"\n            android:padding="2dp" /&gt;\n\n        &lt;TextView\n            android:id="@+id/tvId"\n            android:layout_width="wrap_content"\n            android:layout_height="wrap_content"\n            android:layout_alignParentTop="true"\n            android:layout_marginStart="10dp"\n            android:layout_marginLeft="10dp"\n            android:layout_marginTop="5dp"\n            android:layout_toRightOf="@+id/ivProduct"\n            android:text="Id"\n            android:textColor="#000"\n            android:textSize="15sp" /&gt;\n\n        &lt;TextView\n            android:id="@+id/tvName"\n            android:layout_width="wrap_content"\n            android:layout_height="wrap_content"\n            android:layout_below="@+id/tvId"\n            android:layout_marginStart="10dp"\n            android:layout_marginLeft="10dp"\n            android:layout_marginTop="5dp"\n            android:layout_toEndOf="@+id/ivProduct"\n            android:layout_toRightOf="@+id/ivProduct"\n            android:text="Iddddd2"\n            android:textColor="#000"\n            android:textSize="15sp" /&gt;\n\n        &lt;TextView\n            android:id="@+id/tvPrice"\n            android:layout_width="wrap_content"\n            android:layout_height="wrap_content"\n            android:layout_below="@+id/tvName"\n            android:layout_marginStart="10dp"\n            android:layout_marginLeft="10dp"\n            android:layout_marginTop="5dp"\n            android:layout_toEndOf="@+id/ivProduct"\n            android:layout_toRightOf="@+id/ivProduct"\n            android:text="Iddddd2"\n            android:textColor="#000"\n            android:textSize="15sp" /&gt;\n\n        &lt;TextView\n            android:id="@+id/tvDescription"\n            android:layout_width="wrap_content"\n            android:layout_height="wrap_content"\n            android:layout_below="@+id/tvPrice"\n            android:layout_marginStart="10dp"\n            android:layout_marginLeft="10dp"\n            android:layout_marginTop="5dp"\n            android:layout_toEndOf="@+id/ivProduct"\n            android:layout_toRightOf="@+id/ivProduct"\n            android:text="Iddddd2"\n            android:textColor="#000"\n            android:textSize="15sp" /&gt;\n\n    &lt;/RelativeLayout&gt;\n\n&lt;/androidx.cardview.widget.CardView&gt;\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<ul>\n<li>Now, we have the required layouts. We need to set the recycler view by binding the card views to the adapter. To do so, we are creating a class called ProductAdapter and an inner class inside the same called ProductViewHolder, which takes a list of products and binds each one of them with a card view. The bound card views are further bound to the recycler view by the adapter class.</li>\n<li>Each product’s Id, Name, Price, and Description are added to the respective text views in the card view.</li>\n<li>The image from the product’s image URL is fetched and fitted to the image view in the card view by the Glide tool.\n</li>\n</ul>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>package com.webtutsplus.ecommerce;\n\nimport android.content.Context;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.ImageView;\nimport android.widget.TextView;\n\nimport androidx.annotation.NonNull;\nimport androidx.recyclerview.widget.RecyclerView;\n\nimport com.bumptech.glide.Glide;\n\nimport java.util.List;\n\npublic class ProductAdapter extends RecyclerView.Adapter&lt;ProductAdapter.ProductViewHolder&gt; {\n\n    private Context context;\n    private List&lt;Product&gt; products;\n\n    public ProductAdapter(Context context, List&lt;Product&gt; products) {\n        this.context = context;\n        this.products = products;\n    }\n\n    @NonNull\n    @Override\n    public ProductViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\n        LayoutInflater inflater = LayoutInflater.from(context);\n        View view = inflater.inflate(R.layout.product_item, parent, false);\n        return new ProductViewHolder(view);\n    }\n\n    @Override\n    public void onBindViewHolder(@NonNull ProductViewHolder holder, int position) {\n        Product p = products.get(position);\n        String url = p.getImageURL();\n        Glide.with(context)\n                .load(url)\n                .centerCrop()\n                .placeholder(R.drawable.ic_launcher_foreground)\n                .into(holder.ivProduct);\n        holder.tvId.setText("Id: " + p.getId());\n        holder.tvName.setText(p.getName());\n        holder.tvPrice.setText("Price: " + p.getPrice());\n        holder.tvDescription.setText(p.getDescription());\n    }\n\n    @Override\n    public int getItemCount() {\n        return products.size();\n    }\n\n    public class ProductViewHolder extends RecyclerView.ViewHolder {\n\n        ImageView ivProduct;\n        TextView tvId, tvName, tvPrice, tvDescription;\n\n        public ProductViewHolder(@NonNull View itemView) {\n            super(itemView);\n            ivProduct = (ImageView) itemView.findViewById(R.id.ivProduct);\n            tvId = (TextView) itemView.findViewById(R.id.tvId);\n            tvName = (TextView) itemView.findViewById(R.id.tvName);\n            tvPrice = (TextView) itemView.findViewById(R.id.tvPrice);\n            tvDescription = (TextView) itemView.findViewById(R.id.tvDescription);\n        }\n    }\n}\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<ul>\n<li>Go to the ListProductsActivity.java file. We have to fetch all the products from API with the help of the retrofit object, by making a GET request. The fetched products are stored in a List.</li>\n<li>The recycler view is now built using the product adapter bypassing the fetched List of products.\n</li>\n</ul>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>package com.webtutsplus.ecommerce;\n\nimport androidx.appcompat.app.AppCompatActivity;\nimport androidx.recyclerview.widget.LinearLayoutManager;\nimport androidx.recyclerview.widget.RecyclerView;\n\nimport android.os.Bundle;\nimport android.util.Log;\nimport android.view.View;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport java.util.List;\n\nimport retrofit2.Call;\nimport retrofit2.Callback;\nimport retrofit2.Response;\nimport retrofit2.Retrofit;\nimport retrofit2.converter.gson.GsonConverterFactory;\n\npublic class ListProductsActivity extends AppCompatActivity {\n\n    private RecyclerView revProducts;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_list_products);\n\n        API api = RetrofitClient.getInstance().getAPI();\n        Call&lt;List&lt;Product&gt;&gt; call = api.getProducts();\n\n        call.enqueue(new Callback&lt;List&lt;Product&gt;&gt;() {\n            @Override\n            public void onResponse(Call&lt;List&lt;Product&gt;&gt; call, Response&lt;List&lt;Product&gt;&gt; response) {\n                if (!response.isSuccessful()) {\n                    Toast.makeText(ListProductsActivity.this, response.code() + "", Toast.LENGTH_LONG).show();\n                    return;\n                }\n\n                List&lt;Product&gt; products = response.body();\n                revProducts = findViewById(R.id.revProducts);\n                revProducts.setLayoutManager(new LinearLayoutManager(ListProductsActivity.this));\n                revProducts.setAdapter(new ProductAdapter(ListProductsActivity.this, products));\n            }\n\n            @Override\n            public void onFailure(Call&lt;List&lt;Product&gt;&gt; call, Throwable t) {\n                Toast.makeText(ListProductsActivity.this, t.getMessage() + "", Toast.LENGTH_LONG).show();\n            }\n        });\n    }\n}\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>We have listed the products in a recycler view successfully!</p>\n\n<p><strong>Add Product</strong></p>\n\n<ul>\n<li>Create five edit text views to the layout file of AddProduct Activity (app/src/main/res/layout/activity_add_product.xml) to get the product details to add. Also add a button to submit the data.\n</li>\n</ul>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;\n&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"\n    xmlns:app="http://schemas.android.com/apk/res-auto"\n    xmlns:tools="http://schemas.android.com/tools"\n    android:layout_width="match_parent"\n    android:layout_height="match_parent"\n    android:background="@color/colorAccent"\n    android:padding="20dp"\n    tools:context=".AddProductActivity"&gt;\n\n    &lt;TextView\n        android:id="@+id/tvSubitle"\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:layout_marginTop="24dp"\n        android:text="ADD PRODUCT"\n        android:textColor="@color/colorPrimaryDark"\n        android:textSize="30sp"\n        android:textStyle="bold"\n        app:layout_constraintEnd_toEndOf="parent"\n        app:layout_constraintStart_toStartOf="parent"\n        app:layout_constraintTop_toTopOf="parent" /&gt;\n\n    &lt;EditText\n        android:id="@+id/etId1"\n        android:layout_width="match_parent"\n        android:layout_height="wrap_content"\n        android:layout_marginTop="64dp"\n        android:hint="ID"\n        android:inputType="number"\n        app:layout_constraintEnd_toEndOf="parent"\n        app:layout_constraintHorizontal_bias="0.5"\n        app:layout_constraintStart_toStartOf="parent"\n        app:layout_constraintTop_toBottomOf="@+id/tvSubitle" /&gt;\n\n    &lt;EditText\n        android:id="@+id/etName1"\n        android:layout_width="match_parent"\n        android:layout_height="wrap_content"\n        android:hint="Name"\n        app:layout_constraintEnd_toEndOf="parent"\n        app:layout_constraintHorizontal_bias="0.5"\n        app:layout_constraintStart_toStartOf="parent"\n        app:layout_constraintTop_toBottomOf="@+id/etId1" /&gt;\n\n    &lt;EditText\n        android:id="@+id/etImageURL1"\n        android:layout_width="match_parent"\n        android:layout_height="wrap_content"\n        android:hint="Image URL"\n        app:layout_constraintEnd_toEndOf="parent"\n        app:layout_constraintHorizontal_bias="0.5"\n        app:layout_constraintStart_toStartOf="parent"\n        app:layout_constraintTop_toBottomOf="@+id/etName1" /&gt;\n\n    &lt;EditText\n        android:id="@+id/etPrice1"\n        android:layout_width="match_parent"\n        android:layout_height="wrap_content"\n        android:hint="Price"\n        android:inputType="numberDecimal"\n        app:layout_constraintEnd_toEndOf="parent"\n        app:layout_constraintHorizontal_bias="0.5"\n        app:layout_constraintStart_toStartOf="parent"\n        app:layout_constraintTop_toBottomOf="@+id/etImageURL1" /&gt;\n\n    &lt;EditText\n        android:id="@+id/etDescription1"\n        android:layout_width="match_parent"\n        android:layout_height="wrap_content"\n        android:hint="Description"\n        app:layout_constraintEnd_toEndOf="parent"\n        app:layout_constraintHorizontal_bias="0.5"\n        app:layout_constraintStart_toStartOf="parent"\n        app:layout_constraintTop_toBottomOf="@+id/etPrice1" /&gt;\n\n    &lt;Button\n        android:id="@+id/btnAddProduct"\n        android:layout_width="match_parent"\n        android:layout_height="wrap_content"\n        android:background="@color/colorPrimary"\n        android:text="ADD"\n        android:textColor="#000"\n        android:textSize="16sp"\n        app:layout_constraintBottom_toBottomOf="parent"\n        tools:layout_editor_absoluteX="20dp" /&gt;\n\n&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<ul>\n<li>Our UI is ready now. Go to the AddProductActivity class and add onClick listener to the button to add product.</li>\n<li>In the on click listener, use the retrofit client to send the product object created using the data provided by the user</li>\n<li>Notify the user if the product is added.\n</li>\n</ul>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>package com.webtutsplus.ecommerce;\n\nimport androidx.appcompat.app.AppCompatActivity;\n\nimport android.os.Bundle;\nimport android.view.View;\nimport android.widget.EditText;\nimport android.widget.Toast;\n\nimport okhttp3.ResponseBody;\nimport retrofit2.Call;\nimport retrofit2.Callback;\nimport retrofit2.Response;\n\npublic class AddProductActivity extends AppCompatActivity {\n\n    private EditText etId, etName, etImageURL, etPrice, etDescription;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_add_product);\n\n        etId = findViewById(R.id.etId1);\n        etName = findViewById(R.id.etName1);\n        etImageURL = findViewById(R.id.etImageURL1);\n        etPrice = findViewById(R.id.etPrice1);\n        etDescription = findViewById(R.id.etDescription1);\n\n        findViewById(R.id.btnAddProduct).setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                addProduct();\n            }\n        });\n    }\n\n    private void addProduct() {\n        long id = Long.parseLong(etId.getText().toString().trim());\n        String name = etName.getText().toString().trim();\n        String imageURL = etImageURL.getText().toString().trim();\n        double price = Double.parseDouble(etPrice.getText().toString().trim());\n        String description = etDescription.getText().toString().trim();\n\n        API api = RetrofitClient.getInstance().getAPI();\n        Call&lt;ResponseBody&gt; call = api.addProduct(new Product(id, name, imageURL, price, description));\n\n        call.enqueue(new Callback&lt;ResponseBody&gt;() {\n            @Override\n            public void onResponse(Call&lt;ResponseBody&gt; call, Response&lt;ResponseBody&gt; response) {\n                try {\n                    String test = response.body().string();\n                    Toast.makeText(AddProductActivity.this, "Successfully Added!", Toast.LENGTH_LONG).show();\n                } catch (Exception e) {\n                    Toast.makeText(AddProductActivity.this, e.getMessage(), Toast.LENGTH_LONG).show();\n                }\n            }\n\n            @Override\n            public void onFailure(Call&lt;ResponseBody&gt; call, Throwable t) {\n                Toast.makeText(AddProductActivity.this, t.getMessage(), Toast.LENGTH_LONG).show();\n            }\n        });\n\n        etId.getText().clear();\n        etName.getText().clear();\n        etImageURL.getText().clear();\n        etPrice.getText().clear();\n        etDescription.getText().clear();\n    }\n}\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>And yes! We can add any number of products using our application!</p>\n\n<p><strong>Update Product</strong></p>\n\n<ul>\n<li>Create five edit text views to the layout file of UpdateProduct Activity (app/src/main/res/layout/activity_update_product.xml) to get the product details to update. Also add a button to submit the data.\n</li>\n</ul>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;\n&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"\n    xmlns:app="http://schemas.android.com/apk/res-auto"\n    xmlns:tools="http://schemas.android.com/tools"\n    android:layout_width="match_parent"\n    android:layout_height="match_parent"\n    android:background="@color/colorAccent"\n    android:padding="20dp"\n    tools:context=".UpdateProductActivity"&gt;\n\n    &lt;TextView\n        android:id="@+id/tvSubitle"\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:layout_marginTop="24dp"\n        android:text="UPDATE PRODUCT"\n        android:textColor="@color/colorPrimaryDark"\n        android:textSize="30sp"\n        android:textStyle="bold"\n        app:layout_constraintEnd_toEndOf="parent"\n        app:layout_constraintStart_toStartOf="parent"\n        app:layout_constraintTop_toTopOf="parent" /&gt;\n\n    &lt;EditText\n        android:id="@+id/etId2"\n        android:layout_width="match_parent"\n        android:layout_height="wrap_content"\n        android:layout_marginTop="64dp"\n        android:hint="ID"\n        app:layout_constraintEnd_toEndOf="parent"\n        app:layout_constraintHorizontal_bias="0.5"\n        app:layout_constraintStart_toStartOf="parent"\n        app:layout_constraintTop_toBottomOf="@+id/tvSubitle" /&gt;\n\n    &lt;EditText\n        android:id="@+id/etName2"\n        android:layout_width="match_parent"\n        android:layout_height="wrap_content"\n        android:hint="Name"\n        app:layout_constraintEnd_toEndOf="parent"\n        app:layout_constraintHorizontal_bias="0.5"\n        app:layout_constraintStart_toStartOf="parent"\n        app:layout_constraintTop_toBottomOf="@+id/etId2" /&gt;\n\n    &lt;EditText\n        android:id="@+id/etImageURL2"\n        android:layout_width="match_parent"\n        android:layout_height="wrap_content"\n        android:hint="Image URL"\n        app:layout_constraintEnd_toEndOf="parent"\n        app:layout_constraintHorizontal_bias="0.5"\n        app:layout_constraintStart_toStartOf="parent"\n        app:layout_constraintTop_toBottomOf="@+id/etName2" /&gt;\n\n    &lt;EditText\n        android:id="@+id/etPrice2"\n        android:layout_width="match_parent"\n        android:layout_height="wrap_content"\n        android:hint="Price"\n        android:inputType="numberDecimal"\n        app:layout_constraintEnd_toEndOf="parent"\n        app:layout_constraintHorizontal_bias="0.5"\n        app:layout_constraintStart_toStartOf="parent"\n        app:layout_constraintTop_toBottomOf="@+id/etImageURL2" /&gt;\n\n    &lt;EditText\n        android:id="@+id/etDescription2"\n        android:layout_width="match_parent"\n        android:layout_height="wrap_content"\n        android:hint="Description"\n        app:layout_constraintEnd_toEndOf="parent"\n        app:layout_constraintHorizontal_bias="0.5"\n        app:layout_constraintStart_toStartOf="parent"\n        app:layout_constraintTop_toBottomOf="@+id/etPrice2" /&gt;\n\n    &lt;Button\n        android:id="@+id/btnUpdateProduct"\n        android:layout_width="match_parent"\n        android:layout_height="wrap_content"\n        android:background="@color/colorPrimary"\n        android:text="UPDATE"\n        android:textColor="#000"\n        android:textSize="16sp"\n        app:layout_constraintBottom_toBottomOf="parent"\n        tools:layout_editor_absoluteX="20dp" /&gt;\n\n&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<ul>\n<li>Our UI is ready now. Go to the UpdateProductActivity class and add on click listener to the button to update the product.</li>\n<li>In the on click listener, use the retrofit client to send the product object created using the data provided by the user.</li>\n<li>Notify the user if the product is updated.\n</li>\n</ul>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>package com.webtutsplus.ecommerce;\n\nimport androidx.appcompat.app.AppCompatActivity;\n\nimport android.os.Bundle;\nimport android.view.View;\nimport android.widget.EditText;\nimport android.widget.Toast;\n\nimport okhttp3.ResponseBody;\nimport retrofit2.Call;\nimport retrofit2.Callback;\nimport retrofit2.Response;\n\npublic class UpdateProductActivity extends AppCompatActivity {\n\n    private EditText etId, etName, etImageURL, etPrice, etDescription;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_update_product);\n\n        etId = findViewById(R.id.etId2);\n        etName = findViewById(R.id.etName2);\n        etImageURL = findViewById(R.id.etImageURL2);\n        etPrice = findViewById(R.id.etPrice2);\n        etDescription = findViewById(R.id.etDescription2);\n\n        findViewById(R.id.btnUpdateProduct).setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                updateProduct();\n            }\n        });\n    }\n\n    private void updateProduct() {\n        long id = Long.parseLong(etId.getText().toString().trim());\n        String name = etName.getText().toString().trim();\n        String imageURL = etImageURL.getText().toString().trim();\n        double price = Double.parseDouble(etPrice.getText().toString().trim());\n        String description = etDescription.getText().toString().trim();\n\n        API api = RetrofitClient.getInstance().getAPI();\n        Call&lt;ResponseBody&gt; call = api.updateProduct(id, new Product(id, name, imageURL, price, description));\n\n        call.enqueue(new Callback&lt;ResponseBody&gt;() {\n            @Override\n            public void onResponse(Call&lt;ResponseBody&gt; call, Response&lt;ResponseBody&gt; response) {\n                try {\n                    String test = response.body().string();\n                    Toast.makeText(UpdateProductActivity.this, "Successfully Updated!", Toast.LENGTH_LONG).show();\n                } catch (Exception e) {\n                    Toast.makeText(UpdateProductActivity.this, response.code()+"", Toast.LENGTH_LONG).show();\n                }\n            }\n\n            @Override\n            public void onFailure(Call&lt;ResponseBody&gt; call, Throwable t) {\n                Toast.makeText(UpdateProductActivity.this, t.getMessage(), Toast.LENGTH_LONG).show();\n            }\n        });\n\n        etId.getText().clear();\n        etName.getText().clear();\n        etImageURL.getText().clear();\n        etPrice.getText().clear();\n        etDescription.getText().clear();\n    }\n}\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>We can update any number of products in the backend using our application!</p>\n\n<p>Running the Application<br>\nNow, it’s time for running the application, after adding the required functionalities. Select the required Android Virtual Device from the toolbar and click on the run button on the same(Green triangle icon)<br>\nAfter a certain amount of time, your android virtual device will get the application installed and opened. You can completely use it now!<br>\nThe demo of our application is as follows —</p>\n\n<p><a href="https://miro.medium.com/max/450/1*xpDkDzDXL3GNiwyuP9n8OA.gif">demo 1</a><br>\n<a href="https://miro.medium.com/max/638/1*DqCSXPeErKDL9OWqoV7btg.gif">demo 2</a><br>\n<a href="https://miro.medium.com/max/638/1*1-Hlzm7QN4fuYFRjc0m1Ig.gif">demo 3</a></p>\n\n<p><strong>Resources</strong></p>\n\n<ol>\n<li>\n<a href="https://bitbucket.org/ecommerce-webtutsplus/ecommerce/src/master/">Bitbucket link</a> for Spring Backend Project Repository</li>\n<li>\n<a href="https://bitbucket.org/ecommerce-webtutsplus/android-ui/src/8568838ecd461c2e122c06c78699fd7f150e9953/?at=giridhara%2Fproducts">Bitbucket link</a> for Android Application Project Repository</li>\n<li>\n<a href="http://remotedevs.org:8080/api/swagger-ui.html">Spring Backend</a> Swagger UI hosted on cloud</li>\n<li>\n<a href="http://remotedevs.org:8080/api/">REST API</a> of our Spring Backend</li>\n<li>\n<a href="https://medium.com/technology-hits/lets-develop-an-ecommerce-application-from-scratch-using-java-and-spring-6dfac6ce5a9f">Tutorial</a> for the creating Spring Backend API</li>\n<li>\n<a href="https://developer.android.com/studio/install">Steps</a> to install and set up Android Studio</li>\n</ol>\n\n<p>That’s it! Hope you have learned many things from this tutorial. </p>\n\n	0	t	2021-02-21 08:08:33.0186	f	0	0	17	t	0	\N	\N	t	products-page-android-4og4	\N	25	Products Page Android	2021-02-21 08:08:33.027514	1	0	\N	\N	\N	0	\N	\N	\N
64	f	f	f	\N	Problem number 752. Open the Lock (BFS/Graph)\n\n![](https://cdn-images-1.medium.com/max/2560/1*K7sMqxvjC11C4PXKYQ4Vmg.png)\n\nIn this series, I am going to solve Leetcode medium problems live with my friends, which you can see on our youtube channel, Today we will do Problem Problem 22. **Generate Parentheses**.\n\nA little bit about me, I have offers from **Uber** **India** and **Amazon** **India** in the past, and I am currently working for **Booking.com** in Amsterdam.\n\n## Motivation to learn algorithms\n{% medium https://medium.com/leetcode-simplified/solve-leetcode-problems-and-get-offers-from-your-dream-companies-2786415be0b7 %}\n\n{% medium https://medium.com/javarevisited/how-to-use-breath-fast-search-pattern-for-craking-coding-interviews-50ca7e827199 %}\n\n## Problem Statement\n\nYou have a lock in front of you with 4 circular wheels. Each wheel has 10 slots: `'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'.` The wheels can rotate freely and wrap around: for example, we can turn `'9'` to be `'0',` or` '0' to be '9'.` Each move consists of turning one wheel in one slot.\n\nThe lock initially starts at `'0000'`, a string representing the state of the 4 wheels.\n\nYou are given a list of `deadends` dead ends, meaning if the lock displays any of these codes, the wheels of the lock will stop turning and you will be unable to open it.\n\nGiven a `target` representing the value of the wheels that will unlock the lock, return the minimum total number of turns required to open the lock, or -1 if it is impossible.\n\n**Example 1:**\n\n    **Input:** deadends = ["0201","0101","0102","1212","2002"], target = "0202"\n    **Output:** 6\n    **Explanation:**\n    A sequence of valid moves would be "0000" -> "1000" -> "1100" -> "1200" -> "1201" -> "1202" -> "0202".\n    Note that a sequence like "0000" -> "0001" -> "0002" -> "0102" -> "0202" would be invalid,\n    because the wheels of the lock become stuck after the display becomes the dead end "0102".\n\n**Example 2:**\n\n    **Input:** deadends = ["8888"], target = "0009"\n    **Output:** 1\n    **Explanation:**\n    We can turn the last wheel in reverse to move from "0000" -> "0009".\n\n**Example 3:**\n\n    **Input:** deadends = ["8887","8889","8878","8898","8788","8988","7888","9888"], target = "8888"\n    **Output:** -1\n    Explanation:\n    We can't reach the target without getting stuck.\n\n**Example 4:**\n\n    **Input:** deadends = ["0000"], target = "8888"\n    **Output:** -1\n\n## Youtube Discussion\n{% youtube YbdtktfdRwA %}\n## Solution\n\nThis is a problem based on BFS(Breadth-First Search). Here we have a [string ](https://medium.com/javarevisited/top-21-string-programming-interview-questions-for-beginners-and-experienced-developers-56037048de45)of 4 letters representing a lock. Each letter has one wheel associated with it. For a single wheel, we have 10 possible orientations, ie. 0–9. So we will try to find out all the possible orientations which are previously not visited and are not dead ends, we apply BFS so that, we find it in the least steps.\n\nLet's walk through the code and we can understand the solution a lot better.\n\nAt first, we put all the dead-end into a set such that we can check in constant time whether that orientation is dead-end or not.\n\nWe also need to keep track of all the visited orientations such that we don’t fall in an infinite loop.\n\nA queue is used for the BFS process. We pop one element from the queue and find all the possible orientations that can be traversed from that lock position. We put all the unvisited lock positions into our queue so that we can check them later.\n\nAccording to the question, we can turn a wheel in a clockwise and anticlockwise direction. So for a particular position, 6 we need to check for both 5 and 7 . There are two corner cases that we need to check. For clockwise rotation, if we find a 9 then we can make it as 0 and for anticlockwise rotation, if we find a 0 then we will change it to 9 .\n\nWe continue this process until the target is found. If it is not possible to go to the target position, we return -1.\n\nThe java code is given below.\n{% gist https://gist.github.com/sksaikia/16645225dded06281ab398b816c786a1.js %}\nThe code for this problem can be found in the following repository.\n{% github webtutsplus/LeetCode %}\n\n## Thank You for reading and Follow this publication for more LeetCode problems!😃\n[**LeetCode Simplified**\nWe are going to solve Leetcode problems live, which you can watch on our youtube channel](https://medium.com/leetcode-simplified)\n	{"boosted_additional_tags": "", "boosted_dev_digest_email": false, "boosted_additional_articles": false}	\N	algorithms, leetcode	--- !ruby/struct:Articles::CachedEntity\nname: nilmadhab mondal\nusername: nilmadhab\nslug: nilmadhab\nprofile_image_90: "/uploads/user/profile_image/1/d9b0e3b7-ad59-45d5-b516-4e8ffd0a6958.jpeg"\nprofile_image_url: "/uploads/user/profile_image/1/d9b0e3b7-ad59-45d5-b516-4e8ffd0a6958.jpeg"\n	nilmadhab mondal	nilmadhab	\N	{}	\N	0	\N	0	2021-02-24 10:34:13.538954	\N	Problem number 752. Open the Lock (BFS/Graph)    In this series, I am going to solve Leetcode medium...	\N	t	5	5	\N	f	1614162853	\N	354802	en	\N	2021-02-24 10:34:13.524664	\N	/i/ebsrfit6ri386rk39htg.png	#dddddd	30	0	0	0	\N	\N	1	affa0ef29b1d3e398f478cb079090313f9ed1be0dc8c8ac5d9a963d1af6aa51bd186d54b1abb8bcf271d314a4361e1652297f79c3c4eeb10e9727be0	/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-open-the-lock-24me	0	0	0	<p>Problem number 752. Open the Lock (BFS/Graph)</p>\n\n<p><a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--k57qlnTS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2560/1%2AK7sMqxvjC11C4PXKYQ4Vmg.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--k57qlnTS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2560/1%2AK7sMqxvjC11C4PXKYQ4Vmg.png" alt="" loading="lazy"></a></p>\n\n<p>In this series, I am going to solve Leetcode medium problems live with my friends, which you can see on our youtube channel, Today we will do Problem Problem 22. <strong>Generate Parentheses</strong>.</p>\n\n<p>A little bit about me, I have offers from <strong>Uber</strong> <strong>India</strong> and <strong>Amazon</strong> <strong>India</strong> in the past, and I am currently working for <strong>Booking.com</strong> in Amsterdam.</p>\n\n<h2>\n  <a name="motivation-to-learn-algorithms" href="#motivation-to-learn-algorithms" class="anchor">\n  </a>\n  Motivation to learn algorithms\n</h2>\n\n\n<div class="ltag__link">\n  <a href="https://medium.com/leetcode-simplified/solve-leetcode-problems-and-get-offers-from-your-dream-companies-2786415be0b7" class="ltag__link__link">\n    <div class="ltag__link__pic">\n      <img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--tLzMBohE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/fit/c/96/96/1%2AhNjwft_dNBxvTr6g6TOVGg.jpeg" alt="Nil Madhab" loading="lazy">\n    </div>\n  </a>\n  <a href="https://medium.com/leetcode-simplified/solve-leetcode-problems-and-get-offers-from-your-dream-companies-2786415be0b7" class="ltag__link__link">\n    <div class="ltag__link__content">\n      <h2>Solve Leetcode Problems and Get Offers From Your Dream Companies | by Nil Madhab | LeetCode Simplified | Jan, 2021 | Medium</h2>\n      <h3>Nil Madhab ・ <time datetime="2021-02-06T16:44:52.884Z">Feb 6, 2021</time> ・ 3 min read\n      <div class="ltag__link__servicename">\n        <img src="/assets/medium_icon.svg" alt="Medium Logo" aria-label="Medium Logo" loading="lazy">\n        Medium\n      </div>\n    </h3>\n</div>\n  </a>\n</div>\n\n\n\n<div class="ltag__link">\n  <a href="https://medium.com/javarevisited/how-to-use-breath-fast-search-pattern-for-craking-coding-interviews-50ca7e827199" class="ltag__link__link">\n    <div class="ltag__link__pic">\n      <img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--tLzMBohE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/fit/c/96/96/1%2AhNjwft_dNBxvTr6g6TOVGg.jpeg" alt="Nil Madhab" loading="lazy">\n    </div>\n  </a>\n  <a href="https://medium.com/javarevisited/how-to-use-breath-fast-search-pattern-for-craking-coding-interviews-50ca7e827199" class="ltag__link__link">\n    <div class="ltag__link__content">\n      <h2>How to Use Breath Fast Search Pattern for Cracking Coding Interviews | by Nil Madhab | Javarevisited | Feb, 2021 | Medium</h2>\n      <h3>Nil Madhab ・ <time datetime="2021-02-20T10:29:24.880Z">Feb 20, 2021</time> ・ 4 min read\n      <div class="ltag__link__servicename">\n        <img src="/assets/medium_icon.svg" alt="Medium Logo" aria-label="Medium Logo" loading="lazy">\n        Medium\n      </div>\n    </h3>\n</div>\n  </a>\n</div>\n\n\n<h2>\n  <a name="problem-statement" href="#problem-statement" class="anchor">\n  </a>\n  Problem Statement\n</h2>\n\n<p>You have a lock in front of you with 4 circular wheels. Each wheel has 10 slots: <code>'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'.</code> The wheels can rotate freely and wrap around: for example, we can turn <code>'9'</code> to be <code>'0',</code> or<code>'0' to be '9'.</code> Each move consists of turning one wheel in one slot.</p>\n\n<p>The lock initially starts at <code>'0000'</code>, a string representing the state of the 4 wheels.</p>\n\n<p>You are given a list of <code>deadends</code> dead ends, meaning if the lock displays any of these codes, the wheels of the lock will stop turning and you will be unable to open it.</p>\n\n<p>Given a <code>target</code> representing the value of the wheels that will unlock the lock, return the minimum total number of turns required to open the lock, or -1 if it is impossible.</p>\n\n<p><strong>Example 1:</strong></p>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>**Input:** deadends = ["0201","0101","0102","1212","2002"], target = "0202"\n**Output:** 6\n**Explanation:**\nA sequence of valid moves would be "0000" -&gt; "1000" -&gt; "1100" -&gt; "1200" -&gt; "1201" -&gt; "1202" -&gt; "0202".\nNote that a sequence like "0000" -&gt; "0001" -&gt; "0002" -&gt; "0102" -&gt; "0202" would be invalid,\nbecause the wheels of the lock become stuck after the display becomes the dead end "0102".\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n<p><strong>Example 2:</strong></p>\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>**Input:** deadends = ["8888"], target = "0009"\n**Output:** 1\n**Explanation:**\nWe can turn the last wheel in reverse to move from "0000" -&gt; "0009".\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n<p><strong>Example 3:</strong></p>\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>**Input:** deadends = ["8887","8889","8878","8898","8788","8988","7888","9888"], target = "8888"\n**Output:** -1\nExplanation:\nWe can't reach the target without getting stuck.\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n<p><strong>Example 4:</strong></p>\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>**Input:** deadends = ["0000"], target = "8888"\n**Output:** -1\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n<h2>\n  <a name="youtube-discussion" href="#youtube-discussion" class="anchor">\n  </a>\n  Youtube Discussion\n</h2>\n\n<p><iframe width="710" height="399" src="https://www.youtube.com/embed/YbdtktfdRwA" allowfullscreen loading="lazy">\n</iframe>\n</p>\n<h2>\n  <a name="solution" href="#solution" class="anchor">\n  </a>\n  Solution\n</h2>\n\n<p>This is a problem based on BFS(Breadth-First Search). Here we have a <a href="https://medium.com/javarevisited/top-21-string-programming-interview-questions-for-beginners-and-experienced-developers-56037048de45">string </a>of 4 letters representing a lock. Each letter has one wheel associated with it. For a single wheel, we have 10 possible orientations, ie. 0–9. So we will try to find out all the possible orientations which are previously not visited and are not dead ends, we apply BFS so that, we find it in the least steps.</p>\n\n<p>Let's walk through the code and we can understand the solution a lot better.</p>\n\n<p>At first, we put all the dead-end into a set such that we can check in constant time whether that orientation is dead-end or not.</p>\n\n<p>We also need to keep track of all the visited orientations such that we don’t fall in an infinite loop.</p>\n\n<p>A queue is used for the BFS process. We pop one element from the queue and find all the possible orientations that can be traversed from that lock position. We put all the unvisited lock positions into our queue so that we can check them later.</p>\n\n<p>According to the question, we can turn a wheel in a clockwise and anticlockwise direction. So for a particular position, 6 we need to check for both 5 and 7 . There are two corner cases that we need to check. For clockwise rotation, if we find a 9 then we can make it as 0 and for anticlockwise rotation, if we find a 0 then we will change it to 9 .</p>\n\n<p>We continue this process until the target is found. If it is not possible to go to the target position, we return -1.</p>\n\n<p>The java code is given below.<br>\n</p>\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/sksaikia/16645225dded06281ab398b816c786a1.js"></script>\n</div>\n\n<p><br><br>\nThe code for this problem can be found in the following repository.<br></p>\n\n<div class="ltag-github-readme-tag">\n  <div class="readme-overview">\n    <h2>\n      <img src="/assets/github-logo.svg" alt="GitHub logo" loading="lazy">\n      <a href="https://github.com/webtutsplus">\n        webtutsplus\n      </a> / <a style="font-weight: 600;" href="https://github.com/webtutsplus/LeetCode">\n        LeetCode\n      </a>\n    </h2>\n    <h3>\n      \n    </h3>\n  </div>\n</div>\n\n\n\n<h2>\n  <a name="thank-you-for-reading-and-follow-this-publication-for-more-leetcode-problems" href="#thank-you-for-reading-and-follow-this-publication-for-more-leetcode-problems" class="anchor">\n  </a>\n  Thank You for reading and Follow this publication for more LeetCode problems!😃\n</h2>\n\n<p><a href="https://medium.com/leetcode-simplified"><strong>LeetCode Simplified</strong><br>\nWe are going to solve Leetcode problems live, which you can watch on our youtube channel</a></p>\n\n	0	t	2021-02-24 10:34:13.524664	f	0	0	3	t	0	\N	\N	t	solve-leetcode-problems-and-get-offers-from-your-dream-companies-open-the-lock-24me	\N	25	Solve Leetcode Problems and Get Offers From Your Dream Companies||Open the Lock	2021-02-24 10:34:13.538954	1	0	\N	\N	\N	0	\N	\N	\N
42	f	f	f	\N	In this series, I am going to solve Leetcode medium problems live with my friend, which you can see on our youtube channel, Today we will do Problem 532. **K-diff Pairs in an Array.**\n\nA little bit about me, I have offers from **Uber India** and **Amazon India** in the past, and I am currently working for **Booking.com** in Amsterdam.\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/pn6skybbr2rh76bjut1f.jpg)\n## Youtube Discussion\n\nPlease comment here or on youtube, if you have any doubts.\n{% youtube iO9Y8zDqwaQ %}\n* [0:00](https://www.youtube.com/watch?v=iO9Y8zDqwaQ&t=0s) — Intro\n\n* [0:50](https://www.youtube.com/watch?v=iO9Y8zDqwaQ&t=50s) — Max Area of Island (Problem statement & Algorithm)\n\n* [3:55](https://www.youtube.com/watch?v=iO9Y8zDqwaQ&t=235s) — Python code\n\n* [14:50](https://www.youtube.com/watch?v=iO9Y8zDqwaQ&t=890s) — Debugging the code\n\n* [19:55](https://www.youtube.com/watch?v=iO9Y8zDqwaQ&t=2560s) — K-diff pairs in an array\n\n* [42:40](https://www.youtube.com/watch?v=iO9Y8zDqwaQ&t=2560s) — Explanation of correct algorithm\n\n* [49:30](https://www.youtube.com/watch?v=iO9Y8zDqwaQ&t=2970s) — Python code\n\n## Motivation to Learn Algorithms\n\nI have worked in India as a software developer for 4 years. I started learning algorithms and data structure from my 3rd year in college as I was from an Electronics background. Here is my salary progression over the years, (all in INR, Lakh per year)\n\n2016: placement in **Flipkart** from college, IIT KGP(18 lakh base + 2 lakh bonus = **20** lakh). But the offer was delayed by 6 months, as Flipkart was going through some trouble, so I joined Samsung.\n\n2016: **Samsung Noida**(off campus ) (14 lakh base + 5 lakh joining bonus = **19** lakh). They pay to IITians 19 lakh but other colleges 9-14 lakh for the same work, which is bogus.\n\n2017: **Oyorooms** (**17** lakh fixed, no bonus, no stocks). I took a pay cut as I was not learning anything in Samsung, so joined Oyo.\n\n2019: **Sharechat** (26 lakh fixed + 2.6lakh bonus + stock options) I joined Sharechat in Bangalore, as SDE1\n\n2020: Offer from Amazon ( 26.5 lakh base + 18.5 lakh joining bonus= **43 lakh**) in SDE2 role. They offer stocks but it is vested only 5 percent in the first year, so I ignored it.\n\nOffer from **Uber** (33 lakh base + 15 lakh stock options per year (96000 USD over 4 years)+ 5 lakh joining bonus = **55** lakh per year) in SDE2 role. **I think that is the top salary, you can get 3.5–4 years experience in India, but I might be wrong.**\n\n`A lot of startups and established companies in India pay over 35 lakh per year for the top talent in programming, for just over 4 years of experience, like Dunzo, Dream11, Rubric, etc, check`\n\nEven if you are not from a good college, you can still land awesome jobs, for let's take this example\n\n`Education: B.Tech in CS from Tier 3 college\nYears of Experience: 2\nPrior Experience: Java Developer at Startup\ncurrent CTC: INR 3.2 LPA+1 LPA(Bonus)\nDate of the Offer:Dec 2020\nCompany: Swiggy\nTitle/Level:SDE -1\nLocation: Bangalore\nSalary: INR 17.6 LPA\nRelocation/Signing Bonus: -\nStock bonus: 7 LPA vested over 4 years\nBonus: -\nTotal comp (Salary + Bonus + Stock): 17.6 + 0 + 1.75 =INR 19.35 LPA\nBenefits: -\nOther details: Not even a single word from me after this digits are spoken by the recruiter.`\n\n**Has a 6 months career gap even at the time of offer.**\n\nI rejected both offers and ended up joining Booking.com as I wanted to explore Europe. I can’t disclose my current salary.\n\nI got so many offers because I practiced a lot of data structure and algorithm problems. I solved over 410 questions in Leetcode.\n[Nil Masdhab - Leetcode Profile](https://leetcode.com/nilmadhab/)\n\n**Problem Statement :**\n\nGiven an array of integers `nums` and an integer `k`, return the number of **unique** k-diff pairs in the array.\n\nA **k-diff** pair is an integer pair `(nums[i], nums[j])`, where the following are true:\n\n* `0 <= i, j < nums.length`\n* `i != j`\n* `|nums[i] - nums[j]| == k`\n\nNotice that `|val|` denotes the absolute value of val.\n\n**Example 1:**\n\n`Input: nums = [3,1,4,1,5], k = 2\nOutput: 2\nExplanation: There are two 2-diff pairs in the array, (1, 3) and (3, 5).\nAlthough we have two 1s in the input, we should only return the number of unique pairs.`\n\n**Example 2:**\n\n`Input: nums = [1,2,3,4,5], k = 1\nOutput: 4\nExplanation: There are four 1-diff pairs in the array, (1, 2), (2, 3), (3, 4) and (4, 5).`\n\n**Example 3:**\n\n`Input: nums = [1,3,1,5,4], k = 0\nOutput: 1\nExplanation: There is one 0-diff pair in the array, (1, 1).`\n\n**Example 4:**\n\n`Input: nums = [1,2,4,4,3,3,0,9,2,3], k = 3\nOutput: 2`\n\n**Example 5:**\n\n`Input: nums = [-1,-2,-3], k = 1\nOutput: 2`\n\nSolution :\n\nTo solve this problem, we will have to use a dictionary [(HashMap in Java)](https://www.java67.com/2013/02/10-examples-of-hashmap-in-java-programming-tutorial.html). In this problem, we need to count the number of unique k-diff pairs in the array. k-diff means that the absolute difference between the two elements should be k.\n\nAt first, we store the elements as keys and it’s an index of occurrence as a list in a dictionary. So now we can find an element whose absolute difference is k from this number. So we will check if **element+k** is present in the dictionary if it is present and we add this pair to the **ans** dictionary. We do the same as **element-k.**\n\nBut there is a catch if **k=0** then we have to check the total occurrence of each element. If it is greater than 1 then we add this to the **ans** dictionary.\n\nAt last, we return the length of the dictionary which is our answer.\n{% gist https://gist.github.com/sksaikia/64ae1a5a6d705faf41080180166439ec.js %}\nWe came up with a better approach in java to solve this problem later. We can reduce it’s overall used space by making a [HashMap](https://www.java67.com/2017/08/top-10-java-hashmap-interview-questions.html) with Element as key and a counter as value. In this way, we first store the frequency of all elements of the array in a hashMap.\n\nAfter that, we iterate through all the [keys of the hashMap](http://javarevisited.blogspot.sg/2016/08/how-to-iterate-through-ConcurrentHashMap-print-all-keys-values-java.html#axzz4pdz6fpLN)(basically this is iterating through the array elements but without repetition). We search if **(element+k)** is present in the hashMap and if it is present then we increment the **ans** variable.\n\nTo handle k=0 case, we check whether that element occurs more than once, if so then we increment the ans variable.\n\nHere is optimized java code for the problem.\n{% gist https://gist.github.com/sksaikia/16a6cf81e642fab30b43467f145b6904.js %}\n\nTime Complexity: O(n), n is the size of the array\n\nSpace Complexity: O(n), n is the size of the array\n\nAll the code can be found in the following GitHub repo.\n\nhttps://github.com/webtutsplus/LeetCode/tree/main/src/LC532_kdiffPairs\n**Other Data Structure Problems for Your Practice**\n{% medium https://medium.com/javarevisited/20-array-coding-problems-and-questions-from-programming-interviews-869b475b9121 %}\n\n{% medium https://medium.com/javarevisited/top-21-string-programming-interview-questions-for-beginners-and-experienced-developers-56037048de45 %}\n	{"boosted_additional_tags": "", "boosted_dev_digest_email": false, "boosted_additional_articles": false}	\N	algorithms, career, leetcode	--- !ruby/struct:Articles::CachedEntity\nname: nilmadhab mondal\nusername: nilmadhab\nslug: nilmadhab\nprofile_image_90: "/uploads/user/profile_image/1/d9b0e3b7-ad59-45d5-b516-4e8ffd0a6958.jpeg"\nprofile_image_url: "/uploads/user/profile_image/1/d9b0e3b7-ad59-45d5-b516-4e8ffd0a6958.jpeg"\n	nilmadhab mondal	nilmadhab	\N	{}	\N	0	\N	0	2021-02-17 22:14:50.124516	\N	In this series, I am going to solve Leetcode medium problems live with my friend, which you can see o...	2021-02-20 13:38:15.973942	t	5	5	\N	f	1613600090	\N	352101	en	\N	2021-02-17 22:14:50.116007	\N	/i/79207yo8h2qi4vz2i6ua.jpg	#dddddd	12	0	0	0	\N	\N	8	7a4b4ccf9275414dc5f8f5cd356be5874b5ae2095642e42d67f640ca3359bcf48f4b05c3939ff8501613bd67e1586a4a1138dff7c1f3f867fb63d607	/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-k-diff-pairs-in-an-array-146h	0	0	0	<p>In this series, I am going to solve Leetcode medium problems live with my friend, which you can see on our youtube channel, Today we will do Problem 532. <strong>K-diff Pairs in an Array.</strong></p>\n\n<p>A little bit about me, I have offers from <strong>Uber India</strong> and <strong>Amazon India</strong> in the past, and I am currently working for <strong>Booking.com</strong> in Amsterdam.<br>\n<a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--rdZzoGQq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pn6skybbr2rh76bjut1f.jpg" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--rdZzoGQq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pn6skybbr2rh76bjut1f.jpg" alt="Alt Text" loading="lazy"></a></p>\n<h2>\n  <a name="youtube-discussion" href="#youtube-discussion" class="anchor">\n  </a>\n  Youtube Discussion\n</h2>\n\n<p>Please comment here or on youtube, if you have any doubts.<br>\n<iframe width="710" height="399" src="https://www.youtube.com/embed/iO9Y8zDqwaQ" allowfullscreen loading="lazy">\n</iframe>\n</p>\n\n<ul>\n<li><p><a href="https://www.youtube.com/watch?v=iO9Y8zDqwaQ&amp;t=0s">0:00</a> — Intro</p></li>\n<li><p><a href="https://www.youtube.com/watch?v=iO9Y8zDqwaQ&amp;t=50s">0:50</a> — Max Area of Island (Problem statement &amp; Algorithm)</p></li>\n<li><p><a href="https://www.youtube.com/watch?v=iO9Y8zDqwaQ&amp;t=235s">3:55</a> — Python code</p></li>\n<li><p><a href="https://www.youtube.com/watch?v=iO9Y8zDqwaQ&amp;t=890s">14:50</a> — Debugging the code</p></li>\n<li><p><a href="https://www.youtube.com/watch?v=iO9Y8zDqwaQ&amp;t=2560s">19:55</a> — K-diff pairs in an array</p></li>\n<li><p><a href="https://www.youtube.com/watch?v=iO9Y8zDqwaQ&amp;t=2560s">42:40</a> — Explanation of correct algorithm</p></li>\n<li><p><a href="https://www.youtube.com/watch?v=iO9Y8zDqwaQ&amp;t=2970s">49:30</a> — Python code</p></li>\n</ul>\n\n<h2>\n  <a name="motivation-to-learn-algorithms" href="#motivation-to-learn-algorithms" class="anchor">\n  </a>\n  Motivation to Learn Algorithms\n</h2>\n\n<p>I have worked in India as a software developer for 4 years. I started learning algorithms and data structure from my 3rd year in college as I was from an Electronics background. Here is my salary progression over the years, (all in INR, Lakh per year)</p>\n\n<p>2016: placement in <strong>Flipkart</strong> from college, IIT KGP(18 lakh base + 2 lakh bonus = <strong>20</strong> lakh). But the offer was delayed by 6 months, as Flipkart was going through some trouble, so I joined Samsung.</p>\n\n<p>2016: <strong>Samsung Noida</strong>(off campus ) (14 lakh base + 5 lakh joining bonus = <strong>19</strong> lakh). They pay to IITians 19 lakh but other colleges 9-14 lakh for the same work, which is bogus.</p>\n\n<p>2017: <strong>Oyorooms</strong> (<strong>17</strong> lakh fixed, no bonus, no stocks). I took a pay cut as I was not learning anything in Samsung, so joined Oyo.</p>\n\n<p>2019: <strong>Sharechat</strong> (26 lakh fixed + 2.6lakh bonus + stock options) I joined Sharechat in Bangalore, as SDE1</p>\n\n<p>2020: Offer from Amazon ( 26.5 lakh base + 18.5 lakh joining bonus= <strong>43 lakh</strong>) in SDE2 role. They offer stocks but it is vested only 5 percent in the first year, so I ignored it.</p>\n\n<p>Offer from <strong>Uber</strong> (33 lakh base + 15 lakh stock options per year (96000 USD over 4 years)+ 5 lakh joining bonus = <strong>55</strong> lakh per year) in SDE2 role. <strong>I think that is the top salary, you can get 3.5–4 years experience in India, but I might be wrong.</strong></p>\n\n<p><code>A lot of startups and established companies in India pay over 35 lakh per year for the top talent in programming, for just over 4 years of experience, like Dunzo, Dream11, Rubric, etc, check</code></p>\n\n<p>Even if you are not from a good college, you can still land awesome jobs, for let's take this example</p>\n\n<p><code>Education: B.Tech in CS from Tier 3 college<br>\nYears of Experience: 2<br>\nPrior Experience: Java Developer at Startup<br>\ncurrent CTC: INR 3.2 LPA+1 LPA(Bonus)<br>\nDate of the Offer:Dec 2020<br>\nCompany: Swiggy<br>\nTitle/Level:SDE -1<br>\nLocation: Bangalore<br>\nSalary: INR 17.6 LPA<br>\nRelocation/Signing Bonus: -<br>\nStock bonus: 7 LPA vested over 4 years<br>\nBonus: -<br>\nTotal comp (Salary + Bonus + Stock): 17.6 + 0 + 1.75 =INR 19.35 LPA<br>\nBenefits: -<br>\nOther details: Not even a single word from me after this digits are spoken by the recruiter.</code></p>\n\n<p><strong>Has a 6 months career gap even at the time of offer.</strong></p>\n\n<p>I rejected both offers and ended up joining Booking.com as I wanted to explore Europe. I can’t disclose my current salary.</p>\n\n<p>I got so many offers because I practiced a lot of data structure and algorithm problems. I solved over 410 questions in Leetcode.<br>\n<a href="https://leetcode.com/nilmadhab/">Nil Masdhab - Leetcode Profile</a></p>\n\n<p><strong>Problem Statement :</strong></p>\n\n<p>Given an array of integers <code>nums</code> and an integer <code>k</code>, return the number of <strong>unique</strong> k-diff pairs in the array.</p>\n\n<p>A <strong>k-diff</strong> pair is an integer pair <code>(nums[i], nums[j])</code>, where the following are true:</p>\n\n<ul>\n<li><code>0 &lt;= i, j &lt; nums.length</code></li>\n<li><code>i != j</code></li>\n<li><code>|nums[i] - nums[j]| == k</code></li>\n</ul>\n\n<p>Notice that <code>|val|</code> denotes the absolute value of val.</p>\n\n<p><strong>Example 1:</strong></p>\n\n<p><code>Input: nums = [3,1,4,1,5], k = 2<br>\nOutput: 2<br>\nExplanation: There are two 2-diff pairs in the array, (1, 3) and (3, 5).<br>\nAlthough we have two 1s in the input, we should only return the number of unique pairs.</code></p>\n\n<p><strong>Example 2:</strong></p>\n\n<p><code>Input: nums = [1,2,3,4,5], k = 1<br>\nOutput: 4<br>\nExplanation: There are four 1-diff pairs in the array, (1, 2), (2, 3), (3, 4) and (4, 5).</code></p>\n\n<p><strong>Example 3:</strong></p>\n\n<p><code>Input: nums = [1,3,1,5,4], k = 0<br>\nOutput: 1<br>\nExplanation: There is one 0-diff pair in the array, (1, 1).</code></p>\n\n<p><strong>Example 4:</strong></p>\n\n<p><code>Input: nums = [1,2,4,4,3,3,0,9,2,3], k = 3<br>\nOutput: 2</code></p>\n\n<p><strong>Example 5:</strong></p>\n\n<p><code>Input: nums = [-1,-2,-3], k = 1<br>\nOutput: 2</code></p>\n\n<p>Solution :</p>\n\n<p>To solve this problem, we will have to use a dictionary <a href="https://www.java67.com/2013/02/10-examples-of-hashmap-in-java-programming-tutorial.html">(HashMap in Java)</a>. In this problem, we need to count the number of unique k-diff pairs in the array. k-diff means that the absolute difference between the two elements should be k.</p>\n\n<p>At first, we store the elements as keys and it’s an index of occurrence as a list in a dictionary. So now we can find an element whose absolute difference is k from this number. So we will check if <strong>element+k</strong> is present in the dictionary if it is present and we add this pair to the <strong>ans</strong> dictionary. We do the same as <strong>element-k.</strong></p>\n\n<p>But there is a catch if <strong>k=0</strong> then we have to check the total occurrence of each element. If it is greater than 1 then we add this to the <strong>ans</strong> dictionary.</p>\n\n<p>At last, we return the length of the dictionary which is our answer.<br>\n</p>\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/sksaikia/64ae1a5a6d705faf41080180166439ec.js"></script>\n</div>\n<br>\nWe came up with a better approach in java to solve this problem later. We can reduce it’s overall used space by making a <a href="https://www.java67.com/2017/08/top-10-java-hashmap-interview-questions.html">HashMap</a> with Element as key and a counter as value. In this way, we first store the frequency of all elements of the array in a hashMap.\n\n<p>After that, we iterate through all the <a href="http://javarevisited.blogspot.sg/2016/08/how-to-iterate-through-ConcurrentHashMap-print-all-keys-values-java.html#axzz4pdz6fpLN">keys of the hashMap</a>(basically this is iterating through the array elements but without repetition). We search if <strong>(element+k)</strong> is present in the hashMap and if it is present then we increment the <strong>ans</strong> variable.</p>\n\n<p>To handle k=0 case, we check whether that element occurs more than once, if so then we increment the ans variable.</p>\n\n<p>Here is optimized java code for the problem.<br>\n</p>\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/sksaikia/16a6cf81e642fab30b43467f145b6904.js"></script>\n</div>\n\n\n<p>Time Complexity: O(n), n is the size of the array</p>\n\n<p>Space Complexity: O(n), n is the size of the array</p>\n\n<p>All the code can be found in the following GitHub repo.</p>\n\n<p><a href="https://github.com/webtutsplus/LeetCode/tree/main/src/LC532_kdiffPairs">https://github.com/webtutsplus/LeetCode/tree/main/src/LC532_kdiffPairs</a><br>\n<strong>Other Data Structure Problems for Your Practice</strong><br>\n</p>\n<div class="ltag__link">\n  <a href="https://medium.com/javarevisited/20-array-coding-problems-and-questions-from-programming-interviews-869b475b9121" class="ltag__link__link">\n    <div class="ltag__link__pic">\n      <img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--qkjHfzsS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/fit/c/96/96/0%2Au9Ha3uTCjEmW_3gn.gif" alt="javinpaul" loading="lazy">\n    </div>\n  </a>\n  <a href="https://medium.com/javarevisited/20-array-coding-problems-and-questions-from-programming-interviews-869b475b9121" class="ltag__link__link">\n    <div class="ltag__link__content">\n      <h2>20+ Array Coding Problems and Questions from Programming Interviews | by javinpaul | Javarevisited | Medium</h2>\n      <h3>javinpaul ・ <time datetime="2020-12-09T09:00:25.269Z">Dec 9, 2020</time> ・ 7 min read\n      <div class="ltag__link__servicename">\n        <img src="/assets/medium_icon.svg" alt="Medium Logo" aria-label="Medium Logo" loading="lazy">\n        Medium\n      </div>\n    </h3>\n</div>\n  </a>\n</div>\n\n\n\n<div class="ltag__link">\n  <a href="https://medium.com/javarevisited/top-21-string-programming-interview-questions-for-beginners-and-experienced-developers-56037048de45" class="ltag__link__link">\n    <div class="ltag__link__pic">\n      <img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--qkjHfzsS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/fit/c/96/96/0%2Au9Ha3uTCjEmW_3gn.gif" alt="javinpaul" loading="lazy">\n    </div>\n  </a>\n  <a href="https://medium.com/javarevisited/top-21-string-programming-interview-questions-for-beginners-and-experienced-developers-56037048de45" class="ltag__link__link">\n    <div class="ltag__link__content">\n      <h2>Top 21 String Programming Interview Questions for Beginners and Experienced Developers | by javinpaul | Javarevisited | Medium</h2>\n      <h3>javinpaul ・ <time datetime="2020-02-16T04:51:23.658Z">Feb 16, 2020</time> ・ 7 min read\n      <div class="ltag__link__servicename">\n        <img src="/assets/medium_icon.svg" alt="Medium Logo" aria-label="Medium Logo" loading="lazy">\n        Medium\n      </div>\n    </h3>\n</div>\n  </a>\n</div>\n\n\n	0	t	2021-02-17 22:14:50.116007	f	0	0	5	t	0	\N	\N	t	solve-leetcode-problems-and-get-offers-from-your-dream-companies-k-diff-pairs-in-an-array-146h	\N	25	Solve Leetcode Problems and Get Offers From Your Dream Companies | K-diff Pairs in an Array	2021-02-20 13:38:18.014302	1	0	\N	\N	\N	0	\N	\N	\N
39	f	f	f	\N	**Part 3: creating Wishlist feature for E-Commerce App**\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/6roy3fu95wj96l980jgi.jpg)\n\nIn the [previous tutorial](https://nilmadhab.medium.com/1402c0b6f1e8), we added the Wishlist API to our Spring Boot backend. Now, let’s learn how to use this API in our front-end.\n## Live Demo\n\nYou can see the Wishlist API (integrated with Vue.Js) live in action at the link mentioned below. You will be able to experience this feature after you click on the wishlist option in the main menu.\n[Webtutsplus E-Commerce App by remotedevs.org](http://remotedevs.org:8000/Signin)\n## Pre-Requisites\n\n 1. Knowledge about Vue.Js & Vue.Js CLI\n 2. JavaScript\n 3. Code Editor (like Microsoft Visual Code)\n 4. A good browser (like Google Chrome)\n\nThis tutorial is part of our series — [Frontend with Vue.js/Javascript](https://nilmadhab.medium.com/). We will **extend the code which we developed in the previous tutorials** in this series. So, if you have any doubt regarding anything that we developed earlier, you can read about it in the corresponding tutorial in the series.\n## Project Structure\n\nIf you have not read the previous tutorials in our **Front-end with Vue.Js** series, don’t worry. This section is specifically for you. As we will use the project structure that we created in the previous tutorials, we intend to describe the structure here before we begin working on the Wishlist feature. This will help you in understanding the code in a better way.\n\nFollowing is the project structure:\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/yxwsbhlmd0vzrp5gbp6o.png)\nWe will now describe the following directories:-\n\n* **public** — contains the main HTML file of our project\n* **src/assets** — stores the media files like images, logos, etc.\n* **src/components** — stores all the reusable components of our project. These components are not unique to some specific route.\n* **src/router** — contains the index.js file which keeps a record of all the routes\n* **src/views** — stores all the router components. These are the components that are rendered as per the current route.\n\nApart from this, we have some important files too\n\n* **App.vue** — it is the root component of our project\n* **main.js** — it is the starting point of our project. Here we import our root component **App.vue**, our router file **index.js**, and **createApp** method. After this, we mount our root component to the DOM using the following statement:\n\n## API Design\n\nWe designed the WishList API for our backend in the previous tutorial. You can try this API using the following Swagger link.\n[Swagger UI\nWishList API\nremotedevs.org](http://remotedevs.org:8080/api/swagger-ui.html#/wish-list-controller)\nIf you have not read the previous tutorial, do not worry. We will now describe this API so that you can feel comfortable when we use the API in our front-end.\n\nFollowing are the API end-points to\n\n 1. Get a wishlist\n 2. Add a product to the wishlist\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/vrwux6m5raxfe6l0ultb.png)\n\n**Note:** To use the API, we must pass a **token instead of User Id.** This is because we had integrated a token-based authentication in our e-commerce application. Token is automatically created and sent to the front-end as soon as the user signs in.\n\nAlso, in the body of the POST method, we will have to send the id of the product so that the given product can be added to the corresponding user’s wishlist. Hence, the body of the POST request should look like the following\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/mb4csoqq8uni5xaf537s.png)\nNow, the response of the POST request should send the list of all products in the wishlist with the necessary details. Hence, the response should look like the following\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/15osl3fph79ggf3e9nno.png)\n## Front-End Design\n\nBefore we begin to write code, it is very important that we have a very clear picture of what we are going to do. So, let’s discuss this.\n\nLet’s first discuss **accessing the wishlist.**\n\n* We will add a Wishlist button on our homepage so that everyone can access the Wishlist easily\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/hp72524q5kqu587oy5mr.png)\n* If the user has not Signed In, then, clicking on the Wishlist Button will take them to SignIn page.\n* If the user has already Signed In, then clicking on the WishList Button will redirect the user to a page where the user can see the wishlist.\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/v920xt4lzmiihuxux3r9.png)\nNow, let’s discuss adding a product to the wishlist\n\n* When the user opens the **Products page**, the user sees all the products. Now, if the user clicks on the product, there is a Product Description page. We will add **Add to Wishlist** button here below `Add to Cart` button, in this page.\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/a977pb0ndagkmhuwq4tl.png)\n* When the user clicks on the Add to Wishlist button, the button should turn Green and should display Added to Wishlist\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/j0ndrlt48lp6j38dvwc2.png)\n**Note:-**\nTo keep things simple, we are not going to deal with the following issue:-\n\n1. After the user has clicked on **Added to Wishlist Button** on the Product Details page shown above, that particular product gets added to the Wishlist and the button turns green. This is okay.\n2. But now if the user reloads the page, the **Green Button will turn back to the original button**. This is because we have no way to know if the product is already present in the wishlist or not.\n\nIf you do not understand the above issue, do not worry. You will understand it later when you begin using the front-end.\n## Let’s Code\n\nWe will now begin to write code.\n## Creating the Wishlist Page\n\nLet’s begin with creating the wishlist page where the user can see all the products added to his wishlist. It is simple.\n\n* Create a new file called `Wishlist.vue` in the `views/Product` directory.\n* We already have the `Products.vue` in the `views/Product` directory which displays all the products. Since, we learned how to develop this page in a previous tutorial in the series, we will use the code of this page and change it a little. So copy & paste the complete code `Products.vue` and paste it in `Wishist.vue`\n* Remove the `products` from the `props` array since we will fetch the products using the Wishlist API. Define a variable `products : null` in the data method. We will store the products in this variable after we fetch it from the API\n* To use the API, we first need to get the token issued to the user during Sign In and stored in the local storage (We implemented this feature in an earlier tutorial in the series). We can get the token from the local storage using the `mounted()` method. Also, create a variable `token:null` in the data method. We will store the token in this variable\n* Following is the code of `Wishlist.vue` till this stage.\n{% gist https://gist.github.com/shivamag00/d6c9e3a32924047c6b72735d315984a2.js %}\n* Last Step — Now it is time to fetch the products from the API. We will use the `axios` library to send a request to the API. We will create a method called fetchWishlist() and call it in the mounted() method so that the products are automatically fetched as soon as the page is loaded.\n* Following is the complete code of Wishlist.vue\n{% gist https://gist.github.com/shivamag00/218597042756c77c8f1abc7f760e9cb5.js %}\n## Adding the `WishList` Button on HomePage\n\nLet’s now add the Wishlist button to the menu in the NavBar.\n\nBefore we do that, let’s create a route to the wishlist page. Open the `index.js` file from the `router`/ directory. Import `Wishlist.vue` as `Wishlist` and then create a route to the wishlist at the end. Following is the code of index.js after adding the Wishlist route\n{% gist https://gist.github.com/shivamag00/64c12c834c22f18f93555a4f0e175c05.js %}\nNow, lets add the Wishlist button to the NavBar menu. To do this we will use the `<router-link>` element of Vue.Js. We will make changes to the file `Navbar.vue` present in the `components` directory.\n\nAlso as we discussed earlier, on clicking the Wishlist option in the menu, the user should be redirected to the SignIn page if he is not logged in.\n\nFollowing is the code of `Navbar.vue` after adding the Wishlist Button.\n{% gist https://gist.github.com/shivamag00/cd668fdccaaa922eac9f87d9521bce8e.js %}\nYou should now see the following NavBar.\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/ist6p7w7sf26l3oxv3tt.png)\n## Add to Wishlist Button\n\nNow, let's add the `Add to Wishlist` button to each product. Also, if the product has been successfully added to the wishlist, this button should turn green and display `Added to Wishlist `.\n\nWe will modify the `ShowDetails.vue` file in the `views/product` directory.\n\n* We will create a CSS class with the property `background-color:green` . We will also define a boolean variable `isAddedToWishlist` and change the color using this variable.\n* We will define a new variable `wishlistString:”Add to wishlist”` in the data property\n* We will define a new method `addToWishList(product.id)` in the methods property to send the POST request to the API to add the product in the user’s wishlist. This method will be called when the user clicks the button.\n* We will define a button in the template with the following properties :`class=”{product_added_wishlist: isAddedToWishlist}” , @click=”addToWishList(product.id)” `. We will display the string defined by the variable `{{wishlistString}}` in the button\n\tFollowing is the complete code of `ShowDetails.vue`\n{% gist https://gist.github.com/shivamag00/688c9e81cbef5bdfb361ac20aed344b5.js %}\nThe following will be seen on the Product Details page. You will see the Add to Wishlist button below the Add to Cart button.\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/w7tbttz438gctohvth14.png)\n\n## Congratulations\n\nYou have now successfully added the Wishlist feature in your Vue.Js frontend\n## Learn by Contributing\n\nIf you wish to contribute to our eCommerce-Vue.Js front-end, you clone [this](https://github.com/webtutsplus/ecommerce-vuejs) Github repository and work on the following features related to the wishlist\n\n* Currently, if the user reloads the page after adding the product to the wishlist, the green button vanishes and the grey `Add to Wishlist` button comes up again. Try to fix this such that even after reloading a page the button stays green indicating that the product is already on the wishlist.\n\nAfter you have implemented the feature, send us a PR. We will review and merge it into our master branch\n	{"boosted_additional_tags": "", "boosted_dev_digest_email": false, "boosted_additional_articles": false}	\N	webdev, frontend, javascript, ecommerce	--- !ruby/struct:Articles::CachedEntity\nname: nilmadhab mondal\nusername: nilmadhab\nslug: nilmadhab\nprofile_image_90: "/uploads/user/profile_image/1/d9b0e3b7-ad59-45d5-b516-4e8ffd0a6958.jpeg"\nprofile_image_url: "/uploads/user/profile_image/1/d9b0e3b7-ad59-45d5-b516-4e8ffd0a6958.jpeg"\n	nilmadhab mondal	nilmadhab	\N	{}	\N	0	\N	0	2021-02-17 22:02:34.588454	\N	Part 3: creating Wishlist feature for E-Commerce App   In the previous tutorial, we added the Wishlis...	2021-02-18 08:06:15.116596	t	5	5	\N	f	1613599354	\N	354005	en	\N	2021-02-17 22:02:34.579605	\N	/i/rpr6onv9l30st3ueoakt.png	#dddddd	9	0	0	0	\N	\N	3	775f859341bcf462a9fd0c50c2b2a9211aa03e6473eca09e45d0e428c1931e1c20fc1e511db253bff0dbdefe01aa92b8cf0939d957fc9d77c7a33750	/nilmadhab/creating-an-ecommerce-frontend-with-vue-js-part-3-wishlist-feature-4gcm	0	0	0	<p><strong>Part 3: creating Wishlist feature for E-Commerce App</strong><br>\n<a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--CWMjINKr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6roy3fu95wj96l980jgi.jpg" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--CWMjINKr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6roy3fu95wj96l980jgi.jpg" alt="Alt Text" loading="lazy"></a></p>\n\n<p>In the <a href="https://nilmadhab.medium.com/1402c0b6f1e8">previous tutorial</a>, we added the Wishlist API to our Spring Boot backend. Now, let’s learn how to use this API in our front-end.</p>\n\n<h2>\n  <a name="live-demo" href="#live-demo" class="anchor">\n  </a>\n  Live Demo\n</h2>\n\n<p>You can see the Wishlist API (integrated with Vue.Js) live in action at the link mentioned below. You will be able to experience this feature after you click on the wishlist option in the main menu.<br>\n<a href="http://remotedevs.org:8000/Signin">Webtutsplus E-Commerce App by remotedevs.org</a></p>\n\n<h2>\n  <a name="prerequisites" href="#prerequisites" class="anchor">\n  </a>\n  Pre-Requisites\n</h2>\n\n<ol>\n<li>Knowledge about Vue.Js &amp; Vue.Js CLI</li>\n<li>JavaScript</li>\n<li>Code Editor (like Microsoft Visual Code)</li>\n<li>A good browser (like Google Chrome)</li>\n</ol>\n\n<p>This tutorial is part of our series — <a href="https://nilmadhab.medium.com/">Frontend with Vue.js/Javascript</a>. We will <strong>extend the code which we developed in the previous tutorials</strong> in this series. So, if you have any doubt regarding anything that we developed earlier, you can read about it in the corresponding tutorial in the series.</p>\n\n<h2>\n  <a name="project-structure" href="#project-structure" class="anchor">\n  </a>\n  Project Structure\n</h2>\n\n<p>If you have not read the previous tutorials in our <strong>Front-end with Vue.Js</strong> series, don’t worry. This section is specifically for you. As we will use the project structure that we created in the previous tutorials, we intend to describe the structure here before we begin working on the Wishlist feature. This will help you in understanding the code in a better way.</p>\n\n<p>Following is the project structure:<br>\n<a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--BrYIHtWG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/yxwsbhlmd0vzrp5gbp6o.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--BrYIHtWG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/yxwsbhlmd0vzrp5gbp6o.png" alt="Alt Text" loading="lazy"></a><br>\nWe will now describe the following directories:-</p>\n\n<ul>\n<li>\n<strong>public</strong> — contains the main HTML file of our project</li>\n<li>\n<strong>src/assets</strong> — stores the media files like images, logos, etc.</li>\n<li>\n<strong>src/components</strong> — stores all the reusable components of our project. These components are not unique to some specific route.</li>\n<li>\n<strong>src/router</strong> — contains the index.js file which keeps a record of all the routes</li>\n<li>\n<strong>src/views</strong> — stores all the router components. These are the components that are rendered as per the current route.</li>\n</ul>\n\n<p>Apart from this, we have some important files too</p>\n\n<ul>\n<li>\n<strong>App.vue</strong> — it is the root component of our project</li>\n<li>\n<strong>main.js</strong> — it is the starting point of our project. Here we import our root component <strong>App.vue</strong>, our router file <strong>index.js</strong>, and <strong>createApp</strong> method. After this, we mount our root component to the DOM using the following statement:</li>\n</ul>\n\n<h2>\n  <a name="api-design" href="#api-design" class="anchor">\n  </a>\n  API Design\n</h2>\n\n<p>We designed the WishList API for our backend in the previous tutorial. You can try this API using the following Swagger link.<br>\n<a href="http://remotedevs.org:8080/api/swagger-ui.html#/wish-list-controller">Swagger UI<br>\nWishList API<br>\nremotedevs.org</a><br>\nIf you have not read the previous tutorial, do not worry. We will now describe this API so that you can feel comfortable when we use the API in our front-end.</p>\n\n<p>Following are the API end-points to</p>\n\n<ol>\n<li>Get a wishlist</li>\n<li>Add a product to the wishlist\n<img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--EU3Yt7hd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vrwux6m5raxfe6l0ultb.png" alt="Alt Text" loading="lazy">\n</li>\n</ol>\n\n<p><strong>Note:</strong> To use the API, we must pass a <strong>token instead of User Id.</strong> This is because we had integrated a token-based authentication in our e-commerce application. Token is automatically created and sent to the front-end as soon as the user signs in.</p>\n\n<p>Also, in the body of the POST method, we will have to send the id of the product so that the given product can be added to the corresponding user’s wishlist. Hence, the body of the POST request should look like the following<br>\n<a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--YrOWhqcL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/mb4csoqq8uni5xaf537s.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--YrOWhqcL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/mb4csoqq8uni5xaf537s.png" alt="Alt Text" loading="lazy"></a><br>\nNow, the response of the POST request should send the list of all products in the wishlist with the necessary details. Hence, the response should look like the following<br>\n<a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--lt1y2GuC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/15osl3fph79ggf3e9nno.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--lt1y2GuC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/15osl3fph79ggf3e9nno.png" alt="Alt Text" loading="lazy"></a></p>\n\n<h2>\n  <a name="frontend-design" href="#frontend-design" class="anchor">\n  </a>\n  Front-End Design\n</h2>\n\n<p>Before we begin to write code, it is very important that we have a very clear picture of what we are going to do. So, let’s discuss this.</p>\n\n<p>Let’s first discuss <strong>accessing the wishlist.</strong></p>\n\n<ul>\n<li>We will add a Wishlist button on our homepage so that everyone can access the Wishlist easily\n<img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--vpDxTo__--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hp72524q5kqu587oy5mr.png" alt="Alt Text" loading="lazy">\n</li>\n<li>If the user has not Signed In, then, clicking on the Wishlist Button will take them to SignIn page.</li>\n<li><p>If the user has already Signed In, then clicking on the WishList Button will redirect the user to a page where the user can see the wishlist.<br>\n<a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--Fnwql0Dn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/v920xt4lzmiihuxux3r9.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--Fnwql0Dn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/v920xt4lzmiihuxux3r9.png" alt="Alt Text" loading="lazy"></a><br>\nNow, let’s discuss adding a product to the wishlist</p></li>\n<li><p>When the user opens the <strong>Products page</strong>, the user sees all the products. Now, if the user clicks on the product, there is a Product Description page. We will add <strong>Add to Wishlist</strong> button here below <code>Add to Cart</code> button, in this page.<br>\n<a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--B-c16WX6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/a977pb0ndagkmhuwq4tl.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--B-c16WX6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/a977pb0ndagkmhuwq4tl.png" alt="Alt Text" loading="lazy"></a></p></li>\n<li><p>When the user clicks on the Add to Wishlist button, the button should turn Green and should display Added to Wishlist<br>\n<a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--EoJUHxWc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/j0ndrlt48lp6j38dvwc2.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--EoJUHxWc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/j0ndrlt48lp6j38dvwc2.png" alt="Alt Text" loading="lazy"></a><br>\n<strong>Note:-</strong><br>\nTo keep things simple, we are not going to deal with the following issue:-</p></li>\n</ul>\n\n<ol>\n<li>After the user has clicked on <strong>Added to Wishlist Button</strong> on the Product Details page shown above, that particular product gets added to the Wishlist and the button turns green. This is okay.</li>\n<li>But now if the user reloads the page, the <strong>Green Button will turn back to the original button</strong>. This is because we have no way to know if the product is already present in the wishlist or not.</li>\n</ol>\n\n<p>If you do not understand the above issue, do not worry. You will understand it later when you begin using the front-end.</p>\n\n<h2>\n  <a name="lets-code" href="#lets-code" class="anchor">\n  </a>\n  Let’s Code\n</h2>\n\n<p>We will now begin to write code.</p>\n\n<h2>\n  <a name="creating-the-wishlist-page" href="#creating-the-wishlist-page" class="anchor">\n  </a>\n  Creating the Wishlist Page\n</h2>\n\n<p>Let’s begin with creating the wishlist page where the user can see all the products added to his wishlist. It is simple.</p>\n\n<ul>\n<li>Create a new file called <code>Wishlist.vue</code> in the <code>views/Product</code> directory.</li>\n<li>We already have the <code>Products.vue</code> in the <code>views/Product</code> directory which displays all the products. Since, we learned how to develop this page in a previous tutorial in the series, we will use the code of this page and change it a little. So copy &amp; paste the complete code <code>Products.vue</code> and paste it in <code>Wishist.vue</code>\n</li>\n<li>Remove the <code>products</code> from the <code>props</code> array since we will fetch the products using the Wishlist API. Define a variable <code>products : null</code> in the data method. We will store the products in this variable after we fetch it from the API</li>\n<li>To use the API, we first need to get the token issued to the user during Sign In and stored in the local storage (We implemented this feature in an earlier tutorial in the series). We can get the token from the local storage using the <code>mounted()</code> method. Also, create a variable <code>token:null</code> in the data method. We will store the token in this variable</li>\n<li>Following is the code of <code>Wishlist.vue</code> till this stage.\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/shivamag00/d6c9e3a32924047c6b72735d315984a2.js"></script>\n</div>\n</li>\n<li>Last Step — Now it is time to fetch the products from the API. We will use the <code>axios</code> library to send a request to the API. We will create a method called fetchWishlist() and call it in the mounted() method so that the products are automatically fetched as soon as the page is loaded.</li>\n<li>Following is the complete code of Wishlist.vue\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/shivamag00/218597042756c77c8f1abc7f760e9cb5.js"></script>\n</div>\n\n## Adding the <code>WishList</code> Button on HomePage</li>\n</ul>\n\n<p>Let’s now add the Wishlist button to the menu in the NavBar.</p>\n\n<p>Before we do that, let’s create a route to the wishlist page. Open the <code>index.js</code> file from the <code>router</code>/ directory. Import <code>Wishlist.vue</code> as <code>Wishlist</code> and then create a route to the wishlist at the end. Following is the code of index.js after adding the Wishlist route<br>\n</p>\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/shivamag00/64c12c834c22f18f93555a4f0e175c05.js"></script>\n</div>\n<br>\nNow, lets add the Wishlist button to the NavBar menu. To do this we will use the <code>&lt;router-link&gt;</code> element of Vue.Js. We will make changes to the file <code>Navbar.vue</code> present in the <code>components</code> directory.\n\n<p>Also as we discussed earlier, on clicking the Wishlist option in the menu, the user should be redirected to the SignIn page if he is not logged in.</p>\n\n<p>Following is the code of <code>Navbar.vue</code> after adding the Wishlist Button.<br>\n</p>\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/shivamag00/cd668fdccaaa922eac9f87d9521bce8e.js"></script>\n</div>\n<br>\nYou should now see the following NavBar.<br>\n<img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--hrQmMhQ5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ist6p7w7sf26l3oxv3tt.png" alt="Alt Text" loading="lazy">\n\n<h2>\n  <a name="add-to-wishlist-button" href="#add-to-wishlist-button" class="anchor">\n  </a>\n  Add to Wishlist Button\n</h2>\n\n<p>Now, let's add the <code>Add to Wishlist</code> button to each product. Also, if the product has been successfully added to the wishlist, this button should turn green and display <code>Added to Wishlist</code>.</p>\n\n<p>We will modify the <code>ShowDetails.vue</code> file in the <code>views/product</code> directory.</p>\n\n<ul>\n<li>We will create a CSS class with the property <code>background-color:green</code> . We will also define a boolean variable <code>isAddedToWishlist</code> and change the color using this variable.</li>\n<li>We will define a new variable <code>wishlistString:”Add to wishlist”</code> in the data property</li>\n<li>We will define a new method <code>addToWishList(product.id)</code> in the methods property to send the POST request to the API to add the product in the user’s wishlist. This method will be called when the user clicks the button.</li>\n<li>We will define a button in the template with the following properties :<code>class=”{product_added_wishlist: isAddedToWishlist}” , @click=”addToWishList(product.id)”</code>. We will display the string defined by the variable <code>{{wishlistString}}</code> in the button\nFollowing is the complete code of <code>ShowDetails.vue</code>\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/shivamag00/688c9e81cbef5bdfb361ac20aed344b5.js"></script>\n</div>\n\nThe following will be seen on the Product Details page. You will see the Add to Wishlist button below the Add to Cart button.\n<img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--v4Udne0l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/w7tbttz438gctohvth14.png" alt="Alt Text" loading="lazy">\n</li>\n</ul>\n\n<h2>\n  <a name="congratulations" href="#congratulations" class="anchor">\n  </a>\n  Congratulations\n</h2>\n\n<p>You have now successfully added the Wishlist feature in your Vue.Js frontend</p>\n\n<h2>\n  <a name="learn-by-contributing" href="#learn-by-contributing" class="anchor">\n  </a>\n  Learn by Contributing\n</h2>\n\n<p>If you wish to contribute to our eCommerce-Vue.Js front-end, you clone <a href="https://github.com/webtutsplus/ecommerce-vuejs">this</a> Github repository and work on the following features related to the wishlist</p>\n\n<ul>\n<li>Currently, if the user reloads the page after adding the product to the wishlist, the green button vanishes and the grey <code>Add to Wishlist</code> button comes up again. Try to fix this such that even after reloading a page the button stays green indicating that the product is already on the wishlist.</li>\n</ul>\n\n<p>After you have implemented the feature, send us a PR. We will review and merge it into our master branch</p>\n\n	0	t	2021-02-17 22:02:34.579605	f	0	0	7	t	0	\N	\N	t	creating-an-ecommerce-frontend-with-vue-js-part-3-wishlist-feature-4gcm	\N	25	Creating an eCommerce Frontend with Vue.js | Part 3: Wishlist feature	2021-02-18 08:06:15.448602	1	0	\N	\N	\N	0	\N	\N	\N
55	f	f	f	\N	{% medium https://medium.com/webtutsplus/android-ui-for-e-commerce-user-profile-backend-4053ab122a13 %}\n\n**Introduction**\nWe are building an e-commerce platform from scratch. In the last tutorial, we build the backend for the UserProfile\nIn this article, we will build the android UI for the UserProfile backend, which can be a base for many other applications.\nNot long before was the time when the user profile consisted of a hard copy form. From the advent of digital technology and sophisticated software, profiles have been becoming more intuitive.\n\n**Backend API description**\nHere we describe the most important component of our user profile application: the [REST API](https://medium.com/javarevisited/top-5-books-and-courses-to-learn-restful-web-services-in-java-using-spring-mvc-and-spring-boot-79ec4b351d12?source=---------17------------------). A REST API is an application that uses the existing protocol stack for data communication between different applications on the web. Here, we are using a web API to communicate between our android application and a remote database for user data storage. Our API handles the GET and POST request which basically allows the android application to create and fetch data from the database.\nThe API used here is created using [Java](https://medium.com/javarevisited/11-advanced-core-java-online-courses-to-join-in-2021-46011661257a) and [Spring Boot framework](https://medium.com/javarevisited/10-advanced-spring-boot-courses-for-experienced-java-developers-5e57606816bd?source=collection_home---4------0-----------------------). Spring is a popular application development framework, developed for the enterprise edition of the Java programming language. You can find detailed project files for the REST API over [here](https://bitbucket.org/ecommerce-webtutsplus/ecommerce/src/master/).\n\n[view demo image1](https://miro.medium.com/max/625/1*dPELMj6RgoC54s8YiWtMmw.jpeg)\n[view demo image2](https://miro.medium.com/max/625/1*JDzGjTILEbTukPOWFDSnrw.jpeg)\n\nAndroid Studio is the official Integrated Development Environment (IDE) for [Android app development](https://medium.com/hackernoon/top-5-courses-to-learn-android-for-java-programmers-667e03d995b4), based on [IntelliJ IDEA](https://www.jetbrains.com/idea/). On top of IntelliJ’s powerful code editor and developer tools, Android Studio offers even more features that enhance your productivity when building Android apps, such as:\n\n* A flexible [Gradle](https://medium.com/javarevisited/5-best-gradle-courses-and-books-to-learn-in-2021-93f49ce8ff8e)-based build system.\n* A fast and feature-rich emulator.\n* A unified environment where you can develop for all Android devices.\n* Apply Changes to push code and resource changes to your running app without restarting your app.\n* Code templates and [GitHub](https://medium.com/javarevisited/7-best-courses-to-master-git-and-github-for-programmers-d671859a68b2) integration to help you build common app features and import sample code.\n* Extensive testing tools and frameworks.\n* Lint tools to catch performance, usability, version compatibility, and other problems.\n* [C++](https://medium.com/javarevisited/top-10-courses-to-learn-c-for-beginners-best-and-free-4afc262a544e) and NDK support.\n* Built-in support for [Google Cloud Platform](https://cloud.google.com/tools/android-studio/docs/), making it easy to integrate Google Cloud Messaging and App Engine.\n\nThe benefit of using [Android Studio](https://itnext.io/top-5-intellijidea-and-android-studio-courses-for-java-and-android-programmers-afcc27309b60) over any other IDE is we get a rich set of features built-in which enable us to focus more on the development aspect while the back-end of this IDE handles the requirements and dependencies. For this project, an existing API endpoint has been used for [database connectivity](https://medium.com/javarevisited/top-5-courses-to-learn-jdbc-and-database-connectivity-for-java-developers-free-and-best-of-lot-7945156fcc3?source=---------9------------------).\n\n**Prerequisite**:\nBefore we start developing, we need to check off a few requirements:\nYou will need to have a Java JDK installed on your system. You can find the instructions for installing the JDK [here](https://docs.oracle.com/javase/8/docs/technotes/guides/install/install_overview.html).\nYou will need to install [Android Studio](https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=&cad=rja&uact=8&ved=2ahUKEwio5YXQ2MLtAhX7yjgGHabuC8oQFjAAegQIARAD&url=https%3A%2F%2Fdeveloper.android.com%2Fstudio&usg=AOvVaw3fIlahucURgOEYHHhVdQuW) on your system.\nLastly, we can use our Android smartphone with USB debugging enabled for testing the android app or we can use the built-in Android emulator from Android Studio (I have used my smartphone for testing and debugging).\n\n**Project Setup and Structure**:\nOnce you install Android Studio on your system, you can start with creating a new project.\n[view image](https://miro.medium.com/max/875/1*7OQVIEpuu9U5guhSsf4yTA.png)\n\nTo create your new Android project, follow these steps:\n1. In the Welcome to Android Studio window, click Start a new Android Studio project.\n2. In the Select a Project Template window, select Empty Activity and click Next.\n3. In the Configure your project window, complete the following:\n* Enter “User Authentication” in the Name field.\n* Enter “com.example.userprofile” in the Package name field.\n* If you’d like to place the project in a different folder, change its Save location.\n* Select Java from the Language drop-down menu.\n* Select the lowest version of Android your app will support in the Minimum SDK field. I have selected API level 22 (Android Lollipop).\n* Leave the other options as they are.\n4. Click Finish.\n\nAfter some processing time, the Android Studio main window appears.\nNow take a moment to review the most important files. First, be sure the Project window is open (select View > Tool Windows > Project) and the Android view is selected from the drop-down list at the top of that window. You can then see the following files:\n\n* app > java > com.example.userprofile > MainActivity\n\nThis is the main activity. It’s the entry point for your app. When you build and run your app, the system launches an instance of this Activity and loads its layout.\n\n* app > res > layout > activity_main.xml\n\nThis XML file defines the layout for the activity’s user interface (UI). It contains a TextView element with the text “Hello, World!”\n\n* app > manifests > AndroidManifest.xml\n\nThe manifest file describes the fundamental characteristics of the app and defines each of its components.\n* Gradle Scripts > build.gradle\n\nThere are two files with this name: one for the project, “Project: User Authentication” and one for the app module, “Module: app.” Each module has its own build.gradle file, but this project currently has just one module. Use each module’s build.gradle file to control how the [Gradle plugin](https://developer.android.com/studio/releases/gradle-plugin) builds your app. For more information about this file, see [Configure your build](https://developer.android.com/studio/build#module-level).\nBefore you run your first app, get your smartphone, and enable USB debugging by following the instructions over [here](https://developer.android.com/studio/debug/dev-options). After, enabling USB debugging, connect your smartphone to your PC and you are ready to go.\n\nIn Android Studio, select Run > Run ‘app’ or click the Run icon in the toolbar.\n\nCongratulations on creating your very first app. But you are far from what we have to achieve. Next, we need to create the rest of the application.\n\n**Setting up the files**:\nLet’s start with app > res > drawables. This is the directory where we will be storing all the graphical elements for our application. We are going to store three different categories of graphic elements.\n* Image. (filename: background.jpg)\n* Icon elements. (filenames: account.xml, email.xml, pencil.xml)\n* Custom graphic file. (round_button.xml)\nThe image used here is for the background of the UI. You can use any image you like but be sure to use the same file name for the next part where we will be coding the back-end and creating activity layouts.\nIcon elements are XML files for vector graphic icons used in our application. You can find and download these files from [here](https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=&cad=rja&uact=8&ved=2ahUKEwi23sKz48LtAhW_xDgGHdBfB7kQFjABegQIARAC&url=https%3A%2F%2Fmaterialdesignicons.com%2F&usg=AOvVaw0nKP6M_S9hl0vHqp8CiPth).\n\nThe custom graphic file here is used for creating a rich look for our buttons in the application. It’s an XML file containing various tags and attributes specifying the properties that the button will have for its appearance.\n\n```\n<?xml version="1.0" encoding="utf-8"?>\n<shape xmlns:android="http://schemas.android.com/apk/res/android" android:shape="rectangle" >\n    <gradient android:angle="45"\n        android:startColor="#6f7480"\n        android:endColor="#4f5154"\n        android:type="linear"/>\n    <corners\n        android:bottomRightRadius="10dp"\n        android:bottomLeftRadius="10dp"\n        android:topLeftRadius="10dp"\n        android:topRightRadius="10dp" />\n</shape>\n```\n\n                   round_button.xml\n\nMoving on, we have two layout files for our two pages: create user and fetch user data page. These files are contained in app > res > layout having names activity_main.xml, user.xml. To create these files, right-click on the layout directory and select new > layout resource file. A New Resource File pop-up with several fields should appear. In the File name field, we’ll insert the required file names.\nIn the Root element field of this same pop-up, make sure to type in RelativeLayout. The remaining two fields can remain the same. Click OK. This will create a new layout for us.\nHowever, Android Studio will likely default to the visual editor we saw our Constraint Layout in earlier. To edit our layout’s XML directly, we’ll need to navigate out of the visual editor and into the XML editor. Near the top-right of the editor screen, you should see three tabs: code, split, design. Select the code tab to toggle into the XML editor.\n\n```\n<?xml version="1.0" encoding="utf-8"?>\n<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"\n    xmlns:tools ="http://schemas.android.com/tools"\n    android:layout_width="fill_parent"\n    android:layout_height="fill_parent"\n    android:background="@drawable/background"\n    tools:context=".MainActivity">\n\n    <TextView\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:text="Create User"\n        android:textSize="100px"\n        android:textColor="#d3d8e3"\n        android:layout_alignParentTop = "true"\n        android:layout_centerHorizontal = "true"\n        android:layout_marginTop="450px" />\n\n    <EditText\n        android:id="@+id/user1"\n        android:layout_width="match_parent"\n        android:layout_height="wrap_content"\n        android:layout_marginRight="40dp"\n        android:hint="username"\n        android:textColorHint="#8e9094"\n        android:textCursorDrawable="@null"\n        android:inputType="text"\n        android:drawableStart="@drawable/account"\n        android:drawablePadding="5dp"\n        android:layout_marginLeft="40dp"\n        android:layout_marginTop="250dp"\n        android:gravity="start"/>\n\n    <EditText\n        android:layout_width="match_parent"\n        android:layout_height="wrap_content"\n        android:hint="email"\n        android:textCursorDrawable="@null"\n        android:drawableStart="@drawable/email"\n        android:textColorHint="#8e9094"\n        android:drawablePadding="5dp"\n        android:inputType="textEmailAddress"\n        android:layout_marginRight="40dp"\n        android:layout_marginLeft="40dp"\n        android:layout_marginTop="320dp"\n        android:id="@+id/email1"\n        android:gravity="start" />\n\n\n    <EditText\n        android:layout_width="match_parent"\n        android:layout_height="wrap_content"\n        android:hint="First name"\n        android:textCursorDrawable="@null"\n        android:textColorHint="#8e9094"\n        android:drawableStart="@drawable/pencil"\n        android:drawablePadding="5dp"\n        android:inputType="text"\n        android:layout_marginRight="40dp"\n        android:layout_marginLeft="40dp"\n        android:layout_marginTop="390dp"\n        android:id="@+id/fname"\n        android:gravity="start" />\n\n    <EditText\n        android:layout_width="match_parent"\n        android:layout_height="wrap_content"\n        android:hint="Last name"\n        android:textCursorDrawable="@null"\n        android:textColorHint="#8e9094"\n        android:drawableStart="@drawable/pencil"\n        android:drawablePadding="5dp"\n        android:inputType="text"\n        android:layout_marginRight="40dp"\n        android:layout_marginLeft="40dp"\n        android:layout_marginTop="460dp"\n        android:id="@+id/lname"\n        android:gravity="start" />\n\n    <Button\n        android:layout_width="match_parent"\n        android:layout_height="wrap_content"\n        android:text="CREATE"\n        android:id="@+id/create"\n        android:textAllCaps="false"\n        android:layout_marginRight="40dp"\n        android:layout_marginLeft="40dp"\n        android:layout_marginTop="550dp"\n        android:textColor="#d3d8e3"\n        android:textSize="20dp"\n        android:onClick="create"\n        android:background="@drawable/round_button"\n        android:gravity="center"/>\n\n    <TextView\n        android:id="@+id/data"\n        android:layout_width="wrap_content"\n        android:layout_height="23dp"\n        android:layout_marginTop="620dp"\n        android:layout_marginLeft="125dp"\n        android:fontFamily="sans-serif"\n        android:text="Check existing users over"\n        android:textColor="#d3d8e3"\n        android:textSize="12dp"\n        android:focusable="true" />\n\n    <TextView\n        android:id="@+id/database"\n        android:layout_width="wrap_content"\n        android:layout_height="23dp"\n        android:layout_marginTop="620dp"\n        android:fontFamily="sans-serif-medium"\n        android:clickable="true"\n        android:text=" here."\n        android:layout_toEndOf="@+id/data"\n        android:textColor="#00d9d9"\n        android:textSize="12dp"\n        android:onClick="user"\n        android:focusable="true" />\n\n\n\n</RelativeLayout>\n```\n\n                      activity_main.xml\n\n```\n<?xml version="1.0" encoding="utf-8"?>\n<RelativeLayout  xmlns:android="http://schemas.android.com/apk/res/android"\n    xmlns:tools ="http://schemas.android.com/tools"\n    android:layout_width="fill_parent"\n    android:layout_height="fill_parent"\n    android:background="@drawable/background"\n    tools:context=".User" >\n\n    <TextView\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:text="Existing Users"\n        android:textSize="100px"\n        android:textColor="#d3d8e3"\n        android:layout_alignParentTop = "true"\n        android:layout_centerHorizontal = "true"\n        android:layout_marginTop="150dp" />\n\n    <TableLayout xmlns:android="http://schemas.android.com/apk/res/android"\n        android:layout_width="match_parent"\n        android:layout_height="30dp"\n        android:layout_marginTop="250dp"\n        android:paddingLeft="10dp"\n        android:paddingRight="10dp" >\n        <TableRow android:padding="5dp">\n            <TextView\n                android:layout_width="wrap_content"\n                android:layout_height="wrap_content"\n                android:layout_weight="3"\n                android:text="Username" />\n            <TextView\n                android:layout_width="wrap_content"\n                android:layout_height="wrap_content"\n                android:layout_weight="4"\n                android:text="Email" />\n            <TextView\n                android:layout_width="wrap_content"\n                android:layout_height="wrap_content"\n                android:layout_weight="1"\n                android:text="First Name" />\n            <TextView\n                android:layout_width="wrap_content"\n                android:layout_height="wrap_content"\n                android:layout_weight="1"\n                android:text="Last Name" />\n        </TableRow>\n    </TableLayout>\n\n    <TableLayout xmlns:android="http://schemas.android.com/apk/res/android"\n        android:id="@+id/table"\n        android:layout_width="match_parent"\n        android:layout_height="200dp"\n        android:layout_marginTop="280dp"\n        android:paddingLeft="10dp"\n        android:paddingRight="10dp" >\n\n    </TableLayout>\n\n    <Button\n        android:layout_width="match_parent"\n        android:layout_height="wrap_content"\n        android:text="FETCH"\n        android:id="@+id/fetch"\n        android:textAllCaps="false"\n        android:layout_marginRight="40dp"\n        android:layout_marginLeft="40dp"\n        android:layout_marginTop="550dp"\n        android:textColor="#d3d8e3"\n        android:textSize="20dp"\n        android:onClick="fetch"\n        android:background="@drawable/round_button"\n        android:gravity="center"/>\n\n</RelativeLayout>\n```\n                         user.xml\n\nIf you can notice then all these files contain some common tags having some attributes. These tags are View elements that are going to be displayed in the application. Let’s review them one by one for a general idea.\n\n* RelativeLayout: RelativeLayout is a view group that displays child views in relative positions. The position of each view can be specified as relative to sibling elements (such as to the left-of or below another view) or in positions relative to the parent RelativeLayout area (such as aligned to the bottom, left, or center).\n* TextView: A TextView displays text to the user and optionally allows them to edit it. A TextView is a complete text editor, however, the basic class is configured to not allow editing.\n* EditText: EditText is a standard entry widget in android apps. It is an overlay over TextView that configures itself to be editable. EditText is a subclass of TextView with text editing operations. We often use EditText in our applications to provide an input or text field, especially in forms.\n* Button: In Android, Button represents a push button. Push buttons can be clicked, or pressed by the user to perform an action. On a button, we can perform different actions or events like click event, pressed event, touch event, etc.\n* TableLayout: A layout that arranges its children into rows and columns. A TableLayout consists of several TableRow objects, each defining a row. TableLayout containers do not display border lines for their rows, columns, or cells. Each row has zero or more cells; each cell can hold one View object. The table has as many columns as the row with the most cells. A table can leave cells empty. Cells can span columns, as they can in HTML.\n* TableRow: For building a row in a table we use the TableRow element. Table row objects are the child's views of a table layout. Each row of the table has zero or more cells and each cell can hold only one view object like [ImageView](https://abhiandroid.com/ui/imageview/), [TextView](https://abhiandroid.com/ui/textview/), or any other view.\n\nview image(https://miro.medium.com/max/468/1*KJ64CADBByjnjHoUDmaOQA.jpeg)\n\n            Rows and Columns in TableLayout Android\n\nThere are many more tags and have many different attributes for creating various intuitive design elements and UI for an android application.\nNext up, we will create the files necessary for the back-end of our applications: [Java files](https://medium.com/javarevisited/top-10-free-courses-to-learn-spring-framework-for-java-developers-639db9348d25).\n\nWe will be creating two more java class files which are Config.java and User.java.\nTo create them, right-click on app > java > com.example.userprofile directory and click New > Java Class. Enter the file name and press enter.\n\nBefore moving ahead, we must configure our AndroidManifest.xml file for the file additions and requirements that we want.\n\n```\n<?xml version="1.0" encoding="utf-8"?>\n<manifest xmlns:android="http://schemas.android.com/apk/res/android"\n    package="com.webtutsplus.ecommerce">\n\n    <uses-permission android:name="android.permission.INTERNET" />\n\n    <application\n        android:allowBackup="true"\n        android:icon="@mipmap/ic_launcher"\n        android:label="@string/app_name"\n        android:roundIcon="@mipmap/ic_launcher_round"\n        android:usesCleartextTraffic="true"\n        android:supportsRtl="true"\n        android:theme="@style/Theme.AppCompat.NoActionBar">\n        <activity android:name="com.webtutsplus.ecommerce.MainActivity">\n            <intent-filter>\n                <action android:name="android.intent.action.MAIN" />\n\n                <category android:name="android.intent.category.LAUNCHER" />\n            </intent-filter>\n        </activity>\n\n        <activity android:name="com.webtutsplus.ecommerce.User"></activity>\n\n    </application>\n\n</manifest>\n```\n\n                  AndroidManifest.xml\n\n**Adding in the code**\nTo save the hassle, each class for a given activity contains a default piece of code that is essential for the behavior of the application.\nAs a user navigates through, out of, and back to your app, the Activity instances in your app transition through different stages in their life-cycle. The Activity class provides several callbacks that allow the activity to know that a state has changed: that the system is creating, stopping, or resuming an activity, or destroying the process in which the activity resides.\nWithin the lifecycle callback methods, you can declare how your activity behaves when the user leaves and re-enters the activity. For example, if you’re building a streaming video player, you might pause the video and terminate the network connection when the user switches to another app.\nWhen the user returns, you can reconnect to the network and allow the user to resume the video from the same spot. In other words, each callback allows you to perform specific work that’s appropriate to a given change of state. Doing the right work at the right time and handling transitions properly make your app more robust and performant. For example, good implementation of the lifecycle callbacks can help ensure that your app avoids:\n\n* Crashing if the user receives a phone call or switches to another app while using your app.\n* Consuming valuable system resources when the user is not actively using it.\n* Losing the user’s progress if they leave your app and return to it at a later time.\n* Crashing or losing the user’s progress when the screen rotates between landscape and portrait orientation.\n\n[view image](https://miro.medium.com/max/641/0*NycI2ocA-uf9pgxR.png)\n\n                       Activity Life Cycle\n\nWe have extensively use the onCreate() activity method which defines the behavior of the application on start-up.\nFor the first file, MainActivity.java:\n\n```\npackage com.webtutsplus.ecommerce;\n\nimport androidx.appcompat.app.AppCompatActivity;\n\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.util.Log;\nimport android.view.View;\nimport android.widget.EditText;\nimport android.widget.Toast;\n\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\nimport java.io.DataOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.MalformedURLException;\nimport java.net.URL;\n\npublic class MainActivity extends AppCompatActivity implements Config{\n\n    EditText user, email, fname, lname;\n    String user1, email1, fname1, lname1, reply, code;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        user = findViewById(R.id.user1);\n        email = findViewById(R.id.email1);\n        fname = findViewById(R.id.fname);\n        lname = findViewById(R.id.lname);\n        user1 = "";\n        email1 = "";\n        fname1 = "";\n        lname1 = "";\n    }\n\n    public void create(View view) {\n        user1 = user.getText().toString();\n        email1 = email.getText().toString();\n        fname1 = fname.getText().toString();\n        lname1 = lname.getText().toString();\n\n        if(user1.isEmpty() || email1.isEmpty() || fname1.isEmpty() || lname1.isEmpty()) {\n            Toast.makeText(MainActivity.this, "Fields cannot be blank", Toast.LENGTH_SHORT).show();  // Check whether the fields are not blank\n        }\n        else {\n            // Create various messages to display in the app.\n            Toast failed_toast = Toast.makeText(MainActivity.this, "Request failed", Toast.LENGTH_SHORT);\n            Toast created_toast = Toast.makeText(MainActivity.this, "User created", Toast.LENGTH_SHORT);\n            // Create a worker thread for sending HTTP requests.\n            Thread thread = new Thread(new Runnable() {\n                @Override\n                public void run() {\n                    try {\n                        URL url = new URL (Config.api_url2);                                             // new url object is created\n                        HttpURLConnection conn = (HttpURLConnection) url.openConnection();              // HTTP connection object is created\n                        conn.setRequestMethod("POST");                                                  // POST method\n                        conn.setRequestProperty("Content-Type", "application/json; utf-8");             // JSON format is specified\n                        conn.setRequestProperty("Accept", "application/json");\n                        conn.setDoOutput(true);\n                        conn.setDoInput(true);\n                        JSONObject input = new JSONObject();                                           // New JSON object is created\n                        // Give data to the json object\n                        input.put("username", user1);\n                        input.put("email", email1);\n                        input.put("firstName", fname1);\n                        input.put("lastName", lname1);\n                        DataOutputStream os = new DataOutputStream(conn.getOutputStream());             // Output stream object for HTTP connection is created\n                        os.writeBytes(input.toString());                                                // JSON object is serialized and sent over the HTTP connection to the listening server\n                        os.flush();                                                                     // Flushing the output buffers\n                        os.close();                                                                     // Closing the output stream\n                        InputStream is = conn.getInputStream();                                         // Input stream object for HTTP connection is created\n                        StringBuffer sb = new StringBuffer();                                           // String buffer object is created\n                        // Fetch and append the incoming bytes until no more comes over the input stream.\n                        try {\n                            int chr;\n                            while ((chr = is.read()) != -1) {\n                                sb.append((char) chr);\n                            }\n                            reply = sb.toString();\n                        } finally {\n                            is.close();                                                                 // Closing the input stream\n                        }\n                        code = String.valueOf(conn.getResponseCode());                                  // Get the HTTP status code\n                        conn.disconnect();                                                              // Disconnecting\n                        Log.i("Code", code);\n                        // For unreachable network or other network related failures.\n                        if (!code.equals("201")) {\n                            failed_toast.show();\n                        }\n                        else {\n                            created_toast.show();\n                        }\n                    } catch (MalformedURLException e) {\n                        e.printStackTrace();\n                        failed_toast.show();\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                        failed_toast.show();\n                    } catch (JSONException e) {\n                        e.printStackTrace();\n                        failed_toast.show();\n                    }\n                }\n            });\n            thread.start();\n        }\n    }\n\n    public void user(View view) {\n        Intent user = new Intent(MainActivity.this, User.class);\n        startActivity(user);\n    }\n}\n\n```\n                         MainActivity.java\n\nLet’s go through the methods defined in this code snippet-\n\n* create(): This method is at the heart of profile creation where the magic happens. Right from getting the input to processing it; is managed by this method. The most important job of this method is to create an HTTP client tunnel connection to the server hosting the database and send the HTTP POST request. Here, we have provided the existing API endpoint. Also, this method will be handling failed requests and other errors while successfully creating a user profile.\n* user(): This method starts a new activity called user. There we can view the existing user profiles in the database.\n\nNext, we have the User.java file:\n\n```\npackage com.webtutsplus.ecommerce;\n\nimport androidx.appcompat.app.AppCompatActivity;\n\nimport android.graphics.Color;\nimport android.os.Bundle;\nimport android.view.View;\nimport android.widget.TableLayout;\nimport android.widget.TableRow;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport org.json.JSONArray;\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.net.HttpURLConnection;\nimport java.net.MalformedURLException;\nimport java.net.URL;\n\npublic class User extends AppCompatActivity {\n\n    TableLayout table;\n    String line, code;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.user);\n        table = findViewById(R.id.table);\n    }\n\n    public void fetch(View view) {\n        // Create various messages to display in the app.\n        Toast failed_toast = Toast.makeText(User.this, "Request failed", Toast.LENGTH_SHORT);\n        Toast fetched_toast = Toast.makeText(User.this, "Data Fetched", Toast.LENGTH_SHORT);\n        // Create a worker thread for sending HTTP requests.\n        Thread thread = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    URL url = new URL(Config.api_url1);                                                  // new url object is created\n                    HttpURLConnection conn = (HttpURLConnection) url.openConnection();                  // HTTP connection object is created\n                    BufferedReader rd = new BufferedReader(new InputStreamReader(\n                            conn.getInputStream()));\n                    while ((line = rd.readLine()) != null) {\n                        String jsonString = "{" + " \\"Data\\": " + line + "}";                           // Get the response\n                        try {\n                            JSONObject jsonObject = new JSONObject(jsonString);\n                            JSONArray array = jsonObject.getJSONArray("Data");\n                            for (int i=0; i < array.length(); i++) {\n                                JSONObject oneObject = array.getJSONObject(i);\n                                // Pulling items from the array\n                                String uname = oneObject.getString("username");\n                                String email = oneObject.getString("email");\n                                String f_name = oneObject.getString("firstName");\n                                String l_name = oneObject.getString("lastName");\n                                runOnUiThread(new Runnable() {\n                                    @Override\n                                    public void run() {\n                                        // Remove all child views\n                                        table.removeAllViews();\n                                        //Create new table row\n                                        TableRow tr = new TableRow(User.this);\n                                        tr.setLayoutParams(new TableRow.LayoutParams(TableRow.LayoutParams.MATCH_PARENT, TableRow.LayoutParams.WRAP_CONTENT));\n                                        createTextView(uname, tr);                                      //Create new TextView for column 1\n                                        createTextView(email, tr);                                      //Create new TextView for column 2\n                                        createTextView(f_name, tr);                                     //Create new TextView for column 3\n                                        createTextView(l_name, tr);                                     //Create new TextView for column 4\n                                        // Add table row to Table View\n                                        table.addView(tr, new TableLayout.LayoutParams(TableLayout.LayoutParams.MATCH_PARENT, TableLayout.LayoutParams.WRAP_CONTENT));\n                                    }\n                                });\n                            }\n                        } catch (JSONException e) {\n                            e.printStackTrace();\n                        }\n                    }\n                    code = String.valueOf(conn.getResponseCode());                                      // Get the HTTP status code\n                    conn.disconnect();                                                                  // Disconnecting\n                    // For unreachable network or other network related failures.\n                    if (!code.equals("200")) {\n                        failed_toast.show();\n                    }\n                    // Show data in a table form.\n                    else {\n                        fetched_toast.show();\n                    }\n                } catch (MalformedURLException e) {\n                    e.printStackTrace();\n                    failed_toast.show();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                    failed_toast.show();\n                }\n            }\n        });\n        thread.start();\n    }\n\n    public void createTextView(String text, TableRow tr) {\n        TextView t = new TextView(User.this);\n        t.setText(text);\n        t.setTextColor(Color.parseColor("#00d9d9"));\n        t.setTextSize(10);\n        t.setLayoutParams(new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT, 1f));\n        tr.addView(t);\n    }\n}\n```\n                          User.java\n\nLet’s go through the methods defined in this code snippet-\n\n* fetch(): This method performs the operation of fetching user data from a remote database. It performs this operation by sending an [HTTP GET request](https://www.java67.com/2014/08/difference-between-post-and-get-request.html). After fetching the data, the method dynamically creates the required number of rows for the number of users that will be displayed on the UI. The received data is in the form of a [JSON string](https://www.java67.com/2017/05/how-to-convert-java-object-to-json-using-Gson-example-tutorial.html), which is parsed into a JSON object. From here, we extract the necessary data for display purposes.\n* createTextView(): This method creates a TextView object while setting the required parameters to this object and finally attaching it as a child to the TableRow object.\n\nFinally, we have the Config.java file:\n```\npackage com.webtutsplus.ecommerce;\n\npublic interface Config {\n    String api_url1 = "http://138.68.64.95:8080/api/user/";                                             // endpoint for API\n    String api_url2 = "http://138.68.64.95:8080/api/user/add";                                          // endpoint for API\n}\n```\n                         Config.java\n\nThis file is a java interface file that stores the API endpoint.\nNow we will run our program as previously stated by connecting our android device via USB.\n\n**Results**\n\n[video link](https://youtu.be/BFWYc6tQuoc)\n\n**Resources**\n* [Google Cloud Platform](https://cloud.google.com/tools/android-studio/docs/)\n* [Android Studio](https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=&cad=rja&uact=8&ved=2ahUKEwio5YXQ2MLtAhX7yjgGHabuC8oQFjAAegQIARAD&url=https%3A%2F%2Fdeveloper.android.com%2Fstudio&usg=AOvVaw3fIlahucURgOEYHHhVdQuW)\n* [Configuring your build](https://developer.android.com/studio/build#module-level)\n* [Enable USB debugging on your phone](https://developer.android.com/studio/debug/dev-options)\n* [Material Design](https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=&cad=rja&uact=8&ved=2ahUKEwi23sKz48LtAhW_xDgGHdBfB7kQFjABegQIARAC&url=https%3A%2F%2Fmaterialdesignicons.com%2F&usg=AOvVaw0nKP6M_S9hl0vHqp8CiPth)\n* [Android App Developer’s guide](https://developer.android.com/guide)\n* [HTTP and the REST API](https://restfulapi.net/http-methods/)\n* [GitHub Repository for the above code and resources](https://bitbucket.org/ecommerce-webtutsplus/android-ui/src/master/)\n* [GitHub Repository for the REST API](https://bitbucket.org/ecommerce-webtutsplus/ecommerce/src/master/)\n* [Swagger-UI for the API](http://138.68.64.95:8080/api/swagger-ui.html#/)	{"boosted_additional_tags": "", "boosted_dev_digest_email": false, "boosted_additional_articles": false}	\N	android, java, ecommerce	--- !ruby/struct:Articles::CachedEntity\nname: nilmadhab mondal\nusername: nilmadhab\nslug: nilmadhab\nprofile_image_90: "/uploads/user/profile_image/1/d9b0e3b7-ad59-45d5-b516-4e8ffd0a6958.jpeg"\nprofile_image_url: "/uploads/user/profile_image/1/d9b0e3b7-ad59-45d5-b516-4e8ffd0a6958.jpeg"\n	nilmadhab mondal	nilmadhab	\N	{}	\N	0	\N	0	2021-02-21 16:24:40.111431	\N	Let’s Build User Profile UI With Android for our E-Commerce App...	\N	t	5	5	\N	f	1613924680	\N	354564	en	\N	2021-02-21 16:24:40.103201	\N	/i/dfyx7mskgir5ffk96z3j.png	#dddddd	24	0	0	0	\N	\N	3	ea93be49d41791a15d7140cd61cbfd96ec74184d29732e93a1a0c714288b28ba7b8494f25f4a41e3da0e048d336bdf80e82156e12ce1c00836db5490	/nilmadhab/user-profile-android-410b	0	0	0	<div class="ltag__link">\n  <a href="https://medium.com/webtutsplus/android-ui-for-e-commerce-user-profile-backend-4053ab122a13" class="ltag__link__link">\n    <div class="ltag__link__pic">\n      <img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--tLzMBohE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/fit/c/96/96/1%2AhNjwft_dNBxvTr6g6TOVGg.jpeg" alt="Nil Madhab" loading="lazy">\n    </div>\n  </a>\n  <a href="https://medium.com/webtutsplus/android-ui-for-e-commerce-user-profile-backend-4053ab122a13" class="ltag__link__link">\n    <div class="ltag__link__content">\n      <h2>Let’s Build User Profile UI With Android for our E-Commerce App | by Nil Madhab | webtutsplus | Medium</h2>\n      <h3>Nil Madhab ・ <time datetime="2021-01-08T08:08:58.552Z">Jan 8, 2021</time> ・ 10 min read\n      <div class="ltag__link__servicename">\n        <img src="/assets/medium_icon.svg" alt="Medium Logo" aria-label="Medium Logo" loading="lazy">\n        Medium\n      </div>\n    </h3>\n</div>\n  </a>\n</div>\n\n\n<p><strong>Introduction</strong><br>\nWe are building an e-commerce platform from scratch. In the last tutorial, we build the backend for the UserProfile<br>\nIn this article, we will build the android UI for the UserProfile backend, which can be a base for many other applications.<br>\nNot long before was the time when the user profile consisted of a hard copy form. From the advent of digital technology and sophisticated software, profiles have been becoming more intuitive.</p>\n\n<p><strong>Backend API description</strong><br>\nHere we describe the most important component of our user profile application: the <a href="https://medium.com/javarevisited/top-5-books-and-courses-to-learn-restful-web-services-in-java-using-spring-mvc-and-spring-boot-79ec4b351d12?source=---------17------------------">REST API</a>. A REST API is an application that uses the existing protocol stack for data communication between different applications on the web. Here, we are using a web API to communicate between our android application and a remote database for user data storage. Our API handles the GET and POST request which basically allows the android application to create and fetch data from the database.<br>\nThe API used here is created using <a href="https://medium.com/javarevisited/11-advanced-core-java-online-courses-to-join-in-2021-46011661257a">Java</a> and <a href="https://medium.com/javarevisited/10-advanced-spring-boot-courses-for-experienced-java-developers-5e57606816bd?source=collection_home---4------0-----------------------">Spring Boot framework</a>. Spring is a popular application development framework, developed for the enterprise edition of the Java programming language. You can find detailed project files for the REST API over <a href="https://bitbucket.org/ecommerce-webtutsplus/ecommerce/src/master/">here</a>.</p>\n\n<p><a href="https://miro.medium.com/max/625/1*dPELMj6RgoC54s8YiWtMmw.jpeg">view demo image1</a><br>\n<a href="https://miro.medium.com/max/625/1*JDzGjTILEbTukPOWFDSnrw.jpeg">view demo image2</a></p>\n\n<p>Android Studio is the official Integrated Development Environment (IDE) for <a href="https://medium.com/hackernoon/top-5-courses-to-learn-android-for-java-programmers-667e03d995b4">Android app development</a>, based on <a href="https://www.jetbrains.com/idea/">IntelliJ IDEA</a>. On top of IntelliJ’s powerful code editor and developer tools, Android Studio offers even more features that enhance your productivity when building Android apps, such as:</p>\n\n<ul>\n<li>A flexible <a href="https://medium.com/javarevisited/5-best-gradle-courses-and-books-to-learn-in-2021-93f49ce8ff8e">Gradle</a>-based build system.</li>\n<li>A fast and feature-rich emulator.</li>\n<li>A unified environment where you can develop for all Android devices.</li>\n<li>Apply Changes to push code and resource changes to your running app without restarting your app.</li>\n<li>Code templates and <a href="https://medium.com/javarevisited/7-best-courses-to-master-git-and-github-for-programmers-d671859a68b2">GitHub</a> integration to help you build common app features and import sample code.</li>\n<li>Extensive testing tools and frameworks.</li>\n<li>Lint tools to catch performance, usability, version compatibility, and other problems.</li>\n<li>\n<a href="https://medium.com/javarevisited/top-10-courses-to-learn-c-for-beginners-best-and-free-4afc262a544e">C++</a> and NDK support.</li>\n<li>Built-in support for <a href="https://cloud.google.com/tools/android-studio/docs/">Google Cloud Platform</a>, making it easy to integrate Google Cloud Messaging and App Engine.</li>\n</ul>\n\n<p>The benefit of using <a href="https://itnext.io/top-5-intellijidea-and-android-studio-courses-for-java-and-android-programmers-afcc27309b60">Android Studio</a> over any other IDE is we get a rich set of features built-in which enable us to focus more on the development aspect while the back-end of this IDE handles the requirements and dependencies. For this project, an existing API endpoint has been used for <a href="https://medium.com/javarevisited/top-5-courses-to-learn-jdbc-and-database-connectivity-for-java-developers-free-and-best-of-lot-7945156fcc3?source=---------9------------------">database connectivity</a>.</p>\n\n<p><strong>Prerequisite</strong>:<br>\nBefore we start developing, we need to check off a few requirements:<br>\nYou will need to have a Java JDK installed on your system. You can find the instructions for installing the JDK <a href="https://docs.oracle.com/javase/8/docs/technotes/guides/install/install_overview.html">here</a>.<br>\nYou will need to install <a href="https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=&amp;cad=rja&amp;uact=8&amp;ved=2ahUKEwio5YXQ2MLtAhX7yjgGHabuC8oQFjAAegQIARAD&amp;url=https%3A%2F%2Fdeveloper.android.com%2Fstudio&amp;usg=AOvVaw3fIlahucURgOEYHHhVdQuW">Android Studio</a> on your system.<br>\nLastly, we can use our Android smartphone with USB debugging enabled for testing the android app or we can use the built-in Android emulator from Android Studio (I have used my smartphone for testing and debugging).</p>\n\n<p><strong>Project Setup and Structure</strong>:<br>\nOnce you install Android Studio on your system, you can start with creating a new project.<br>\n<a href="https://miro.medium.com/max/875/1*7OQVIEpuu9U5guhSsf4yTA.png">view image</a></p>\n\n<p>To create your new Android project, follow these steps:</p>\n\n<ol>\n<li>In the Welcome to Android Studio window, click Start a new Android Studio project.</li>\n<li>In the Select a Project Template window, select Empty Activity and click Next.</li>\n<li>In the Configure your project window, complete the following:</li>\n<li>Enter “User Authentication” in the Name field.</li>\n<li>Enter “com.example.userprofile” in the Package name field.</li>\n<li>If you’d like to place the project in a different folder, change its Save location.</li>\n<li>Select Java from the Language drop-down menu.</li>\n<li>Select the lowest version of Android your app will support in the Minimum SDK field. I have selected API level 22 (Android Lollipop).</li>\n<li>Leave the other options as they are.</li>\n<li>Click Finish.</li>\n</ol>\n\n<p>After some processing time, the Android Studio main window appears.<br>\nNow take a moment to review the most important files. First, be sure the Project window is open (select View &gt; Tool Windows &gt; Project) and the Android view is selected from the drop-down list at the top of that window. You can then see the following files:</p>\n\n<ul>\n<li>app &gt; java &gt; com.example.userprofile &gt; MainActivity</li>\n</ul>\n\n<p>This is the main activity. It’s the entry point for your app. When you build and run your app, the system launches an instance of this Activity and loads its layout.</p>\n\n<ul>\n<li>app &gt; res &gt; layout &gt; activity_main.xml</li>\n</ul>\n\n<p>This XML file defines the layout for the activity’s user interface (UI). It contains a TextView element with the text “Hello, World!”</p>\n\n<ul>\n<li>app &gt; manifests &gt; AndroidManifest.xml</li>\n</ul>\n\n<p>The manifest file describes the fundamental characteristics of the app and defines each of its components.</p>\n\n<ul>\n<li>Gradle Scripts &gt; build.gradle</li>\n</ul>\n\n<p>There are two files with this name: one for the project, “Project: User Authentication” and one for the app module, “Module: app.” Each module has its own build.gradle file, but this project currently has just one module. Use each module’s build.gradle file to control how the <a href="https://developer.android.com/studio/releases/gradle-plugin">Gradle plugin</a> builds your app. For more information about this file, see <a href="https://developer.android.com/studio/build#module-level">Configure your build</a>.<br>\nBefore you run your first app, get your smartphone, and enable USB debugging by following the instructions over <a href="https://developer.android.com/studio/debug/dev-options">here</a>. After, enabling USB debugging, connect your smartphone to your PC and you are ready to go.</p>\n\n<p>In Android Studio, select Run &gt; Run ‘app’ or click the Run icon in the toolbar.</p>\n\n<p>Congratulations on creating your very first app. But you are far from what we have to achieve. Next, we need to create the rest of the application.</p>\n\n<p><strong>Setting up the files</strong>:<br>\nLet’s start with app &gt; res &gt; drawables. This is the directory where we will be storing all the graphical elements for our application. We are going to store three different categories of graphic elements.</p>\n\n<ul>\n<li>Image. (filename: background.jpg)</li>\n<li>Icon elements. (filenames: account.xml, email.xml, pencil.xml)</li>\n<li>Custom graphic file. (round_button.xml)\nThe image used here is for the background of the UI. You can use any image you like but be sure to use the same file name for the next part where we will be coding the back-end and creating activity layouts.\nIcon elements are XML files for vector graphic icons used in our application. You can find and download these files from <a href="https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=&amp;cad=rja&amp;uact=8&amp;ved=2ahUKEwi23sKz48LtAhW_xDgGHdBfB7kQFjABegQIARAC&amp;url=https%3A%2F%2Fmaterialdesignicons.com%2F&amp;usg=AOvVaw0nKP6M_S9hl0vHqp8CiPth">here</a>.</li>\n</ul>\n\n<p>The custom graphic file here is used for creating a rich look for our buttons in the application. It’s an XML file containing various tags and attributes specifying the properties that the button will have for its appearance.<br>\n</p>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;\n&lt;shape xmlns:android="http://schemas.android.com/apk/res/android" android:shape="rectangle" &gt;\n    &lt;gradient android:angle="45"\n        android:startColor="#6f7480"\n        android:endColor="#4f5154"\n        android:type="linear"/&gt;\n    &lt;corners\n        android:bottomRightRadius="10dp"\n        android:bottomLeftRadius="10dp"\n        android:topLeftRadius="10dp"\n        android:topRightRadius="10dp" /&gt;\n&lt;/shape&gt;\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>               round_button.xml\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n<p>Moving on, we have two layout files for our two pages: create user and fetch user data page. These files are contained in app &gt; res &gt; layout having names activity_main.xml, user.xml. To create these files, right-click on the layout directory and select new &gt; layout resource file. A New Resource File pop-up with several fields should appear. In the File name field, we’ll insert the required file names.<br>\nIn the Root element field of this same pop-up, make sure to type in RelativeLayout. The remaining two fields can remain the same. Click OK. This will create a new layout for us.<br>\nHowever, Android Studio will likely default to the visual editor we saw our Constraint Layout in earlier. To edit our layout’s XML directly, we’ll need to navigate out of the visual editor and into the XML editor. Near the top-right of the editor screen, you should see three tabs: code, split, design. Select the code tab to toggle into the XML editor.<br>\n</p>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;\n&lt;RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"\n    xmlns:tools ="http://schemas.android.com/tools"\n    android:layout_width="fill_parent"\n    android:layout_height="fill_parent"\n    android:background="@drawable/background"\n    tools:context=".MainActivity"&gt;\n\n    &lt;TextView\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:text="Create User"\n        android:textSize="100px"\n        android:textColor="#d3d8e3"\n        android:layout_alignParentTop = "true"\n        android:layout_centerHorizontal = "true"\n        android:layout_marginTop="450px" /&gt;\n\n    &lt;EditText\n        android:id="@+id/user1"\n        android:layout_width="match_parent"\n        android:layout_height="wrap_content"\n        android:layout_marginRight="40dp"\n        android:hint="username"\n        android:textColorHint="#8e9094"\n        android:textCursorDrawable="@null"\n        android:inputType="text"\n        android:drawableStart="@drawable/account"\n        android:drawablePadding="5dp"\n        android:layout_marginLeft="40dp"\n        android:layout_marginTop="250dp"\n        android:gravity="start"/&gt;\n\n    &lt;EditText\n        android:layout_width="match_parent"\n        android:layout_height="wrap_content"\n        android:hint="email"\n        android:textCursorDrawable="@null"\n        android:drawableStart="@drawable/email"\n        android:textColorHint="#8e9094"\n        android:drawablePadding="5dp"\n        android:inputType="textEmailAddress"\n        android:layout_marginRight="40dp"\n        android:layout_marginLeft="40dp"\n        android:layout_marginTop="320dp"\n        android:id="@+id/email1"\n        android:gravity="start" /&gt;\n\n\n    &lt;EditText\n        android:layout_width="match_parent"\n        android:layout_height="wrap_content"\n        android:hint="First name"\n        android:textCursorDrawable="@null"\n        android:textColorHint="#8e9094"\n        android:drawableStart="@drawable/pencil"\n        android:drawablePadding="5dp"\n        android:inputType="text"\n        android:layout_marginRight="40dp"\n        android:layout_marginLeft="40dp"\n        android:layout_marginTop="390dp"\n        android:id="@+id/fname"\n        android:gravity="start" /&gt;\n\n    &lt;EditText\n        android:layout_width="match_parent"\n        android:layout_height="wrap_content"\n        android:hint="Last name"\n        android:textCursorDrawable="@null"\n        android:textColorHint="#8e9094"\n        android:drawableStart="@drawable/pencil"\n        android:drawablePadding="5dp"\n        android:inputType="text"\n        android:layout_marginRight="40dp"\n        android:layout_marginLeft="40dp"\n        android:layout_marginTop="460dp"\n        android:id="@+id/lname"\n        android:gravity="start" /&gt;\n\n    &lt;Button\n        android:layout_width="match_parent"\n        android:layout_height="wrap_content"\n        android:text="CREATE"\n        android:id="@+id/create"\n        android:textAllCaps="false"\n        android:layout_marginRight="40dp"\n        android:layout_marginLeft="40dp"\n        android:layout_marginTop="550dp"\n        android:textColor="#d3d8e3"\n        android:textSize="20dp"\n        android:onClick="create"\n        android:background="@drawable/round_button"\n        android:gravity="center"/&gt;\n\n    &lt;TextView\n        android:id="@+id/data"\n        android:layout_width="wrap_content"\n        android:layout_height="23dp"\n        android:layout_marginTop="620dp"\n        android:layout_marginLeft="125dp"\n        android:fontFamily="sans-serif"\n        android:text="Check existing users over"\n        android:textColor="#d3d8e3"\n        android:textSize="12dp"\n        android:focusable="true" /&gt;\n\n    &lt;TextView\n        android:id="@+id/database"\n        android:layout_width="wrap_content"\n        android:layout_height="23dp"\n        android:layout_marginTop="620dp"\n        android:fontFamily="sans-serif-medium"\n        android:clickable="true"\n        android:text=" here."\n        android:layout_toEndOf="@+id/data"\n        android:textColor="#00d9d9"\n        android:textSize="12dp"\n        android:onClick="user"\n        android:focusable="true" /&gt;\n\n\n\n&lt;/RelativeLayout&gt;\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>                  activity_main.xml\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;\n&lt;RelativeLayout  xmlns:android="http://schemas.android.com/apk/res/android"\n    xmlns:tools ="http://schemas.android.com/tools"\n    android:layout_width="fill_parent"\n    android:layout_height="fill_parent"\n    android:background="@drawable/background"\n    tools:context=".User" &gt;\n\n    &lt;TextView\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:text="Existing Users"\n        android:textSize="100px"\n        android:textColor="#d3d8e3"\n        android:layout_alignParentTop = "true"\n        android:layout_centerHorizontal = "true"\n        android:layout_marginTop="150dp" /&gt;\n\n    &lt;TableLayout xmlns:android="http://schemas.android.com/apk/res/android"\n        android:layout_width="match_parent"\n        android:layout_height="30dp"\n        android:layout_marginTop="250dp"\n        android:paddingLeft="10dp"\n        android:paddingRight="10dp" &gt;\n        &lt;TableRow android:padding="5dp"&gt;\n            &lt;TextView\n                android:layout_width="wrap_content"\n                android:layout_height="wrap_content"\n                android:layout_weight="3"\n                android:text="Username" /&gt;\n            &lt;TextView\n                android:layout_width="wrap_content"\n                android:layout_height="wrap_content"\n                android:layout_weight="4"\n                android:text="Email" /&gt;\n            &lt;TextView\n                android:layout_width="wrap_content"\n                android:layout_height="wrap_content"\n                android:layout_weight="1"\n                android:text="First Name" /&gt;\n            &lt;TextView\n                android:layout_width="wrap_content"\n                android:layout_height="wrap_content"\n                android:layout_weight="1"\n                android:text="Last Name" /&gt;\n        &lt;/TableRow&gt;\n    &lt;/TableLayout&gt;\n\n    &lt;TableLayout xmlns:android="http://schemas.android.com/apk/res/android"\n        android:id="@+id/table"\n        android:layout_width="match_parent"\n        android:layout_height="200dp"\n        android:layout_marginTop="280dp"\n        android:paddingLeft="10dp"\n        android:paddingRight="10dp" &gt;\n\n    &lt;/TableLayout&gt;\n\n    &lt;Button\n        android:layout_width="match_parent"\n        android:layout_height="wrap_content"\n        android:text="FETCH"\n        android:id="@+id/fetch"\n        android:textAllCaps="false"\n        android:layout_marginRight="40dp"\n        android:layout_marginLeft="40dp"\n        android:layout_marginTop="550dp"\n        android:textColor="#d3d8e3"\n        android:textSize="20dp"\n        android:onClick="fetch"\n        android:background="@drawable/round_button"\n        android:gravity="center"/&gt;\n\n&lt;/RelativeLayout&gt;\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>                     user.xml\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n<p>If you can notice then all these files contain some common tags having some attributes. These tags are View elements that are going to be displayed in the application. Let’s review them one by one for a general idea.</p>\n\n<ul>\n<li>RelativeLayout: RelativeLayout is a view group that displays child views in relative positions. The position of each view can be specified as relative to sibling elements (such as to the left-of or below another view) or in positions relative to the parent RelativeLayout area (such as aligned to the bottom, left, or center).</li>\n<li>TextView: A TextView displays text to the user and optionally allows them to edit it. A TextView is a complete text editor, however, the basic class is configured to not allow editing.</li>\n<li>EditText: EditText is a standard entry widget in android apps. It is an overlay over TextView that configures itself to be editable. EditText is a subclass of TextView with text editing operations. We often use EditText in our applications to provide an input or text field, especially in forms.</li>\n<li>Button: In Android, Button represents a push button. Push buttons can be clicked, or pressed by the user to perform an action. On a button, we can perform different actions or events like click event, pressed event, touch event, etc.</li>\n<li>TableLayout: A layout that arranges its children into rows and columns. A TableLayout consists of several TableRow objects, each defining a row. TableLayout containers do not display border lines for their rows, columns, or cells. Each row has zero or more cells; each cell can hold one View object. The table has as many columns as the row with the most cells. A table can leave cells empty. Cells can span columns, as they can in HTML.</li>\n<li>TableRow: For building a row in a table we use the TableRow element. Table row objects are the child's views of a table layout. Each row of the table has zero or more cells and each cell can hold only one view object like <a href="https://abhiandroid.com/ui/imageview/">ImageView</a>, <a href="https://abhiandroid.com/ui/textview/">TextView</a>, or any other view.</li>\n</ul>\n\n<p>view image(<a href="https://miro.medium.com/max/468/1*KJ64CADBByjnjHoUDmaOQA.jpeg">https://miro.medium.com/max/468/1*KJ64CADBByjnjHoUDmaOQA.jpeg</a>)</p>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>        Rows and Columns in TableLayout Android\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n<p>There are many more tags and have many different attributes for creating various intuitive design elements and UI for an android application.<br>\nNext up, we will create the files necessary for the back-end of our applications: <a href="https://medium.com/javarevisited/top-10-free-courses-to-learn-spring-framework-for-java-developers-639db9348d25">Java files</a>.</p>\n\n<p>We will be creating two more java class files which are Config.java and User.java.<br>\nTo create them, right-click on app &gt; java &gt; com.example.userprofile directory and click New &gt; Java Class. Enter the file name and press enter.</p>\n\n<p>Before moving ahead, we must configure our AndroidManifest.xml file for the file additions and requirements that we want.<br>\n</p>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;\n&lt;manifest xmlns:android="http://schemas.android.com/apk/res/android"\n    package="com.webtutsplus.ecommerce"&gt;\n\n    &lt;uses-permission android:name="android.permission.INTERNET" /&gt;\n\n    &lt;application\n        android:allowBackup="true"\n        android:icon="@mipmap/ic_launcher"\n        android:label="@string/app_name"\n        android:roundIcon="@mipmap/ic_launcher_round"\n        android:usesCleartextTraffic="true"\n        android:supportsRtl="true"\n        android:theme="@style/Theme.AppCompat.NoActionBar"&gt;\n        &lt;activity android:name="com.webtutsplus.ecommerce.MainActivity"&gt;\n            &lt;intent-filter&gt;\n                &lt;action android:name="android.intent.action.MAIN" /&gt;\n\n                &lt;category android:name="android.intent.category.LAUNCHER" /&gt;\n            &lt;/intent-filter&gt;\n        &lt;/activity&gt;\n\n        &lt;activity android:name="com.webtutsplus.ecommerce.User"&gt;&lt;/activity&gt;\n\n    &lt;/application&gt;\n\n&lt;/manifest&gt;\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>              AndroidManifest.xml\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n<p><strong>Adding in the code</strong><br>\nTo save the hassle, each class for a given activity contains a default piece of code that is essential for the behavior of the application.<br>\nAs a user navigates through, out of, and back to your app, the Activity instances in your app transition through different stages in their life-cycle. The Activity class provides several callbacks that allow the activity to know that a state has changed: that the system is creating, stopping, or resuming an activity, or destroying the process in which the activity resides.<br>\nWithin the lifecycle callback methods, you can declare how your activity behaves when the user leaves and re-enters the activity. For example, if you’re building a streaming video player, you might pause the video and terminate the network connection when the user switches to another app.<br>\nWhen the user returns, you can reconnect to the network and allow the user to resume the video from the same spot. In other words, each callback allows you to perform specific work that’s appropriate to a given change of state. Doing the right work at the right time and handling transitions properly make your app more robust and performant. For example, good implementation of the lifecycle callbacks can help ensure that your app avoids:</p>\n\n<ul>\n<li>Crashing if the user receives a phone call or switches to another app while using your app.</li>\n<li>Consuming valuable system resources when the user is not actively using it.</li>\n<li>Losing the user’s progress if they leave your app and return to it at a later time.</li>\n<li>Crashing or losing the user’s progress when the screen rotates between landscape and portrait orientation.</li>\n</ul>\n\n<p><a href="https://miro.medium.com/max/641/0*NycI2ocA-uf9pgxR.png">view image</a></p>\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>                   Activity Life Cycle\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n<p>We have extensively use the onCreate() activity method which defines the behavior of the application on start-up.<br>\nFor the first file, MainActivity.java:<br>\n</p>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>package com.webtutsplus.ecommerce;\n\nimport androidx.appcompat.app.AppCompatActivity;\n\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.util.Log;\nimport android.view.View;\nimport android.widget.EditText;\nimport android.widget.Toast;\n\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\nimport java.io.DataOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.MalformedURLException;\nimport java.net.URL;\n\npublic class MainActivity extends AppCompatActivity implements Config{\n\n    EditText user, email, fname, lname;\n    String user1, email1, fname1, lname1, reply, code;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        user = findViewById(R.id.user1);\n        email = findViewById(R.id.email1);\n        fname = findViewById(R.id.fname);\n        lname = findViewById(R.id.lname);\n        user1 = "";\n        email1 = "";\n        fname1 = "";\n        lname1 = "";\n    }\n\n    public void create(View view) {\n        user1 = user.getText().toString();\n        email1 = email.getText().toString();\n        fname1 = fname.getText().toString();\n        lname1 = lname.getText().toString();\n\n        if(user1.isEmpty() || email1.isEmpty() || fname1.isEmpty() || lname1.isEmpty()) {\n            Toast.makeText(MainActivity.this, "Fields cannot be blank", Toast.LENGTH_SHORT).show();  // Check whether the fields are not blank\n        }\n        else {\n            // Create various messages to display in the app.\n            Toast failed_toast = Toast.makeText(MainActivity.this, "Request failed", Toast.LENGTH_SHORT);\n            Toast created_toast = Toast.makeText(MainActivity.this, "User created", Toast.LENGTH_SHORT);\n            // Create a worker thread for sending HTTP requests.\n            Thread thread = new Thread(new Runnable() {\n                @Override\n                public void run() {\n                    try {\n                        URL url = new URL (Config.api_url2);                                             // new url object is created\n                        HttpURLConnection conn = (HttpURLConnection) url.openConnection();              // HTTP connection object is created\n                        conn.setRequestMethod("POST");                                                  // POST method\n                        conn.setRequestProperty("Content-Type", "application/json; utf-8");             // JSON format is specified\n                        conn.setRequestProperty("Accept", "application/json");\n                        conn.setDoOutput(true);\n                        conn.setDoInput(true);\n                        JSONObject input = new JSONObject();                                           // New JSON object is created\n                        // Give data to the json object\n                        input.put("username", user1);\n                        input.put("email", email1);\n                        input.put("firstName", fname1);\n                        input.put("lastName", lname1);\n                        DataOutputStream os = new DataOutputStream(conn.getOutputStream());             // Output stream object for HTTP connection is created\n                        os.writeBytes(input.toString());                                                // JSON object is serialized and sent over the HTTP connection to the listening server\n                        os.flush();                                                                     // Flushing the output buffers\n                        os.close();                                                                     // Closing the output stream\n                        InputStream is = conn.getInputStream();                                         // Input stream object for HTTP connection is created\n                        StringBuffer sb = new StringBuffer();                                           // String buffer object is created\n                        // Fetch and append the incoming bytes until no more comes over the input stream.\n                        try {\n                            int chr;\n                            while ((chr = is.read()) != -1) {\n                                sb.append((char) chr);\n                            }\n                            reply = sb.toString();\n                        } finally {\n                            is.close();                                                                 // Closing the input stream\n                        }\n                        code = String.valueOf(conn.getResponseCode());                                  // Get the HTTP status code\n                        conn.disconnect();                                                              // Disconnecting\n                        Log.i("Code", code);\n                        // For unreachable network or other network related failures.\n                        if (!code.equals("201")) {\n                            failed_toast.show();\n                        }\n                        else {\n                            created_toast.show();\n                        }\n                    } catch (MalformedURLException e) {\n                        e.printStackTrace();\n                        failed_toast.show();\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                        failed_toast.show();\n                    } catch (JSONException e) {\n                        e.printStackTrace();\n                        failed_toast.show();\n                    }\n                }\n            });\n            thread.start();\n        }\n    }\n\n    public void user(View view) {\n        Intent user = new Intent(MainActivity.this, User.class);\n        startActivity(user);\n    }\n}\n\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>                     MainActivity.java\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n<p>Let’s go through the methods defined in this code snippet-</p>\n\n<ul>\n<li>create(): This method is at the heart of profile creation where the magic happens. Right from getting the input to processing it; is managed by this method. The most important job of this method is to create an HTTP client tunnel connection to the server hosting the database and send the HTTP POST request. Here, we have provided the existing API endpoint. Also, this method will be handling failed requests and other errors while successfully creating a user profile.</li>\n<li>user(): This method starts a new activity called user. There we can view the existing user profiles in the database.</li>\n</ul>\n\n<p>Next, we have the User.java file:<br>\n</p>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>package com.webtutsplus.ecommerce;\n\nimport androidx.appcompat.app.AppCompatActivity;\n\nimport android.graphics.Color;\nimport android.os.Bundle;\nimport android.view.View;\nimport android.widget.TableLayout;\nimport android.widget.TableRow;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport org.json.JSONArray;\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.net.HttpURLConnection;\nimport java.net.MalformedURLException;\nimport java.net.URL;\n\npublic class User extends AppCompatActivity {\n\n    TableLayout table;\n    String line, code;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.user);\n        table = findViewById(R.id.table);\n    }\n\n    public void fetch(View view) {\n        // Create various messages to display in the app.\n        Toast failed_toast = Toast.makeText(User.this, "Request failed", Toast.LENGTH_SHORT);\n        Toast fetched_toast = Toast.makeText(User.this, "Data Fetched", Toast.LENGTH_SHORT);\n        // Create a worker thread for sending HTTP requests.\n        Thread thread = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    URL url = new URL(Config.api_url1);                                                  // new url object is created\n                    HttpURLConnection conn = (HttpURLConnection) url.openConnection();                  // HTTP connection object is created\n                    BufferedReader rd = new BufferedReader(new InputStreamReader(\n                            conn.getInputStream()));\n                    while ((line = rd.readLine()) != null) {\n                        String jsonString = "{" + " \\"Data\\": " + line + "}";                           // Get the response\n                        try {\n                            JSONObject jsonObject = new JSONObject(jsonString);\n                            JSONArray array = jsonObject.getJSONArray("Data");\n                            for (int i=0; i &lt; array.length(); i++) {\n                                JSONObject oneObject = array.getJSONObject(i);\n                                // Pulling items from the array\n                                String uname = oneObject.getString("username");\n                                String email = oneObject.getString("email");\n                                String f_name = oneObject.getString("firstName");\n                                String l_name = oneObject.getString("lastName");\n                                runOnUiThread(new Runnable() {\n                                    @Override\n                                    public void run() {\n                                        // Remove all child views\n                                        table.removeAllViews();\n                                        //Create new table row\n                                        TableRow tr = new TableRow(User.this);\n                                        tr.setLayoutParams(new TableRow.LayoutParams(TableRow.LayoutParams.MATCH_PARENT, TableRow.LayoutParams.WRAP_CONTENT));\n                                        createTextView(uname, tr);                                      //Create new TextView for column 1\n                                        createTextView(email, tr);                                      //Create new TextView for column 2\n                                        createTextView(f_name, tr);                                     //Create new TextView for column 3\n                                        createTextView(l_name, tr);                                     //Create new TextView for column 4\n                                        // Add table row to Table View\n                                        table.addView(tr, new TableLayout.LayoutParams(TableLayout.LayoutParams.MATCH_PARENT, TableLayout.LayoutParams.WRAP_CONTENT));\n                                    }\n                                });\n                            }\n                        } catch (JSONException e) {\n                            e.printStackTrace();\n                        }\n                    }\n                    code = String.valueOf(conn.getResponseCode());                                      // Get the HTTP status code\n                    conn.disconnect();                                                                  // Disconnecting\n                    // For unreachable network or other network related failures.\n                    if (!code.equals("200")) {\n                        failed_toast.show();\n                    }\n                    // Show data in a table form.\n                    else {\n                        fetched_toast.show();\n                    }\n                } catch (MalformedURLException e) {\n                    e.printStackTrace();\n                    failed_toast.show();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                    failed_toast.show();\n                }\n            }\n        });\n        thread.start();\n    }\n\n    public void createTextView(String text, TableRow tr) {\n        TextView t = new TextView(User.this);\n        t.setText(text);\n        t.setTextColor(Color.parseColor("#00d9d9"));\n        t.setTextSize(10);\n        t.setLayoutParams(new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT, 1f));\n        tr.addView(t);\n    }\n}\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>                      User.java\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n<p>Let’s go through the methods defined in this code snippet-</p>\n\n<ul>\n<li>fetch(): This method performs the operation of fetching user data from a remote database. It performs this operation by sending an <a href="https://www.java67.com/2014/08/difference-between-post-and-get-request.html">HTTP GET request</a>. After fetching the data, the method dynamically creates the required number of rows for the number of users that will be displayed on the UI. The received data is in the form of a <a href="https://www.java67.com/2017/05/how-to-convert-java-object-to-json-using-Gson-example-tutorial.html">JSON string</a>, which is parsed into a JSON object. From here, we extract the necessary data for display purposes.</li>\n<li>createTextView(): This method creates a TextView object while setting the required parameters to this object and finally attaching it as a child to the TableRow object.</li>\n</ul>\n\n<p>Finally, we have the Config.java file:<br>\n</p>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>package com.webtutsplus.ecommerce;\n\npublic interface Config {\n    String api_url1 = "http://138.68.64.95:8080/api/user/";                                             // endpoint for API\n    String api_url2 = "http://138.68.64.95:8080/api/user/add";                                          // endpoint for API\n}\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>                     Config.java\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n<p>This file is a java interface file that stores the API endpoint.<br>\nNow we will run our program as previously stated by connecting our android device via USB.</p>\n\n<p><strong>Results</strong></p>\n\n<p><a href="https://youtu.be/BFWYc6tQuoc">video link</a></p>\n\n<p><strong>Resources</strong></p>\n\n<ul>\n<li><a href="https://cloud.google.com/tools/android-studio/docs/">Google Cloud Platform</a></li>\n<li><a href="https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=&amp;cad=rja&amp;uact=8&amp;ved=2ahUKEwio5YXQ2MLtAhX7yjgGHabuC8oQFjAAegQIARAD&amp;url=https%3A%2F%2Fdeveloper.android.com%2Fstudio&amp;usg=AOvVaw3fIlahucURgOEYHHhVdQuW">Android Studio</a></li>\n<li><a href="https://developer.android.com/studio/build#module-level">Configuring your build</a></li>\n<li><a href="https://developer.android.com/studio/debug/dev-options">Enable USB debugging on your phone</a></li>\n<li><a href="https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=&amp;cad=rja&amp;uact=8&amp;ved=2ahUKEwi23sKz48LtAhW_xDgGHdBfB7kQFjABegQIARAC&amp;url=https%3A%2F%2Fmaterialdesignicons.com%2F&amp;usg=AOvVaw0nKP6M_S9hl0vHqp8CiPth">Material Design</a></li>\n<li><a href="https://developer.android.com/guide">Android App Developer’s guide</a></li>\n<li><a href="https://restfulapi.net/http-methods/">HTTP and the REST API</a></li>\n<li><a href="https://bitbucket.org/ecommerce-webtutsplus/android-ui/src/master/">GitHub Repository for the above code and resources</a></li>\n<li><a href="https://bitbucket.org/ecommerce-webtutsplus/ecommerce/src/master/">GitHub Repository for the REST API</a></li>\n<li><a href="http://138.68.64.95:8080/api/swagger-ui.html#/">Swagger-UI for the API</a></li>\n</ul>\n\n	0	t	2021-02-21 16:24:40.103201	f	0	0	17	t	0	\N	\N	t	user-profile-android-410b	\N	25	User Profile Android	2021-02-21 16:24:40.111431	1	0	\N	\N	\N	0	\N	\N	\N
47	f	f	f	\N	Leetcode 387. First Unique Character in a String\n\nIn this series, I am going to solve Leetcode medium problems live with my friends, which you can see on our youtube channel, Today we will do Problem Leetcode 387. **First Unique Character in a String**\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7t01igembb1rhoerwjyi.png)\n\nA little bit about me, I have offers from **Uber India** and **Amazon India** in the past, and I am currently working for **Booking.com** in Amsterdam.\n\n## Motivation to learn algorithms\n{% medium https://medium.com/leetcode-simplified/solve-leetcode-problems-and-get-offers-from-your-dream-companies-2786415be0b7 %}\n\n## Problem Statement\n\nGiven a string, find the first non-repeating character in it and return its index. If it doesn’t exist, return -1.\n\n**Examples:**\n\n`s = "leetcode"\nreturn 0.s = "loveleetcode"\nreturn 2.`\n\n**Note**: You may assume the string contains only lowercase English letters.\n\n## Youtube Discussion\n\n{% youtube Ymf9Vzh91H0 %}\n\n<figcaption>Leetcode 387. First Unique Character in a String</figcaption>\n\n## Solution\n\nAccording to the problem, we have to return the index of the first non-repeating character.\n\n**Naive Solution**\n\nLet’s talk about the naive approach to the problem. We can choose a character from the string at index `i` and check for its occurrence in the left substring (0 to i-1) and the right substring (i+1 to the end of the string).\n\nIf that character does not appear in any of those we return that index `i` . This will give us a time complexity of `O(n^2)` .\n\n**Optimized solution**\n\nNow let’s try to improve it.\n\nWhen dealing with problems involving the frequency of characters, we should try to use a [Hash Table.](https://www.educative.io/edpresso/what-is-a-hash-table)\n\nFor this problem, we have to count the occurrence of each character and return the first character’s index whose count is 1. Therefore, we can first store the occurrence of all characters and then check for the character which occurs just once.\n\n{% gist https://gist.github.com/sksaikia/f14d4dbafc83941d64d1fbec0c02e0af.js %}\n\nThe C++ code is also given below.\n\n{% gist https://gist.github.com/sksaikia/8d7b3e685ac2ec4a9f8188c3fcd10bd6.js %}\n\nTime Complexity: **O(n)**, n is the length of the string\n\nSpace Complexity: **O(1)**, at max the hashmap will have 26 keys.\n\n**Similar Problems**\n\n1. [Leetcode 442: Find All Duplicates in an Array](https://medium.com/leetcode-simplified/solve-leetcode-problems-and-get-offers-from-your-dream-companies-9d123345c23a)\n2. [Leetcode 1429: First Unique Number](https://medium.com/leetcode-simplified/solve-leetcode-problems-and-get-offers-from-your-dream-companies-4f5e49af2fec)\n\nThe code for this problem can be found in the following repository.\n\n{% github webtutsplus/LeetCode %}\n\n**Thank You for reading and Follow this publication for more Leetcode problems!😃**\n\n## [LeetCode Simplified](https://medium.com/leetcode-simplified)\n	{"boosted_additional_tags": "", "boosted_dev_digest_email": false, "boosted_additional_articles": false}	\N	algorithms, leetcode	--- !ruby/struct:Articles::CachedEntity\nname: nilmadhab mondal\nusername: nilmadhab\nslug: nilmadhab\nprofile_image_90: "/uploads/user/profile_image/1/d9b0e3b7-ad59-45d5-b516-4e8ffd0a6958.jpeg"\nprofile_image_url: "/uploads/user/profile_image/1/d9b0e3b7-ad59-45d5-b516-4e8ffd0a6958.jpeg"\n	nilmadhab mondal	nilmadhab	\N	{}	\N	0	\N	0	2021-02-19 20:56:27.854548	\N	Leetcode 387. First Unique Character in a String  In this series, I am going to solve Leetcode medium...	2021-02-20 13:37:03.991322	t	5	5	\N	f	1613768187	\N	353894	en	\N	2021-02-19 20:56:27.843258	\N	/i/gmoc97dcoekwcwjuqy6v.png	#dddddd	17	0	0	0	\N	\N	5	7f6c7ec5d401d411d1f88dc5c039d913ab0ed0be8ef0fad50597126325020ee59e08f849f0f5f1c4cc0bea4b6fb957bff08b8c16612480e86aa22b92	/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-4o3l	0	0	0	<p>Leetcode 387. First Unique Character in a String</p>\n\n<p>In this series, I am going to solve Leetcode medium problems live with my friends, which you can see on our youtube channel, Today we will do Problem Leetcode 387. <strong>First Unique Character in a String</strong></p>\n\n<p><a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--8Gb3rXg9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7t01igembb1rhoerwjyi.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--8Gb3rXg9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7t01igembb1rhoerwjyi.png" alt="Alt Text" loading="lazy"></a></p>\n\n<p>A little bit about me, I have offers from <strong>Uber India</strong> and <strong>Amazon India</strong> in the past, and I am currently working for <strong>Booking.com</strong> in Amsterdam.</p>\n\n<h2>\n  <a name="motivation-to-learn-algorithms" href="#motivation-to-learn-algorithms" class="anchor">\n  </a>\n  Motivation to learn algorithms\n</h2>\n\n\n<div class="ltag__link">\n  <a href="https://medium.com/leetcode-simplified/solve-leetcode-problems-and-get-offers-from-your-dream-companies-2786415be0b7" class="ltag__link__link">\n    <div class="ltag__link__pic">\n      <img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--tLzMBohE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/fit/c/96/96/1%2AhNjwft_dNBxvTr6g6TOVGg.jpeg" alt="Nil Madhab" loading="lazy">\n    </div>\n  </a>\n  <a href="https://medium.com/leetcode-simplified/solve-leetcode-problems-and-get-offers-from-your-dream-companies-2786415be0b7" class="ltag__link__link">\n    <div class="ltag__link__content">\n      <h2>Solve Leetcode Problems and Get Offers From Your Dream Companies | by Nil Madhab | LeetCode Simplified | Jan, 2021 | Medium</h2>\n      <h3>Nil Madhab ・ <time datetime="2021-02-06T16:44:52.884Z">Feb 6, 2021</time> ・ 3 min read\n      <div class="ltag__link__servicename">\n        <img src="/assets/medium_icon.svg" alt="Medium Logo" aria-label="Medium Logo" loading="lazy">\n        Medium\n      </div>\n    </h3>\n</div>\n  </a>\n</div>\n\n\n<h2>\n  <a name="problem-statement" href="#problem-statement" class="anchor">\n  </a>\n  Problem Statement\n</h2>\n\n<p>Given a string, find the first non-repeating character in it and return its index. If it doesn’t exist, return -1.</p>\n\n<p><strong>Examples:</strong></p>\n\n<p><code>s = "leetcode"<br>\nreturn 0.s = "loveleetcode"<br>\nreturn 2.</code></p>\n\n<p><strong>Note</strong>: You may assume the string contains only lowercase English letters.</p>\n<h2>\n  <a name="youtube-discussion" href="#youtube-discussion" class="anchor">\n  </a>\n  Youtube Discussion\n</h2>\n\n<figure><p><iframe width="710" height="399" src="https://www.youtube.com/embed/Ymf9Vzh91H0" allowfullscreen loading="lazy">\n</iframe>\n</p>\n<figcaption>Leetcode 387. First Unique Character in a String</figcaption></figure>\n\n\n\n<h2>\n  <a name="solution" href="#solution" class="anchor">\n  </a>\n  Solution\n</h2>\n\n<p>According to the problem, we have to return the index of the first non-repeating character.</p>\n\n<p><strong>Naive Solution</strong></p>\n\n<p>Let’s talk about the naive approach to the problem. We can choose a character from the string at index <code>i</code> and check for its occurrence in the left substring (0 to i-1) and the right substring (i+1 to the end of the string).</p>\n\n<p>If that character does not appear in any of those we return that index <code>i</code> . This will give us a time complexity of <code>O(n^2)</code> .</p>\n\n<p><strong>Optimized solution</strong></p>\n\n<p>Now let’s try to improve it.</p>\n\n<p>When dealing with problems involving the frequency of characters, we should try to use a <a href="https://www.educative.io/edpresso/what-is-a-hash-table">Hash Table.</a></p>\n\n<p>For this problem, we have to count the occurrence of each character and return the first character’s index whose count is 1. Therefore, we can first store the occurrence of all characters and then check for the character which occurs just once.</p>\n\n\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/sksaikia/f14d4dbafc83941d64d1fbec0c02e0af.js"></script>\n</div>\n\n\n<p>The C++ code is also given below.</p>\n\n\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/sksaikia/8d7b3e685ac2ec4a9f8188c3fcd10bd6.js"></script>\n</div>\n\n\n<p>Time Complexity: <strong>O(n)</strong>, n is the length of the string</p>\n\n<p>Space Complexity: <strong>O(1)</strong>, at max the hashmap will have 26 keys.</p>\n\n<p><strong>Similar Problems</strong></p>\n\n<ol>\n<li><a href="https://medium.com/leetcode-simplified/solve-leetcode-problems-and-get-offers-from-your-dream-companies-9d123345c23a">Leetcode 442: Find All Duplicates in an Array</a></li>\n<li><a href="https://medium.com/leetcode-simplified/solve-leetcode-problems-and-get-offers-from-your-dream-companies-4f5e49af2fec">Leetcode 1429: First Unique Number</a></li>\n</ol>\n\n<p>The code for this problem can be found in the following repository.</p>\n\n\n<div class="ltag-github-readme-tag">\n  <div class="readme-overview">\n    <h2>\n      <img src="/assets/github-logo.svg" alt="GitHub logo" loading="lazy">\n      <a href="https://github.com/webtutsplus">\n        webtutsplus\n      </a> / <a style="font-weight: 600;" href="https://github.com/webtutsplus/LeetCode">\n        LeetCode\n      </a>\n    </h2>\n    <h3>\n      \n    </h3>\n  </div>\n</div>\n\n\n<p><strong>Thank You for reading and Follow this publication for more Leetcode problems!😃</strong></p>\n\n<h2>\n  <a name="leetcode-simplified" href="#leetcode-simplified" class="anchor">\n  </a>\n  <a href="https://medium.com/leetcode-simplified">LeetCode Simplified</a>\n</h2>\n\n	0	t	2021-02-19 20:56:27.843258	f	0	0	2	t	0	\N	\N	t	solve-leetcode-problems-and-get-offers-from-your-dream-companies-4o3l	\N	25	Solve Leetcode Problems and Get Offers From Your Dream Companies |  First Unique Character in a String\n	2021-02-20 13:37:05.247401	1	0	\N	\N	\N	0	\N	\N	\N
56	f	f	f	\N	In this series, I am going to solve Leetcode medium problems live with my friends, which you can see on our youtube channel, Today we will do Problem 309. Best Time to Buy and Sell Stock with Cooldown.\n\nA little bit about me, I have offers from Uber India and Amazon India in the past, and I am currently working for Booking.com in Amsterdam.\n\nProblem Statement\n\nSay you have an array for which the ith element is the price of a given stock on day i.\n\nDesign an algorithm to find the maximum profit. You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times) with the following restrictions:\n\n    You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).\n    After you sell your stock, you cannot buy stock on the next day. (ie, cooldown 1 day)\n\nExample:\n\nInput: [1,2,3,0,2]\nOutput: 3 \nExplanation: transactions = [buy, sell, cooldown, buy, sell]\n\nYoutube Discussion\nSolution\n\nHere according to the problem statement, we have to maximize our profit from buying and selling stocks. We can only buy one stock at a time, and we have to sell it before buying another. But there is one condition. We have to give one day of cooldown after selling one stock (i.e. we can’t buy any new stock the day after we sell our previous stock).\n\nThis problem seems to be Backtracking. We can check all combinations of stocks to buy and sell and maximize the profit. The program can be understood by the following diagram.\nImage for post\nImage for post\nDiagram depicting different scenarios for this problem\n\nHere, when the is_buy variable is true, we can buy new stock. We can choose to buy it today or can buy it in the future. These are the two conditions for is_buy=true. When is_buy = false , we need to sell the stock. When we sell the item today, we need to add a cooldown of 1 day, or we can sell in the future. Taking these conditions into account, we can write the program.\n\nThe following is the backtracking-based solution for the problem. This will give Time Limit Exceeded error in Leetcode but it is much easier to understand. I have also added the Optimized Dynamic Programming-based solution below.\n\nThe dynamic programming approach is given here.\n\nThe code for this problem can be found in the following repository.\nwebtutsplus/LeetCode\nContribute to webtutsplus/LeetCode development by creating an account on GitHub.\n\ngithub.com	{"boosted_additional_tags": "", "boosted_dev_digest_email": false, "boosted_additional_articles": false}	\N	algorithms, leetcode	--- !ruby/struct:Articles::CachedEntity\nname: nilmadhab mondal\nusername: nilmadhab\nslug: nilmadhab\nprofile_image_90: "/uploads/user/profile_image/1/d9b0e3b7-ad59-45d5-b516-4e8ffd0a6958.jpeg"\nprofile_image_url: "/uploads/user/profile_image/1/d9b0e3b7-ad59-45d5-b516-4e8ffd0a6958.jpeg"\n	nilmadhab mondal	nilmadhab	\N	{}	\N	0	\N	0	2021-02-22 06:28:48.205072	\N	In this series, I am going to solve Leetcode medium problems live with my friends, which you can see...	\N	t	5	5	\N	f	\N	\N	0	en	\N	2017-01-01 05:00:00	\N	/i/je7qs72ju1drrd6xlpss.png	#dddddd	0	0	0	0	\N	\N	4	731b03dd6b5f8ddf74d107a4f2bac38fe2e341f2157364611431febc221320638ff9e98413f0158e7a00d5003fdee40065309782061e080d23fa08c3	/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-309-best-time-to-buy-and-sell-stock-with-cooldown-jdc-temp-slug-7260801	0	0	0	<p>In this series, I am going to solve Leetcode medium problems live with my friends, which you can see on our youtube channel, Today we will do Problem 309. Best Time to Buy and Sell Stock with Cooldown.</p>\n\n<p>A little bit about me, I have offers from Uber India and Amazon India in the past, and I am currently working for Booking.com in Amsterdam.</p>\n\n<p>Problem Statement</p>\n\n<p>Say you have an array for which the ith element is the price of a given stock on day i.</p>\n\n<p>Design an algorithm to find the maximum profit. You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times) with the following restrictions:</p>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).\nAfter you sell your stock, you cannot buy stock on the next day. (ie, cooldown 1 day)\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n<p>Example:</p>\n\n<p>Input: [1,2,3,0,2]<br>\nOutput: 3 <br>\nExplanation: transactions = [buy, sell, cooldown, buy, sell]</p>\n\n<p>Youtube Discussion<br>\nSolution</p>\n\n<p>Here according to the problem statement, we have to maximize our profit from buying and selling stocks. We can only buy one stock at a time, and we have to sell it before buying another. But there is one condition. We have to give one day of cooldown after selling one stock (i.e. we can’t buy any new stock the day after we sell our previous stock).</p>\n\n<p>This problem seems to be Backtracking. We can check all combinations of stocks to buy and sell and maximize the profit. The program can be understood by the following diagram.<br>\nImage for post<br>\nImage for post<br>\nDiagram depicting different scenarios for this problem</p>\n\n<p>Here, when the is_buy variable is true, we can buy new stock. We can choose to buy it today or can buy it in the future. These are the two conditions for is_buy=true. When is_buy = false , we need to sell the stock. When we sell the item today, we need to add a cooldown of 1 day, or we can sell in the future. Taking these conditions into account, we can write the program.</p>\n\n<p>The following is the backtracking-based solution for the problem. This will give Time Limit Exceeded error in Leetcode but it is much easier to understand. I have also added the Optimized Dynamic Programming-based solution below.</p>\n\n<p>The dynamic programming approach is given here.</p>\n\n<p>The code for this problem can be found in the following repository.<br>\nwebtutsplus/LeetCode<br>\nContribute to webtutsplus/LeetCode development by creating an account on GitHub.</p>\n\n<p>github.com</p>\n\n	0	f	\N	f	0	0	2	t	0	\N	\N	t	solve-leetcode-problems-and-get-offers-from-your-dream-companies-309-best-time-to-buy-and-sell-stock-with-cooldown-jdc-temp-slug-7260801	\N	0	Solve Leetcode Problems and Get Offers From Your Dream Companies || 309. Best Time to Buy and Sell Stock with Cooldown	2021-02-22 06:32:56.023898	1	0	\N	\N	\N	0	\N	\N	\N
65	f	f	f	\N	Leetcode 1020 — Number of Enclaves [Solution]\n![](https://cdn-images-1.medium.com/max/2560/1*SstBV7kg1kGF-P1rB7ZWKg.png)\n\nIn this series, I am going to solve Leetcode medium problems live with my friends, which you can see on our youtube channel, Today we will do Problem Leetcode: 1020. Number of Enclaves\n\nA little bit about me, I have offers from **Uber** **India** and **Amazon** **India** in the past, and I am currently working for **Booking.com** in Amsterdam.\n\n## Motivation to learn algorithms\n\n{% medium https://medium.com/leetcode-simplified/solve-leetcode-problems-and-get-offers-from-your-dream-companies-2786415be0b7 %}\n\n{% medium https://medium.com/javarevisited/how-to-use-breath-fast-search-pattern-for-craking-coding-interviews-50ca7e827199 %}\n\n## Problem Statement\n\nGiven a 2D array A, each cell is 0 (representing sea) or 1 (representing land)\n\nA move consists of walking from one land square 4-directionally to another land square, or of the boundary of the grid.\n\nReturn the number of land squares in the grid for which we **cannot** walk off the boundary of the grid in any number of moves.\n\n**Example 1:**\n\n    **Input: **[[0,0,0,0],[1,0,1,0],[0,1,1,0],[0,0,0,0]]\n    **Output: **3\n    **Explanation: **\n    There are three 1s that are enclosed by 0s, and one 1 that isn't enclosed because its on the boundary.\n\n**Example 2:**\n\n    **Input: **[[0,1,1,0],[0,0,1,0],[0,0,1,0],[0,0,0,0]]\n    **Output: **0\n    **Explanation: **\n    All 1s are either on the boundary or can reach the boundary.\n\n**Note:**\n\n 1. 1 <= A.length <= 500\n\n 2. 1 <= A[i].length <= 500\n\n 3. 0 <= A[i][j] <= 1\n\n 4. All rows have the same size.\n\n## **Youtube Discussion**\n{% youtube HYPro8ymEYw %}\n## Solution\n\nThis is a graph-based problem. It can be solved by using BFS. We have discussed a similar problem in one of our previous tutorials. You can check this **[Leetcode 695.Max Area of the Island](https://levelup.gitconnected.com/solve-leetcode-and-get-offers-from-your-dream-companies-problem-695-max-area-of-island-b65477167931).**\n\nThere are a lot of problems similar to this. We can see that both these problems are almost similar. In both the problems we have to find land in the island, the only difference in the problem statements is that in the Max Area of the Island problem we have to find a maximum area that they form and here we need to find the number of lands which can not touch the boundary.\n\nWe will follow a similar approach used in the above-mentioned problem. Here we need to find points (lands denoted by 1) from where we can not reach the boundary. If we reach the boundary then we can walk off the boundary. Therefore the problem reduces to counting number of points from where the boundary can not be reached.\n\nWhen we find land, we do a BFS from that point. On doing BFS, we keep a counter so that we can keep track of all the lands inside. If we reach the boundary, that means we can reach the boundary from all those points. So we set the counter to zero.\n\nThe [python ](https://medium.com/swlh/5-free-python-courses-for-beginners-to-learn-online-e1ca90687caf)code is given below with comments.\n{% gist https://gist.github.com/sksaikia/304c19f79c5a4462ada1a22af11f6919.js %}\nThe [java ](https://medium.com/javarevisited/2-best-java-books-for-c-developers-ee4795504498)code is given below.\n{% gist https://gist.github.com/sksaikia/80bd3f927e006bdafbc6caf7be17a92e.js %}\nThe code for this problem can be found in the following repository.\n\n{% github webtutsplus/LeetCode %}\n\nSimilar Problems :\n\n1. [**Max Area of Island**](https://levelup.gitconnected.com/solve-leetcode-and-get-offers-from-your-dream-companies-problem-695-max-area-of-island-b65477167931)\n\n\n\n## Thank You for reading and Follow this publication for more LeetCode problems!😃\n[**LeetCode Simplified**\n*We are going to solve Leetcode problems live, which you can watch on our youtube channel](https://medium.com/leetcode-simplified)\n\n	{"boosted_additional_tags": "", "boosted_dev_digest_email": false, "boosted_additional_articles": false}	\N	algorithms, leetcode	--- !ruby/struct:Articles::CachedEntity\nname: nilmadhab mondal\nusername: nilmadhab\nslug: nilmadhab\nprofile_image_90: "/uploads/user/profile_image/1/d9b0e3b7-ad59-45d5-b516-4e8ffd0a6958.jpeg"\nprofile_image_url: "/uploads/user/profile_image/1/d9b0e3b7-ad59-45d5-b516-4e8ffd0a6958.jpeg"\n	nilmadhab mondal	nilmadhab	\N	{}	\N	0	\N	0	2021-02-24 10:47:57.547878	\N	Leetcode 1020 — Number of Enclaves [Solution]   In this series, I am going to solve Leetcode medium p...	2021-02-24 10:49:25.890383	t	5	5	\N	f	1614163677	\N	354678	en	\N	2021-02-24 10:47:57.534814	\N	/i/o9vmmtuhhy7vbw39ufl0.png	#dddddd	31	0	0	0	\N	\N	3	3e3d44297e218c0a633fd3ac77974814ea8af09bff44d4c1c08eaefbbae021434d31ddb18bd8ae3490a24e2f78dd4308645cfcd1d1b5adcd45274c4d	/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-number-of-enclaves-100o	0	0	0	<p>Leetcode 1020 — Number of Enclaves [Solution]<br>\n<a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--678jXlXL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2560/1%2ASstBV7kg1kGF-P1rB7ZWKg.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--678jXlXL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2560/1%2ASstBV7kg1kGF-P1rB7ZWKg.png" alt="" loading="lazy"></a></p>\n\n<p>In this series, I am going to solve Leetcode medium problems live with my friends, which you can see on our youtube channel, Today we will do Problem Leetcode: 1020. Number of Enclaves</p>\n\n<p>A little bit about me, I have offers from <strong>Uber</strong> <strong>India</strong> and <strong>Amazon</strong> <strong>India</strong> in the past, and I am currently working for <strong>Booking.com</strong> in Amsterdam.</p>\n<h2>\n  <a name="motivation-to-learn-algorithms" href="#motivation-to-learn-algorithms" class="anchor">\n  </a>\n  Motivation to learn algorithms\n</h2>\n\n\n<div class="ltag__link">\n  <a href="https://medium.com/leetcode-simplified/solve-leetcode-problems-and-get-offers-from-your-dream-companies-2786415be0b7" class="ltag__link__link">\n    <div class="ltag__link__pic">\n      <img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--tLzMBohE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/fit/c/96/96/1%2AhNjwft_dNBxvTr6g6TOVGg.jpeg" alt="Nil Madhab" loading="lazy">\n    </div>\n  </a>\n  <a href="https://medium.com/leetcode-simplified/solve-leetcode-problems-and-get-offers-from-your-dream-companies-2786415be0b7" class="ltag__link__link">\n    <div class="ltag__link__content">\n      <h2>Solve Leetcode Problems and Get Offers From Your Dream Companies | by Nil Madhab | LeetCode Simplified | Jan, 2021 | Medium</h2>\n      <h3>Nil Madhab ・ <time datetime="2021-02-06T16:44:52.884Z">Feb 6, 2021</time> ・ 3 min read\n      <div class="ltag__link__servicename">\n        <img src="/assets/medium_icon.svg" alt="Medium Logo" aria-label="Medium Logo" loading="lazy">\n        Medium\n      </div>\n    </h3>\n</div>\n  </a>\n</div>\n\n\n\n<div class="ltag__link">\n  <a href="https://medium.com/javarevisited/how-to-use-breath-fast-search-pattern-for-craking-coding-interviews-50ca7e827199" class="ltag__link__link">\n    <div class="ltag__link__pic">\n      <img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--tLzMBohE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/fit/c/96/96/1%2AhNjwft_dNBxvTr6g6TOVGg.jpeg" alt="Nil Madhab" loading="lazy">\n    </div>\n  </a>\n  <a href="https://medium.com/javarevisited/how-to-use-breath-fast-search-pattern-for-craking-coding-interviews-50ca7e827199" class="ltag__link__link">\n    <div class="ltag__link__content">\n      <h2>How to Use Breath Fast Search Pattern for Cracking Coding Interviews | by Nil Madhab | Javarevisited | Feb, 2021 | Medium</h2>\n      <h3>Nil Madhab ・ <time datetime="2021-02-20T10:29:24.880Z">Feb 20, 2021</time> ・ 4 min read\n      <div class="ltag__link__servicename">\n        <img src="/assets/medium_icon.svg" alt="Medium Logo" aria-label="Medium Logo" loading="lazy">\n        Medium\n      </div>\n    </h3>\n</div>\n  </a>\n</div>\n\n\n<h2>\n  <a name="problem-statement" href="#problem-statement" class="anchor">\n  </a>\n  Problem Statement\n</h2>\n\n<p>Given a 2D array A, each cell is 0 (representing sea) or 1 (representing land)</p>\n\n<p>A move consists of walking from one land square 4-directionally to another land square, or of the boundary of the grid.</p>\n\n<p>Return the number of land squares in the grid for which we <strong>cannot</strong> walk off the boundary of the grid in any number of moves.</p>\n\n<p><strong>Example 1:</strong></p>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>**Input: **[[0,0,0,0],[1,0,1,0],[0,1,1,0],[0,0,0,0]]\n**Output: **3\n**Explanation: **\nThere are three 1s that are enclosed by 0s, and one 1 that isn't enclosed because its on the boundary.\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n<p><strong>Example 2:</strong></p>\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>**Input: **[[0,1,1,0],[0,0,1,0],[0,0,1,0],[0,0,0,0]]\n**Output: **0\n**Explanation: **\nAll 1s are either on the boundary or can reach the boundary.\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n<p><strong>Note:</strong></p>\n\n<ol>\n<li><p>1 &lt;= A.length &lt;= 500</p></li>\n<li><p>1 &lt;= A[i].length &lt;= 500</p></li>\n<li><p>0 &lt;= A[i][j] &lt;= 1</p></li>\n<li><p>All rows have the same size.</p></li>\n</ol>\n<h2>\n  <a name="youtube-discussion" href="#youtube-discussion" class="anchor">\n  </a>\n  <strong>Youtube Discussion</strong>\n</h2>\n\n<p><iframe width="710" height="399" src="https://www.youtube.com/embed/HYPro8ymEYw" allowfullscreen loading="lazy">\n</iframe>\n</p>\n<h2>\n  <a name="solution" href="#solution" class="anchor">\n  </a>\n  Solution\n</h2>\n\n<p>This is a graph-based problem. It can be solved by using BFS. We have discussed a similar problem in one of our previous tutorials. You can check this <strong><a href="https://levelup.gitconnected.com/solve-leetcode-and-get-offers-from-your-dream-companies-problem-695-max-area-of-island-b65477167931">Leetcode 695.Max Area of the Island</a>.</strong></p>\n\n<p>There are a lot of problems similar to this. We can see that both these problems are almost similar. In both the problems we have to find land in the island, the only difference in the problem statements is that in the Max Area of the Island problem we have to find a maximum area that they form and here we need to find the number of lands which can not touch the boundary.</p>\n\n<p>We will follow a similar approach used in the above-mentioned problem. Here we need to find points (lands denoted by 1) from where we can not reach the boundary. If we reach the boundary then we can walk off the boundary. Therefore the problem reduces to counting number of points from where the boundary can not be reached.</p>\n\n<p>When we find land, we do a BFS from that point. On doing BFS, we keep a counter so that we can keep track of all the lands inside. If we reach the boundary, that means we can reach the boundary from all those points. So we set the counter to zero.</p>\n\n<p>The <a href="https://medium.com/swlh/5-free-python-courses-for-beginners-to-learn-online-e1ca90687caf">python </a>code is given below with comments.<br>\n</p>\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/sksaikia/304c19f79c5a4462ada1a22af11f6919.js"></script>\n</div>\n\n<p><br><br>\nThe <a href="https://medium.com/javarevisited/2-best-java-books-for-c-developers-ee4795504498">java </a>code is given below.<br></p>\n\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/sksaikia/80bd3f927e006bdafbc6caf7be17a92e.js"></script>\n</div>\n\n<p><br><br>\nThe code for this problem can be found in the following repository.</p>\n\n\n<div class="ltag-github-readme-tag">\n  <div class="readme-overview">\n    <h2>\n      <img src="/assets/github-logo.svg" alt="GitHub logo" loading="lazy">\n      <a href="https://github.com/webtutsplus">\n        webtutsplus\n      </a> / <a style="font-weight: 600;" href="https://github.com/webtutsplus/LeetCode">\n        LeetCode\n      </a>\n    </h2>\n    <h3>\n      \n    </h3>\n  </div>\n</div>\n\n\n<p>Similar Problems :</p>\n\n<ol>\n<li><a href="https://levelup.gitconnected.com/solve-leetcode-and-get-offers-from-your-dream-companies-problem-695-max-area-of-island-b65477167931"><strong>Max Area of Island</strong></a></li>\n</ol>\n\n<h2>\n  <a name="thank-you-for-reading-and-follow-this-publication-for-more-leetcode-problems" href="#thank-you-for-reading-and-follow-this-publication-for-more-leetcode-problems" class="anchor">\n  </a>\n  Thank You for reading and Follow this publication for more LeetCode problems!😃\n</h2>\n\n<p><a href="https://medium.com/leetcode-simplified"><strong>LeetCode Simplified</strong><br>\n*We are going to solve Leetcode problems live, which you can watch on our youtube channel</a></p>\n\n	0	t	2021-02-24 10:47:57.534814	f	0	0	3	t	0	\N	\N	t	solve-leetcode-problems-and-get-offers-from-your-dream-companies-number-of-enclaves-100o	\N	25	Solve Leetcode Problems and Get Offers From Your Dream Companies|| Number Of Enclaves	2021-02-24 10:49:27.829503	1	0	\N	\N	\N	0	\N	\N	\N
40	f	f	f	\N	**Part 2: How to implement WebRTC using JavaScript and Node.js in the Backend**\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/xhhvaqudcudltul0bb8l.jpg)\n## Tutorials in this Series\n\n 1. [Understanding WebRTC](https://dev.to/nilmadhabmondal/let-s-build-a-video-chat-app-with-javascript-and-webrtc-380b)\n 2. Implementing WebRTC in code (this tutorial)\n\nIn the previous tutorial, we learned about the fundamentals of WebRTC.\nIn this tutorial, we will learn how to implement those concepts in code and create a website for online video-conferencing.\n## Live Demo\n\nYou can see and use the website live in action at the link mentioned below. You just have to enter the room name to create/join a room.\n[WebTutsPlus Webcon](https://desolate-depths-86299.herokuapp.com/)\nNote:-\n\n* The website currently supports only 2 persons per room.\n\nVideo\n\nYou can also watch the following video to see how to use this website.\n{% youtube E2XBaFP2ii8 %}\n## Requirements\n\nIf you have not read the previous tutorial, it is highly recommended that you read it before you begin this tutorial.\n\nWe will use the following:-\n\n* Node.Js (version 12.14.1) — Runtime Env for JS\n* Socket.IO (version 1.2.0) — for signaling in WebRTC\n* Express.Js: (version 4.17.1) — BackEnd Framework\n* Code Editor (Microsoft Visual Studio Code recommended)\n* A Good Browser (Google Chrome Recommended)\n\nWe will use Node.Js with Express.Js Framework for the backend. **If you are not familiar with Node.Js and Express.Js but you know any other MVC framework, DON’T WORRY.** We have tried to explain in such a way that you should be able to understand even if you have never worked with Node.Js & Express.Js\n## Step 1. Setting up the Project\n\nLet’s begin with setting up the project.\n\n**Step 1.1. Download Node.Js**\n\n* You can download Node.Js for your platform by clicking on this link. Downloading Node.Js will automatically install NPM (Node Package Manager) on your PC. NPM is the default Package Manager for Node.Js\n\n**Step 1.2. Create a node project**\n\n* Create a New Folder. This folder will be the root directory for our project.\n* Open terminal/CMD in this folder and run the command npm init .\n* Press the Enter Key continuosly to skip the additional configurations for the project and write YES when prompted.\n* This will create a file package.json in the root directory of the project. This file will contain all the necessary information regarding our project like project dependencies.\n\n**Step 1.3. Installing dependencies**\n\n* In the terminal, run the following command. It will install the dependencies — Express.JS and socket.IO in our project.\n\n`npm install express@4.17.1 socket.io@1.2.0 --save`\n\n* The flag `--save` will save the name and versions of these dependencies in `package.json` for future reference.\n* After the above command has finished execution, you will see a folder `node_modules` created in the root directory of the project. This folder contains the dependencies that we have just installed.\n\nNow we have finished setting up the project. The following is the project structure at this stage.\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/loj75ci14ojyeaailq18.png)\n## Step 2. Creating The BackEnd\n\nLet us now begin writing the code for the backend. Before we begin, let’s revise a few points from the previous tutorial.\n\n* We need a backend server for signaling.\n* Certain information — Candidate (network) information & Media Codecs must be exchanged between the two peers before a direct connection can be made between them using WebRTC.\n* Signaling refers to the mechanism using which two peers exchange this information\n\nThe above points tell us that we have to implement a mechanism using which two clients (browsers) can send messages to each other. We will use Socket.IO for this purpose. Socket.IO is suited to learning about WebRTC signaling because of its built-in concept of ‘rooms’. Let’s first discuss what is Socket.IO\n\n**Socket.IO**\n\n* Socket.IO consists of two parts— `client Library`& `server Library`. Obviously, the `client library` is used on the client-side & `server library` is used on the server-side.\n* Socket.IO helps in implementing the following — Let’s say four clients are connected to the server. When the server receives a new message from one client, it should notify all the other clients and also forward this message to the other client. It is similar to a group chat.\n* In Socket.IO, each message, that is sent to the server or received from the server, is associated with an event. So, if a client sends a message to the server on a particular event, the server will forward this message to only those clients that are listening to this corresponding event.\n* There are some reserved events. However, we can also define custom events. To know about the reserved events, you can visit this link.\n* Also, the clients can join a room and ask the server to send the message to only those clients that have joined a particular room.\n\nNow that we have discussed Socket.IO, we can begin implementing the backend server\n\n**Step 2.1. Create a file index.js**\n\n* In the Express framework, `index.js` is the starting point for our server by default. So create a file index.js at the root level of our project.\n\nStep 2.2. Create a Public folder and a views folder\n\n* Create the following folders at the root level of our project\n\t* `public` — contains the static files like CSS and JS files for the frontend\n\t* `views` — contains the views for the frontend\n* Our website will only contain one page. Inside the views folder, create a file index.ejs that will contain the HTML code for the frontend. Expresses uses ejs as the templating engine.\n\tThe project structure will now look like the following\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/ahtl6s4wmx89ktlodola.png)\n**Step 2.3. Initialize Express and an HTTP Server**\n\n* Now, we must initialize Express, HTTP server, and Socket.IO for our backend. To do this, paste the following code in the `index.js` located at the root level of the project\n{% gist https://gist.github.com/shivamag00/b54435862875c2f4407b6fa2fbe64da2.js %}\n**Step 2.3. Implement Socket.IO**\n\n * Now, it is time to implement Socket.IO in the backend.\n * Paste the following code in `index.js` file\n{% gist https://gist.github.com/shivamag00/1df1de23a5cebbc34c7f9664b2a35974.js %}\nSo, now we have implemented the backend of our website. The following is the complete code of `index.js`.\n{% gist https://gist.github.com/shivamag00/5f97b124d942853152ae264e57831a96.js %}\n## Step 3. Creating the FrontEnd of our website\n\nNow, let’s create the frontend of our website\n\n**Step 3.1. Create the HTML file**\n\n* Let’s create the HTML file for our frontend.\n* We will define the CSS and Javascript for the front-end in `public/css/styles.css` and `public/js/main.js` respectively. Hence, we must import those files. In the backend, we explicitly set `public` it as the default directory for serving static files. Hence, we will import the files from `css/styles.css` & `js/main.js` in HTML.\n* We will also import the client library for `socket.io`.\n* We will also import `adapter.js` for WebRTC because implementations of WebRTC are still evolving, and because each browser has [different levels of support for codecs](https://developer.mozilla.org/en-US/docs/Web/Media/Formats/WebRTC_codecs) and WebRTC features. The adapter is a JavaScript shim that lets your code be written to the specification so that it will “just work” in all browsers with WebRTC support.\n* We discussed STURN/TURN servers in the previous tutorials. We will import the TURN/STUN URLs from `public/js/config.js` . We will create this file later in this tutorial.\n* Paste the following code in `views/index.ejs`.\n{% gist https://gist.github.com/shivamag00/29ca674d29c380b8bcad908e97739d7f.js %}\n**Step 3.2. Add the CSS code**\n\n * We are not explaining the CSS code.\n * Paste the following code in public/css/styles.css\n{% gist https://gist.github.com/shivamag00/7e74ac1a369747bea77c5397833b0933.js %}\n## Step 3.3. Add the JS file\n\n* Now, let’s add javascript to our frontend. We had already the file `public/js/main.js` in `index.ejs` . It is in this file, we will implement the various methods for using `WebRTC and client library of Socket.IO`\n* A lot of messages will be exchanged between the two clients before a direct connection is created between them. We saw this in details in the previous tutorial when we gave the example of Amy and Bernadette. It is highly recommended that you read that example. We have simply implemented each step mentioned in that article using Socket.IO\n* Paste the following code in `public/js/main.js`\n{% gist https://gist.github.com/shivamag00/4015146e32241f762f458290378bb89a.js %}\n**Step 3.4. Add the STUN/TURN URLs in config.js**\n\n* To make this website in the real world, we must specify TURN/STUN configuration to `RTCPeerConnection()` . There are a lot of companies that provide free STUN/TURN servers. We will use the servers offered by XirSys.\n* Steps to obtain the TURN/STUN URLs from XirSys are mentioned in [this README file](https://github.com/webtutsplus/videoChat-WebFrontend/blob/master/README.md)\n* Paste the obtained configurations in `public/js/config.js`\n* Following is how `config.js` will look. (The urls will be different\n{% gist https://gist.github.com/shivamag00/928a944fe74bc336544a65d28d11cad6.js %}\n\n## Congratulations!\n\nYou have now created a web-conferencing website. To deploy your website on localhost and test it, follow these steps\n\n * Open a terminal in the root directory of our project.\n * Run the following command — node `index.js` .\n * Open Google Chrome and visit `localhost:8000` . Enter a room name (say foo). You should see your video.\n * Open a new tab and visit `localhost:8000` . Enter the same room name (foo). You should now see two video elements.\n\nYou can find the complete code in this [GitHub Repo](https://github.com/webtutsplus/videoChat-WebFrontend)\n\n\n	{"boosted_additional_tags": "", "boosted_dev_digest_email": false, "boosted_additional_articles": false}	\N	frontend, backend, webrtc, videochat	--- !ruby/struct:Articles::CachedEntity\nname: nilmadhab mondal\nusername: nilmadhab\nslug: nilmadhab\nprofile_image_90: "/uploads/user/profile_image/1/d9b0e3b7-ad59-45d5-b516-4e8ffd0a6958.jpeg"\nprofile_image_url: "/uploads/user/profile_image/1/d9b0e3b7-ad59-45d5-b516-4e8ffd0a6958.jpeg"\n	nilmadhab mondal	nilmadhab	\N	{}	\N	0	\N	0	2021-02-17 22:07:31.849924	\N	Part 2: How to implement WebRTC using JavaScript and Node.js in the Backend           Tutorials in th...	2021-02-18 08:05:39.223527	t	5	5	\N	f	1613599651	\N	354005	en	\N	2021-02-17 22:07:31.839585	\N	/i/u3ici2259rcsgs8fjlcd.png	#dddddd	10	0	0	0	\N	\N	13	f1148545e4779cf09fbeab6de29f25bae7ce6a5cd1ae4b3dfa5acc5d3d4b1d5bf0aec3bc0c394e05dbe4d3790f24ad66c8890ed976933d87e628aa71	/nilmadhab/let-s-build-a-video-chat-app-with-javascript-and-webrtc-29cd	0	0	0	<p><strong>Part 2: How to implement WebRTC using JavaScript and Node.js in the Backend</strong><br>\n<a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--ft7_ZuJc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xhhvaqudcudltul0bb8l.jpg" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--ft7_ZuJc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xhhvaqudcudltul0bb8l.jpg" alt="Alt Text" loading="lazy"></a></p>\n<h2>\n  <a name="tutorials-in-this-series" href="#tutorials-in-this-series" class="anchor">\n  </a>\n  Tutorials in this Series\n</h2>\n\n<ol>\n<li><a href="https://dev.to/nilmadhabmondal/let-s-build-a-video-chat-app-with-javascript-and-webrtc-380b">Understanding WebRTC</a></li>\n<li>Implementing WebRTC in code (this tutorial)</li>\n</ol>\n\n<p>In the previous tutorial, we learned about the fundamentals of WebRTC.<br>\nIn this tutorial, we will learn how to implement those concepts in code and create a website for online video-conferencing.</p>\n<h2>\n  <a name="live-demo" href="#live-demo" class="anchor">\n  </a>\n  Live Demo\n</h2>\n\n<p>You can see and use the website live in action at the link mentioned below. You just have to enter the room name to create/join a room.<br>\n<a href="https://desolate-depths-86299.herokuapp.com/">WebTutsPlus Webcon</a><br>\nNote:-</p>\n\n<ul>\n<li>The website currently supports only 2 persons per room.</li>\n</ul>\n\n<p>Video</p>\n\n<p>You can also watch the following video to see how to use this website.<br>\n<iframe width="710" height="399" src="https://www.youtube.com/embed/E2XBaFP2ii8" allowfullscreen loading="lazy">\n</iframe>\n</p>\n\n<h2>\n  <a name="requirements" href="#requirements" class="anchor">\n  </a>\n  Requirements\n</h2>\n\n<p>If you have not read the previous tutorial, it is highly recommended that you read it before you begin this tutorial.</p>\n\n<p>We will use the following:-</p>\n\n<ul>\n<li>Node.Js (version 12.14.1) — Runtime Env for JS</li>\n<li>Socket.IO (version 1.2.0) — for signaling in WebRTC</li>\n<li>Express.Js: (version 4.17.1) — BackEnd Framework</li>\n<li>Code Editor (Microsoft Visual Studio Code recommended)</li>\n<li>A Good Browser (Google Chrome Recommended)</li>\n</ul>\n\n<p>We will use Node.Js with Express.Js Framework for the backend. <strong>If you are not familiar with Node.Js and Express.Js but you know any other MVC framework, DON’T WORRY.</strong> We have tried to explain in such a way that you should be able to understand even if you have never worked with Node.Js &amp; Express.Js</p>\n\n<h2>\n  <a name="step-1-setting-up-the-project" href="#step-1-setting-up-the-project" class="anchor">\n  </a>\n  Step 1. Setting up the Project\n</h2>\n\n<p>Let’s begin with setting up the project.</p>\n\n<p><strong>Step 1.1. Download Node.Js</strong></p>\n\n<ul>\n<li>You can download Node.Js for your platform by clicking on this link. Downloading Node.Js will automatically install NPM (Node Package Manager) on your PC. NPM is the default Package Manager for Node.Js</li>\n</ul>\n\n<p><strong>Step 1.2. Create a node project</strong></p>\n\n<ul>\n<li>Create a New Folder. This folder will be the root directory for our project.</li>\n<li>Open terminal/CMD in this folder and run the command npm init .</li>\n<li>Press the Enter Key continuosly to skip the additional configurations for the project and write YES when prompted.</li>\n<li>This will create a file package.json in the root directory of the project. This file will contain all the necessary information regarding our project like project dependencies.</li>\n</ul>\n\n<p><strong>Step 1.3. Installing dependencies</strong></p>\n\n<ul>\n<li>In the terminal, run the following command. It will install the dependencies — Express.JS and socket.IO in our project.</li>\n</ul>\n\n<p><code>npm install express@4.17.1 socket.io@1.2.0 --save</code></p>\n\n<ul>\n<li>The flag <code>--save</code> will save the name and versions of these dependencies in <code>package.json</code> for future reference.</li>\n<li>After the above command has finished execution, you will see a folder <code>node_modules</code> created in the root directory of the project. This folder contains the dependencies that we have just installed.</li>\n</ul>\n\n<p>Now we have finished setting up the project. The following is the project structure at this stage.<br>\n<a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--Q1kWxiU5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/loj75ci14ojyeaailq18.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--Q1kWxiU5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/loj75ci14ojyeaailq18.png" alt="Alt Text" loading="lazy"></a></p>\n\n<h2>\n  <a name="step-2-creating-the-backend" href="#step-2-creating-the-backend" class="anchor">\n  </a>\n  Step 2. Creating The BackEnd\n</h2>\n\n<p>Let us now begin writing the code for the backend. Before we begin, let’s revise a few points from the previous tutorial.</p>\n\n<ul>\n<li>We need a backend server for signaling.</li>\n<li>Certain information — Candidate (network) information &amp; Media Codecs must be exchanged between the two peers before a direct connection can be made between them using WebRTC.</li>\n<li>Signaling refers to the mechanism using which two peers exchange this information</li>\n</ul>\n\n<p>The above points tell us that we have to implement a mechanism using which two clients (browsers) can send messages to each other. We will use Socket.IO for this purpose. Socket.IO is suited to learning about WebRTC signaling because of its built-in concept of ‘rooms’. Let’s first discuss what is Socket.IO</p>\n\n<p><strong>Socket.IO</strong></p>\n\n<ul>\n<li>Socket.IO consists of two parts— <code>client Library</code>&amp; <code>server Library</code>. Obviously, the <code>client library</code> is used on the client-side &amp; <code>server library</code> is used on the server-side.</li>\n<li>Socket.IO helps in implementing the following — Let’s say four clients are connected to the server. When the server receives a new message from one client, it should notify all the other clients and also forward this message to the other client. It is similar to a group chat.</li>\n<li>In Socket.IO, each message, that is sent to the server or received from the server, is associated with an event. So, if a client sends a message to the server on a particular event, the server will forward this message to only those clients that are listening to this corresponding event.</li>\n<li>There are some reserved events. However, we can also define custom events. To know about the reserved events, you can visit this link.</li>\n<li>Also, the clients can join a room and ask the server to send the message to only those clients that have joined a particular room.</li>\n</ul>\n\n<p>Now that we have discussed Socket.IO, we can begin implementing the backend server</p>\n\n<p><strong>Step 2.1. Create a file index.js</strong></p>\n\n<ul>\n<li>In the Express framework, <code>index.js</code> is the starting point for our server by default. So create a file index.js at the root level of our project.</li>\n</ul>\n\n<p>Step 2.2. Create a Public folder and a views folder</p>\n\n<ul>\n<li>Create the following folders at the root level of our project\n\n<ul>\n<li>\n<code>public</code> — contains the static files like CSS and JS files for the frontend</li>\n<li>\n<code>views</code> — contains the views for the frontend</li>\n</ul>\n\n\n</li>\n<li><p>Our website will only contain one page. Inside the views folder, create a file index.ejs that will contain the HTML code for the frontend. Expresses uses ejs as the templating engine.<br><br>\nThe project structure will now look like the following<br><br>\n<a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--eU7Xan0r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ahtl6s4wmx89ktlodola.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--eU7Xan0r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ahtl6s4wmx89ktlodola.png" alt="Alt Text" loading="lazy"></a><br><br>\n<strong>Step 2.3. Initialize Express and an HTTP Server</strong></p></li>\n<li>\n\n<p>Now, we must initialize Express, HTTP server, and Socket.IO for our backend. To do this, paste the following code in the <code>index.js</code> located at the root level of the project<br>\n</p>\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/shivamag00/b54435862875c2f4407b6fa2fbe64da2.js"></script>\n</div>\n\n<strong>Step 2.3. Implement Socket.IO</strong>\n\n<ul>\n<li>Now, it is time to implement Socket.IO in the backend.</li>\n<li>Paste the following code in <code>index.js</code> file\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/shivamag00/1df1de23a5cebbc34c7f9664b2a35974.js"></script>\n</div>\n\nSo, now we have implemented the backend of our website. The following is the complete code of <code>index.js</code>.\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/shivamag00/5f97b124d942853152ae264e57831a96.js"></script>\n</div>\n\n## Step 3. Creating the FrontEnd of our website</li>\n</ul>\n\n\n</li>\n</ul>\n\n<p>Now, let’s create the frontend of our website</p>\n\n<p><strong>Step 3.1. Create the HTML file</strong></p>\n\n<ul>\n<li>Let’s create the HTML file for our frontend.</li>\n<li>We will define the CSS and Javascript for the front-end in <code>public/css/styles.css</code> and <code>public/js/main.js</code> respectively. Hence, we must import those files. In the backend, we explicitly set <code>public</code> it as the default directory for serving static files. Hence, we will import the files from <code>css/styles.css</code> &amp; <code>js/main.js</code> in HTML.</li>\n<li>We will also import the client library for <code>socket.io</code>.</li>\n<li>We will also import <code>adapter.js</code> for WebRTC because implementations of WebRTC are still evolving, and because each browser has <a href="https://developer.mozilla.org/en-US/docs/Web/Media/Formats/WebRTC_codecs">different levels of support for codecs</a> and WebRTC features. The adapter is a JavaScript shim that lets your code be written to the specification so that it will “just work” in all browsers with WebRTC support.</li>\n<li>We discussed STURN/TURN servers in the previous tutorials. We will import the TURN/STUN URLs from <code>public/js/config.js</code> . We will create this file later in this tutorial.</li>\n<li>\n<p>Paste the following code in <code>views/index.ejs</code>.<br>\n</p>\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/shivamag00/29ca674d29c380b8bcad908e97739d7f.js"></script>\n</div>\n\n<strong>Step 3.2. Add the CSS code</strong>\n\n<ul>\n<li>We are not explaining the CSS code.</li>\n<li>Paste the following code in public/css/styles.css\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/shivamag00/7e74ac1a369747bea77c5397833b0933.js"></script>\n</div>\n\n## Step 3.3. Add the JS file</li>\n</ul>\n\n\n</li>\n<li><p>Now, let’s add javascript to our frontend. We had already the file <code>public/js/main.js</code> in <code>index.ejs</code> . It is in this file, we will implement the various methods for using <code>WebRTC and client library of Socket.IO</code></p></li>\n<li><p>A lot of messages will be exchanged between the two clients before a direct connection is created between them. We saw this in details in the previous tutorial when we gave the example of Amy and Bernadette. It is highly recommended that you read that example. We have simply implemented each step mentioned in that article using Socket.IO</p></li>\n<li>\n<p>Paste the following code in <code>public/js/main.js</code><br></p>\n\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/shivamag00/4015146e32241f762f458290378bb89a.js"></script>\n</div>\n\n<p><br><br>\n<strong>Step 3.4. Add the STUN/TURN URLs in config.js</strong></p>\n</li>\n<li><p>To make this website in the real world, we must specify TURN/STUN configuration to <code>RTCPeerConnection()</code> . There are a lot of companies that provide free STUN/TURN servers. We will use the servers offered by XirSys.</p></li>\n<li><p>Steps to obtain the TURN/STUN URLs from XirSys are mentioned in <a href="https://github.com/webtutsplus/videoChat-WebFrontend/blob/master/README.md">this README file</a></p></li>\n<li><p>Paste the obtained configurations in <code>public/js/config.js</code></p></li>\n<li>\n<p>Following is how <code>config.js</code> will look. (The urls will be different<br></p>\n\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/shivamag00/928a944fe74bc336544a65d28d11cad6.js"></script>\n</div>\n\n\n</li>\n</ul>\n\n<h2>\n  <a name="congratulations" href="#congratulations" class="anchor">\n  </a>\n  Congratulations!\n</h2>\n\n<p>You have now created a web-conferencing website. To deploy your website on localhost and test it, follow these steps</p>\n\n<ul>\n<li>Open a terminal in the root directory of our project.</li>\n<li>Run the following command — node <code>index.js</code> .</li>\n<li>Open Google Chrome and visit <code>localhost:8000</code> . Enter a room name (say foo). You should see your video.</li>\n<li>Open a new tab and visit <code>localhost:8000</code> . Enter the same room name (foo). You should now see two video elements.</li>\n</ul>\n\n<p>You can find the complete code in this <a href="https://github.com/webtutsplus/videoChat-WebFrontend">GitHub Repo</a></p>\n\n	0	t	2021-02-17 22:07:31.839585	f	0	0	7	t	0	\N	\N	t	let-s-build-a-video-chat-app-with-javascript-and-webrtc-29cd	\N	25	Let’s Build a Video Chat App with JavaScript and WebRTC	2021-02-18 08:05:39.542859	1	0	\N	\N	\N	0	\N	\N	\N
57	f	f	f	\N	\n\n![](https://cdn-images-1.medium.com/max/2560/1*dhjzK97qu1HVBbh3bgsb_Q.png)\n\nIn this series, I am going to solve Leetcode medium problems live with my friend, which you can see on our youtube channel, Today we will do Problem Problem 1429. **First Unique Number**.\n\nA little bit about me, I have offers from **Uber** **India** and **Amazon** **India** in the past, and I am currently working for **Booking.com** in Amsterdam.\n\n## **Problem Statement**\n\nYou have a queue of integers, you need to retrieve the first unique integer in the queue.\nImplement the FirstUnique class:\n\n* FirstUnique(int[] nums) Initializes the object with the numbers in the queue.\n\n* int showFirstUnique() returns the value of **the first unique** integer of the queue, and returns **-1** if there is no such integer.\n\n* void add(int value) insert value to the queue.\n\n**Example 1:**\n\n    Input: \n    ["FirstUnique","showFirstUnique","add","showFirstUnique","add","showFirstUnique","add","showFirstUnique"]\n    [[[2,3,5]],[],[5],[],[2],[],[3],[]]\n    Output: \n    [null,2,null,2,null,3,null,-1]\n    Explanation: \n    FirstUnique firstUnique = new FirstUnique([2,3,5]);\n    firstUnique.showFirstUnique(); // return 2\n    firstUnique.add(5);            // the queue is now [2,3,5,5]\n    firstUnique.showFirstUnique(); // return 2\n    firstUnique.add(2);            // the queue is now [2,3,5,5,2]\n    firstUnique.showFirstUnique(); // return 3\n    firstUnique.add(3);            // the queue is now [2,3,5,5,2,3]\n    firstUnique.showFirstUnique(); // return -1\n\n**Example 2:**\n\n    Input: \n    ["FirstUnique","showFirstUnique","add","add","add","add","add","showFirstUnique"]\n    [[[7,7,7,7,7,7]],[],[7],[3],[3],[7],[17],[]]\n    Output: \n    [null,-1,null,null,null,null,null,17]\n    Explanation: \n    FirstUnique firstUnique = new FirstUnique([7,7,7,7,7,7]);\n    firstUnique.showFirstUnique(); // return -1\n    firstUnique.add(7);            // the queue is now [7,7,7,7,7,7,7]\n    firstUnique.add(3);            // the queue is now [7,7,7,7,7,7,7,3]\n    firstUnique.add(3);            // the queue is now [7,7,7,7,7,7,7,3,3]\n    firstUnique.add(7);            // the queue is now [7,7,7,7,7,7,7,3,3,7]\n    firstUnique.add(17);           // the queue is now [7,7,7,7,7,7,7,3,3,7,17]\n    firstUnique.showFirstUnique(); // return 17\n\n**Example 3:**\n\n    Input: \n    ["FirstUnique","showFirstUnique","add","showFirstUnique"]\n    [[[809]],[],[809],[]]\n    Output: \n    [null,809,null,-1]\n    Explanation: \n    FirstUnique firstUnique = new FirstUnique([809]);\n    firstUnique.showFirstUnique(); // return 809\n    firstUnique.add(809);          // the queue is now [809,809]\n    firstUnique.showFirstUnique(); // return -1\n\n## **Youtube Discussion**\n\n <iframe src="https://medium.com/media/01df6324467436d76a6db5d225ea9b74" frameborder=0></iframe>\n\n## **Solution**\n\nIn this problem, we are given a queue and we need to find its first unique element. Here we can use a Hash Map to keep track of occurrences of each integer and we can return the first element whose occurrence is 1. But we need to keep track of the order in which the elements are inserted into the list.\n\nTherefore we will use an Ordered Hash Map (LinkedHashMap for java). This map helps us to count the occurrence of each element and also retain their order.\n\nLet's go through the whole code once.\n\nConstructor: In the constructor, we initialize the list(where we will store the elements) and LinkedHashMap(we will store the element occurrences and also their order). We put all the elements into the list and also add them into the map. This is used only once.\n\nAdd method: It is used to add elements into the list and map.\n\nShow First Unique method: This method returns the first unique element in the list. So when this method is called, we iterate through the whole LinkedHashMap and check each elements counter. If the counter is 1, then we return its value. If there is no element with counter 1, we return -1.\n{% gist https://gist.github.com/sksaikia/106357a039c20cce5e5c092835f7dcfa %}\n\n## **Complexity analysis :**\n\nThe add method runs in the O(1) time because we only have to add one element into the list and map.\n\nFor the showFirstUnique method, we have a time complexity of O(m), m is the total number of unique elements present in the list. We have to m traversals only if there is no unique element present in the list.\n\nSpace Complexity: O(n), for both the list and map\n\nThe code for the problem can be found in the following repository.\n{% github webtutsplus/LeetCode %}\n\n\n	{"boosted_additional_tags": "", "boosted_dev_digest_email": false, "boosted_additional_articles": false}	\N	algorithms, leetcode	--- !ruby/struct:Articles::CachedEntity\nname: nilmadhab mondal\nusername: nilmadhab\nslug: nilmadhab\nprofile_image_90: "/uploads/user/profile_image/1/d9b0e3b7-ad59-45d5-b516-4e8ffd0a6958.jpeg"\nprofile_image_url: "/uploads/user/profile_image/1/d9b0e3b7-ad59-45d5-b516-4e8ffd0a6958.jpeg"\n	nilmadhab mondal	nilmadhab	\N	{}	\N	0	\N	0	2021-02-22 06:46:34.435079	\N	In this series, I am going to solve Leetcode medium problems live with my friend, which you can see...	\N	t	5	5	\N	f	\N	\N	0	en	\N	2017-01-01 05:00:00	\N	/i/zntw5rlsiw3xojfx763y.png	#dddddd	0	0	0	0	\N	\N	3	c1472454bb83a644d593703dc3ef651ee86b7955c7f1a5e948b1dd4a95a07ce30921a86b18af459d12e60fbd6a166d3a59c9b9e14bbbe5cfb0df0861	/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-first-unique-number-5c60-temp-slug-7305025	0	0	0	<p><a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--rTD21Djn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2560/1%2AdhjzK97qu1HVBbh3bgsb_Q.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--rTD21Djn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2560/1%2AdhjzK97qu1HVBbh3bgsb_Q.png" alt="" loading="lazy"></a></p>\n\n<p>In this series, I am going to solve Leetcode medium problems live with my friend, which you can see on our youtube channel, Today we will do Problem Problem 1429. <strong>First Unique Number</strong>.</p>\n\n<p>A little bit about me, I have offers from <strong>Uber</strong> <strong>India</strong> and <strong>Amazon</strong> <strong>India</strong> in the past, and I am currently working for <strong>Booking.com</strong> in Amsterdam.</p>\n\n<h2>\n  <a name="problem-statement" href="#problem-statement" class="anchor">\n  </a>\n  <strong>Problem Statement</strong>\n</h2>\n\n<p>You have a queue of integers, you need to retrieve the first unique integer in the queue.<br>\nImplement the FirstUnique class:</p>\n\n<ul>\n<li><p>FirstUnique(int[] nums) Initializes the object with the numbers in the queue.</p></li>\n<li><p>int showFirstUnique() returns the value of <strong>the first unique</strong> integer of the queue, and returns <strong>-1</strong> if there is no such integer.</p></li>\n<li><p>void add(int value) insert value to the queue.</p></li>\n</ul>\n\n<p><strong>Example 1:</strong></p>\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>Input: \n["FirstUnique","showFirstUnique","add","showFirstUnique","add","showFirstUnique","add","showFirstUnique"]\n[[[2,3,5]],[],[5],[],[2],[],[3],[]]\nOutput: \n[null,2,null,2,null,3,null,-1]\nExplanation: \nFirstUnique firstUnique = new FirstUnique([2,3,5]);\nfirstUnique.showFirstUnique(); // return 2\nfirstUnique.add(5);            // the queue is now [2,3,5,5]\nfirstUnique.showFirstUnique(); // return 2\nfirstUnique.add(2);            // the queue is now [2,3,5,5,2]\nfirstUnique.showFirstUnique(); // return 3\nfirstUnique.add(3);            // the queue is now [2,3,5,5,2,3]\nfirstUnique.showFirstUnique(); // return -1\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n<p><strong>Example 2:</strong></p>\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>Input: \n["FirstUnique","showFirstUnique","add","add","add","add","add","showFirstUnique"]\n[[[7,7,7,7,7,7]],[],[7],[3],[3],[7],[17],[]]\nOutput: \n[null,-1,null,null,null,null,null,17]\nExplanation: \nFirstUnique firstUnique = new FirstUnique([7,7,7,7,7,7]);\nfirstUnique.showFirstUnique(); // return -1\nfirstUnique.add(7);            // the queue is now [7,7,7,7,7,7,7]\nfirstUnique.add(3);            // the queue is now [7,7,7,7,7,7,7,3]\nfirstUnique.add(3);            // the queue is now [7,7,7,7,7,7,7,3,3]\nfirstUnique.add(7);            // the queue is now [7,7,7,7,7,7,7,3,3,7]\nfirstUnique.add(17);           // the queue is now [7,7,7,7,7,7,7,3,3,7,17]\nfirstUnique.showFirstUnique(); // return 17\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n<p><strong>Example 3:</strong></p>\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>Input: \n["FirstUnique","showFirstUnique","add","showFirstUnique"]\n[[[809]],[],[809],[]]\nOutput: \n[null,809,null,-1]\nExplanation: \nFirstUnique firstUnique = new FirstUnique([809]);\nfirstUnique.showFirstUnique(); // return 809\nfirstUnique.add(809);          // the queue is now [809,809]\nfirstUnique.showFirstUnique(); // return -1\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n<h2>\n  <a name="youtube-discussion" href="#youtube-discussion" class="anchor">\n  </a>\n  <strong>Youtube Discussion</strong>\n</h2>\n\n\n<h2>\n  <a name="solution" href="#solution" class="anchor">\n  </a>\n  <strong>Solution</strong>\n</h2>\n\n<p>In this problem, we are given a queue and we need to find its first unique element. Here we can use a Hash Map to keep track of occurrences of each integer and we can return the first element whose occurrence is 1. But we need to keep track of the order in which the elements are inserted into the list.</p>\n\n<p>Therefore we will use an Ordered Hash Map (LinkedHashMap for java). This map helps us to count the occurrence of each element and also retain their order.</p>\n\n<p>Let's go through the whole code once.</p>\n\n<p>Constructor: In the constructor, we initialize the list(where we will store the elements) and LinkedHashMap(we will store the element occurrences and also their order). We put all the elements into the list and also add them into the map. This is used only once.</p>\n\n<p>Add method: It is used to add elements into the list and map.</p>\n\n<p>Show First Unique method: This method returns the first unique element in the list. So when this method is called, we iterate through the whole LinkedHashMap and check each elements counter. If the counter is 1, then we return its value. If there is no element with counter 1, we return -1.<br>\n</p>\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/sksaikia/106357a039c20cce5e5c092835f7dcfa.js"></script>\n</div>\n\n\n<h2>\n  <a name="complexity-analysis-" href="#complexity-analysis-" class="anchor">\n  </a>\n  <strong>Complexity analysis :</strong>\n</h2>\n\n<p>The add method runs in the O(1) time because we only have to add one element into the list and map.</p>\n\n<p>For the showFirstUnique method, we have a time complexity of O(m), m is the total number of unique elements present in the list. We have to m traversals only if there is no unique element present in the list.</p>\n\n<p>Space Complexity: O(n), for both the list and map</p>\n\n<p>The code for the problem can be found in the following repository.<br>\n</p>\n<div class="ltag-github-readme-tag">\n  <div class="readme-overview">\n    <h2>\n      <img src="/assets/github-logo.svg" alt="GitHub logo" loading="lazy">\n      <a href="https://github.com/webtutsplus">\n        webtutsplus\n      </a> / <a style="font-weight: 600;" href="https://github.com/webtutsplus/LeetCode">\n        LeetCode\n      </a>\n    </h2>\n    <h3>\n      \n    </h3>\n  </div>\n</div>\n\n\n	0	f	\N	f	0	0	3	t	0	\N	\N	t	solve-leetcode-problems-and-get-offers-from-your-dream-companies-first-unique-number-5c60-temp-slug-7305025	\N	0	Solve Leetcode Problems and Get Offers From Your Dream Companies || First Unique Number	2021-02-22 06:57:45.33265	1	0	\N	\N	\N	0	\N	\N	\N
38	f	f	f	\N	Problem 202. **Happy Number** (Leetcode Easy)\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/hm1h2n3j5m2vsh63y0f9.png)\n\nIn this series, I am going to solve Leetcode medium problems live with my friend, which you can see on our youtube channel, Today we will do Problem Problem 202. **Happy Number**.\n\nA little bit about me, I have offers from **Uber** India and **Amazon** India in the past, and I am currently working for **Booking.com** in Amsterdam.\n\n## Motivation to Learn Algorithms\n{% medium https://medium.com/leetcode-simplified/solve-leetcode-problems-and-get-offers-from-your-dream-companies-2786415be0b7 %}\n**Problem Statement**\n\nWrite an algorithm to determine if a number `n` is happy.\n\nA happy number is a number defined by the following process:\n\n* Starting with any positive integer, replace the number by the sum of the squares of its digits.\n* Repeat the process until the number equals 1 (where it will stay), or it **loops endlessly in a cycle** which does not include 1.\n* Those numbers for which this process **ends in 1** are happy.\n\nReturn `true` if `n` is a happy number, and `false` if not.\n\n**Example 1:**\n`\nInput: n = 19\nOutput: true\nExplanation:\n12 + 92 = 82\n82 + 22 = 68\n62 + 82 = 100\n12 + 02 + 02 = 1\n`\n**Example 2:**\n\n`Input: n = 2\nOutput: false`\n\n## Youtube Discussion\n\n{% youtube p57WkjyidSg %}\n\n`\n**Solution**\n\nThis is a basic recursion based problem. We need to replace a number with the sum of the square of its digits. We need to repeat this process until the number becomes 1 or it loops endlessly in a cycle. In the case of reaching 1, we should return true else false.\n\nSo to keep track of all the last encountered numbers we can use a HashSet and then we can keep checking if our current number is present in that HashSet or not. If it is present , then we immediately terminate the method and return false , else we keep on finding the sum of square of it’s digits.\n\nThe following is the [Java code](https://medium.com/javarevisited/10-free-courses-to-learn-java-in-2019-22d1f33a3915) for the given problem.\n{% gist https://gist.github.com/sksaikia/3f46f77373b1618e7b701cc0a12c38fb.js %}\nThe [C++ code](https://medium.com/javarevisited/top-10-courses-to-learn-c-for-beginners-best-and-free-4afc262a544e) is given below.\n{% gist https://gist.github.com/sksaikia/95d6dbfba5c118c8f9ee29c341e71b42.js %}\nThe code for this problem can be found in the following repository.\n{% github webtutsplus/LeetCode %}\n\n\n\n\n	{"boosted_additional_tags": "", "boosted_dev_digest_email": false, "boosted_additional_articles": false}	\N	algorithms, programming, career, leetcode	--- !ruby/struct:Articles::CachedEntity\nname: nilmadhab mondal\nusername: nilmadhab\nslug: nilmadhab\nprofile_image_90: "/uploads/user/profile_image/1/d9b0e3b7-ad59-45d5-b516-4e8ffd0a6958.jpeg"\nprofile_image_url: "/uploads/user/profile_image/1/d9b0e3b7-ad59-45d5-b516-4e8ffd0a6958.jpeg"\n	nilmadhab mondal	nilmadhab	\N	{}	\N	0	\N	0	2021-02-17 21:56:43.666487	\N	Problem 202. Happy Number (Leetcode Easy)   In this series, I am going to solve Leetcode medium probl...	2021-02-20 13:41:11.235047	t	5	5	\N	f	1613599003	\N	352100	en	\N	2021-02-17 21:56:43.653334	\N	/i/qgd0tqzm8ety6odnd5lr.jpg	#dddddd	8	0	0	0	\N	\N	4	862d2eab6649b3a18e6f21703f17585d3edbfba57cd8e2e1076df447c939bde066e1fe4e4cc81543d271839abfffe1bb284d44d4241ac4f0f4f7b5bb	/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-problem-202-happy-number-easy-41ml	0	0	0	<p>Problem 202. <strong>Happy Number</strong> (Leetcode Easy)<br>\n<a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--ewKIMHhE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hm1h2n3j5m2vsh63y0f9.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--ewKIMHhE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hm1h2n3j5m2vsh63y0f9.png" alt="Alt Text" loading="lazy"></a></p>\n\n<p>In this series, I am going to solve Leetcode medium problems live with my friend, which you can see on our youtube channel, Today we will do Problem Problem 202. <strong>Happy Number</strong>.</p>\n\n<p>A little bit about me, I have offers from <strong>Uber</strong> India and <strong>Amazon</strong> India in the past, and I am currently working for <strong>Booking.com</strong> in Amsterdam.</p>\n<h2>\n  <a name="motivation-to-learn-algorithms" href="#motivation-to-learn-algorithms" class="anchor">\n  </a>\n  Motivation to Learn Algorithms\n</h2>\n\n\n<div class="ltag__link">\n  <a href="https://medium.com/leetcode-simplified/solve-leetcode-problems-and-get-offers-from-your-dream-companies-2786415be0b7" class="ltag__link__link">\n    <div class="ltag__link__pic">\n      <img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--tLzMBohE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/fit/c/96/96/1%2AhNjwft_dNBxvTr6g6TOVGg.jpeg" alt="Nil Madhab" loading="lazy">\n    </div>\n  </a>\n  <a href="https://medium.com/leetcode-simplified/solve-leetcode-problems-and-get-offers-from-your-dream-companies-2786415be0b7" class="ltag__link__link">\n    <div class="ltag__link__content">\n      <h2>Solve Leetcode Problems and Get Offers From Your Dream Companies | by Nil Madhab | LeetCode Simplified | Jan, 2021 | Medium</h2>\n      <h3>Nil Madhab ・ <time datetime="2021-02-06T16:44:52.884Z">Feb 6, 2021</time> ・ 3 min read\n      <div class="ltag__link__servicename">\n        <img src="/assets/medium_icon.svg" alt="Medium Logo" aria-label="Medium Logo" loading="lazy">\n        Medium\n      </div>\n    </h3>\n</div>\n  </a>\n</div>\n<br>\n<strong>Problem Statement</strong>\n\n<p>Write an algorithm to determine if a number <code>n</code> is happy.</p>\n\n<p>A happy number is a number defined by the following process:</p>\n\n<ul>\n<li>Starting with any positive integer, replace the number by the sum of the squares of its digits.</li>\n<li>Repeat the process until the number equals 1 (where it will stay), or it <strong>loops endlessly in a cycle</strong> which does not include 1.</li>\n<li>Those numbers for which this process <strong>ends in 1</strong> are happy.</li>\n</ul>\n\n<p>Return <code>true</code> if <code>n</code> is a happy number, and <code>false</code> if not.</p>\n\n<p><strong>Example 1:</strong><br>\n<code><br>\nInput: n = 19<br>\nOutput: true<br>\nExplanation:<br>\n12 + 92 = 82<br>\n82 + 22 = 68<br>\n62 + 82 = 100<br>\n12 + 02 + 02 = 1<br>\n</code><br>\n<strong>Example 2:</strong></p>\n\n<p><code>Input: n = 2<br>\nOutput: false</code></p>\n<h2>\n  <a name="youtube-discussion" href="#youtube-discussion" class="anchor">\n  </a>\n  Youtube Discussion\n</h2>\n\n<p><iframe width="710" height="399" src="https://www.youtube.com/embed/p57WkjyidSg" allowfullscreen loading="lazy">\n</iframe>\n</p>\n\n<p>`<br>\n<strong>Solution</strong></p>\n\n<p>This is a basic recursion based problem. We need to replace a number with the sum of the square of its digits. We need to repeat this process until the number becomes 1 or it loops endlessly in a cycle. In the case of reaching 1, we should return true else false.</p>\n\n<p>So to keep track of all the last encountered numbers we can use a HashSet and then we can keep checking if our current number is present in that HashSet or not. If it is present , then we immediately terminate the method and return false , else we keep on finding the sum of square of it’s digits.</p>\n\n<p>The following is the <a href="https://medium.com/javarevisited/10-free-courses-to-learn-java-in-2019-22d1f33a3915">Java code</a> for the given problem.<br>\n</p>\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/sksaikia/3f46f77373b1618e7b701cc0a12c38fb.js"></script>\n</div>\n<br>\nThe <a href="https://medium.com/javarevisited/top-10-courses-to-learn-c-for-beginners-best-and-free-4afc262a544e">C++ code</a> is given below.<br>\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/sksaikia/95d6dbfba5c118c8f9ee29c341e71b42.js"></script>\n</div>\n<br>\nThe code for this problem can be found in the following repository.<br>\n<div class="ltag-github-readme-tag">\n  <div class="readme-overview">\n    <h2>\n      <img src="/assets/github-logo.svg" alt="GitHub logo" loading="lazy">\n      <a href="https://github.com/webtutsplus">\n        webtutsplus\n      </a> / <a style="font-weight: 600;" href="https://github.com/webtutsplus/LeetCode">\n        LeetCode\n      </a>\n    </h2>\n    <h3>\n      \n    </h3>\n  </div>\n</div>\n\n\n	0	t	2021-02-17 21:56:43.653334	f	0	0	2	t	0	\N	\N	t	solve-leetcode-problems-and-get-offers-from-your-dream-companies-problem-202-happy-number-easy-41ml	\N	25	Solve Leetcode Problems and Get Offers From Your Dream Companies | Problem 202. Happy Number(Easy)	2021-02-20 13:41:12.230865	1	0	\N	\N	\N	0	\N	\N	\N
58	f	f	f	\N	\n![](https://cdn-images-1.medium.com/max/2560/1*ebUw08shmHSN0obp7za-mQ.png)\n\nHere I will solve problems from Leetcode contests. Today we will do the Find Kth Largest XOR Coordinate Value problem Weekly Contest 225.\n\n\n## **Problem Statement**\n\nYou are given a 2D matrix of size m x n, consisting of non-negative integers. You are also given an integer k.\n\nThe **value** of the coordinate (a, b) of the matrix is the XOR of all matrix[i][j] where 0 <= i <= a < m and 0 <= j <= b < n **(0-indexed)**.\n\nFind the kth largest value **(1-indexed)** of all the coordinates of matrix.\n\n**Example 1:**\n\n    **Input:** matrix = [[5,2],[1,6]], k = 1\n    **Output:** 7\n    **Explanation:** The value of coordinate (0,1) is 5 XOR 2 = 7, which is the largest value.\n\n**Example 2:**\n\n    **Input:** matrix = [[5,2],[1,6]], k = 2\n    **Output:** 5\n    **Explanation: **The value of coordinate (0,0) is 5 = 5, which is the 2nd largest value.\n\n**Example 3:**\n\n    **Input:** matrix = [[5,2],[1,6]], k = 3\n    **Output:** 4\n    **Explanation:** The value of coordinate (1,0) is 5 XOR 1 = 4, which is the 3rd largest value.\n\n**Example 4:**\n\n    **Input:** matrix = [[5,2],[1,6]], k = 4\n    **Output:** 0\n    **Explanation:** The value of coordinate (1,1) is 5 XOR 2 XOR 1 XOR 6 = 0, which is the 4th largest value.\n\n**Constraints:**\n\n* m == matrix.length\n\n* n == matrix[i].length\n\n* 1 <= m, n <= 1000\n\n* 0 <= matrix[i][j] <= 106\n\n* 1 <= k <= m * n\n\n## **Youtube Discussion**\n\n{% youtube PaLIMlunjSE %}\n\n## **Solution**\n\nThis is a dynamic programming problem. To find the XOR of one point (i,j) , we need the XOR of (i-1,j-1) , (i-1,j) and (i,j-1) sized matrix . Also, we need to XOR with the matrix[i][j] itself. So we get a relation,\n\ndp[i][j] = dp[i-1][j-1]^dp[i-1][j]^dp[i][j-1]^matrix[i][j]\n\nThis process can be understood with the following gif.\n\n![Finding the value of (i,j) th index in the matrix](https://cdn-images-1.medium.com/max/2400/1*YLTaAXvBL8VPv2RkHrGsfw.gif)\n\nWe also have to initialize the dp matrix. For the (0,0) we have\n \ndp[0][0] = matrix[0][0] .\n\nThis is for the first column, we have\n\n    dp[i][0] = dp[i-1][0]^matrix[i][0]\n\nFor the first row, we have\n\n    dp[0][i] = dp[0][i-1]^matrix[0][i]\n\nCombining all these conditions, we will get our dp matrix which contains all the XOR values for each value of i and j. We put all these values in a list and sort in it ascending order. The m*n-k th element is our answer.\n\nJava and C++ code is given below.\n\n{% gist https://gist.github.com/sksaikia/86b6cfaf6d60ecfa5d260cc7610f095c %}\n\n{% gist https://gist.github.com/sksaikia/af8e51b737bdedb7300debbcd370e0f8 %}\n\nThe time complexity is O(mn), m is the row size, n is the column size\n\nSpace Complexity: O(mn), m is the row size, n is the column size.\n\nWe can use Heap to improve the performance of our algorithm. Because sorting takes O(mn log(mn)) time but using a heap we can do that step in O(k), where k is the given number.\n\nThe code can also be found in this repository.\n{% github webtutsplus/LeetCode %}\n	{"boosted_additional_tags": "", "boosted_dev_digest_email": false, "boosted_additional_articles": false}	\N	algorithms, leetcode	--- !ruby/struct:Articles::CachedEntity\nname: nilmadhab mondal\nusername: nilmadhab\nslug: nilmadhab\nprofile_image_90: "/uploads/user/profile_image/1/d9b0e3b7-ad59-45d5-b516-4e8ffd0a6958.jpeg"\nprofile_image_url: "/uploads/user/profile_image/1/d9b0e3b7-ad59-45d5-b516-4e8ffd0a6958.jpeg"\n	nilmadhab mondal	nilmadhab	\N	{}	\N	0	\N	0	2021-02-22 07:08:57.358854	\N	Here I will solve problems from Leetcode contests. Today we will do the Find Kth Largest XOR Coordi...	\N	t	5	5	\N	f	\N	\N	0	en	\N	2017-01-01 05:00:00	\N	/i/yfi8albu3svte4t68ksl.png	#dddddd	0	0	0	0	\N	\N	1	fab1b664e4b661d53ac133f1f771dcd0c4ef8792a1dc0fa984a20c848c53a29b87e7d5e54ec9ce18930314571fec6ab268c4d8b24df85c4075374bf0	/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-find-kth-largest-xor-coordinate-value-weekly-contest-225-3kjb-temp-slug-7459804	0	0	0	<p><a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--iemJfWz_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2560/1%2AebUw08shmHSN0obp7za-mQ.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--iemJfWz_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2560/1%2AebUw08shmHSN0obp7za-mQ.png" alt="" loading="lazy"></a></p>\n\n<p>Here I will solve problems from Leetcode contests. Today we will do the Find Kth Largest XOR Coordinate Value problem Weekly Contest 225.</p>\n\n<h2>\n  <a name="problem-statement" href="#problem-statement" class="anchor">\n  </a>\n  <strong>Problem Statement</strong>\n</h2>\n\n<p>You are given a 2D matrix of size m x n, consisting of non-negative integers. You are also given an integer k.</p>\n\n<p>The <strong>value</strong> of the coordinate (a, b) of the matrix is the XOR of all matrix[i][j] where 0 &lt;= i &lt;= a &lt; m and 0 &lt;= j &lt;= b &lt; n <strong>(0-indexed)</strong>.</p>\n\n<p>Find the kth largest value <strong>(1-indexed)</strong> of all the coordinates of matrix.</p>\n\n<p><strong>Example 1:</strong></p>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>**Input:** matrix = [[5,2],[1,6]], k = 1\n**Output:** 7\n**Explanation:** The value of coordinate (0,1) is 5 XOR 2 = 7, which is the largest value.\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n<p><strong>Example 2:</strong></p>\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>**Input:** matrix = [[5,2],[1,6]], k = 2\n**Output:** 5\n**Explanation: **The value of coordinate (0,0) is 5 = 5, which is the 2nd largest value.\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n<p><strong>Example 3:</strong></p>\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>**Input:** matrix = [[5,2],[1,6]], k = 3\n**Output:** 4\n**Explanation:** The value of coordinate (1,0) is 5 XOR 1 = 4, which is the 3rd largest value.\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n<p><strong>Example 4:</strong></p>\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>**Input:** matrix = [[5,2],[1,6]], k = 4\n**Output:** 0\n**Explanation:** The value of coordinate (1,1) is 5 XOR 2 XOR 1 XOR 6 = 0, which is the 4th largest value.\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n<li><p>m == matrix.length</p></li>\n<li><p>n == matrix[i].length</p></li>\n<li><p>1 &lt;= m, n &lt;= 1000</p></li>\n<li><p>0 &lt;= matrix[i][j] &lt;= 106</p></li>\n<li><p>1 &lt;= k &lt;= m * n</p></li>\n</ul>\n<h2>\n  <a name="youtube-discussion" href="#youtube-discussion" class="anchor">\n  </a>\n  <strong>Youtube Discussion</strong>\n</h2>\n\n<p><iframe width="710" height="399" src="https://www.youtube.com/embed/PaLIMlunjSE" allowfullscreen loading="lazy">\n</iframe>\n</p>\n<h2>\n  <a name="solution" href="#solution" class="anchor">\n  </a>\n  <strong>Solution</strong>\n</h2>\n\n<p>This is a dynamic programming problem. To find the XOR of one point (i,j) , we need the XOR of (i-1,j-1) , (i-1,j) and (i,j-1) sized matrix . Also, we need to XOR with the matrix[i][j] itself. So we get a relation,</p>\n\n<p>dp[i][j] = dp[i-1][j-1]^dp[i-1][j]^dp[i][j-1]^matrix[i][j]</p>\n\n<p>This process can be understood with the following gif.</p>\n\n<p><a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--tI4y75Dz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2400/1%2AYLTaAXvBL8VPv2RkHrGsfw.gif" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--tI4y75Dz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2400/1%2AYLTaAXvBL8VPv2RkHrGsfw.gif" alt="Finding the value of (i,j) th index in the matrix" loading="lazy"></a></p>\n\n<p>We also have to initialize the dp matrix. For the (0,0) we have</p>\n\n<p>dp[0][0] = matrix[0][0] .</p>\n\n<p>This is for the first column, we have</p>\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>dp[i][0] = dp[i-1][0]^matrix[i][0]\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n<p>For the first row, we have</p>\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>dp[0][i] = dp[0][i-1]^matrix[0][i]\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n<p>Combining all these conditions, we will get our dp matrix which contains all the XOR values for each value of i and j. We put all these values in a list and sort in it ascending order. The m*n-k th element is our answer.</p>\n\n<p>Java and C++ code is given below.</p>\n\n\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/sksaikia/86b6cfaf6d60ecfa5d260cc7610f095c.js"></script>\n</div>\n\n\n\n\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/sksaikia/af8e51b737bdedb7300debbcd370e0f8.js"></script>\n</div>\n\n\n<p>The time complexity is O(mn), m is the row size, n is the column size</p>\n\n<p>Space Complexity: O(mn), m is the row size, n is the column size.</p>\n\n<p>We can use Heap to improve the performance of our algorithm. Because sorting takes O(mn log(mn)) time but using a heap we can do that step in O(k), where k is the given number.</p>\n\n<p>The code can also be found in this repository.<br>\n</p>\n<div class="ltag-github-readme-tag">\n  <div class="readme-overview">\n    <h2>\n      <img src="/assets/github-logo.svg" alt="GitHub logo" loading="lazy">\n      <a href="https://github.com/webtutsplus">\n        webtutsplus\n      </a> / <a style="font-weight: 600;" href="https://github.com/webtutsplus/LeetCode">\n        LeetCode\n      </a>\n    </h2>\n    <h3>\n      \n    </h3>\n  </div>\n</div>\n\n\n	0	f	\N	f	0	0	2	t	0	\N	\N	t	solve-leetcode-problems-and-get-offers-from-your-dream-companies-find-kth-largest-xor-coordinate-value-weekly-contest-225-3kjb-temp-slug-7459804	\N	0	Solve Leetcode Problems and Get Offers From Your Dream Companies || Find Kth Largest XOR Coordinate Value (Weekly Contest 225)	2021-02-22 07:08:57.358854	1	0	\N	\N	\N	0	\N	\N	\N
66	f	f	f	\N	Every e-Commerce site has a **Shopping Cart**feature, today we will learn how to make the backend APIs using Java and Spring Boot\n\n![Photo by [Charles Deluvio](https://unsplash.com/@charlesdeluvio?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText) on [Unsplash](https://unsplash.com/s/photos/online-shopping?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)](https://cdn-images-1.medium.com/max/3840/1*RBpW8CIMl7R8q9xbOSjvtg.jpeg)\n\nCart is a must-have feature for an e-commerce app that allows the users to save the items they want to buy, change the quantity, and remove them. It should also be able to show the total cost of items in the cart.\n\nWe will first develop the back-end API using [Java ](https://medium.com/javarevisited/10-books-java-developers-should-read-in-2020-e6222f25cc72)& [Spring Boot](https://medium.com/javarevisited/top-10-courses-to-learn-spring-boot-in-2020-best-of-lot-6ffce88a1b6e?source=---------39------------------) (in this tutorial). After the API has been created, we will use that API in our Vue.Js front-end(in future tutorials).\n\n## Youtube Discussion\n{% youtube RgWm5GB8fLo %}\n## Live Demo\n\nYou can test the API at the following swagger link. You will find the cart API in cart-controllersection(Run the code in your local first)\n\n[**Swagger API**](http://localhost:8080/api/swagger-ui.html#/)\n\nYou can find the complete code at [Github](https://github.com/webtutsplus/ecommerce-backend).\n\n## Pre-requisites\n\n 1. Knowledge of Java, [OOP ](https://medium.com/javarevisited/my-favorite-courses-to-learn-object-oriented-programming-and-design-in-2019-197bab351733)& Spring Boot Framework\n\n 2. Java Development Kit (JDK)\n\n 3. [IntelliJ IDEA Ultimate](https://www.jetbrains.com/idea/download/) — open-source (Recommended)\n\n 4. [MySQL](https://medium.com/javarevisited/top-5-courses-to-learn-mysql-in-2020-4ffada70656f)/MariaDB Database\n\n 5. A good browser (Chrome — recommended)\n\nThis tutorial is part of our series on [Back-end Development with Java](https://nilmadhab.medium.com/). We will extend the code which we developed in the previous tutorials in this series. So, if you have any doubt regarding anything that we developed earlier, you can read about it in the corresponding tutorial in the series.\n\n## Project Structure\n\nIf you have not read the previous tutorials in the back-end series, don’t worry. This section is specifically for you. As we will use the project structure that we created in the previous tutorials, we intend to describe the structure here before we begin working on the Wishlist feature. This will help you in understanding the code in a better way.\n\nFollowing is the project structure:\n\n![](https://cdn-images-1.medium.com/max/2000/1*OJRN72-B8dT2q-KhXyp_xw.png)\n\nProject Structure of the API\n\nWe will now describe the following directories:-\n\n 1. controller — contains the controllers for various API endpoints\n\n 2. dto — contains the [Data Transfer Objects](https://javarevisited.blogspot.com/2013/01/data-access-object-dao-design-pattern-java-tutorial-example.html#axzz5b2noKDk3) (DTO) for our back-end. In client-server projects, data is often structured differently. There are some details in the database that we do not want to send as a response to the API calls. So, the server stores its information in a database-friendly way. While retrieving that information from the [database](https://medium.com/hackernoon/top-5-sql-and-database-courses-to-learn-online-48424533ac61), it can use DTOs to filter this information and then send it to the client. Don’t worry if you could not understand DTOs. You will understand it when we implement Cart DTO in this tutorial.\n\n 3. model — contains the data models (and entities)\n\n 4. repository — contains the methods for CRUD operations in corresponding tables of the database\n\n 5. service — contains the class files with @service annotations. These class files are used to write business logic in a different layer, separated from @RestController class files. [Business logic](http://en.wikipedia.org/wiki/Business_logic) or domain logic is that part of the program which **encodes the real-world business rules** that determine how data can be created, stored, and changed inside the database.\n\n 6. exceptions — contains the class files used for throwing exceptions.When we use exceptions, our code becomes much cleaner and more readable.\n\n## API Design\n\nBefore we begin to code, we must spend some time thinking about the API design and the [database design](https://medium.com/javarevisited/5-best-books-to-learn-sql-and-database-design-for-programmers-and-developers-1e7839df2f3e). Let’s begin with the API design.\n\nCurrently, we need these API endpoints:-\n\n 1. Adding to cart (POST)\n\n 2. Getting the whole cart (GET)\n\n 3. Update quantity in the cart (PUT)\n\n 4. Delete item from the cart (DELETE)\n\n![](https://cdn-images-1.medium.com/max/2154/1*U7NA5E-IJmiVC_D_1kP3YQ.png)\n\n 1. **Adding to cart(POST)**\n\nAlso, in the body of the [POST method](https://javarevisited.blogspot.com/2012/03/get-post-method-in-http-and-https.html), we will have to send the id of the product and the quantity so that the given product can be added to the corresponding user’s cart. Hence, the body of the POST request should look like the following\n\n![Post body (if productId is 3 and quantity is 2)](https://cdn-images-1.medium.com/max/2000/1*S9jxjsAZ3oVyLV7Uf7Fxog.png)\n\n2. **Getting the whole cart (GET)**\n\nNow, to get all the items in the cart for a particular user, we need to have a GET request. In return, we will get all the product details, quantity and the total cost of items in the cart. The cartItems is the array of all products present in the cart and the totalCost represents the overall cost of all the items in the cart.\n\n![](https://cdn-images-1.medium.com/max/2800/1*9DJ0eG0cgAjM6hGXW1WkMg.png)\n\n3. **Update the quantity in the cart (PUT)**\n\nTo update a particular product in the cart, we need the cart_item_id , quantity and user_token .\n\n4. **Delete item from the cart (DELETE)**\n\nTo delete a particular product from the cart, we need the cart_item_id . We can delete that item by its id.\n\n## Table Design\n\nNow, let’s discuss the table design. We had already created the ecommerce database in previous tutorials. In this database, we will create a new table called cart. We will keep the design simple.\n\nThe database should have these columns —\n\n* id is the primary key and will be auto-generated\n\n* user_id — stores userId\n\n* product_id — stores the product id\n\n* quantity — stores the quantity\n\n* created_date — stores the data & time at which the entry was created\n\n## Let’s Code\n\nWe will now begin to write code.\n\n## Model\n\nLet’s begin with writing the code for the Model class of each entry in the cart table. If you are familiar with [Spring Boot](https://medium.com/javarevisited/10-free-spring-boot-tutorials-and-courses-for-java-developers-53dfe084587e?source=collection_home---4------7-----------------------) or any other MVC framework, you would know that Model class is used to store each entry of the table. In [Spring Boot](https://medium.com/hackernoon/top-5-spring-boot-and-spring-cloud-books-for-java-developers-75df155dcedc), we use Annotations to map the columns of the table with the class members.\n\nTo create the model class, create a new class inside the Cart directory. We will call this class — Cart.\n\n* We have already described the schema of the table. Using the schema, we will create the class variables of the model class representing each column of the database.\n\n* We will also create one class object of Product class. This object will store all the details of the product like name, price, description etc.\n\n* Also, note that the column created_date should be filled with the current date and time. For this, we will use the java.util.Date class.\n\nFollowing is the complete code of Cart.java\n{% gist https://gist.github.com/sksaikia/be34d5ab29217259c0d5149622e6fec7.js %}\nFor performing this GET operation, we create another model class named to return the cart items along with the total cost of the cart. The CartCost class contains a list of CartDto and a variable totalCost .This is used to get all cart items.\n\nThe CartCost.java is given below —\n{% gist https://gist.github.com/sksaikia/b6f4a4e31b72ab44b8fb50067f8facad.js %}\n## **DTO**\n\nBy definition, DTO or Data Transfer Objects is an object that carries data between processes. DTO lets us hide our entity from a client who is using that API and code maintenance becomes easier if we want to change our internal database structure. We only expose that part of the entity which the user should be able to edit.\n\nWe will use the CartDto for showing cart data. We will also create AddToCartDto so that we can add/update products into the cart because we only need userId,cartItemId,productId,quantity for these 2 processes.\n\nThe CartDto.java class is given below —\n{% gist https://gist.github.com/sksaikia/6c4e5c68b7aec8680a056ab625300833.js %}\nThe AddToCartDto is given below.\n{% gist https://gist.github.com/sksaikia/4e7a39cee4766e883f7b590266f99c2e.js %}\n## Repository\n\nIt is time to create the repository interface for the Cart table.Create a new file called CartRepository.java inside the Repository directory.\n\nIf you are familiar with [Spring Boot](https://medium.com/javarevisited/10-best-java-microservices-courses-with-spring-boot-and-spring-cloud-6d04556bdfed), you would know that Repository the interface contains methods to fetch data from the table.\n\nCreating CRUD methods manually means writing a lot of boilerplate code unless you let the JPARepository interface carry about routine implementations for you. So, we will extend the JPARepository and create the interface CartRepository.\n\n* Extending JPARepository will automatically create and implement methods for the basic CRUD operations.\n\n* We will define a method findAllByUserIdOrderByCreatedDateDesc() to fetch the cart of a user and order the list by created the date of each entry in the cart. The implementation of this method will be managed automatically by the JPARepository .\n\nFollowing is the complete code of CartRepository.java\n{% gist https://gist.github.com/sksaikia/deba4bd25b4ca0cd75fa37bb0ba83079.js %}\n## **Exceptions**\n\nBefore dealing with the Service and Controller, we will talk about Exceptions. If we find wrong token or wrong product id , we can throw exceptions. Here we will create AuthenticationFailException , CartItemNotExistException , ProductNotExistException . The code is simple for the exception. I am listing the code for AuthenticationFailException , other exception classes are the same.\n{% gist https://gist.github.com/sksaikia/b6e6f6507c1fe1ac9ce9404cc6d9ee17.js %}\n## **Service**\n\nNow, let’s implement the Service class to interact with the carttable. In the CartRepository interface, we defined the methods to interact with the database.\n\nIn the Service class, we will call these methods and implement the so-called business logic. We will create methods for add, get, update and delete to the cart. Inside these methods, we will call the methods defined in the CartRepositoryinterface.\n\nFollowing is the complete code of CartService.java\n{% gist https://gist.github.com/sksaikia/3ee374594dcf8b2a6b70c05a968e3791.js %}\nIn the listCartItems , we calculate the total cost of all the items in the cart and store it in a variable. We return the response as CartCost such that it contains the list of products in the cart and it’s total cost.\n\n## Controller\n\nNow, Let’s begin with writing code for the controller. If you are familiar with [Spring Boot](https://www.java67.com/2017/11/top-5-free-core-spring-mvc-courses-learn-online.html) or any other [MVC framework](https://medium.com/javarevisited/21-spring-mvc-rest-interview-questions-answers-for-beginners-and-experienced-developers-21ad3d4c9b82), you would already know that controller defines the endpoints of the API.\n\nCreate a new file inside the Controller directory with the name CartController.java . Since we have 4 endpoints, we will create four methods in the CartController class.\n\n* To use the Cartservice and AuthenticationService , we will create the two objects of respective types. We have already created the Cartservicein the previous section and is used to interact with the database. We created AuthenticationService in a previous tutorial and is used to fetch the user id of the corresponding token. We will also check whether the token is correct or not.\n\nThe following is the complete code of CartController.java\n{% gist https://gist.github.com/sksaikia/41518622c1edafb6e3999b0df80ae644.js %}\nAlso, remember to add this code section to the ProductService , if not it will throw an error.\n{% gist https://gist.github.com/sksaikia/b15a68bff282289a8d77aabc5848a29b.js %}\n## Congratulations!!!\n\nCongratulations, we have now added the cart feature to our backend.\n\nIn our next tutorial, we will implement the Vue.js frontend and integrate it with our backend.\n\nGet our code from this repository.\n{% github webtutsplus/ecommerce-backend %}\n	{"boosted_additional_tags": "", "boosted_dev_digest_email": false, "boosted_additional_articles": false}	\N	ecommerce, backend	--- !ruby/struct:Articles::CachedEntity\nname: nilmadhab mondal\nusername: nilmadhab\nslug: nilmadhab\nprofile_image_90: "/uploads/user/profile_image/1/d9b0e3b7-ad59-45d5-b516-4e8ffd0a6958.jpeg"\nprofile_image_url: "/uploads/user/profile_image/1/d9b0e3b7-ad59-45d5-b516-4e8ffd0a6958.jpeg"\n	nilmadhab mondal	nilmadhab	\N	{}	\N	0	\N	0	2021-02-25 06:15:20.396505	\N	Every e-Commerce site has a Shopping Cartfeature, today we will learn how to make the backend APIs us...	\N	t	5	5	\N	f	1614233720	\N	354873	en	\N	2021-02-25 06:15:20.384645	\N	/i/j5ls4ygqjxfw8fyxxt51.jpeg	#dddddd	32	0	0	0	\N	\N	2	12074967dda5c836520aca31c907387b893d6c57f02842c70217539aa904963e556ebc59af5936f02d0b7d7741d6c50baad93bad45d7425c873ebb81	/nilmadhab/let-s-develop-shopping-cart-for-ecommerce-app-op9	0	0	0	<p>Every e-Commerce site has a <strong>Shopping Cart</strong>feature, today we will learn how to make the backend APIs using Java and Spring Boot</p>\n\n<p><a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--NyFMImbq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3840/1%2ARBpW8CIMl7R8q9xbOSjvtg.jpeg" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--NyFMImbq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3840/1%2ARBpW8CIMl7R8q9xbOSjvtg.jpeg" alt="Photo by [Charles Deluvio](https://unsplash.com/@charlesdeluvio?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText) on [Unsplash](https://unsplash.com/s/photos/online-shopping?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText)" loading="lazy"></a></p>\n\n<p>Cart is a must-have feature for an e-commerce app that allows the users to save the items they want to buy, change the quantity, and remove them. It should also be able to show the total cost of items in the cart.</p>\n\n<p>We will first develop the back-end API using <a href="https://medium.com/javarevisited/10-books-java-developers-should-read-in-2020-e6222f25cc72">Java </a>&amp; <a href="https://medium.com/javarevisited/top-10-courses-to-learn-spring-boot-in-2020-best-of-lot-6ffce88a1b6e?source=---------39------------------">Spring Boot</a> (in this tutorial). After the API has been created, we will use that API in our Vue.Js front-end(in future tutorials).</p>\n\n<h2>\n  <a name="youtube-discussion" href="#youtube-discussion" class="anchor">\n  </a>\n  Youtube Discussion\n</h2>\n\n<p><iframe width="710" height="399" src="https://www.youtube.com/embed/RgWm5GB8fLo" allowfullscreen loading="lazy">\n</iframe>\n</p>\n\n<h2>\n  <a name="live-demo" href="#live-demo" class="anchor">\n  </a>\n  Live Demo\n</h2>\n\n<p>You can test the API at the following swagger link. You will find the cart API in cart-controllersection(Run the code in your local first)</p>\n\n<p><a href="http://localhost:8080/api/swagger-ui.html#/"><strong>Swagger API</strong></a></p>\n\n<p>You can find the complete code at <a href="https://github.com/webtutsplus/ecommerce-backend">Github</a>.</p>\n\n<h2>\n  <a name="prerequisites" href="#prerequisites" class="anchor">\n  </a>\n  Pre-requisites\n</h2>\n\n<ol>\n<li><p>Knowledge of Java, <a href="https://medium.com/javarevisited/my-favorite-courses-to-learn-object-oriented-programming-and-design-in-2019-197bab351733">OOP </a>&amp; Spring Boot Framework</p></li>\n<li><p>Java Development Kit (JDK)</p></li>\n<li><p><a href="https://www.jetbrains.com/idea/download/">IntelliJ IDEA Ultimate</a> — open-source (Recommended)</p></li>\n<li><p><a href="https://medium.com/javarevisited/top-5-courses-to-learn-mysql-in-2020-4ffada70656f">MySQL</a>/MariaDB Database</p></li>\n<li><p>A good browser (Chrome — recommended)</p></li>\n</ol>\n\n<p>This tutorial is part of our series on <a href="https://nilmadhab.medium.com/">Back-end Development with Java</a>. We will extend the code which we developed in the previous tutorials in this series. So, if you have any doubt regarding anything that we developed earlier, you can read about it in the corresponding tutorial in the series.</p>\n\n<h2>\n  <a name="project-structure" href="#project-structure" class="anchor">\n  </a>\n  Project Structure\n</h2>\n\n<p>If you have not read the previous tutorials in the back-end series, don’t worry. This section is specifically for you. As we will use the project structure that we created in the previous tutorials, we intend to describe the structure here before we begin working on the Wishlist feature. This will help you in understanding the code in a better way.</p>\n\n<p>Following is the project structure:</p>\n\n<p><a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--OreOqwXY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AOJRN72-B8dT2q-KhXyp_xw.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--OreOqwXY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AOJRN72-B8dT2q-KhXyp_xw.png" alt="" loading="lazy"></a></p>\n\n<p>Project Structure of the API</p>\n\n<p>We will now describe the following directories:-</p>\n\n<ol>\n<li><p>controller — contains the controllers for various API endpoints</p></li>\n<li><p>dto — contains the <a href="https://javarevisited.blogspot.com/2013/01/data-access-object-dao-design-pattern-java-tutorial-example.html#axzz5b2noKDk3">Data Transfer Objects</a> (DTO) for our back-end. In client-server projects, data is often structured differently. There are some details in the database that we do not want to send as a response to the API calls. So, the server stores its information in a database-friendly way. While retrieving that information from the <a href="https://medium.com/hackernoon/top-5-sql-and-database-courses-to-learn-online-48424533ac61">database</a>, it can use DTOs to filter this information and then send it to the client. Don’t worry if you could not understand DTOs. You will understand it when we implement Cart DTO in this tutorial.</p></li>\n<li><p>model — contains the data models (and entities)</p></li>\n<li><p>repository — contains the methods for CRUD operations in corresponding tables of the database</p></li>\n<li><p>service — contains the class files with @service annotations. These class files are used to write business logic in a different layer, separated from @RestController class files. <a href="http://en.wikipedia.org/wiki/Business_logic">Business logic</a> or domain logic is that part of the program which <strong>encodes the real-world business rules</strong> that determine how data can be created, stored, and changed inside the database.</p></li>\n<li><p>exceptions — contains the class files used for throwing exceptions.When we use exceptions, our code becomes much cleaner and more readable.</p></li>\n</ol>\n\n<h2>\n  <a name="api-design" href="#api-design" class="anchor">\n  </a>\n  API Design\n</h2>\n\n<p>Before we begin to code, we must spend some time thinking about the API design and the <a href="https://medium.com/javarevisited/5-best-books-to-learn-sql-and-database-design-for-programmers-and-developers-1e7839df2f3e">database design</a>. Let’s begin with the API design.</p>\n\n<p>Currently, we need these API endpoints:-</p>\n\n<ol>\n<li><p>Adding to cart (POST)</p></li>\n<li><p>Getting the whole cart (GET)</p></li>\n<li><p>Update quantity in the cart (PUT)</p></li>\n<li><p>Delete item from the cart (DELETE)</p></li>\n</ol>\n\n<p><a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--NY5JlPAH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2154/1%2AU7NA5E-IJmiVC_D_1kP3YQ.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--NY5JlPAH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2154/1%2AU7NA5E-IJmiVC_D_1kP3YQ.png" alt="" loading="lazy"></a></p>\n\n<ol>\n<li><strong>Adding to cart(POST)</strong></li>\n</ol>\n\n<p>Also, in the body of the <a href="https://javarevisited.blogspot.com/2012/03/get-post-method-in-http-and-https.html">POST method</a>, we will have to send the id of the product and the quantity so that the given product can be added to the corresponding user’s cart. Hence, the body of the POST request should look like the following</p>\n\n<p><a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--GpR7Lz6z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AS9jxjsAZ3oVyLV7Uf7Fxog.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--GpR7Lz6z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AS9jxjsAZ3oVyLV7Uf7Fxog.png" alt="Post body (if productId is 3 and quantity is 2)" loading="lazy"></a></p>\n\n<ol>\n<li><strong>Getting the whole cart (GET)</strong></li>\n</ol>\n\n<p>Now, to get all the items in the cart for a particular user, we need to have a GET request. In return, we will get all the product details, quantity and the total cost of items in the cart. The cartItems is the array of all products present in the cart and the totalCost represents the overall cost of all the items in the cart.</p>\n\n<p><a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--3wP_Df-y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2800/1%2A9DJ0eG0cgAjM6hGXW1WkMg.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--3wP_Df-y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2800/1%2A9DJ0eG0cgAjM6hGXW1WkMg.png" alt="" loading="lazy"></a></p>\n\n<ol>\n<li><strong>Update the quantity in the cart (PUT)</strong></li>\n</ol>\n\n<p>To update a particular product in the cart, we need the cart_item_id , quantity and user_token .</p>\n\n<ol>\n<li><strong>Delete item from the cart (DELETE)</strong></li>\n</ol>\n\n<p>To delete a particular product from the cart, we need the cart_item_id . We can delete that item by its id.</p>\n\n<h2>\n  <a name="table-design" href="#table-design" class="anchor">\n  </a>\n  Table Design\n</h2>\n\n<p>Now, let’s discuss the table design. We had already created the ecommerce database in previous tutorials. In this database, we will create a new table called cart. We will keep the design simple.</p>\n\n<p>The database should have these columns —</p>\n\n<ul>\n<li><p>id is the primary key and will be auto-generated</p></li>\n<li><p>user_id — stores userId</p></li>\n<li><p>product_id — stores the product id</p></li>\n<li><p>quantity — stores the quantity</p></li>\n<li><p>created_date — stores the data &amp; time at which the entry was created</p></li>\n</ul>\n\n<h2>\n  <a name="lets-code" href="#lets-code" class="anchor">\n  </a>\n  Let’s Code\n</h2>\n\n<p>We will now begin to write code.</p>\n\n<h2>\n  <a name="model" href="#model" class="anchor">\n  </a>\n  Model\n</h2>\n\n<p>Let’s begin with writing the code for the Model class of each entry in the cart table. If you are familiar with <a href="https://medium.com/javarevisited/10-free-spring-boot-tutorials-and-courses-for-java-developers-53dfe084587e?source=collection_home---4------7-----------------------">Spring Boot</a> or any other MVC framework, you would know that Model class is used to store each entry of the table. In <a href="https://medium.com/hackernoon/top-5-spring-boot-and-spring-cloud-books-for-java-developers-75df155dcedc">Spring Boot</a>, we use Annotations to map the columns of the table with the class members.</p>\n\n<p>To create the model class, create a new class inside the Cart directory. We will call this class — Cart.</p>\n\n<ul>\n<li><p>We have already described the schema of the table. Using the schema, we will create the class variables of the model class representing each column of the database.</p></li>\n<li><p>We will also create one class object of Product class. This object will store all the details of the product like name, price, description etc.</p></li>\n<li><p>Also, note that the column created_date should be filled with the current date and time. For this, we will use the java.util.Date class.</p></li>\n</ul>\n\n<p>Following is the complete code of Cart.java<br>\n</p>\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/sksaikia/be34d5ab29217259c0d5149622e6fec7.js"></script>\n</div>\n<br>\nFor performing this GET operation, we create another model class named to return the cart items along with the total cost of the cart. The CartCost class contains a list of CartDto and a variable totalCost .This is used to get all cart items.\n\n<p>The CartCost.java is given below —<br>\n</p>\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/sksaikia/b6f4a4e31b72ab44b8fb50067f8facad.js"></script>\n</div>\n\n\n<h2>\n  <a name="dto" href="#dto" class="anchor">\n  </a>\n  <strong>DTO</strong>\n</h2>\n\n<p>By definition, DTO or Data Transfer Objects is an object that carries data between processes. DTO lets us hide our entity from a client who is using that API and code maintenance becomes easier if we want to change our internal database structure. We only expose that part of the entity which the user should be able to edit.</p>\n\n<p>We will use the CartDto for showing cart data. We will also create AddToCartDto so that we can add/update products into the cart because we only need userId,cartItemId,productId,quantity for these 2 processes.</p>\n\n<p>The CartDto.java class is given below —<br>\n</p>\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/sksaikia/6c4e5c68b7aec8680a056ab625300833.js"></script>\n</div>\n<br>\nThe AddToCartDto is given below.<br>\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/sksaikia/4e7a39cee4766e883f7b590266f99c2e.js"></script>\n</div>\n\n\n<h2>\n  <a name="repository" href="#repository" class="anchor">\n  </a>\n  Repository\n</h2>\n\n<p>It is time to create the repository interface for the Cart table.Create a new file called CartRepository.java inside the Repository directory.</p>\n\n<p>If you are familiar with <a href="https://medium.com/javarevisited/10-best-java-microservices-courses-with-spring-boot-and-spring-cloud-6d04556bdfed">Spring Boot</a>, you would know that Repository the interface contains methods to fetch data from the table.</p>\n\n<p>Creating CRUD methods manually means writing a lot of boilerplate code unless you let the JPARepository interface carry about routine implementations for you. So, we will extend the JPARepository and create the interface CartRepository.</p>\n\n<ul>\n<li><p>Extending JPARepository will automatically create and implement methods for the basic CRUD operations.</p></li>\n<li><p>We will define a method findAllByUserIdOrderByCreatedDateDesc() to fetch the cart of a user and order the list by created the date of each entry in the cart. The implementation of this method will be managed automatically by the JPARepository .</p></li>\n</ul>\n\n<p>Following is the complete code of CartRepository.java<br>\n</p>\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/sksaikia/deba4bd25b4ca0cd75fa37bb0ba83079.js"></script>\n</div>\n\n\n<h2>\n  <a name="exceptions" href="#exceptions" class="anchor">\n  </a>\n  <strong>Exceptions</strong>\n</h2>\n\n<p>Before dealing with the Service and Controller, we will talk about Exceptions. If we find wrong token or wrong product id , we can throw exceptions. Here we will create AuthenticationFailException , CartItemNotExistException , ProductNotExistException . The code is simple for the exception. I am listing the code for AuthenticationFailException , other exception classes are the same.<br>\n</p>\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/sksaikia/b6e6f6507c1fe1ac9ce9404cc6d9ee17.js"></script>\n</div>\n\n\n<h2>\n  <a name="service" href="#service" class="anchor">\n  </a>\n  <strong>Service</strong>\n</h2>\n\n<p>Now, let’s implement the Service class to interact with the carttable. In the CartRepository interface, we defined the methods to interact with the database.</p>\n\n<p>In the Service class, we will call these methods and implement the so-called business logic. We will create methods for add, get, update and delete to the cart. Inside these methods, we will call the methods defined in the CartRepositoryinterface.</p>\n\n<p>Following is the complete code of CartService.java<br>\n</p>\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/sksaikia/3ee374594dcf8b2a6b70c05a968e3791.js"></script>\n</div>\n<br>\nIn the listCartItems , we calculate the total cost of all the items in the cart and store it in a variable. We return the response as CartCost such that it contains the list of products in the cart and it’s total cost.\n<h2>\n  <a name="controller" href="#controller" class="anchor">\n  </a>\n  Controller\n</h2>\n\n<p>Now, Let’s begin with writing code for the controller. If you are familiar with <a href="https://www.java67.com/2017/11/top-5-free-core-spring-mvc-courses-learn-online.html">Spring Boot</a> or any other <a href="https://medium.com/javarevisited/21-spring-mvc-rest-interview-questions-answers-for-beginners-and-experienced-developers-21ad3d4c9b82">MVC framework</a>, you would already know that controller defines the endpoints of the API.</p>\n\n<p>Create a new file inside the Controller directory with the name CartController.java . Since we have 4 endpoints, we will create four methods in the CartController class.</p>\n\n<ul>\n<li>To use the Cartservice and AuthenticationService , we will create the two objects of respective types. We have already created the Cartservicein the previous section and is used to interact with the database. We created AuthenticationService in a previous tutorial and is used to fetch the user id of the corresponding token. We will also check whether the token is correct or not.</li>\n</ul>\n\n<p>The following is the complete code of CartController.java<br>\n</p>\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/sksaikia/41518622c1edafb6e3999b0df80ae644.js"></script>\n</div>\n<br>\nAlso, remember to add this code section to the ProductService , if not it will throw an error.<br>\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/sksaikia/b15a68bff282289a8d77aabc5848a29b.js"></script>\n</div>\n\n\n<h2>\n  <a name="congratulations" href="#congratulations" class="anchor">\n  </a>\n  Congratulations!!!\n</h2>\n\n<p>Congratulations, we have now added the cart feature to our backend.</p>\n\n<p>In our next tutorial, we will implement the Vue.js frontend and integrate it with our backend.</p>\n\n<p>Get our code from this repository.<br>\n</p>\n<div class="ltag-github-readme-tag">\n  <div class="readme-overview">\n    <h2>\n      <img src="/assets/github-logo.svg" alt="GitHub logo" loading="lazy">\n      <a href="https://github.com/webtutsplus">\n        webtutsplus\n      </a> / <a style="font-weight: 600;" href="https://github.com/webtutsplus/ecommerce-backend">\n        ecommerce-backend\n      </a>\n    </h2>\n    <h3>\n      \n    </h3>\n  </div>\n  <div class="ltag-github-body">\n    \n<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1>\necommerce</h1>\n<p>Ecommerce backend apis</p>\n<ul>\n<li>This is a Maven Project. Ensure, Maven is installed on your system.</li>\n<li>It is Recommended that you use Linux Based OS.</li>\n<li>It might happen that you have installed XAMPP/LAMPP software (by Bitnami) on your system. Instead of using the db provided by XAMPP/LAMPP by bitnami, it is recommended that you install <code>mariadb-server</code> and use it as  database while running this application.</li>\n</ul>\n<p>###How to run in local</p>\n<ol>\n<li>Change the Application Properties (E.g. username/password of DB) present in <code>resources/application.properties</code>  according to your local mysql-server.</li>\n<li>Create a database called <code>ecommerce</code> with <code>CHARACTER SET utf8mb4</code> and <code>COLLATE utf8mb4_0900_ai_ci</code>. MariaDB does not support <code>COLLATE utf8mb4_0900_ai_ci</code>. So, if you are using MariaDB, open <code>database-dump.sql</code> file and replace <code>COLLATE utf8mb4_0900_ai_ci</code> with <code>COLLATE utf8mb4_general_ci</code>\n</li>\n<li>Import <code>database-dump.sql</code> in it.</li>\n<li>To run the application, run the command <code>sh run.sh</code> i.e. execute the <code>run.sh</code> file.</li>\n<li>After starting application, go to <a href="http://localhost:8080/api/swagger-ui.html/" rel="nofollow">http://localhost:8080/api/swagger-ui.html/</a>\n</li>\n</ol>\n<h2>\nCategory/Update/{id}</h2>\n<ul>\n<li>The input for…</li>\n</ul></article></div>\n  </div>\n  <div class="gh-btn-container"><a class="gh-btn" href="https://github.com/webtutsplus/ecommerce-backend">View on GitHub</a></div>\n</div>\n\n\n	0	t	2021-02-25 06:15:20.384645	f	0	0	8	t	0	\N	\N	t	let-s-develop-shopping-cart-for-ecommerce-app-op9	\N	0	Let’s Develop Shopping Cart for eCommerce App	2021-02-25 06:15:20.396505	1	0	\N	\N	\N	0	\N	\N	\N
59	f	f	f	\N	\n\n\nIn this series, I am going to solve Leetcode medium problems live with my friend, which you can watch on our youtube channel, Today we will do Problem 71. **Simplify Path.**\n\nA little bit about me, I have offers from **Uber** **India** and **Amazon** **India** in the past, and I am currently working for **Booking.com** in Amsterdam.\n\n## Youtube Discussion\n{% youtube XZZL_nJ21VU %}\n\nPlease comment here or on youtube, if you have any doubts\n\n <iframe src="https://medium.com/media/28e7ed4c1fee85989bb981786adcbbb9" frameborder=0></iframe>\n\n## Problem statement:\n\nGiven an **absolute path** for a file (Unix-style), simplify it. Or in other words, convert it to the **canonical path**.\n\nIn a UNIX-style file system, a period '.' refers to the current directory. Furthermore, a double period '..' moves the directory up a level.\n\nNote that the returned canonical path must always begin with a slash '/', and there must be only a single slash '/' between two directory names. The last directory name (if it exists) **must not** end with a trailing '/'. Also, the canonical path must be the **shortest** string representing the absolute path.\n\n**Example 1:**\n\n    **Input:** path = "/home/"\n    **Output:** "/home"\n    **Explanation:** Note that there is no trailing slash after the last directory name.\n\n**Example 2:**\n\n    **Input:** path = "/../"\n    **Output:** "/"\n    **Explanation:** Going one level up from the root directory is a no-op, as the root level is the highest level you can go.\n\n**Example 3:**\n\n    **Input:** path = "/home//foo/"\n    **Output:** "/home/foo"\n    **Explanation: **In the canonical path, multiple consecutive slashes are replaced by a single one.\n\n**Example 4:**\n\n    **Input:** path = "/a/./b/../../c/"\n    **Output:** "/c"\n\n## Solution\n\nWe need to return the shortest string representing an absolute path. It should begin with ‘/’ and must not end trailing ‘/’ if a directory exists. We can visualize the problem with a stack. When we navigate through the file system, we keep the most recent directory at the top. If we want to return to the previous directory we top it from the stack. Thus we can get the previous directory.\n\nWe can apply the same logic with this problem. Here ‘.’ refers to the current directory and ‘..’ moves the directory up a level. So when we get a ‘.’ we just ignore it, and if encounter ‘..’ then, we pop one element from the stack. We repeat this until the whole string is processed.\n\nSo, as this is stored in a stack, our path will be reversed. So in order to get the correct output, we will concatenate the popped element from the stack with our current output.\n\nThe following code section is the complete solution to this problem.\n\n{% gist https://gist.github.com/sksaikia/8e65f880e7c27b58f70fcbba46e4d5af %}\n \n\nTime complexity: O(n), n is the length of the string\n\nSpace complexity: O(n), n is the length of the string\n\nThis problem can also be solved with a deque. The logic is the same while using the deque.\n\n{% gist https://gist.github.com/sksaikia/eea1b6e92af5ae31507777e057a90d75 %}\n\nTime complexity: O(n), n is the length of the string\n\nSpace complexity: O(n), n is the length of the string\n\nThe code for this problem can be found in this link.\n\n{% github webtutsplus/LeetCode %}\n\n	{"boosted_additional_tags": "", "boosted_dev_digest_email": false, "boosted_additional_articles": false}	\N	algorithms, leetcode	--- !ruby/struct:Articles::CachedEntity\nname: nilmadhab mondal\nusername: nilmadhab\nslug: nilmadhab\nprofile_image_90: "/uploads/user/profile_image/1/d9b0e3b7-ad59-45d5-b516-4e8ffd0a6958.jpeg"\nprofile_image_url: "/uploads/user/profile_image/1/d9b0e3b7-ad59-45d5-b516-4e8ffd0a6958.jpeg"\n	nilmadhab mondal	nilmadhab	\N	{}	\N	0	\N	0	2021-02-22 07:59:38.99071	\N	In this series, I am going to solve Leetcode medium problems live with my friend, which you can watch...	\N	t	5	5	\N	f	\N	\N	0	en	\N	2017-01-01 05:00:00	\N	/i/51f0rrpofpmza7y41adh.png	#dddddd	0	0	0	0	\N	\N	3	d2ba68e1dcc13a2784e99611592fd46c3eb1e50a573f1675ac5c3c5b8e4cb5662563e52aacf54b02361963a8f7f0d70bf73aa47955ff94a92b0e3d87	/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-simplify-path-5693-temp-slug-2235562	0	0	0	<p>In this series, I am going to solve Leetcode medium problems live with my friend, which you can watch on our youtube channel, Today we will do Problem 71. <strong>Simplify Path.</strong></p>\n\n<p>A little bit about me, I have offers from <strong>Uber</strong> <strong>India</strong> and <strong>Amazon</strong> <strong>India</strong> in the past, and I am currently working for <strong>Booking.com</strong> in Amsterdam.</p>\n\n<h2>\n  <a name="youtube-discussion" href="#youtube-discussion" class="anchor">\n  </a>\n  Youtube Discussion\n</h2>\n\n<p><iframe width="710" height="399" src="https://www.youtube.com/embed/XZZL_nJ21VU" allowfullscreen loading="lazy">\n</iframe>\n</p>\n\n<p>Please comment here or on youtube, if you have any doubts</p>\n\n\n\n<h2>\n  <a name="problem-statement" href="#problem-statement" class="anchor">\n  </a>\n  Problem statement:\n</h2>\n\n<p>Given an <strong>absolute path</strong> for a file (Unix-style), simplify it. Or in other words, convert it to the <strong>canonical path</strong>.</p>\n\n<p>In a UNIX-style file system, a period '.' refers to the current directory. Furthermore, a double period '..' moves the directory up a level.</p>\n\n<p>Note that the returned canonical path must always begin with a slash '/', and there must be only a single slash '/' between two directory names. The last directory name (if it exists) <strong>must not</strong> end with a trailing '/'. Also, the canonical path must be the <strong>shortest</strong> string representing the absolute path.</p>\n\n<p><strong>Example 1:</strong></p>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>**Input:** path = "/home/"\n**Output:** "/home"\n**Explanation:** Note that there is no trailing slash after the last directory name.\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n<p><strong>Example 2:</strong></p>\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>**Input:** path = "/../"\n**Output:** "/"\n**Explanation:** Going one level up from the root directory is a no-op, as the root level is the highest level you can go.\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n<p><strong>Example 3:</strong></p>\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>**Input:** path = "/home//foo/"\n**Output:** "/home/foo"\n**Explanation: **In the canonical path, multiple consecutive slashes are replaced by a single one.\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n<p><strong>Example 4:</strong></p>\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>**Input:** path = "/a/./b/../../c/"\n**Output:** "/c"\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n<h2>\n  <a name="solution" href="#solution" class="anchor">\n  </a>\n  Solution\n</h2>\n\n<p>We need to return the shortest string representing an absolute path. It should begin with ‘/’ and must not end trailing ‘/’ if a directory exists. We can visualize the problem with a stack. When we navigate through the file system, we keep the most recent directory at the top. If we want to return to the previous directory we top it from the stack. Thus we can get the previous directory.</p>\n\n<p>We can apply the same logic with this problem. Here ‘.’ refers to the current directory and ‘..’ moves the directory up a level. So when we get a ‘.’ we just ignore it, and if encounter ‘..’ then, we pop one element from the stack. We repeat this until the whole string is processed.</p>\n\n<p>So, as this is stored in a stack, our path will be reversed. So in order to get the correct output, we will concatenate the popped element from the stack with our current output.</p>\n\n<p>The following code section is the complete solution to this problem.</p>\n\n\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/sksaikia/8e65f880e7c27b58f70fcbba46e4d5af.js"></script>\n</div>\n\n\n\n<p>Time complexity: O(n), n is the length of the string</p>\n\n<p>Space complexity: O(n), n is the length of the string</p>\n\n<p>This problem can also be solved with a deque. The logic is the same while using the deque.</p>\n\n\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/sksaikia/eea1b6e92af5ae31507777e057a90d75.js"></script>\n</div>\n\n\n<p>Time complexity: O(n), n is the length of the string</p>\n\n<p>Space complexity: O(n), n is the length of the string</p>\n\n<p>The code for this problem can be found in this link.</p>\n\n\n<div class="ltag-github-readme-tag">\n  <div class="readme-overview">\n    <h2>\n      <img src="/assets/github-logo.svg" alt="GitHub logo" loading="lazy">\n      <a href="https://github.com/webtutsplus">\n        webtutsplus\n      </a> / <a style="font-weight: 600;" href="https://github.com/webtutsplus/LeetCode">\n        LeetCode\n      </a>\n    </h2>\n    <h3>\n      \n    </h3>\n  </div>\n</div>\n\n\n	0	f	\N	f	0	0	2	t	0	\N	\N	t	solve-leetcode-problems-and-get-offers-from-your-dream-companies-simplify-path-5693-temp-slug-2235562	\N	0	Solve LeetCode Problems and Get Offers From Your Dream Companies || Simplify Path	2021-02-22 08:04:00.504775	1	0	\N	\N	\N	0	\N	\N	\N
49	f	f	f	\N	**LeetCode 395 | Longest Substring with At Least K Repeating Characters (Medium)**\n\n![Alt Text](/i/2yfoynnf3f03expuing7.png)\n\n## Problem Statement\n\nGiven a string s and an integer k, return the length of the longest substring of s such that the frequency of each character in this substring is greater than or equal to k.\nSample Input\n\n**Example 1:**\n\nInput: s = "aaabb", k = 3\n`Output: 3\nExplanation: The longest substring is "aaa", as 'a' is repeated 3 times.`\n\n**Example 2:**\n\n`Input: s = "ababbc", k = 2\nOutput: 5\nExplanation: The longest substring is "ababb", as 'a' is repeated 2 times and 'b' is repeated 3 times.`\n\n**Constraints**\n\n* `1 <= s.length <= 10^4`\n* `s` consists of only lowercase English letters.\n* `1 <= k <= 10^5`\n\nThe problem can be found [here.](https://leetcode.com/problems/longest-substring-with-at-least-k-repeating-characters/)\n\n## Problem Discussion\n\nAlso, take a look at our approach and explanation of this problem on our YouTube [channel.](https://www.youtube.com/channel/UCi79v08O09FKX-6i6qJ4F8g)\n\n{% youtube LUB8UiTCPaw %}\n\n## Let’s get Started\n\nBefore discussing the solution, let us think of the possible time complexities which are within the time limit. The input string is almost 10⁴ characters long. The naive approach includes checking every substring to be an improvement for our answer. In this tutorial, we will be discussing this approach and implement it in `O(n²)` time complexity.\n\n**How many substrings?**\n\nA string of length `n` has a total of `n*(n+1)/2` substrings.\n\n`Let the string be "abcd", then its substrings are\n["a", "ab", "abc", "abcd", "b", "bc", "bcd", "c", "cd", "d"]\nTotal = 10`\n\nThe formula can be remembered as starting with index `0` we have `n` substrings, with index 1 we have `(n-1)` substrings, with index `2` we have `(n-2)` substrings and so on ending with index `(n-1)` we have only `1` substring.\n\nThis relates to the sum of the first `n` natural numbers.\n\nOkay!! Let us get back to our solution.\n\n## Solution\n\nSuppose we have a string given to us, how will we check whether this string satisfies the condition mentioned in the problem or not? For this, we will use an array of `26` integer elements. In our array, the index `0` will store the count of character `a` , the index` 1` will store the count of character `b` and so on up to index 25 which will store the count of character `z`. Take a look at constraints, it mentions that our input string consists of only lowercase English letters.\n\nAfter updating the array with actual counts, we only need to check whether all non zero values are at least `k` or not. If this is true, our string satisfies the condition, else it doesn't. Now this task can also be done using a hash map in same time complexity, but using an array is a better alternative in this situation. By the way, it can be considered that our array solution is also a simple hashing only. The key(index) `0` maps to the frequency of character `a`, key `1` maps to the frequency of character `b` and so on. Creating this array for a string takes `O(n)` time, but once we have this array given to us we can check whether the string satisfies our condition in constant time. Because we just have to scan our array of `26` elements. So overall, for a string it takes `O(n)` time.\n\nBut we have `O(n²)` substrings with us. If we try to implement our solution in this way, its time complexity will be `O(n³)`, which will result in Time Limit Exceeded verdict. But using a simple optimization we can achieve `O(n²)` time complexity.\n\n**Let's think of some optimization**\n\nSuppose for a given string `s`, we have the frequency array(discussed earlier) for the substring `s[i…j]`. Using this array we can check whether the substring `s[i…j]` satisfies our condition or not. But can we reuse thi\ns array in someplace again? Yes, we can. We can expand the correctness of this frequency array for the substring `s[i…j+1]` in constant time. Then checking for substring `s[i…j+1]` requires no need to build the array again. We just have to check the updated array.\n\nUsing this optimization, we have removed the need for creating that array again and again for each substring. This reduces the time complexity of our solution to `O(n²)`.\n\n## Code in Java\n{% gist https://gist.github.com/ChitreshApte/0492b8b6e5faeb1483437a4bee1c86e2.js %}\n\n## Code in C++\n{% gist https://gist.github.com/ChitreshApte/230958947eff23c87f64860467a32550.js %}\n\n## Time and Space Complexity\n\nAs discussed earlier, the time complexity of our solution is `O(n²)`, where `n` is the size of our input string.\n\nThe space complexity of our solution is `O(1)`. Apart from the function argument(input) and our answer variable, we are only using some constant space that is independent of our input size. The array which we used for storing character frequency is also of constant size.\n\n## Practice makes you Perfect\n\nThink of solving this problem in `O(n)` time using the sliding window approach. It is achievable!\n\n**Thank You for reading and Follow this publication for more LeetCode problems!😃**\n\n## [LeetCode Simplified](https://medium.com/leetcode-simplified)	{"boosted_additional_tags": "", "boosted_dev_digest_email": false, "boosted_additional_articles": false}	\N	algorithms, leetcode	--- !ruby/struct:Articles::CachedEntity\nname: nilmadhab mondal\nusername: nilmadhab\nslug: nilmadhab\nprofile_image_90: "/uploads/user/profile_image/1/d9b0e3b7-ad59-45d5-b516-4e8ffd0a6958.jpeg"\nprofile_image_url: "/uploads/user/profile_image/1/d9b0e3b7-ad59-45d5-b516-4e8ffd0a6958.jpeg"\n	nilmadhab mondal	nilmadhab	\N	{}	\N	0	\N	0	2021-02-20 13:04:12.507468	\N	LeetCode 395 | Longest Substring with At Least K Repeating Characters (Medium)             Problem St...	2021-02-20 13:09:32.90266	t	5	5	\N	f	1613826252	\N	354341	en	\N	2021-02-20 13:04:12.495317	\N	/i/h556zn64l5x9xr92lefk.png	#dddddd	19	0	0	0	\N	\N	3	2585b4ebdce6d24f11c11be92383f67ed37d9ac9ffe0cd8b773b091200558fb55448cc9bb21af4cb91b85dfd9aea59b7c2c591b321fc49b1921a2178	/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-longest-substring-with-at-least-k-repeating-characters-451f	0	0	0	<p><strong>LeetCode 395 | Longest Substring with At Least K Repeating Characters (Medium)</strong></p>\n\n<p><a href="/i/2yfoynnf3f03expuing7.png" class="article-body-image-wrapper"><img src="/i/2yfoynnf3f03expuing7.png" alt="Alt Text" loading="lazy"></a></p>\n\n<h2>\n  <a name="problem-statement" href="#problem-statement" class="anchor">\n  </a>\n  Problem Statement\n</h2>\n\n<p>Given a string s and an integer k, return the length of the longest substring of s such that the frequency of each character in this substring is greater than or equal to k.<br>\nSample Input</p>\n\n<p><strong>Example 1:</strong></p>\n\n<p>Input: s = "aaabb", k = 3<br>\n<code>Output: 3<br>\nExplanation: The longest substring is "aaa", as 'a' is repeated 3 times.</code></p>\n\n<p><strong>Example 2:</strong></p>\n\n<p><code>Input: s = "ababbc", k = 2<br>\nOutput: 5<br>\nExplanation: The longest substring is "ababb", as 'a' is repeated 2 times and 'b' is repeated 3 times.</code></p>\n\n<p><strong>Constraints</strong></p>\n\n<ul>\n<li><code>1 &lt;= s.length &lt;= 10^4</code></li>\n<li>\n<code>s</code> consists of only lowercase English letters.</li>\n<li><code>1 &lt;= k &lt;= 10^5</code></li>\n</ul>\n\n<p>The problem can be found <a href="https://leetcode.com/problems/longest-substring-with-at-least-k-repeating-characters/">here.</a></p>\n<h2>\n  <a name="problem-discussion" href="#problem-discussion" class="anchor">\n  </a>\n  Problem Discussion\n</h2>\n\n<p>Also, take a look at our approach and explanation of this problem on our YouTube <a href="https://www.youtube.com/channel/UCi79v08O09FKX-6i6qJ4F8g">channel.</a></p>\n\n<p><iframe width="710" height="399" src="https://www.youtube.com/embed/LUB8UiTCPaw" allowfullscreen loading="lazy">\n</iframe>\n</p>\n\n<h2>\n  <a name="lets-get-started" href="#lets-get-started" class="anchor">\n  </a>\n  Let’s get Started\n</h2>\n\n<p>Before discussing the solution, let us think of the possible time complexities which are within the time limit. The input string is almost 10⁴ characters long. The naive approach includes checking every substring to be an improvement for our answer. In this tutorial, we will be discussing this approach and implement it in <code>O(n²)</code> time complexity.</p>\n\n<p><strong>How many substrings?</strong></p>\n\n<p>A string of length <code>n</code> has a total of <code>n*(n+1)/2</code> substrings.</p>\n\n<p><code>Let the string be "abcd", then its substrings are<br>\n["a", "ab", "abc", "abcd", "b", "bc", "bcd", "c", "cd", "d"]<br>\nTotal = 10</code></p>\n\n<p>The formula can be remembered as starting with index <code>0</code> we have <code>n</code> substrings, with index 1 we have <code>(n-1)</code> substrings, with index <code>2</code> we have <code>(n-2)</code> substrings and so on ending with index <code>(n-1)</code> we have only <code>1</code> substring.</p>\n\n<p>This relates to the sum of the first <code>n</code> natural numbers.</p>\n\n<p>Okay!! Let us get back to our solution.</p>\n<h2>\n  <a name="solution" href="#solution" class="anchor">\n  </a>\n  Solution\n</h2>\n\n<p>Suppose we have a string given to us, how will we check whether this string satisfies the condition mentioned in the problem or not? For this, we will use an array of <code>26</code> integer elements. In our array, the index <code>0</code> will store the count of character <code>a</code> , the index<code>1</code> will store the count of character <code>b</code> and so on up to index 25 which will store the count of character <code>z</code>. Take a look at constraints, it mentions that our input string consists of only lowercase English letters.</p>\n\n<p>After updating the array with actual counts, we only need to check whether all non zero values are at least <code>k</code> or not. If this is true, our string satisfies the condition, else it doesn't. Now this task can also be done using a hash map in same time complexity, but using an array is a better alternative in this situation. By the way, it can be considered that our array solution is also a simple hashing only. The key(index) <code>0</code> maps to the frequency of character <code>a</code>, key <code>1</code> maps to the frequency of character <code>b</code> and so on. Creating this array for a string takes <code>O(n)</code> time, but once we have this array given to us we can check whether the string satisfies our condition in constant time. Because we just have to scan our array of <code>26</code> elements. So overall, for a string it takes <code>O(n)</code> time.</p>\n\n<p>But we have <code>O(n²)</code> substrings with us. If we try to implement our solution in this way, its time complexity will be <code>O(n³)</code>, which will result in Time Limit Exceeded verdict. But using a simple optimization we can achieve <code>O(n²)</code> time complexity.</p>\n\n<p><strong>Let's think of some optimization</strong></p>\n\n<p>Suppose for a given string <code>s</code>, we have the frequency array(discussed earlier) for the substring <code>s[i…j]</code>. Using this array we can check whether the substring <code>s[i…j]</code> satisfies our condition or not. But can we reuse thi<br>\ns array in someplace again? Yes, we can. We can expand the correctness of this frequency array for the substring <code>s[i…j+1]</code> in constant time. Then checking for substring <code>s[i…j+1]</code> requires no need to build the array again. We just have to check the updated array.</p>\n\n<p>Using this optimization, we have removed the need for creating that array again and again for each substring. This reduces the time complexity of our solution to <code>O(n²)</code>.</p>\n<h2>\n  <a name="code-in-java" href="#code-in-java" class="anchor">\n  </a>\n  Code in Java\n</h2>\n\n\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/ChitreshApte/0492b8b6e5faeb1483437a4bee1c86e2.js"></script>\n</div>\n\n\n<h2>\n  <a name="code-in-c" href="#code-in-c" class="anchor">\n  </a>\n  Code in C++\n</h2>\n\n\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/ChitreshApte/230958947eff23c87f64860467a32550.js"></script>\n</div>\n\n\n<h2>\n  <a name="time-and-space-complexity" href="#time-and-space-complexity" class="anchor">\n  </a>\n  Time and Space Complexity\n</h2>\n\n<p>As discussed earlier, the time complexity of our solution is <code>O(n²)</code>, where <code>n</code> is the size of our input string.</p>\n\n<p>The space complexity of our solution is <code>O(1)</code>. Apart from the function argument(input) and our answer variable, we are only using some constant space that is independent of our input size. The array which we used for storing character frequency is also of constant size.</p>\n\n<h2>\n  <a name="practice-makes-you-perfect" href="#practice-makes-you-perfect" class="anchor">\n  </a>\n  Practice makes you Perfect\n</h2>\n\n<p>Think of solving this problem in <code>O(n)</code> time using the sliding window approach. It is achievable!</p>\n\n<p><strong>Thank You for reading and Follow this publication for more LeetCode problems!😃</strong></p>\n\n<h2>\n  <a name="leetcode-simplified" href="#leetcode-simplified" class="anchor">\n  </a>\n  <a href="https://medium.com/leetcode-simplified">LeetCode Simplified</a>\n</h2>\n\n	0	t	2021-02-20 13:04:12.495317	f	0	0	4	t	0	\N	\N	t	solve-leetcode-problems-and-get-offers-from-your-dream-companies-longest-substring-with-at-least-k-repeating-characters-451f	\N	25	Solve Leetcode Problems and Get Offers From Your Dream Companies | Longest Substring with At Least K Repeating Characters	2021-02-20 13:09:33.083366	1	0	\N	\N	\N	0	\N	\N	\N
52	f	f	f	\N	In this tutorial, we are going to create an API and mobile app to show colleges on google map.\n\n![](https://cdn-images-1.medium.com/max/12032/0*W8gP5fXQ_OtFBU_G)\n<figcaption>Photo by henry perks on Unsplash (Not a visual of the App that we will build in this tutorial)</figcaption>\n\n## What we will do\n\nIn this tutorial, we will learn to develop a backend API and Android App that displays colleges of India on a Map (using Google Maps SDK for Android) just like AirBnB displays locations of hotels/homes on the world map.\n\nIf you have not used Airbnb before, just see the following video which shows the working of our app. You can also **download the app** from the play store that we will create in this tutorial series by clicking on the link [here](https://play.google.com/store/apps/details?id=com.webtutsplus.collegefinder)\n{% youtube 14ZDc_SI4oE %}\n<figcaption>College finder app demo</figcaption>\n\nWe will learn how to place markers on the map using Latitude and Longitude Coordinates.\n\nIn this series, each Part is divided into Tasks and each Task is divided into Steps. This will help you to understand what we are doing and how we are doing it at each step.\n\n## Database Design\n\nWe have collected information on some colleges, from various websites. We can use web scraping to get these pieces of information. Please refer to this tutorial to learn more about web scraping.\n{% medium https://medium.com/swlh/lets-parse-the-web-a7f5300b244f %}\n\n## Table Design\n{% gist https://gist.github.com/nilmadhab1995/13cdef754658fe9ed3ce55bf3ce924ee.js %}\n\nBut we need lat and long for the colleges, for which we will use Google geolocation API.\n\nWe will use this Geocode API from Google\n\n[https://maps.googleapis.com/maps/api/geocode/json?address={address}&key=](https://maps.googleapis.com/maps/api/geocode/json?address=Indian+School+of+Business+Management+Administration+(ISBM),+bangalore&key=AIzaSyBx6Z-A8Ne9pMc57p3LcVnWuoE5yRVz5Og){API_KEY}\n\nIf we pass the address as college name + city we will get this response. From there we will extract lat, long and update the database.\n\n![](https://cdn-images-1.medium.com/max/2462/1*93-4KTD7bAaYQC6ba-D9JQ.png)\n\n## Final API\n\n {% gist https://gist.github.com/nilmadhab1995/4f59f63b5267fdec2e6a5312ceea1633.js %}\n\nNow, as our API is ready, We will start building the Android part.\n\n## Prerequisites\n\nThis tutorial assumes that you are familiar with [Android development](https://developer.android.com/) and Object-Oriented Programming concepts. More specifically, you should know how to create basic UIs using XML and[ perform network calls to API ](https://shivamag00.medium.com/simple-android-ui-for-the-front-end-part-of-web-applications-4d7a89d9efaa)using Android. Also, you should know what JSON format is and what API is.\n\n## You must install Android Studio 4.0 & above.\n\n## TASK 1 — CREATE A GOOGLE MAPS PROJECT IN ANDROID STUDIO\n\n**STEP 1: Install the Google Play services SDK.** \nOpen this [link](https://developer.android.com/studio/intro/update.html#sdk-manager) for more detailed information. To install the SDK\n\n 1. Go to `Tools` → `SDK Manager`.\n\n 2. Switch to the tab called `SDK Tools`\n\n 3. Tick mark `Google Play Services` and click on Apply. After Google Play Services SDK is downloaded and installed, click on OK.\n\n![](https://cdn-images-1.medium.com/max/2730/1*fR0q3q-4JNws_48AD1m9ZQ.png)\n\n**STEP 2: Create a Google Maps Project in Android Studio**\nFollow these steps to create a new app project including a map activity:\n\n 1. Start Android Studio.\n\n 2. Create a new project as follows: \n* If you see the `Welcome to Android Studio` dialog, choose `Start a new Android Studio project`, available under `‘Quick Start’` on the right of the dialog.\n* Otherwise, click `File` in the Android Studio menu bar, then `New`, **New Project.**\n\n 3. In the `Choose your project` dialog, select the tab `Phone and Tablet`.\n\n 4. Select `Google Maps Activity`, then click `Next.`\n\n 5. Enter your app name, package name, and project location, programming language as `Java`, and the minimum Android API level supported by your app, then click `Finish.`\n\n 6. Android Studio starts Gradle and builds your project. This may take a few seconds.\n\n 7. When the build is finished, Android Studio opens the `google_maps_api.xml` and the `MapsActivity.java` files in the editor. The next section describes getting the API key in more detail.\n\n**STEP 3: Set up a Google Maps API Key**\n\n 1. Enable [billing](https://console.cloud.google.com/project/_/billing/enable) on your project. For details, see [create a billing account](https://developers.google.com/maps/gmp-get-started#create-billing-account).\n\n 2. In the [Cloud Console](https://console.cloud.google.com/apis/library/maps-android-backend.googleapis.com), enable the **Maps SDK for Android **on your project. For details, see [enable APIs](https://developers.google.com/maps/gmp-get-started#enable-api-sdk).\n\n 3. Follow the [Get an API Key](https://developers.google.com/maps/documentation/android-sdk/get-api-key) guide to **get and add **an API key. It is **not necessary to restrict an API key **for this tutorial. We also **do NOT require SHA-1 fingerprint** information of our APP\n\n 4. Remember to add your key in `local.properties` file so that while uploading your code to a remote git repository, you do not end up uploading your key as well.\n\n![](https://cdn-images-1.medium.com/max/2000/1*NDbNUHIBlpYEg7h8gaOTnQ.png)\n\n**STEP 4: Examine the code provided by the template**\n\nExamine the code supplied by the template. In particular, look at the following files in your Android Studio project.\n\n 1. XML Layout File — `activity_maps.xml`\n\n* By default, the XML file that defines the app’s layout is at `res/layout/activity_maps.xml.` It contains the following code:\n\n    `<fragment xmlns:android="http://schemas.android.com/apk/res/android"\n        xmlns:tools="http://schemas.android.com/tools"\n        android:layout_width="match_parent"\n        android:layout_height="match_parent"\n        android:id="@+id/map"\n        tools:context=".MapsActivity"\n        android:name="com.google.android.gms.maps.SupportMapFragment" />`\n\n2. The Maps Activity File — `MapsActivity.java`\n\n* By default, the Java file that defines the maps activity is named `MapsActivity.java.` It should contain the following code after your package name:\n\n   ```\n// Copyright 2020 Google LLC\n    //\n    // Licensed under the Apache License, Version 2.0 (the "License");\n    // you may not use this file except in compliance with the License.\n    // You may obtain a copy of the License at\n    //\n    //      http://www.apache.org/licenses/LICENSE-2.0\n    //\n    // Unless required by applicable law or agreed to in writing, software\n    // distributed under the License is distributed on an "AS IS" BASIS,\n    // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    // See the License for the specific language governing permissions and\n    // limitations under the License.\n    \n    package com.google.maps.example;\n    \n    \n    import androidx.appcompat.app.AppCompatActivity;\n    \n    import android.os.Bundle;\n    \n    import com.google.android.gms.maps.CameraUpdateFactory;\n    import com.google.android.gms.maps.GoogleMap;\n    import com.google.android.gms.maps.OnMapReadyCallback;\n    import com.google.android.gms.maps.SupportMapFragment;\n    import com.google.android.gms.maps.model.LatLng;\n    import com.google.android.gms.maps.model.MarkerOptions;\n    \n    public class MapsActivity extends AppCompatActivity implements OnMapReadyCallback {\n    \n        private GoogleMap mMap;\n    \n        @Override\n        protected void onCreate(Bundle savedInstanceState) {\n            super.onCreate(savedInstanceState);\n            setContentView(R.layout.activity_maps);\n            // Obtain the SupportMapFragment and get notified when the map is ready to be used.\n            SupportMapFragment mapFragment = (SupportMapFragment) getSupportFragmentManager()\n                    .findFragmentById(R.id.map);\n            mapFragment.getMapAsync(this);\n        }\n    \n        /**\n         * Manipulates the map once available.\n         * This callback is triggered when the map is ready to be used.\n         * This is where we can add markers or lines, add listeners or move the camera. In this case,\n         * we just add a marker near Sydney, Australia.\n         *\n         * If Google Play services is not installed on the device, the user will be prompted to install\n         * it inside the SupportMapFragment. This method will only be triggered once the user has\n         * installed Google Play services and returned to the app.\n         */\n        @Override\n        public void onMapReady(GoogleMap googleMap) {\n            mMap = googleMap;\n    \n            // Add a marker in Sydney and move the camera\n            LatLng sydney = new LatLng(-34, 151);\n            mMap.addMarker(new MarkerOptions()\n                    .position(sydney)\n                    .title("Marker in Sydney"));\n            mMap.moveCamera(CameraUpdateFactory.newLatLng(sydney));\n        }\n    }\n```\n\n* If your maps activity file doesn’t contain the above code, replace the contents of the file with the above code, after your package name.\n\nAt this stage, it is recommended that you check if Google Maps SDK is correctly integrated with the App. To check if Google Maps API for Android is properly working, run the app on a physical device or an emulator whichever you are comfortable with. On opening the app, you should see the map centered over Sydney like shown in the image below.\n\n![](https://cdn-images-1.medium.com/max/2000/1*8Yl3HLx9OMUe-_vE0S3tbQ.jpeg)\n\nIf you don’t see the map, there is something wrong. Check the LogCat in Android Studio to see the error. If you are unable to solve the error, you can create a new project and follow the above steps again.\n\n## TASK 2 — Place Markers on Map using Google Maps SDK for Android\n\nLet’s learn how to place markers on the maps.\n\n**STEP 1: Create a `LatLng` Object**\n\n* A `LatLng` Object can be created by passing Latitude and Longitude to the constructor of the Class. `LatLng` objects are used by Google Maps SDK for recognising the coordinates of the places.\n\n* Create the `LatLng` object in the `onMapReady()` method of the `MapsActivity.java` Class using the following code:-\n\n`LatLng india= new LatLng(20.5937, 78.9629);`\n\n* After this step, the `onMapReady()` method of MapsActivity.java looks like the following\n\n{% gist https://gist.github.com/shivamag00/1697b4d54050d8fa28019c34c0f3d3bf.js %}\n\n**STEP 2: Add a Marker using Google Maps SDK for Android**\n\n* Now we will add Marker in the Google Map using `addMarker()` method of the `GoogleMap` class. The following code illustrates:-\n\n    `**mMap**.addMarker(**new **MarkerOptions().position(sydney).title(**"Marker in Sydney"**));`\n\n* `title(String)` method sets the String that will be displayed when the user taps on the marker.\n\n* After this step, the `onMapReady()` method of `MapsActivity.java` looks like the following\n{% gist https://gist.github.com/shivamag00/9870edcfa193ad36a7f2772c65c3186a.js %}\n\n**Step 3: Run the app**\n\n* Now let’s run the app. On running the app, you will see that the map is centered over Africa (Latitude: 0, Longitude: 0). If you move the map to India, you will see a marker. The following image illustrates:-\n\n![](https://cdn-images-1.medium.com/max/2000/1*AM26A4BWr8TGAJ5fZcXhbA.jpeg)\n<figcaption>The Map is centered over Africa by default</figcaption>\n\n![](https://cdn-images-1.medium.com/max/2000/1*JwuF4yax7P2Sn5ba5iu1mg.jpeg)\n<figcaption>Marker Placed over India</figcaption>\n\n**Step 4: Changing the default location of Google Maps**\n\n* As you know, when we run the app, the map is centered over Africa by default. This is because the default location over which Google Map is centered is set as Latitude: 0 & Latitude 0.\n\n* To change the default location, we can use the `moveCamera()` method of `GoogleMap` class. We will use the following code in `onMapsReady()` method of `MapsActivity.java` . `india` is the `LatLng` object that we created earlier. It contains the coordinates of India.\n\n    `**mMap**.moveCamera(CameraUpdateFactory.*newLatLng*(india));`\n\n* After this step, the onMapReady() method of MapsActivity.java looks like the following\n{% gist https://gist.github.com/shivamag00/d4cda8cff10a7a2ef40e4f85d723f130.js %}\n\n* Now run the app. You will see that map is centered over India by default\n\n![](https://cdn-images-1.medium.com/max/2000/1*JwuF4yax7P2Sn5ba5iu1mg.jpeg)\n<figcaption>The default view of the Map</figcaption>\n\n## Congratulations\n\nCongratulations on completing the first part of this series. You have done a great job!!! In the next part, We will learn how to place markers on the current view of the map like AirBnB.\n	{"boosted_additional_tags": "", "boosted_dev_digest_email": false, "boosted_additional_articles": false}	\N	googlemaps, android, airbnb	--- !ruby/struct:Articles::CachedEntity\nname: nilmadhab mondal\nusername: nilmadhab\nslug: nilmadhab\nprofile_image_90: "/uploads/user/profile_image/1/d9b0e3b7-ad59-45d5-b516-4e8ffd0a6958.jpeg"\nprofile_image_url: "/uploads/user/profile_image/1/d9b0e3b7-ad59-45d5-b516-4e8ffd0a6958.jpeg"\n	nilmadhab mondal	nilmadhab	\N	{}	\N	0	\N	0	2021-02-20 18:28:28.288082	\N	In this tutorial, we are going to create an API and mobile app to show colleges on google map.   Phot...	\N	t	5	5	\N	f	1614021101	\N	354661	en	\N	2021-02-22 19:11:41.485216	\N	/i/h4sbz6frhe3rflt74kz9.jpg	#dddddd	25	0	0	0	\N	\N	3	4fb758a91375c3490c7658c6efe1f39db8c80847d6412b5366ddf2b15d7cf08b788360ae8d9495a47cc1fa084deb9f432b5ab0fd6ccf9d3b266acdd8	/nilmadhab/how-to-display-places-in-google-maps-on-android-like-airbnb-1hh8	0	0	0	<p>In this tutorial, we are going to create an API and mobile app to show colleges on google map.</p>\n\n<figure><p><a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--gHJlCK9_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/12032/0%2AW8gP5fXQ_OtFBU_G" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--gHJlCK9_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/12032/0%2AW8gP5fXQ_OtFBU_G" alt="" loading="lazy"></a></p>\n<figcaption>Photo by henry perks on Unsplash (Not a visual of the App that we will build in this tutorial)</figcaption></figure>\n\n\n\n<h2>\n  <a name="what-we-will-do" href="#what-we-will-do" class="anchor">\n  </a>\n  What we will do\n</h2>\n\n<p>In this tutorial, we will learn to develop a backend API and Android App that displays colleges of India on a Map (using Google Maps SDK for Android) just like AirBnB displays locations of hotels/homes on the world map.</p>\n\n<figure><p>If you have not used Airbnb before, just see the following video which shows the working of our app. You can also <strong>download the app</strong> from the play store that we will create in this tutorial series by clicking on the link <a href="https://play.google.com/store/apps/details?id=com.webtutsplus.collegefinder">here</a><br>\n<iframe width="710" height="399" src="https://www.youtube.com/embed/14ZDc_SI4oE" allowfullscreen loading="lazy">\n</iframe>\n</p>\n<figcaption>College finder app demo</figcaption></figure>\n\n\n\n<p>We will learn how to place markers on the map using Latitude and Longitude Coordinates.</p>\n\n<p>In this series, each Part is divided into Tasks and each Task is divided into Steps. This will help you to understand what we are doing and how we are doing it at each step.</p>\n\n<h2>\n  <a name="database-design" href="#database-design" class="anchor">\n  </a>\n  Database Design\n</h2>\n\n<p>We have collected information on some colleges, from various websites. We can use web scraping to get these pieces of information. Please refer to this tutorial to learn more about web scraping.<br>\n</p>\n<div class="ltag__link">\n  <a href="https://medium.com/swlh/lets-parse-the-web-a7f5300b244f" class="ltag__link__link">\n    <div class="ltag__link__pic">\n      <img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--tLzMBohE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/fit/c/96/96/1%2AhNjwft_dNBxvTr6g6TOVGg.jpeg" alt="Nil Madhab" loading="lazy">\n    </div>\n  </a>\n  <a href="https://medium.com/swlh/lets-parse-the-web-a7f5300b244f" class="ltag__link__link">\n    <div class="ltag__link__content">\n      <h2>Let’s Parse the Web. Introduction | by Nil Madhab | webtutsplus | Medium</h2>\n      <h3>Nil Madhab ・ <time datetime="2020-11-30T13:22:06.341Z">Nov 30, 2020</time> ・ 12 min read\n      <div class="ltag__link__servicename">\n        <img src="/assets/medium_icon.svg" alt="Medium Logo" aria-label="Medium Logo" loading="lazy">\n        Medium\n      </div>\n    </h3>\n</div>\n  </a>\n</div>\n\n\n<h2>\n  <a name="table-design" href="#table-design" class="anchor">\n  </a>\n  Table Design\n</h2>\n\n\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/nilmadhab1995/13cdef754658fe9ed3ce55bf3ce924ee.js"></script>\n</div>\n\n\n<p>But we need lat and long for the colleges, for which we will use Google geolocation API.</p>\n\n<p>We will use this Geocode API from Google</p>\n\n<p><a href="https://maps.googleapis.com/maps/api/geocode/json?address=Indian+School+of+Business+Management+Administration+(ISBM),+bangalore&amp;key=AIzaSyBx6Z-A8Ne9pMc57p3LcVnWuoE5yRVz5Og">https://maps.googleapis.com/maps/api/geocode/json?address={address}&amp;key=</a>{API_KEY}</p>\n\n<p>If we pass the address as college name + city we will get this response. From there we will extract lat, long and update the database.</p>\n\n<p><a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--9etwm7x2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2462/1%2A93-4KTD7bAaYQC6ba-D9JQ.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--9etwm7x2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2462/1%2A93-4KTD7bAaYQC6ba-D9JQ.png" alt="" loading="lazy"></a></p>\n\n<h2>\n  <a name="final-api" href="#final-api" class="anchor">\n  </a>\n  Final API\n</h2>\n\n\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/nilmadhab1995/4f59f63b5267fdec2e6a5312ceea1633.js"></script>\n</div>\n\n\n<p>Now, as our API is ready, We will start building the Android part.</p>\n\n<h2>\n  <a name="prerequisites" href="#prerequisites" class="anchor">\n  </a>\n  Prerequisites\n</h2>\n\n<p>This tutorial assumes that you are familiar with <a href="https://developer.android.com/">Android development</a> and Object-Oriented Programming concepts. More specifically, you should know how to create basic UIs using XML and<a href="https://shivamag00.medium.com/simple-android-ui-for-the-front-end-part-of-web-applications-4d7a89d9efaa"> perform network calls to API </a>using Android. Also, you should know what JSON format is and what API is.</p>\n\n<h2>\n  <a name="you-must-install-android-studio-40-amp-above" href="#you-must-install-android-studio-40-amp-above" class="anchor">\n  </a>\n  You must install Android Studio 4.0 &amp; above.\n</h2>\n\n<h2>\n  <a name="task-1-create-a-google-maps-project-in-android-studio" href="#task-1-create-a-google-maps-project-in-android-studio" class="anchor">\n  </a>\n  TASK 1 — CREATE A GOOGLE MAPS PROJECT IN ANDROID STUDIO\n</h2>\n\n<p><strong>STEP 1: Install the Google Play services SDK.</strong> <br>\nOpen this <a href="https://developer.android.com/studio/intro/update.html#sdk-manager">link</a> for more detailed information. To install the SDK</p>\n\n<ol>\n<li><p>Go to <code>Tools</code> → <code>SDK Manager</code>.</p></li>\n<li><p>Switch to the tab called <code>SDK Tools</code></p></li>\n<li><p>Tick mark <code>Google Play Services</code> and click on Apply. After Google Play Services SDK is downloaded and installed, click on OK.</p></li>\n</ol>\n\n<p><a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--zrP1-tFU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2730/1%2AfR0q3q-4JNws_48AD1m9ZQ.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--zrP1-tFU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2730/1%2AfR0q3q-4JNws_48AD1m9ZQ.png" alt="" loading="lazy"></a></p>\n\n<p><strong>STEP 2: Create a Google Maps Project in Android Studio</strong><br>\nFollow these steps to create a new app project including a map activity:</p>\n\n<ol>\n<li><p>Start Android Studio.</p></li>\n<li>\n<p>Create a new project as follows: </p>\n\n<ul>\n<li>If you see the <code>Welcome to Android Studio</code> dialog, choose <code>Start a new Android Studio project</code>, available under <code>‘Quick Start’</code> on the right of the dialog.</li>\n<li>Otherwise, click <code>File</code> in the Android Studio menu bar, then <code>New</code>, <strong>New Project.</strong>\n</li>\n</ul>\n</li>\n<li><p>In the <code>Choose your project</code> dialog, select the tab <code>Phone and Tablet</code>.</p></li>\n<li><p>Select <code>Google Maps Activity</code>, then click <code>Next.</code></p></li>\n<li><p>Enter your app name, package name, and project location, programming language as <code>Java</code>, and the minimum Android API level supported by your app, then click <code>Finish.</code></p></li>\n<li><p>Android Studio starts Gradle and builds your project. This may take a few seconds.</p></li>\n<li><p>When the build is finished, Android Studio opens the <code>google_maps_api.xml</code> and the <code>MapsActivity.java</code> files in the editor. The next section describes getting the API key in more detail.</p></li>\n</ol>\n\n<p><strong>STEP 3: Set up a Google Maps API Key</strong></p>\n\n<ol>\n<li><p>Enable <a href="https://console.cloud.google.com/project/_/billing/enable">billing</a> on your project. For details, see <a href="https://developers.google.com/maps/gmp-get-started#create-billing-account">create a billing account</a>.</p></li>\n<li><p>In the <a href="https://console.cloud.google.com/apis/library/maps-android-backend.googleapis.com">Cloud Console</a>, enable the **Maps SDK for Android **on your project. For details, see <a href="https://developers.google.com/maps/gmp-get-started#enable-api-sdk">enable APIs</a>.</p></li>\n<li><p>Follow the <a href="https://developers.google.com/maps/documentation/android-sdk/get-api-key">Get an API Key</a> guide to <strong>get and add **an API key. It is **not necessary to restrict an API key **for this tutorial. We also **do NOT require SHA-1 fingerprint</strong> information of our APP</p></li>\n<li><p>Remember to add your key in <code>local.properties</code> file so that while uploading your code to a remote git repository, you do not end up uploading your key as well.</p></li>\n</ol>\n\n<p><a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--OUuKmF_b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2ANDbNUHIBlpYEg7h8gaOTnQ.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--OUuKmF_b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2ANDbNUHIBlpYEg7h8gaOTnQ.png" alt="" loading="lazy"></a></p>\n\n<p><strong>STEP 4: Examine the code provided by the template</strong></p>\n\n<p>Examine the code supplied by the template. In particular, look at the following files in your Android Studio project.</p>\n\n<ol>\n<li>XML Layout File — <code>activity_maps.xml</code>\n</li>\n</ol>\n\n<ul>\n<li>\n<p>By default, the XML file that defines the app’s layout is at <code>res/layout/activity_maps.xml.</code> It contains the following code:</p>\n\n<p><code>&lt;fragment xmlns:android="http://schemas.android.com/apk/res/android"<br>\n    xmlns:tools="http://schemas.android.com/tools"<br>\n    android:layout_width="match_parent"<br>\n    android:layout_height="match_parent"<br>\n    android:id="@+id/map"<br>\n    tools:context=".MapsActivity"<br>\n    android:name="com.google.android.gms.maps.SupportMapFragment" /&gt;</code></p>\n</li>\n</ul>\n\n<ol>\n<li>The Maps Activity File — <code>MapsActivity.java</code>\n</li>\n</ol>\n\n<ul>\n<li>By default, the Java file that defines the maps activity is named <code>MapsActivity.java.</code> It should contain the following code after your package name:\n</li>\n</ul>\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>// Copyright 2020 Google LLC\n    //\n    // Licensed under the Apache License, Version 2.0 (the "License");\n    // you may not use this file except in compliance with the License.\n    // You may obtain a copy of the License at\n    //\n    //      http://www.apache.org/licenses/LICENSE-2.0\n    //\n    // Unless required by applicable law or agreed to in writing, software\n    // distributed under the License is distributed on an "AS IS" BASIS,\n    // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    // See the License for the specific language governing permissions and\n    // limitations under the License.\n\n    package com.google.maps.example;\n\n\n    import androidx.appcompat.app.AppCompatActivity;\n\n    import android.os.Bundle;\n\n    import com.google.android.gms.maps.CameraUpdateFactory;\n    import com.google.android.gms.maps.GoogleMap;\n    import com.google.android.gms.maps.OnMapReadyCallback;\n    import com.google.android.gms.maps.SupportMapFragment;\n    import com.google.android.gms.maps.model.LatLng;\n    import com.google.android.gms.maps.model.MarkerOptions;\n\n    public class MapsActivity extends AppCompatActivity implements OnMapReadyCallback {\n\n        private GoogleMap mMap;\n\n        @Override\n        protected void onCreate(Bundle savedInstanceState) {\n            super.onCreate(savedInstanceState);\n            setContentView(R.layout.activity_maps);\n            // Obtain the SupportMapFragment and get notified when the map is ready to be used.\n            SupportMapFragment mapFragment = (SupportMapFragment) getSupportFragmentManager()\n                    .findFragmentById(R.id.map);\n            mapFragment.getMapAsync(this);\n        }\n\n        /**\n         * Manipulates the map once available.\n         * This callback is triggered when the map is ready to be used.\n         * This is where we can add markers or lines, add listeners or move the camera. In this case,\n         * we just add a marker near Sydney, Australia.\n         *\n         * If Google Play services is not installed on the device, the user will be prompted to install\n         * it inside the SupportMapFragment. This method will only be triggered once the user has\n         * installed Google Play services and returned to the app.\n         */\n        @Override\n        public void onMapReady(GoogleMap googleMap) {\n            mMap = googleMap;\n\n            // Add a marker in Sydney and move the camera\n            LatLng sydney = new LatLng(-34, 151);\n            mMap.addMarker(new MarkerOptions()\n                    .position(sydney)\n                    .title("Marker in Sydney"));\n            mMap.moveCamera(CameraUpdateFactory.newLatLng(sydney));\n        }\n    }\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n<ul>\n<li>If your maps activity file doesn’t contain the above code, replace the contents of the file with the above code, after your package name.</li>\n</ul>\n\n<p>At this stage, it is recommended that you check if Google Maps SDK is correctly integrated with the App. To check if Google Maps API for Android is properly working, run the app on a physical device or an emulator whichever you are comfortable with. On opening the app, you should see the map centered over Sydney like shown in the image below.</p>\n\n<p><a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--7l6-U7RE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2A8Yl3HLx9OMUe-_vE0S3tbQ.jpeg" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--7l6-U7RE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2A8Yl3HLx9OMUe-_vE0S3tbQ.jpeg" alt="" loading="lazy"></a></p>\n\n<p>If you don’t see the map, there is something wrong. Check the LogCat in Android Studio to see the error. If you are unable to solve the error, you can create a new project and follow the above steps again.</p>\n<h2>\n  <a name="task-2-place-markers-on-map-using-google-maps-sdk-for-android" href="#task-2-place-markers-on-map-using-google-maps-sdk-for-android" class="anchor">\n  </a>\n  TASK 2 — Place Markers on Map using Google Maps SDK for Android\n</h2>\n\n<p>Let’s learn how to place markers on the maps.</p>\n\n<p><strong>STEP 1: Create a <code>LatLng</code> Object</strong></p>\n\n<ul>\n<li><p>A <code>LatLng</code> Object can be created by passing Latitude and Longitude to the constructor of the Class. <code>LatLng</code> objects are used by Google Maps SDK for recognising the coordinates of the places.</p></li>\n<li><p>Create the <code>LatLng</code> object in the <code>onMapReady()</code> method of the <code>MapsActivity.java</code> Class using the following code:-</p></li>\n</ul>\n\n<p><code>LatLng india= new LatLng(20.5937, 78.9629);</code></p>\n\n<ul>\n<li>After this step, the <code>onMapReady()</code> method of MapsActivity.java looks like the following</li>\n</ul>\n\n\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/shivamag00/1697b4d54050d8fa28019c34c0f3d3bf.js"></script>\n</div>\n\n\n<p><strong>STEP 2: Add a Marker using Google Maps SDK for Android</strong></p>\n\n<ul>\n<li>\n<p>Now we will add Marker in the Google Map using <code>addMarker()</code> method of the <code>GoogleMap</code> class. The following code illustrates:-</p>\n\n<p><code>**mMap**.addMarker(**new **MarkerOptions().position(sydney).title(**"Marker in Sydney"**));</code></p>\n</li>\n<li><p><code>title(String)</code> method sets the String that will be displayed when the user taps on the marker.</p></li>\n<li>\n<p>After this step, the <code>onMapReady()</code> method of <code>MapsActivity.java</code> looks like the following<br>\n</p>\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/shivamag00/9870edcfa193ad36a7f2772c65c3186a.js"></script>\n</div>\n</li>\n</ul>\n\n<p><strong>Step 3: Run the app</strong></p>\n\n<ul>\n<li>Now let’s run the app. On running the app, you will see that the map is centered over Africa (Latitude: 0, Longitude: 0). If you move the map to India, you will see a marker. The following image illustrates:-</li>\n</ul>\n\n<figure><p><a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--gRIHnml6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AAM26A4BWr8TGAJ5fZcXhbA.jpeg" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--gRIHnml6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AAM26A4BWr8TGAJ5fZcXhbA.jpeg" alt="" loading="lazy"></a></p>\n<figcaption>The Map is centered over Africa by default</figcaption></figure>\n\n\n\n<figure><p><a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--8cRL8Sm5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AJwuF4yax7P2Sn5ba5iu1mg.jpeg" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--8cRL8Sm5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AJwuF4yax7P2Sn5ba5iu1mg.jpeg" alt="" loading="lazy"></a></p>\n<figcaption>Marker Placed over India</figcaption></figure>\n\n\n\n<p><strong>Step 4: Changing the default location of Google Maps</strong></p>\n\n<ul>\n<li><p>As you know, when we run the app, the map is centered over Africa by default. This is because the default location over which Google Map is centered is set as Latitude: 0 &amp; Latitude 0.</p></li>\n<li>\n<p>To change the default location, we can use the <code>moveCamera()</code> method of <code>GoogleMap</code> class. We will use the following code in <code>onMapsReady()</code> method of <code>MapsActivity.java</code> . <code>india</code> is the <code>LatLng</code> object that we created earlier. It contains the coordinates of India.</p>\n\n<p><code>**mMap**.moveCamera(CameraUpdateFactory.*newLatLng*(india));</code></p>\n</li>\n<li>\n<p>After this step, the onMapReady() method of MapsActivity.java looks like the following<br>\n</p>\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/shivamag00/d4cda8cff10a7a2ef40e4f85d723f130.js"></script>\n</div>\n</li>\n<li><p>Now run the app. You will see that map is centered over India by default</p></li>\n</ul>\n\n<figure><p><a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--8cRL8Sm5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AJwuF4yax7P2Sn5ba5iu1mg.jpeg" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--8cRL8Sm5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AJwuF4yax7P2Sn5ba5iu1mg.jpeg" alt="" loading="lazy"></a></p>\n<figcaption>The default view of the Map</figcaption></figure>\n\n\n\n<h2>\n  <a name="congratulations" href="#congratulations" class="anchor">\n  </a>\n  Congratulations\n</h2>\n\n<p>Congratulations on completing the first part of this series. You have done a great job!!! In the next part, We will learn how to place markers on the current view of the map like AirBnB.</p>\n\n	0	t	2021-02-22 19:11:41.485216	f	0	0	7	t	0	\N	\N	t	how-to-display-places-in-google-maps-on-android-like-airbnb-1hh8	\N	25	How to Display Places in Google Maps on Android like Airbnb	2021-02-22 19:11:41.493152	1	0	\N	\N	\N	0	\N	\N	\N
60	f	f	f	\N	How to Recognize which questions can be solved by BFS and get offers from top tech companies\n![Alt Text](/i/buyjcs2saxkcct6mrtrn.png)\n\nBFS based questions are one of the most asked questions in any coding interviews.\n\n`Personally, I got questions which were a slight variation of BFS in the interviews of companies like Uber, Samsung, Amazon and many startups as well.`\n\nLet’s talk about Breadth-First Search on graphs. Many problems can be visualized as a graph-based problem. They can be solved using either Breadth-First Search or Depth First Search. What is Breadth-First Search in Graph? We will answer this question in great details here.\n\n## Definition\n\nBreadth-first search is a graph traversal algorithm in which we start traversing the graph from the source/root node and explore all the neighboring nodes before exploring any of their children. Once all the neighboring nodes are explored, we will then select one of their children and repeat the process until we have explored all the nodes. That is we go wide (hence breadth-first search) before we go deep.\n\nFor simplicity, let's try to understand the BFS in a binary tree. We first take the root node of the tree and print it. We also need to add the left and right children of that node in a queue such that we can sequentially traverse the tree.\n\nIt can be understood with the following pseudo-code. Also, a GIF is added to make it easier to visualize.\n\n`printLevelorder(tree)\n1) Create an empty queue q\n2) temp = root // we start from the root node\n3) Loop while temp is not NULL\n    a) print temp.data //prints the data stored in the temp variable\n    b) Enqueue temp’s children //Add the left and right child\n      (first left then right children) to q\n    c) Dequeue a node from q.`\n\n![Alt Text](/i/qv6y7kut9bf70848h1gi.gif)\n<figcaption>BFS on a binary tree</figcaption>\n\nThe BFS for the graph is similar to that of the trees. But there is a slight catch in it. A Graph may contain a cycle, therefore if we don’t keep track of all visited nodes then we will fall into an infinite loop. So we use a visited boolean array or [hashtable](https://javarevisited.blogspot.com/2012/01/java-hashtable-example-tutorial-code.html) so that an infinite loop can be avoided. The following image describes the BFS traversal in graphs.\n\n![Alt Text](/i/h4bdveudjnoo9t5aj9uq.gif)\n<figcaption>BFS on a graph</figcaption>\n\n## What are the basic components of doing a BFS?\n\n1. **Queue:** We put our traveled elements in it so that we can travel all its neighbors.\n\n2. **Visited array/matrix/hashtable:** It is used to keep track of all the elements/nodes visited such that we don’t travel the same nodes twice. We can use one separate array/matrix/hashtable to do it\n\n{% gist https://gist.github.com/nilmadhab/7dde9831003fb389efbcc774ea4ab246.js %}\n<figcaption>sample BFS code</figcaption>\n\n## How we approach a problem with BFS\n\n**We first select a node and then travel all its neighboring nodes level by level.** This statement is the key to solve BFS problems.\n\nWe can understand it by checking these two problems [Leetcode 695: Max Area of Island](https://levelup.gitconnected.com/solve-leetcode-and-get-offers-from-your-dream-companies-problem-695-max-area-of-island-b65477167931) and [Leetcode 1020: Number of Enclaves.](https://medium.com/javarevisited/solve-leetcode-problems-and-get-offers-from-your-dream-companies-da534d1414ad) In both the problem we select a node and traverse all its neighboring nodes till it's possible.\n\nIn the future, we will make short tutorials explaining all the problems mentioned here.\n\n\n## Time and space complexity\n\nTime and Space complexity for BFS is O(|V|) where |V| is the total number of nodes.\n\n## Sample solved problems\n\nWe have solved the following problems using BFS.\n\n\n\n{% medium https://medium.com/javarevisited/solve-leetcode-problems-and-get-offers-from-your-dream-companies-404b6c288d09 %}\n\n{% medium https://medium.com/javarevisited/solve-leetcode-problems-and-get-offers-from-your-dream-companies-da534d1414ad %}\n\nIn our future, we will cover [different problems](https://codeburst.io/100-coding-interview-questions-for-programmers-b1cf74885fb7) that are similar to each other, where we can get our answer by manipulating our code a little bit.\n\nMany problems can be solved by the BFS approach. Some frequently asked problems are\n\n1. https://leetcode.com/problems/rotting-oranges\n2. https://leetcode.com/problems/surrounded-regions\n3. https://leetcode.com/problems/number-of-islands\n4. https://leetcode.com/problems/flood-fill\n5. https://leetcode.com/problems/number-of-closed-islands\n\n{% medium https://medium.com/hackernoon/50-data-structure-and-algorithms-interview-questions-for-programmers-b4b1ac61f5b0 %}\n\n{% medium https://medium.com/javarevisited/top-21-string-programming-interview-questions-for-beginners-and-experienced-developers-56037048de45 %}\n\n \n\n	{"boosted_additional_tags": "", "boosted_dev_digest_email": false, "boosted_additional_articles": false}	\N	algorithms, leetcode	--- !ruby/struct:Articles::CachedEntity\nname: nilmadhab mondal\nusername: nilmadhab\nslug: nilmadhab\nprofile_image_90: "/uploads/user/profile_image/1/d9b0e3b7-ad59-45d5-b516-4e8ffd0a6958.jpeg"\nprofile_image_url: "/uploads/user/profile_image/1/d9b0e3b7-ad59-45d5-b516-4e8ffd0a6958.jpeg"\n	nilmadhab mondal	nilmadhab	\N	{}	\N	0	\N	0	2021-02-22 19:44:11.400962	\N	How to Recognize which questions can be solved by BFS and get offers from top tech companies   BFS ba...	\N	t	5	5	\N	f	1614023051	\N	354663	en	\N	2021-02-22 19:44:11.391508	\N	/i/5b72s78yrftlx7s4pz53.png	#dddddd	26	0	0	0	\N	\N	1	a24e19dd7d1eac941fa8cc245590ac4d2d2854d98583825958fc300e39f2cdec3cf8477479a670949b96a2a79888a8a761b68b2ed605a35676eb9c16	/nilmadhab/how-to-use-breath-fast-search-pattern-for-cracking-coding-interviews-2l84	0	0	0	<p>How to Recognize which questions can be solved by BFS and get offers from top tech companies<br>\n<a href="/i/buyjcs2saxkcct6mrtrn.png" class="article-body-image-wrapper"><img src="/i/buyjcs2saxkcct6mrtrn.png" alt="Alt Text" loading="lazy"></a></p>\n\n<p>BFS based questions are one of the most asked questions in any coding interviews.</p>\n\n<p><code>Personally, I got questions which were a slight variation of BFS in the interviews of companies like Uber, Samsung, Amazon and many startups as well.</code></p>\n\n<p>Let’s talk about Breadth-First Search on graphs. Many problems can be visualized as a graph-based problem. They can be solved using either Breadth-First Search or Depth First Search. What is Breadth-First Search in Graph? We will answer this question in great details here.</p>\n<h2>\n  <a name="definition" href="#definition" class="anchor">\n  </a>\n  Definition\n</h2>\n\n<p>Breadth-first search is a graph traversal algorithm in which we start traversing the graph from the source/root node and explore all the neighboring nodes before exploring any of their children. Once all the neighboring nodes are explored, we will then select one of their children and repeat the process until we have explored all the nodes. That is we go wide (hence breadth-first search) before we go deep.</p>\n\n<p>For simplicity, let's try to understand the BFS in a binary tree. We first take the root node of the tree and print it. We also need to add the left and right children of that node in a queue such that we can sequentially traverse the tree.</p>\n\n<p>It can be understood with the following pseudo-code. Also, a GIF is added to make it easier to visualize.</p>\n\n<p><code>printLevelorder(tree)<br>\n1) Create an empty queue q<br>\n2) temp = root // we start from the root node<br>\n3) Loop while temp is not NULL<br>\n    a) print temp.data //prints the data stored in the temp variable<br>\n    b) Enqueue temp’s children //Add the left and right child<br>\n      (first left then right children) to q<br>\n    c) Dequeue a node from q.</code></p>\n\n<figure><p><a href="/i/qv6y7kut9bf70848h1gi.gif" class="article-body-image-wrapper"><img src="/i/qv6y7kut9bf70848h1gi.gif" alt="Alt Text" loading="lazy"></a></p>\n<figcaption>BFS on a binary tree</figcaption></figure>\n\n\n\n<p>The BFS for the graph is similar to that of the trees. But there is a slight catch in it. A Graph may contain a cycle, therefore if we don’t keep track of all visited nodes then we will fall into an infinite loop. So we use a visited boolean array or <a href="https://javarevisited.blogspot.com/2012/01/java-hashtable-example-tutorial-code.html">hashtable</a> so that an infinite loop can be avoided. The following image describes the BFS traversal in graphs.</p>\n\n<figure><p><a href="/i/h4bdveudjnoo9t5aj9uq.gif" class="article-body-image-wrapper"><img src="/i/h4bdveudjnoo9t5aj9uq.gif" alt="Alt Text" loading="lazy"></a></p>\n<figcaption>BFS on a graph</figcaption></figure>\n\n\n<h2>\n  <a name="what-are-the-basic-components-of-doing-a-bfs" href="#what-are-the-basic-components-of-doing-a-bfs" class="anchor">\n  </a>\n  What are the basic components of doing a BFS?\n</h2>\n\n<ol>\n<li><p><strong>Queue:</strong> We put our traveled elements in it so that we can travel all its neighbors.</p></li>\n<li><p><strong>Visited array/matrix/hashtable:</strong> It is used to keep track of all the elements/nodes visited such that we don’t travel the same nodes twice. We can use one separate array/matrix/hashtable to do it</p></li>\n</ol>\n\n\n<figure><div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/nilmadhab/7dde9831003fb389efbcc774ea4ab246.js"></script>\n</div>\n<figcaption>sample BFS code</figcaption></figure>\n\n\n\n\n<h2>\n  <a name="how-we-approach-a-problem-with-bfs" href="#how-we-approach-a-problem-with-bfs" class="anchor">\n  </a>\n  How we approach a problem with BFS\n</h2>\n\n<p><strong>We first select a node and then travel all its neighboring nodes level by level.</strong> This statement is the key to solve BFS problems.</p>\n\n<p>We can understand it by checking these two problems <a href="https://levelup.gitconnected.com/solve-leetcode-and-get-offers-from-your-dream-companies-problem-695-max-area-of-island-b65477167931">Leetcode 695: Max Area of Island</a> and <a href="https://medium.com/javarevisited/solve-leetcode-problems-and-get-offers-from-your-dream-companies-da534d1414ad">Leetcode 1020: Number of Enclaves.</a> In both the problem we select a node and traverse all its neighboring nodes till it's possible.</p>\n\n<p>In the future, we will make short tutorials explaining all the problems mentioned here.</p>\n\n<h2>\n  <a name="time-and-space-complexity" href="#time-and-space-complexity" class="anchor">\n  </a>\n  Time and space complexity\n</h2>\n\n<p>Time and Space complexity for BFS is O(|V|) where |V| is the total number of nodes.</p>\n\n<h2>\n  <a name="sample-solved-problems" href="#sample-solved-problems" class="anchor">\n  </a>\n  Sample solved problems\n</h2>\n\n<p>We have solved the following problems using BFS.</p>\n\n\n<div class="ltag__link">\n  <a href="https://medium.com/javarevisited/solve-leetcode-problems-and-get-offers-from-your-dream-companies-404b6c288d09" class="ltag__link__link">\n    <div class="ltag__link__pic">\n      <img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--tLzMBohE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/fit/c/96/96/1%2AhNjwft_dNBxvTr6g6TOVGg.jpeg" alt="Nil Madhab" loading="lazy">\n    </div>\n  </a>\n  <a href="https://medium.com/javarevisited/solve-leetcode-problems-and-get-offers-from-your-dream-companies-404b6c288d09" class="ltag__link__link">\n    <div class="ltag__link__content">\n      <h2>Solve Leetcode Problems and Get Offers From Your Dream Companies | by Nil Madhab | Javarevisited | Jan, 2021 | Medium</h2>\n      <h3>Nil Madhab ・ <time datetime="2021-02-09T07:16:14.333Z">Feb 9, 2021</time> ・ 3 min read\n      <div class="ltag__link__servicename">\n        <img src="/assets/medium_icon.svg" alt="Medium Logo" aria-label="Medium Logo" loading="lazy">\n        Medium\n      </div>\n    </h3>\n</div>\n  </a>\n</div>\n\n\n\n<div class="ltag__link">\n  <a href="https://medium.com/javarevisited/solve-leetcode-problems-and-get-offers-from-your-dream-companies-da534d1414ad" class="ltag__link__link">\n    <div class="ltag__link__pic">\n      <img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--tLzMBohE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/fit/c/96/96/1%2AhNjwft_dNBxvTr6g6TOVGg.jpeg" alt="Nil Madhab" loading="lazy">\n    </div>\n  </a>\n  <a href="https://medium.com/javarevisited/solve-leetcode-problems-and-get-offers-from-your-dream-companies-da534d1414ad" class="ltag__link__link">\n    <div class="ltag__link__content">\n      <h2>Leetcode 1020 — Number of Enclaves [Solution] | by Nil Madhab | Javarevisited | Feb, 2021 | Medium</h2>\n      <h3>Nil Madhab ・ <time datetime="2021-02-09T07:16:35.058Z">Feb 9, 2021</time> ・ 3 min read\n      <div class="ltag__link__servicename">\n        <img src="/assets/medium_icon.svg" alt="Medium Logo" aria-label="Medium Logo" loading="lazy">\n        Medium\n      </div>\n    </h3>\n</div>\n  </a>\n</div>\n\n\n<p>In our future, we will cover <a href="https://codeburst.io/100-coding-interview-questions-for-programmers-b1cf74885fb7">different problems</a> that are similar to each other, where we can get our answer by manipulating our code a little bit.</p>\n\n<p>Many problems can be solved by the BFS approach. Some frequently asked problems are</p>\n\n<ol>\n<li><a href="https://leetcode.com/problems/rotting-oranges">https://leetcode.com/problems/rotting-oranges</a></li>\n<li><a href="https://leetcode.com/problems/surrounded-regions">https://leetcode.com/problems/surrounded-regions</a></li>\n<li><a href="https://leetcode.com/problems/number-of-islands">https://leetcode.com/problems/number-of-islands</a></li>\n<li><a href="https://leetcode.com/problems/flood-fill">https://leetcode.com/problems/flood-fill</a></li>\n<li><a href="https://leetcode.com/problems/number-of-closed-islands">https://leetcode.com/problems/number-of-closed-islands</a></li>\n</ol>\n\n\n<div class="ltag__link">\n  <a href="https://medium.com/hackernoon/50-data-structure-and-algorithms-interview-questions-for-programmers-b4b1ac61f5b0" class="ltag__link__link">\n    <div class="ltag__link__pic">\n      <img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--qkjHfzsS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/fit/c/96/96/0%2Au9Ha3uTCjEmW_3gn.gif" alt="javinpaul" loading="lazy">\n    </div>\n  </a>\n  <a href="https://medium.com/hackernoon/50-data-structure-and-algorithms-interview-questions-for-programmers-b4b1ac61f5b0" class="ltag__link__link">\n    <div class="ltag__link__content">\n      <h2>50+ Data Structure and Algorithms Interview Questions for Programmers | by javinpaul | HackerNoon.com | Medium</h2>\n      <h3>javinpaul ・ <time datetime="2020-09-23T06:54:28.848Z">Sep 23, 2020</time> ・ 12 min read\n      <div class="ltag__link__servicename">\n        <img src="/assets/medium_icon.svg" alt="Medium Logo" aria-label="Medium Logo" loading="lazy">\n        Medium\n      </div>\n    </h3>\n</div>\n  </a>\n</div>\n\n\n\n<div class="ltag__link">\n  <a href="https://medium.com/javarevisited/top-21-string-programming-interview-questions-for-beginners-and-experienced-developers-56037048de45" class="ltag__link__link">\n    <div class="ltag__link__pic">\n      <img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--qkjHfzsS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/fit/c/96/96/0%2Au9Ha3uTCjEmW_3gn.gif" alt="javinpaul" loading="lazy">\n    </div>\n  </a>\n  <a href="https://medium.com/javarevisited/top-21-string-programming-interview-questions-for-beginners-and-experienced-developers-56037048de45" class="ltag__link__link">\n    <div class="ltag__link__content">\n      <h2>Top 21 String Programming Interview Questions for Beginners and Experienced Developers | by javinpaul | Javarevisited | Medium</h2>\n      <h3>javinpaul ・ <time datetime="2020-02-16T04:51:23.658Z">Feb 16, 2020</time> ・ 7 min read\n      <div class="ltag__link__servicename">\n        <img src="/assets/medium_icon.svg" alt="Medium Logo" aria-label="Medium Logo" loading="lazy">\n        Medium\n      </div>\n    </h3>\n</div>\n  </a>\n</div>\n\n\n	0	t	2021-02-22 19:44:11.391508	f	0	0	3	t	0	\N	\N	t	how-to-use-breath-fast-search-pattern-for-cracking-coding-interviews-2l84	\N	25	How to Use Breath Fast Search Pattern for Cracking Coding Interviews	2021-02-22 19:44:11.400962	1	0	\N	\N	\N	0	\N	\N	\N
50	f	f	f	\N	**Problem 1348. Tweet Counts Per Frequency.**\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/beo2kd84tzxu0i48naym.png)\n\nIn this series, I am going to solve Leetcode medium problems live with my friend, which you can see on our youtube channel, Today we will do Problem Problem 1348. **Tweet Counts Per Frequency.**\n\nA little bit about me, I have offers from **Uber India** and **Amazon India** in the past, and I am currently working for **Booking.com** in Amsterdam.\n## Problem Statement\n\nImplement the class `TweetCounts` that supports two methods:\n\n* `recordTweet(string tweetName, int time)`\n\n   * Stores the `tweetName` at the recorded `time` (in seconds).\n\n* `getTweetCountsPerFrequency(string freq, string tweetName, int startTime, int endTime)`\n\n  * Returns the total number of occurrences for the given      `tweetName` per minute, hour, or day (depending on `freq`) starting from the `startTime` (in seconds) and ending at the `endTime` (in seconds).\n  * `freq` is always minute, hour or day, representing the time interval to get the total number of occurrences for the given tweetName.\n  * The first time interval always starts from the `startTime`, so the time intervals are `[startTime, startTime + delta*1>, [startTime + delta*1, startTime + delta*2>, [startTime + delta*2, startTime + delta*3>, ... , [startTime + delta*i, min(startTime + delta*(i+1), endTime + 1)>` for some non-negative number `i` and `delta` (which depends on `freq`).\n\n### Example:\n\n**Input**\n\n`["TweetCounts","recordTweet","recordTweet","recordTweet","getTweetCountsPerFrequency","getTweetCountsPerFrequency","recordTweet","getTweetCountsPerFrequency"]\n[[],["tweet3",0],["tweet3",60],["tweet3",10],["minute","tweet3",0,59],["minute","tweet3",0,60],["tweet3",120],["hour","tweet3",0,210]]`\n\n**Output**\n\n`[null,null,null,null,[2],[2,1],null,[4]]`\n\n**Explanation**\n\n`TweetCounts tweetCounts = new TweetCounts();\ntweetCounts.recordTweet("tweet3", 0);\ntweetCounts.recordTweet("tweet3", 60);\ntweetCounts.recordTweet("tweet3", 10);                             // All tweets correspond to "tweet3" with recorded times at 0, 10 and 60.\ntweetCounts.getTweetCountsPerFrequency("minute", "tweet3", 0, 59); // return [2]. The frequency is per minute (60 seconds), so there is  one interval of time: 1) [0, 60> - > 2 tweets.\ntweetCounts.getTweetCountsPerFrequency("minute", "tweet3", 0, 60); // return [2, 1]. The frequency is per minute (60 seconds), so there are two intervals of time: 1) [0, 60> - > 2 tweets, and 2) [60,61> - > 1 tweet.\ntweetCounts.recordTweet("tweet3", 120);                            // All tweets correspond to "tweet3" with recorded times at 0, 10, 60 and 120.\ntweetCounts.getTweetCountsPerFrequency("hour", "tweet3", 0, 210);  // return [4]. The frequency is per hour (3600 seconds), so there is one interval of time: 1) [0, 211> - > 4 tweets.`\n\n\n## Youtube Discussion\n\n  {% youtube eOX9rYomKac %}\n\n## Solution\n\nIn this problem, we have to implement two methods. On is recordTweet which stores the tweet along with its timestamp and another one is getTweetsPerFrequenecy where we have to return no of tweets in some given frequency (minute, hour, day).\n\nHere we will be using a HashMap to store the tweet data. The key is the title of the tweet and the value is a list which contains all the timestamps where this tweet is published.\n\nIn the recordTweet method, we store the tweet into the hashmap. This method runs in O(1) time complexity as the retrieval of the list from hashmap takes constant time.\n\nThe input frequency can be minute, hour and day. All the inputs are given in seconds. Therefore to calculate the frequency in a minute, hour and day terms we need to use different constants.\n\n`minute = 60 seconds`\n\n`hour = 60 minutes = 3600 seconds`\n\n`day = 24 hours = 24*3600 seconds`\n\nThe getFreq method is used to calculate the occurrences of the tweet in different timeframes. We can visualize the problem as placing the tweets into different buckets. The bucket size depends on the frequency (minute, hour, day). We will find the unit timeframes in seconds depending upon the frequency.\n\n`eg : Start Time = 135 , End Time = 345 , freq = minutes`\n\n`The bucket size will be 135-194 | 195-254 | 255-314 | 315-344`\n\nSo we will place the tweets with different timestamps into these buckets. The index is found out by using the following formula :\n\n`index = (timestamp — startTime)/delta ; delta depends on the frequency`\n\nThe final list is return in the method.\n\nThe java code along with a dry run of the example is given below. Also, the code is properly documented.\n\n{% gist https://gist.github.com/sksaikia/938400ca4be48ca546b6b9fdacf05fea.js %}\n\nThe code for this problem can be found in the following repository.\n{% github webtutsplus/Leetcode %}\n\n**Thank You for reading and Follow this publication for more LeetCode problems!😃**\n[Leetcode simplified](https://medium.com/leetcode-simplified)\n\n\n**Sign up for Leetcode Simplified**\nBy LeetCode Simplified\n\nGet latest leetcode solution with youtube breakdown [Take a look](https://medium.com/leetcode-simplified/newsletters/leetcode-simplified?source=newsletter_v3_promo--------------------------newsletter_v3_promo-----------)\nYou're an editor of Leetcode Simplified\n	{"boosted_additional_tags": "", "boosted_dev_digest_email": false, "boosted_additional_articles": false}	\N	leetcode, algorithms	--- !ruby/struct:Articles::CachedEntity\nname: nilmadhab mondal\nusername: nilmadhab\nslug: nilmadhab\nprofile_image_90: "/uploads/user/profile_image/1/d9b0e3b7-ad59-45d5-b516-4e8ffd0a6958.jpeg"\nprofile_image_url: "/uploads/user/profile_image/1/d9b0e3b7-ad59-45d5-b516-4e8ffd0a6958.jpeg"\n	nilmadhab mondal	nilmadhab	\N	{}	\N	0	\N	0	2021-02-20 13:15:29.859658	\N	Problem 1348. Tweet Counts Per Frequency.   In this series, I am going to solve Leetcode medium probl...	\N	t	5	5	\N	f	1613826929	\N	354466	en	\N	2021-02-20 13:15:29.850504	\N	/i/ryyn3z47d7syn6ufbp0y.png	#dddddd	20	0	0	0	\N	\N	4	292503f547c8ee3dc55abfe6fbf846f45d9182e936a644b4ccebcda218e3172e28bc8155d8eb69bca83c43a0b74dc4789210f403702b3d7af1122985	/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-tweets-count-per-frequency-3o2b	0	0	0	<p><strong>Problem 1348. Tweet Counts Per Frequency.</strong><br>\n<a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--fOTeMSGT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/beo2kd84tzxu0i48naym.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--fOTeMSGT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/beo2kd84tzxu0i48naym.png" alt="Alt Text" loading="lazy"></a></p>\n\n<p>In this series, I am going to solve Leetcode medium problems live with my friend, which you can see on our youtube channel, Today we will do Problem Problem 1348. <strong>Tweet Counts Per Frequency.</strong></p>\n\n<p>A little bit about me, I have offers from <strong>Uber India</strong> and <strong>Amazon India</strong> in the past, and I am currently working for <strong>Booking.com</strong> in Amsterdam.</p>\n<h2>\n  <a name="problem-statement" href="#problem-statement" class="anchor">\n  </a>\n  Problem Statement\n</h2>\n\n<p>Implement the class <code>TweetCounts</code> that supports two methods:</p>\n\n<ul>\n<li>\n<p><code>recordTweet(string tweetName, int time)</code></p>\n\n<ul>\n<li>Stores the <code>tweetName</code> at the recorded <code>time</code> (in seconds).</li>\n</ul>\n</li>\n<li>\n<p><code>getTweetCountsPerFrequency(string freq, string tweetName, int startTime, int endTime)</code></p>\n\n<ul>\n<li>Returns the total number of occurrences for the given      <code>tweetName</code> per minute, hour, or day (depending on <code>freq</code>) starting from the <code>startTime</code> (in seconds) and ending at the <code>endTime</code> (in seconds).</li>\n<li>\n<code>freq</code> is always minute, hour or day, representing the time interval to get the total number of occurrences for the given tweetName.</li>\n<li>The first time interval always starts from the <code>startTime</code>, so the time intervals are <code>[startTime, startTime + delta*1&gt;, [startTime + delta*1, startTime + delta*2&gt;, [startTime + delta*2, startTime + delta*3&gt;, ... , [startTime + delta*i, min(startTime + delta*(i+1), endTime + 1)&gt;</code> for some non-negative number <code>i</code> and <code>delta</code> (which depends on <code>freq</code>).</li>\n</ul>\n</li>\n</ul>\n<h3>\n  <a name="example" href="#example" class="anchor">\n  </a>\n  Example:\n</h3>\n\n<p><strong>Input</strong></p>\n\n<p><code>["TweetCounts","recordTweet","recordTweet","recordTweet","getTweetCountsPerFrequency","getTweetCountsPerFrequency","recordTweet","getTweetCountsPerFrequency"]<br>\n[[],["tweet3",0],["tweet3",60],["tweet3",10],["minute","tweet3",0,59],["minute","tweet3",0,60],["tweet3",120],["hour","tweet3",0,210]]</code></p>\n\n<p><strong>Output</strong></p>\n\n<p><code>[null,null,null,null,[2],[2,1],null,[4]]</code></p>\n\n<p><strong>Explanation</strong></p>\n\n<p><code>TweetCounts tweetCounts = new TweetCounts();<br>\ntweetCounts.recordTweet("tweet3", 0);<br>\ntweetCounts.recordTweet("tweet3", 60);<br>\ntweetCounts.recordTweet("tweet3", 10);                             // All tweets correspond to "tweet3" with recorded times at 0, 10 and 60.<br>\ntweetCounts.getTweetCountsPerFrequency("minute", "tweet3", 0, 59); // return [2]. The frequency is per minute (60 seconds), so there is  one interval of time: 1) [0, 60&gt; - &gt; 2 tweets.<br>\ntweetCounts.getTweetCountsPerFrequency("minute", "tweet3", 0, 60); // return [2, 1]. The frequency is per minute (60 seconds), so there are two intervals of time: 1) [0, 60&gt; - &gt; 2 tweets, and 2) [60,61&gt; - &gt; 1 tweet.<br>\ntweetCounts.recordTweet("tweet3", 120);                            // All tweets correspond to "tweet3" with recorded times at 0, 10, 60 and 120.<br>\ntweetCounts.getTweetCountsPerFrequency("hour", "tweet3", 0, 210);  // return [4]. The frequency is per hour (3600 seconds), so there is one interval of time: 1) [0, 211&gt; - &gt; 4 tweets.</code></p>\n<h2>\n  <a name="youtube-discussion" href="#youtube-discussion" class="anchor">\n  </a>\n  Youtube Discussion\n</h2>\n\n<p><iframe width="710" height="399" src="https://www.youtube.com/embed/eOX9rYomKac" allowfullscreen loading="lazy">\n</iframe>\n</p>\n\n<h2>\n  <a name="solution" href="#solution" class="anchor">\n  </a>\n  Solution\n</h2>\n\n<p>In this problem, we have to implement two methods. On is recordTweet which stores the tweet along with its timestamp and another one is getTweetsPerFrequenecy where we have to return no of tweets in some given frequency (minute, hour, day).</p>\n\n<p>Here we will be using a HashMap to store the tweet data. The key is the title of the tweet and the value is a list which contains all the timestamps where this tweet is published.</p>\n\n<p>In the recordTweet method, we store the tweet into the hashmap. This method runs in O(1) time complexity as the retrieval of the list from hashmap takes constant time.</p>\n\n<p>The input frequency can be minute, hour and day. All the inputs are given in seconds. Therefore to calculate the frequency in a minute, hour and day terms we need to use different constants.</p>\n\n<p><code>minute = 60 seconds</code></p>\n\n<p><code>hour = 60 minutes = 3600 seconds</code></p>\n\n<p><code>day = 24 hours = 24*3600 seconds</code></p>\n\n<p>The getFreq method is used to calculate the occurrences of the tweet in different timeframes. We can visualize the problem as placing the tweets into different buckets. The bucket size depends on the frequency (minute, hour, day). We will find the unit timeframes in seconds depending upon the frequency.</p>\n\n<p><code>eg : Start Time = 135 , End Time = 345 , freq = minutes</code></p>\n\n<p><code>The bucket size will be 135-194 | 195-254 | 255-314 | 315-344</code></p>\n\n<p>So we will place the tweets with different timestamps into these buckets. The index is found out by using the following formula :</p>\n\n<p><code>index = (timestamp — startTime)/delta ; delta depends on the frequency</code></p>\n\n<p>The final list is return in the method.</p>\n\n<p>The java code along with a dry run of the example is given below. Also, the code is properly documented.</p>\n\n\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/sksaikia/938400ca4be48ca546b6b9fdacf05fea.js"></script>\n</div>\n\n\n<p>The code for this problem can be found in the following repository.<br>\n</p>\n<div class="ltag-github-readme-tag">\n  <div class="readme-overview">\n    <h2>\n      <img src="/assets/github-logo.svg" alt="GitHub logo" loading="lazy">\n      <a href="https://github.com/webtutsplus">\n        webtutsplus\n      </a> / <a style="font-weight: 600;" href="https://github.com/webtutsplus/LeetCode">\n        LeetCode\n      </a>\n    </h2>\n    <h3>\n      \n    </h3>\n  </div>\n</div>\n\n\n<p><strong>Thank You for reading and Follow this publication for more LeetCode problems!😃</strong><br>\n<a href="https://medium.com/leetcode-simplified">Leetcode simplified</a></p>\n\n<p><strong>Sign up for Leetcode Simplified</strong><br>\nBy LeetCode Simplified</p>\n\n<p>Get latest leetcode solution with youtube breakdown <a href="https://medium.com/leetcode-simplified/newsletters/leetcode-simplified?source=newsletter_v3_promo--------------------------newsletter_v3_promo-----------">Take a look</a><br>\nYou're an editor of Leetcode Simplified</p>\n\n	0	t	2021-02-20 13:15:29.850504	f	0	0	3	t	0	\N	\N	t	solve-leetcode-problems-and-get-offers-from-your-dream-companies-tweets-count-per-frequency-3o2b	\N	25	Solve Leetcode Problems and Get Offers From Your Dream Companies||Tweets count per frequency	2021-02-20 13:15:29.859658	1	0	\N	\N	\N	0	\N	\N	\N
35	f	f	f	\N	1737. Change Minimum Characters to Satisfy One of Three Conditions\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/el014aopko4fkj93doup.png)\n\n## Motivation to learn algorithms\n\n{% medium https://medium.com/leetcode-simplified/solve-leetcode-problems-and-get-offers-from-your-dream-companies-2786415be0b7 %}\n\n## Problem Statement\n\nYou are given two strings `a` and `b` that consist of lowercase letters. In one operation, you can change any character in `a` or `b` to any lowercase letter.\n\nYour goal is to satisfy **one** of the following three conditions:\n\n* **Every** letter in `a` is **strictly les**s than **every** letter in `b` in the alphabet.\n* **Every** letter in `b` is **strictly less** than every letter in `a` in the alphabet.\n* **Both** `a` and `b` consist of **only one** distinct letter.\n\nReturn the minimum number of operations needed to achieve your goal.\n\n**Example 1:**\n\n`Input: a = "aba", b = "caa"\nOutput: 2\nExplanation: Consider the best way to make each condition true:\n1) Change b to "ccc" in 2 operations, then every letter in a is less than every letter in b.\n2) Change a to "bbb" and b to "aaa" in 3 operations, then every letter in b is less than every letter in a.\n3) Change a to "aaa" and b to "aaa" in 2 operations, then a and b consist of one distinct letter.\nThe best way was done in 2 operations (either condition 1 or condition 3).`\n\n**Example 2:**\n\n`Input: a = "dabadd", b = "cda"\nOutput: 3\nExplanation: The best way is to make condition 1 true by changing b to "eee".`\n\n**Constraints:**\n\n* `1 <= a.length, b.length <= 105`\n* `a` and `b` consist only of lowercase letters.\n\n## Solution\n\nIn this problem, we are given two strings and we have to make them satisfy one of the 3 conditions by a minimum number of operations. In one operation, we can change any character in either string to any lowercase number.\n\nSo we have to check all the 3 conditions. In the make method, we check for the first 2 conditions. We pass the two strings to this method, For a given string `a`, we try to make it strictly smaller than `b`. We do it by making string `a` smaller than a particular character `ch` and string `b` bigger than the same character. We call this method twice, first to make `a` smaller than `b` and then `b` smaller than `a`.\n\nFor the third condition, we make it contain only one distinct character, by changing each character to a particular character ch. We count the total number of operations and compare it with the minimum. At last, we return the ansvariable.\n\nThe following are the Java and C++ code for this problem.\n{% gist https://gist.github.com/sksaikia/403c9d4396457227e766f25a7ffe1693.js %}\n\n{% gist https://gist.github.com/sksaikia/35fe3b1a41e21073c19e12b394d03b55.js %}\nThe code can be found in the following repository.\n{% github webtutsplus/LeetCode %}\n\n**Thank You for reading and Follow this publication for more LeetCode problems!😃**\n\n[LeetCode Simplified](https://medium.com/leetcode-simplified)\n	{"boosted_additional_tags": "", "boosted_dev_digest_email": false, "boosted_additional_articles": false}	\N	career, programming, leetcode, algorithms	--- !ruby/struct:Articles::CachedEntity\nname: nilmadhab mondal\nusername: nilmadhab\nslug: nilmadhab\nprofile_image_90: "/uploads/user/profile_image/1/d9b0e3b7-ad59-45d5-b516-4e8ffd0a6958.jpeg"\nprofile_image_url: "/uploads/user/profile_image/1/d9b0e3b7-ad59-45d5-b516-4e8ffd0a6958.jpeg"\n	nilmadhab mondal	nilmadhab	\N	{}	\N	0	\N	0	2021-02-17 21:43:06.057734	\N	Change Minimum Characters to Satisfy One of Three Conditions              Motivation to learn algori...	2021-02-20 13:17:30.203825	t	5	5	\N	f	1613598186	\N	352099	en	\N	2021-02-17 21:43:06.049108	\N	/i/v0ng5nhev3qrcsn6dhdp.jpg	#dddddd	5	0	0	0	\N	\N	3	700833e37f495e50b600a80be444a39d07fca66b2481aceab95763f6b0dff4bd81fccfbd62716407890e1a44f85836d13694d0dc22da93b270c20892	/nilmadhab/leetcode-weekly-contest-225-change-minimum-characters-to-satisfy-one-of-three-conditions-1p6b	0	0	0	<ol>\n<li>Change Minimum Characters to Satisfy One of Three Conditions\n<img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--xL5lzzpB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/el014aopko4fkj93doup.png" alt="Alt Text" loading="lazy">\n</li>\n</ol>\n\n<h2>\n  <a name="motivation-to-learn-algorithms" href="#motivation-to-learn-algorithms" class="anchor">\n  </a>\n  Motivation to learn algorithms\n</h2>\n\n\n<div class="ltag__link">\n  <a href="https://medium.com/leetcode-simplified/solve-leetcode-problems-and-get-offers-from-your-dream-companies-2786415be0b7" class="ltag__link__link">\n    <div class="ltag__link__pic">\n      <img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--tLzMBohE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/fit/c/96/96/1%2AhNjwft_dNBxvTr6g6TOVGg.jpeg" alt="Nil Madhab" loading="lazy">\n    </div>\n  </a>\n  <a href="https://medium.com/leetcode-simplified/solve-leetcode-problems-and-get-offers-from-your-dream-companies-2786415be0b7" class="ltag__link__link">\n    <div class="ltag__link__content">\n      <h2>Solve Leetcode Problems and Get Offers From Your Dream Companies | by Nil Madhab | LeetCode Simplified | Jan, 2021 | Medium</h2>\n      <h3>Nil Madhab ・ <time datetime="2021-02-06T16:44:52.884Z">Feb 6, 2021</time> ・ 3 min read\n      <div class="ltag__link__servicename">\n        <img src="/assets/medium_icon.svg" alt="Medium Logo" aria-label="Medium Logo" loading="lazy">\n        Medium\n      </div>\n    </h3>\n</div>\n  </a>\n</div>\n\n\n<h2>\n  <a name="problem-statement" href="#problem-statement" class="anchor">\n  </a>\n  Problem Statement\n</h2>\n\n<p>You are given two strings <code>a</code> and <code>b</code> that consist of lowercase letters. In one operation, you can change any character in <code>a</code> or <code>b</code> to any lowercase letter.</p>\n\n<p>Your goal is to satisfy <strong>one</strong> of the following three conditions:</p>\n\n<ul>\n<li>\n<strong>Every</strong> letter in <code>a</code> is <strong>strictly les</strong>s than <strong>every</strong> letter in <code>b</code> in the alphabet.</li>\n<li>\n<strong>Every</strong> letter in <code>b</code> is <strong>strictly less</strong> than every letter in <code>a</code> in the alphabet.</li>\n<li>\n<strong>Both</strong> <code>a</code> and <code>b</code> consist of <strong>only one</strong> distinct letter.</li>\n</ul>\n\n<p>Return the minimum number of operations needed to achieve your goal.</p>\n\n<p><strong>Example 1:</strong></p>\n\n<p><code>Input: a = "aba", b = "caa"<br>\nOutput: 2<br>\nExplanation: Consider the best way to make each condition true:<br>\n1) Change b to "ccc" in 2 operations, then every letter in a is less than every letter in b.<br>\n2) Change a to "bbb" and b to "aaa" in 3 operations, then every letter in b is less than every letter in a.<br>\n3) Change a to "aaa" and b to "aaa" in 2 operations, then a and b consist of one distinct letter.<br>\nThe best way was done in 2 operations (either condition 1 or condition 3).</code></p>\n\n<p><strong>Example 2:</strong></p>\n\n<p><code>Input: a = "dabadd", b = "cda"<br>\nOutput: 3<br>\nExplanation: The best way is to make condition 1 true by changing b to "eee".</code></p>\n\n<p><strong>Constraints:</strong></p>\n\n<ul>\n<li><code>1 &lt;= a.length, b.length &lt;= 105</code></li>\n<li>\n<code>a</code> and <code>b</code> consist only of lowercase letters.</li>\n</ul>\n<h2>\n  <a name="solution" href="#solution" class="anchor">\n  </a>\n  Solution\n</h2>\n\n<p>In this problem, we are given two strings and we have to make them satisfy one of the 3 conditions by a minimum number of operations. In one operation, we can change any character in either string to any lowercase number.</p>\n\n<p>So we have to check all the 3 conditions. In the make method, we check for the first 2 conditions. We pass the two strings to this method, For a given string <code>a</code>, we try to make it strictly smaller than <code>b</code>. We do it by making string <code>a</code> smaller than a particular character <code>ch</code> and string <code>b</code> bigger than the same character. We call this method twice, first to make <code>a</code> smaller than <code>b</code> and then <code>b</code> smaller than <code>a</code>.</p>\n\n<p>For the third condition, we make it contain only one distinct character, by changing each character to a particular character ch. We count the total number of operations and compare it with the minimum. At last, we return the ansvariable.</p>\n\n<p>The following are the Java and C++ code for this problem.<br>\n</p>\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/sksaikia/403c9d4396457227e766f25a7ffe1693.js"></script>\n</div>\n\n\n\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/sksaikia/35fe3b1a41e21073c19e12b394d03b55.js"></script>\n</div>\n<br>\nThe code can be found in the following repository.<br>\n<div class="ltag-github-readme-tag">\n  <div class="readme-overview">\n    <h2>\n      <img src="/assets/github-logo.svg" alt="GitHub logo" loading="lazy">\n      <a href="https://github.com/webtutsplus">\n        webtutsplus\n      </a> / <a style="font-weight: 600;" href="https://github.com/webtutsplus/LeetCode">\n        LeetCode\n      </a>\n    </h2>\n    <h3>\n      \n    </h3>\n  </div>\n</div>\n\n\n<p><strong>Thank You for reading and Follow this publication for more LeetCode problems!😃</strong></p>\n\n<p><a href="https://medium.com/leetcode-simplified">LeetCode Simplified</a></p>\n\n	0	t	2021-02-17 21:43:06.049108	f	0	0	2	t	0	\N	\N	t	leetcode-weekly-contest-225-change-minimum-characters-to-satisfy-one-of-three-conditions-1p6b	\N	25	Leetcode Weekly Contest 225 (Change Minimum Characters to Satisfy One of Three Conditions)	2021-02-20 13:17:31.261305	1	0	\N	\N	\N	0	\N	\N	\N
30	f	f	f	\N	In this series, I am going to solve Leetcode medium problems live with my friend, which you can see on our youtube channel, Today we will do Problem 695. **Max Area of Island.**\n\n![Alt Text](https://api.simplecoding.dev:3000//i/13pue2jkeoecc50bymdk.png)\n\nA little bit about me, I have offers from **Uber India** and **Amazon India** in the past, and I am currently working for **Booking.com** in Amsterdam.\n\n## Motivation to Learn Algorithms\n{% gist https://gist.github.com/sksaikia/b3e44a32bab220f3773ca25ba9b9adf2.js %}\n\nI have worked in India as a software developer for 4 years. I started learning algorithms and data structure from my 3rd year in college as I was from an Electronics background. Here is my salary progression over the years, (all in INR, Lakh per year)\n\n2016: placement in **Flipkart** from college, IIT KGP(18 lakh base + 2 lakh bonus = **20** lakh). But the offer was delayed by 6 months, as Flipkart was going through some trouble, so I joined Samsung.\n\n2016: **Samsung Noida**(off campus ) (14 lakh base + 5 lakh joining bonus = **19** lakh). They pay to IITians 19 lakh but other colleges 9-14 lakh for the same work, which is bogus.\n\n2017: **Oyorooms** (**17** lakh fixed, no bonus, no stocks). I took a pay cut as I was not learning anything in Samsung, so joined Oyo.\n\n2019: **Sharechat** (26 lakh fixed + 2.6lakh bonus + stock options) I joined Sharechat in Bangalore, as SDE1\n\n2020: Offer from Amazon ( 26.5 lakh base + 18.5 lakh joining bonus= **43 lakh**) in SDE2 role. They offer stocks but it is vested only 5 percent in the first year, so I ignored it.\n\nOffer from **Uber** (33 lakh base + 15 lakh stock options per year (96000 USD over 4 years)+ 5 lakh joining bonus = **55** lakh per year) in SDE2 role. **I think that is the top salary, you can get 3.5–4 years experience in India, but I might be wrong.**\nA lot of startups and established companies in India pay over 35 lakh per year for the top talent in programming, for just over 4 years of experience, like Dunzo, Dream11, Rubric, etc, check\n[Compensation](https://leetcode.com/discuss/compensation)\nI rejected both offers and ended up joining **Booking.com** as I wanted to explore Europe. I can’t disclose my current salary.\n\nI got so many offers because I practiced a lot of data structure and algorithms. I solved over 410 questions in Leetcode.\n[Nil Madhab-Leetcode Profile](https://leetcode.com/nilmadhab/)\nLet's first talk about the Max Area of Island problem (LC 695).\n\n## Problem Statement\n\nGiven a non-empty 2D array `grid` of 0's and 1's, an **island** is a group of 1's (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.\n\nFind the maximum area of an island in the given 2D array. (If there is no island, the maximum area is 0.)\n\n**Example 1:**\n\n`[[0,0,1,0,0,0,0,1,0,0,0,0,0],\n [0,0,0,0,0,0,0,1,1,1,0,0,0],\n [0,1,1,0,1,0,0,0,0,0,0,0,0],\n [0,1,0,0,1,1,0,0,1,0,1,0,0],\n [0,1,0,0,1,1,0,0,1,1,1,0,0],\n [0,0,0,0,0,0,0,0,0,0,1,0,0],\n [0,0,0,0,0,0,0,1,1,1,0,0,0],\n [0,0,0,0,0,0,0,1,1,0,0,0,0]]`\n\nGiven the above grid, return `6`. Note the answer is not 11, because the island must be connected 4-directionally.\n\n**Example 2:**\n\n`[[0,0,0,0,0,0,0,0]]`\n\nGiven the above grid, return `0`.\n\nNote: The length of each dimension in the given `grid` does not exceed 50.\n## Youtube Discussion\n\n{% youtube iO9Y8zDqwaQ %}\n\n## Solution\n\nFor solving this problem, we have to visualize the 2D matrix as a Graph. We can apply `DFS` or ``BFS with this problem. In this tutorial, we are going to use the BFS algorithm.\n\nBreadth-first search is a graph traversal algorithm that starts traversing the graph from the root node and explores all the neighboring nodes. Then, it selects the nearest node and explores all the unexplored nodes. The algorithm follows the same process for each of the nearest nodes until it finds the goal. [(Source)](https://www.javatpoint.com/breadth-first-search-algorithm)\n\nThe lands should be connected vertically and horizontally. (not diagonally) which reduces possible paths for us to 4; UP(0,1) , DOWN (0,-1), LEFT(1,0),RIGHT(0,-1). So when we find a point which is a land, we will do a BFS on that point and we will accumulate the total points which are land and are connected to that particular point.\n\nWe will keep a visited matrix of size equal to the given grid so that we can keep track of all the visited points (so we are not stuck in an infinite loop).\n\nWe will keep another variable named max_area, which finds the answer. max_area is compared with the area for a possible island and hence maximum area is found.\n\nThe following is the well-documented python code for the problem.\n{% gist https://gist.github.com/sksaikia/65faf8ae06cbbf51edb543a0ee292b95.js %}\nThe Java code for this problem is given below.\n{% gist https://gist.github.com/sksaikia/38842f720b77b2dc8e30758802427fa4.js %}\nThis problem can be solved with DFS too. All the code can be found in the following GitHub repo.\n{% github webtutsplus/Leetcode %}\n**Thank You for reading and Follow this publication for more Leetcode Solutions!😃**\n\n\n	{"boosted_additional_tags": "", "boosted_dev_digest_email": false, "boosted_additional_articles": false}	\N	career, programming, algorithms, leetcode	--- !ruby/struct:Articles::CachedEntity\nname: nilmadhab mondal\nusername: nilmadhab\nslug: nilmadhab\nprofile_image_90: "/uploads/user/profile_image/1/d9b0e3b7-ad59-45d5-b516-4e8ffd0a6958.jpeg"\nprofile_image_url: "/uploads/user/profile_image/1/d9b0e3b7-ad59-45d5-b516-4e8ffd0a6958.jpeg"\n	nilmadhab mondal	nilmadhab	\N	{}	\N	0	\N	0	2021-02-15 19:12:23.589911	\N	In this series, I am going to solve Leetcode medium problems live with my friend, which you can see o...	2021-02-20 13:39:59.579012	t	5	5	\N	f	1613416343	\N	350987	en	\N	2021-02-15 19:12:23.564823	\N	/i/juuvz456pz3iapzfq0fx.png	#dddddd	4	0	0	0	\N	\N	11	218af6c5107d63d2963e9e0c913269aa77d8c1715f104f38f95955f02521f73eb87c7e583cc1d496f7ebd2c91049ef80bffb167f154f690b174f7043	/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-max-area-of-island-n80	0	0	0	<p>In this series, I am going to solve Leetcode medium problems live with my friend, which you can see on our youtube channel, Today we will do Problem 695. <strong>Max Area of Island.</strong></p>\n\n<p><a href="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--zIUIhgc_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.simplecoding.dev:3000/i/13pue2jkeoecc50bymdk.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/dgjb1x9mh/image/fetch/s--zIUIhgc_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.simplecoding.dev:3000/i/13pue2jkeoecc50bymdk.png" alt="Alt Text" loading="lazy"></a></p>\n\n<p>A little bit about me, I have offers from <strong>Uber India</strong> and <strong>Amazon India</strong> in the past, and I am currently working for <strong>Booking.com</strong> in Amsterdam.</p>\n\n<h2>\n  <a name="motivation-to-learn-algorithms" href="#motivation-to-learn-algorithms" class="anchor">\n  </a>\n  Motivation to Learn Algorithms\n</h2>\n\n\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/sksaikia/b3e44a32bab220f3773ca25ba9b9adf2.js"></script>\n</div>\n\n\n<p>I have worked in India as a software developer for 4 years. I started learning algorithms and data structure from my 3rd year in college as I was from an Electronics background. Here is my salary progression over the years, (all in INR, Lakh per year)</p>\n\n<p>2016: placement in <strong>Flipkart</strong> from college, IIT KGP(18 lakh base + 2 lakh bonus = <strong>20</strong> lakh). But the offer was delayed by 6 months, as Flipkart was going through some trouble, so I joined Samsung.</p>\n\n<p>2016: <strong>Samsung Noida</strong>(off campus ) (14 lakh base + 5 lakh joining bonus = <strong>19</strong> lakh). They pay to IITians 19 lakh but other colleges 9-14 lakh for the same work, which is bogus.</p>\n\n<p>2017: <strong>Oyorooms</strong> (<strong>17</strong> lakh fixed, no bonus, no stocks). I took a pay cut as I was not learning anything in Samsung, so joined Oyo.</p>\n\n<p>2019: <strong>Sharechat</strong> (26 lakh fixed + 2.6lakh bonus + stock options) I joined Sharechat in Bangalore, as SDE1</p>\n\n<p>2020: Offer from Amazon ( 26.5 lakh base + 18.5 lakh joining bonus= <strong>43 lakh</strong>) in SDE2 role. They offer stocks but it is vested only 5 percent in the first year, so I ignored it.</p>\n\n<p>Offer from <strong>Uber</strong> (33 lakh base + 15 lakh stock options per year (96000 USD over 4 years)+ 5 lakh joining bonus = <strong>55</strong> lakh per year) in SDE2 role. <strong>I think that is the top salary, you can get 3.5–4 years experience in India, but I might be wrong.</strong><br>\nA lot of startups and established companies in India pay over 35 lakh per year for the top talent in programming, for just over 4 years of experience, like Dunzo, Dream11, Rubric, etc, check<br>\n<a href="https://leetcode.com/discuss/compensation">Compensation</a><br>\nI rejected both offers and ended up joining <strong>Booking.com</strong> as I wanted to explore Europe. I can’t disclose my current salary.</p>\n\n<p>I got so many offers because I practiced a lot of data structure and algorithms. I solved over 410 questions in Leetcode.<br>\n<a href="https://leetcode.com/nilmadhab/">Nil Madhab-Leetcode Profile</a><br>\nLet's first talk about the Max Area of Island problem (LC 695).</p>\n<h2>\n  <a name="problem-statement" href="#problem-statement" class="anchor">\n  </a>\n  Problem Statement\n</h2>\n\n<p>Given a non-empty 2D array <code>grid</code> of 0's and 1's, an <strong>island</strong> is a group of 1's (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.</p>\n\n<p>Find the maximum area of an island in the given 2D array. (If there is no island, the maximum area is 0.)</p>\n\n<p><strong>Example 1:</strong></p>\n\n<p><code>[[0,0,1,0,0,0,0,1,0,0,0,0,0],<br>\n [0,0,0,0,0,0,0,1,1,1,0,0,0],<br>\n [0,1,1,0,1,0,0,0,0,0,0,0,0],<br>\n [0,1,0,0,1,1,0,0,1,0,1,0,0],<br>\n [0,1,0,0,1,1,0,0,1,1,1,0,0],<br>\n [0,0,0,0,0,0,0,0,0,0,1,0,0],<br>\n [0,0,0,0,0,0,0,1,1,1,0,0,0],<br>\n [0,0,0,0,0,0,0,1,1,0,0,0,0]]</code></p>\n\n<p>Given the above grid, return <code>6</code>. Note the answer is not 11, because the island must be connected 4-directionally.</p>\n\n<p><strong>Example 2:</strong></p>\n\n<p><code>[[0,0,0,0,0,0,0,0]]</code></p>\n\n<p>Given the above grid, return <code>0</code>.</p>\n\n<p>Note: The length of each dimension in the given <code>grid</code> does not exceed 50.</p>\n<h2>\n  <a name="youtube-discussion" href="#youtube-discussion" class="anchor">\n  </a>\n  Youtube Discussion\n</h2>\n\n<p><iframe width="710" height="399" src="https://www.youtube.com/embed/iO9Y8zDqwaQ" allowfullscreen loading="lazy">\n</iframe>\n</p>\n\n<h2>\n  <a name="solution" href="#solution" class="anchor">\n  </a>\n  Solution\n</h2>\n\n<p>For solving this problem, we have to visualize the 2D matrix as a Graph. We can apply <code>DFS</code> or ``BFS with this problem. In this tutorial, we are going to use the BFS algorithm.</p>\n\n<p>Breadth-first search is a graph traversal algorithm that starts traversing the graph from the root node and explores all the neighboring nodes. Then, it selects the nearest node and explores all the unexplored nodes. The algorithm follows the same process for each of the nearest nodes until it finds the goal. <a href="https://www.javatpoint.com/breadth-first-search-algorithm">(Source)</a></p>\n\n<p>The lands should be connected vertically and horizontally. (not diagonally) which reduces possible paths for us to 4; UP(0,1) , DOWN (0,-1), LEFT(1,0),RIGHT(0,-1). So when we find a point which is a land, we will do a BFS on that point and we will accumulate the total points which are land and are connected to that particular point.</p>\n\n<p>We will keep a visited matrix of size equal to the given grid so that we can keep track of all the visited points (so we are not stuck in an infinite loop).</p>\n\n<p>We will keep another variable named max_area, which finds the answer. max_area is compared with the area for a possible island and hence maximum area is found.</p>\n\n<p>The following is the well-documented python code for the problem.<br>\n</p>\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/sksaikia/65faf8ae06cbbf51edb543a0ee292b95.js"></script>\n</div>\n<br>\nThe Java code for this problem is given below.<br>\n<div class="ltag_gist-liquid-tag">\n  <script id="gist-ltag" src="https://gist.github.com/sksaikia/38842f720b77b2dc8e30758802427fa4.js"></script>\n</div>\n<br>\nThis problem can be solved with DFS too. All the code can be found in the following GitHub repo.<br>\n<div class="ltag-github-readme-tag">\n  <div class="readme-overview">\n    <h2>\n      <img src="/assets/github-logo.svg" alt="GitHub logo" loading="lazy">\n      <a href="https://github.com/webtutsplus">\n        webtutsplus\n      </a> / <a style="font-weight: 600;" href="https://github.com/webtutsplus/LeetCode">\n        LeetCode\n      </a>\n    </h2>\n    <h3>\n      \n    </h3>\n  </div>\n</div>\n<br>\n<strong>Thank You for reading and Follow this publication for more Leetcode Solutions!😃</strong>\n\n	0	t	2021-02-15 19:12:23.564823	f	0	0	4	t	0	\N	\N	t	solve-leetcode-problems-and-get-offers-from-your-dream-companies-max-area-of-island-n80	\N	25	Solve Leetcode Problems and Get Offers From Your Dream Companies||Max Area of Island	2021-02-20 13:40:00.044207	1	0	\N	\N	\N	0	\N	\N	\N
\.


--
-- Data for Name: audit_logs; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.audit_logs (id, category, created_at, data, roles, slug, updated_at, user_id) FROM stdin;
1	internal.audit.log	2021-02-10 14:31:27.418748	{"action": "create", "locale": null, "controller": "admin/configs", "site_config": {"community_name": "Simple Coding", "suggested_tags": "java", "suggested_users": "", "community_description": "For Developers"}, "confirmation": "My username is @nilmadhab and this action is 100% safe and appropriate."}	{super_admin}	create	2021-02-10 14:31:27.418748	1
2	internal.audit.log	2021-02-10 14:31:27.448732	{"action": "create", "locale": null, "controller": "admin/configs", "site_config": {"community_name": "Simple Coding", "suggested_tags": "java", "suggested_users": "", "community_description": "For Developers"}, "confirmation": "My username is @nilmadhab and this action is 100% safe and appropriate."}	{super_admin}	create	2021-02-10 14:31:27.448732	1
3	internal.audit.log	2021-02-10 14:31:27.470504	{"action": "create", "locale": null, "controller": "admin/configs", "site_config": {"community_name": "Simple Coding", "suggested_tags": "java", "suggested_users": "", "community_description": "For Developers"}, "confirmation": "My username is @nilmadhab and this action is 100% safe and appropriate."}	{super_admin}	create	2021-02-10 14:31:27.470504	1
4	internal.audit.log	2021-02-10 14:31:27.496895	{"action": "create", "locale": null, "controller": "admin/configs", "site_config": {"community_name": "Simple Coding", "suggested_tags": "java", "suggested_users": "", "community_description": "For Developers"}, "confirmation": "My username is @nilmadhab and this action is 100% safe and appropriate."}	{super_admin}	create	2021-02-10 14:31:27.496895	1
5	internal.audit.log	2021-02-10 14:31:27.516782	{"action": "create", "locale": null, "controller": "admin/configs", "site_config": {"community_name": "Simple Coding", "suggested_tags": "java", "suggested_users": "", "community_description": "For Developers"}, "confirmation": "My username is @nilmadhab and this action is 100% safe and appropriate."}	{super_admin}	create	2021-02-10 14:31:27.516782	1
6	internal.audit.log	2021-02-10 14:32:01.668998	{"action": "create", "locale": null, "controller": "admin/configs", "site_config": {"community_name": "Simple Coding", "suggested_tags": "java", "suggested_users": "nilmadhab1994@gmail.com", "community_description": "For Developers"}, "confirmation": "My username is @nilmadhab and this action is 100% safe and appropriate."}	{super_admin}	create	2021-02-10 14:32:01.668998	1
7	internal.audit.log	2021-02-10 14:32:01.685803	{"action": "create", "locale": null, "controller": "admin/configs", "site_config": {"community_name": "Simple Coding", "suggested_tags": "java", "suggested_users": "nilmadhab1994@gmail.com", "community_description": "For Developers"}, "confirmation": "My username is @nilmadhab and this action is 100% safe and appropriate."}	{super_admin}	create	2021-02-10 14:32:01.685803	1
8	internal.audit.log	2021-02-10 14:32:01.701081	{"action": "create", "locale": null, "controller": "admin/configs", "site_config": {"community_name": "Simple Coding", "suggested_tags": "java", "suggested_users": "nilmadhab1994@gmail.com", "community_description": "For Developers"}, "confirmation": "My username is @nilmadhab and this action is 100% safe and appropriate."}	{super_admin}	create	2021-02-10 14:32:01.701081	1
9	internal.audit.log	2021-02-10 14:32:01.71771	{"action": "create", "locale": null, "controller": "admin/configs", "site_config": {"community_name": "Simple Coding", "suggested_tags": "java", "suggested_users": "nilmadhab1994@gmail.com", "community_description": "For Developers"}, "confirmation": "My username is @nilmadhab and this action is 100% safe and appropriate."}	{super_admin}	create	2021-02-10 14:32:01.71771	1
10	internal.audit.log	2021-02-10 14:32:01.732537	{"action": "create", "locale": null, "controller": "admin/configs", "site_config": {"community_name": "Simple Coding", "suggested_tags": "java", "suggested_users": "nilmadhab1994@gmail.com", "community_description": "For Developers"}, "confirmation": "My username is @nilmadhab and this action is 100% safe and appropriate."}	{super_admin}	create	2021-02-10 14:32:01.732537	1
\.


--
-- Data for Name: badge_achievements; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.badge_achievements (id, badge_id, created_at, rewarder_id, rewarding_context_message, rewarding_context_message_markdown, updated_at, user_id) FROM stdin;
\.


--
-- Data for Name: badges; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.badges (id, badge_image, created_at, description, slug, title, updated_at) FROM stdin;
1	39.png	2021-02-10 13:39:00.760828	Officiis ad quo accusamus.	necessitatibus-94	necessitatibus 94	2021-02-10 13:39:00.760828
2	2.png	2021-02-10 13:39:00.852455	Consequatur id aliquam occaecati.	voluptate-95	voluptate 95	2021-02-10 13:39:00.852455
3	35.png	2021-02-10 13:39:00.95	Quo eos aspernatur eveniet.	assumenda-8	assumenda 8	2021-02-10 13:39:00.95
4	22.png	2021-02-10 13:39:01.032115	Doloribus adipisci rem sed.	fugiat-35	fugiat 35	2021-02-10 13:39:01.032115
5	15.png	2021-02-10 13:39:01.101558	Sed itaque facilis nemo.	dolor-58	dolor 58	2021-02-10 13:39:01.101558
\.


--
-- Data for Name: banished_users; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.banished_users (id, banished_by_id, created_at, updated_at, username) FROM stdin;
\.


--
-- Data for Name: blazer_audits; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.blazer_audits (id, created_at, data_source, query_id, statement, user_id) FROM stdin;
\.


--
-- Data for Name: blazer_checks; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.blazer_checks (id, check_type, created_at, creator_id, emails, last_run_at, message, query_id, schedule, slack_channels, state, updated_at) FROM stdin;
\.


--
-- Data for Name: blazer_dashboard_queries; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.blazer_dashboard_queries (id, created_at, dashboard_id, "position", query_id, updated_at) FROM stdin;
\.


--
-- Data for Name: blazer_dashboards; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.blazer_dashboards (id, created_at, creator_id, name, updated_at) FROM stdin;
\.


--
-- Data for Name: blazer_queries; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.blazer_queries (id, created_at, creator_id, data_source, description, name, statement, updated_at) FROM stdin;
\.


--
-- Data for Name: broadcasts; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.broadcasts (id, active, active_status_updated_at, banner_style, body_markdown, broadcastable_id, broadcastable_type, created_at, processed_html, title, type_of, updated_at) FROM stdin;
1	t	2021-02-10 13:39:00.21632	\N	\N	\N	Welcome	2021-02-10 13:39:00.216403	Welcome to DEV! 👋 I'm Sloan, the community mascot and I'm here to help get you started. Let's begin by <a href='/settings'>setting up your profile</a>!	Welcome Notification: set_up_profile	Welcome	2021-02-10 13:39:16.915687
2	t	2021-02-10 13:39:00.233815	\N	\N	\N	Welcome	2021-02-10 13:39:00.233878	Sloan here again! 👋 DEV is a friendly community. Why not introduce yourself by leaving a comment in <a href='/welcome'>the welcome thread</a>!	Welcome Notification: welcome_thread	Welcome	2021-02-10 13:39:16.934567
3	t	2021-02-10 13:39:00.250273	\N	\N	\N	Welcome	2021-02-10 13:39:00.250376	You're on a roll! 🎉 Do you have a Twitter account? Consider <a href='/settings'>connecting it</a> so we can @mention you if we share your post via our Twitter account <a href='https://twitter.com/thePracticalDev'>@thePracticalDev</a>.	Welcome Notification: twitter_connect	Welcome	2021-02-10 13:39:16.956451
4	t	2021-02-10 13:39:00.268502	\N	\N	\N	Welcome	2021-02-10 13:39:00.26858	You're on a roll! 🎉  Do you have a Facebook account? Consider <a href='/settings'>connecting it</a>.	Welcome Notification: facebook_connect	Welcome	2021-02-10 13:39:16.973972
5	t	2021-02-10 13:39:00.284462	\N	\N	\N	Welcome	2021-02-10 13:39:00.284528	You're on a roll! 🎉  Do you have a GitHub account? Consider <a href='/settings'>connecting it</a> so you can pin any of your repos to your profile.	Welcome Notification: github_connect	Welcome	2021-02-10 13:39:16.991429
6	t	2021-02-10 13:39:00.300269	\N	\N	\N	Welcome	2021-02-10 13:39:00.300334	Hi, it's me again! 👋 Now that you're a part of the DEV community, let's focus on personalizing your content. You can start by <a href='/tags'>following some tags</a> to help customize your feed! 🎉	Welcome Notification: customize_feed	Welcome	2021-02-10 13:39:17.008711
7	t	2021-02-10 13:39:00.316474	\N	\N	\N	Welcome	2021-02-10 13:39:00.316539	Sloan here! 👋 Did you know that that you can customize your DEV experience? Try changing <a href='settings/customization'>your font and theme</a> and find the best style for you!	Welcome Notification: customize_experience	Welcome	2021-02-10 13:39:17.023623
8	t	2021-02-10 13:39:00.331266	\N	\N	\N	Welcome	2021-02-10 13:39:00.33133	Sloan here! 👋 I noticed that you haven't <a href='https://dev.to/t/discuss'>started a discussion</a> yet. Starting a discussion is easy to do; just click on 'Write a Post' in the sidebar of the tag page to get started!	Welcome Notification: start_discussion	Welcome	2021-02-10 13:39:17.039546
9	t	2021-02-10 13:39:00.349058	\N	\N	\N	Welcome	2021-02-10 13:39:00.349146	Sloan here! 👋 I noticed that you haven't <a href='https://dev.to/t/explainlikeimfive'>asked a question</a> yet. Asking a question is easy to do; just click on 'Write a Post' in the sidebar of the tag page to get started!	Welcome Notification: ask_question	Welcome	2021-02-10 13:39:17.05615
10	t	2021-02-10 13:39:00.365854	\N	\N	\N	Welcome	2021-02-10 13:39:00.365924	Sloan here! 👋 I noticed that you haven't <a href='https://dev.to/t/explainlikeimfive'>asked a question</a> or <a href='https://dev.to/t/discuss'>started a discussion</a> yet. It's easy to do both of these; just click on 'Write a Post' in the sidebar of the tag page to get started!	Welcome Notification: discuss_and_ask	Welcome	2021-02-10 13:39:17.074953
11	t	2021-02-10 13:39:00.384948	\N	\N	\N	Welcome	2021-02-10 13:39:00.385019	Sloan here, with one last tip! 👋 Have you downloaded the DEV mobile app yet? Consider <a href='https://dev.to/downloads'>downloading</a> it so you can access all of your favorite DEV content on the go!	Welcome Notification: download_app	Welcome	2021-02-10 13:39:17.091985
\.


--
-- Data for Name: buffer_updates; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.buffer_updates (id, approver_user_id, article_id, body_text, buffer_id_code, buffer_profile_id_code, buffer_response, composer_user_id, created_at, social_service_name, status, tag_id, updated_at) FROM stdin;
\.


--
-- Data for Name: chat_channel_memberships; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.chat_channel_memberships (id, chat_channel_id, created_at, has_unopened_messages, last_opened_at, role, show_global_badge_notification, status, updated_at, user_id) FROM stdin;
\.


--
-- Data for Name: chat_channels; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.chat_channels (id, channel_name, channel_type, created_at, description, discoverable, last_message_at, slug, status, updated_at) FROM stdin;
1	@org5374 private group chat	invite_only	2021-02-10 13:38:48.695641	\N	f	2021-02-03 13:38:48.673589	org5374-private-group-chat	active	2021-02-10 13:38:48.695641
2	@org8802 private group chat	invite_only	2021-02-10 13:38:48.916421	\N	f	2021-02-03 13:38:48.913843	org8802-private-group-chat	active	2021-02-10 13:38:48.916421
3	@org8336 private group chat	invite_only	2021-02-10 13:38:49.119631	\N	f	2021-02-03 13:38:49.116248	org8336-private-group-chat	active	2021-02-10 13:38:49.119631
\.


--
-- Data for Name: classified_listing_categories; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.classified_listing_categories (id, cost, created_at, name, rules, slug, social_preview_color, social_preview_description, updated_at) FROM stdin;
1	1	2021-02-10 13:39:02.532494	Conference CFP	Currently open for proposals, with link to form.	cfp	\N	\N	2021-02-10 13:39:02.532494
2	1	2021-02-10 13:39:02.551771	Education/Courses	Educational material and/or schools/bootcamps.	education	\N	\N	2021-02-10 13:39:02.551771
3	25	2021-02-10 13:39:02.571417	Job Listings	Companies offering employment right now.	jobs	\N	\N	2021-02-10 13:39:02.571417
4	1	2021-02-10 13:39:02.594754	Stuff for Sale	Personally owned physical items for sale.	forsale	\N	\N	2021-02-10 13:39:02.594754
5	1	2021-02-10 13:39:02.61786	Upcoming Events	In-person or online events with date included.	events	\N	\N	2021-02-10 13:39:02.61786
6	1	2021-02-10 13:39:02.638263	Miscellaneous	Must not fit in any other category.	misc	\N	\N	2021-02-10 13:39:02.638263
\.


--
-- Data for Name: classified_listings; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.classified_listings (id, body_markdown, bumped_at, cached_tag_list, classified_listing_category_id, contact_via_connect, created_at, expires_at, last_buffered, location, organization_id, originally_published_at, processed_html, published, slug, title, updated_at, user_id) FROM stdin;
\.


--
-- Data for Name: collections; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.collections (id, created_at, description, main_image, organization_id, published, slug, social_image, title, updated_at, user_id) FROM stdin;
\.


--
-- Data for Name: comments; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.comments (id, ancestry, body_html, body_markdown, commentable_id, commentable_type, created_at, deleted, edited, edited_at, hidden_by_commentable_user, id_code, markdown_character_count, positive_reactions_count, processed_html, public_reactions_count, reactions_count, receive_notifications, score, spaminess_rating, updated_at, user_id) FROM stdin;
\.


--
-- Data for Name: credits; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.credits (id, cost, created_at, organization_id, purchase_id, purchase_type, spent, spent_at, updated_at, user_id) FROM stdin;
\.


--
-- Data for Name: custom_profile_fields; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.custom_profile_fields (id, attribute_name, created_at, description, label, profile_id, updated_at) FROM stdin;
\.


--
-- Data for Name: data_update_scripts; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.data_update_scripts (id, created_at, error, file_name, finished_at, run_at, status, updated_at) FROM stdin;
51	2021-02-10 13:39:05.450971	\N	20200217131245_re_index_existing_articles_with_approved	2021-02-10 13:39:05.587209	2021-02-10 13:39:05.568964	2	2021-02-10 13:39:05.595008
4	2021-02-10 13:39:05.450971	\N	20200217215802_index_listings_to_elasticsearch	2021-02-10 13:39:05.620348	2021-02-10 13:39:05.605226	2	2021-02-10 13:39:05.629092
44	2021-02-10 13:39:05.450971	\N	20200305201627_index_users_to_elasticsearch	2021-02-10 13:39:15.177129	2021-02-10 13:39:15.161471	2	2021-02-10 13:39:15.184444
8	2021-02-10 13:39:05.450971	\N	20200406213152_re_index_users_to_elasticsearch	2021-02-10 13:39:16.201887	2021-02-10 13:39:16.184221	2	2021-02-10 13:39:16.210341
22	2021-02-10 13:39:05.450971	\N	20200410152018_resync_elasticsearch_documents	2021-02-10 13:39:16.51095	2021-02-10 13:39:16.219699	2	2021-02-10 13:39:16.520434
70	2021-02-10 13:39:05.450971	\N	20200415200651_index_reading_list_reactions	2021-02-10 13:39:16.553983	2021-02-10 13:39:16.532471	2	2021-02-10 13:39:16.562142
14	2021-02-10 13:39:05.450971	\N	20200519142908_re_index_feed_content_and_users_to_elasticsearch	2021-02-10 13:39:16.702511	2021-02-10 13:39:16.6545	2	2021-02-10 13:39:16.709573
52	2021-02-10 13:39:05.450971	\N	20200526181850_update_public_reaction_counts_again	2021-02-10 13:39:16.768696	2021-02-10 13:39:16.720117	2	2021-02-10 13:39:16.777868
67	2021-02-10 13:39:05.450971	\N	20200530085153_backfill_broadcasts_timestamps	2021-02-10 13:39:16.813721	2021-02-10 13:39:16.788533	2	2021-02-10 13:39:16.824508
5	2021-02-10 13:39:05.450971	\N	20200708163323_backfill_broadcastable_for_broadcasts	2021-02-10 13:39:17.100913	2021-02-10 13:39:16.858694	2	2021-02-10 13:39:17.108304
18	2021-02-10 13:39:05.450971	\N	20200715140848_backfill_user_registered_at	2021-02-10 13:39:17.155679	2021-02-10 13:39:17.117391	2	2021-02-10 13:39:17.165316
50	2021-02-10 13:39:05.450971	\N	20200803142830_reindex_listing_search_column	2021-02-10 13:39:21.779162	2021-02-10 13:39:21.10561	2	2021-02-10 13:39:21.78549
63	2021-02-10 13:39:05.450971	\N	20200810083831_remove_orphaned_ahoy_rows	2021-02-10 13:39:21.880829	2021-02-10 13:39:21.852315	2	2021-02-10 13:39:21.888794
56	2021-02-10 13:39:05.450971	\N	20200813072205_remove_orphaned_display_ad_events	2021-02-10 13:39:21.92646	2021-02-10 13:39:21.901394	2	2021-02-10 13:39:21.934145
48	2021-02-10 13:39:05.450971	\N	20200818103028_nullify_orphaned_by_article_html_variant_trials	2021-02-10 13:39:21.969185	2021-02-10 13:39:21.945535	2	2021-02-10 13:39:21.976095
11	2021-02-10 13:39:05.450971	\N	20200818170410_remove_orphaned_poll_votes	2021-02-10 13:39:22.01349	2021-02-10 13:39:21.986665	2	2021-02-10 13:39:22.020559
42	2021-02-10 13:39:05.450971	\N	20200818170505_remove_orphaned_poll_options	2021-02-10 13:39:22.128657	2021-02-10 13:39:22.080573	2	2021-02-10 13:39:22.137327
37	2021-02-10 13:39:05.450971	\N	20200818170523_remove_orphaned_polls	2021-02-10 13:39:22.172141	2021-02-10 13:39:22.148517	2	2021-02-10 13:39:22.180257
66	2021-02-10 13:39:05.450971	\N	20200819025131_migrate_profile_data	2021-02-10 13:39:22.227152	2021-02-10 13:39:22.191126	2	2021-02-10 13:39:22.233983
61	2021-02-10 13:39:05.450971	\N	20200821103405_remove_orphaned_credits_by_organization	2021-02-10 13:39:22.385864	2021-02-10 13:39:22.361725	2	2021-02-10 13:39:22.394956
25	2021-02-10 13:39:05.450971	\N	20200821103718_remove_orphaned_display_ads_by_organization	2021-02-10 13:39:22.426356	2021-02-10 13:39:22.405373	2	2021-02-10 13:39:22.433763
46	2021-02-10 13:39:05.450971	\N	20200825095213_remove_orphaned_buffer_updates_by_article	2021-02-10 13:39:22.604717	2021-02-10 13:39:22.58213	2	2021-02-10 13:39:22.611923
71	2021-02-10 13:39:05.450971	\N	20200825095512_nullify_orphaned_comments_by_article	2021-02-10 13:39:22.646898	2021-02-10 13:39:22.622878	2	2021-02-10 13:39:22.6545
20	2021-02-10 13:39:05.450971	\N	20200825102956_remove_orphaned_notifications_by_article	2021-02-10 13:39:22.731049	2021-02-10 13:39:22.709587	2	2021-02-10 13:39:22.739174
29	2021-02-10 13:39:05.450971	\N	20200825103244_remove_orphaned_rating_votes_by_article	2021-02-10 13:39:22.818053	2021-02-10 13:39:22.796127	2	2021-02-10 13:39:22.827872
13	2021-02-10 13:39:05.450971	\N	20200826075937_migrate_profile_field_groups	2021-02-10 13:39:22.875529	2021-02-10 13:39:22.839512	2	2021-02-10 13:39:22.881626
24	2021-02-10 13:39:05.450971	\N	20200826092816_remove_orphaned_notes_by_user	2021-02-10 13:39:22.912927	2021-02-10 13:39:22.890643	2	2021-02-10 13:39:22.922872
39	2021-02-10 13:39:05.450971	\N	20200826133748_nullify_orphaned_tweets_by_user	2021-02-10 13:39:22.957167	2021-02-10 13:39:22.934068	2	2021-02-10 13:39:22.965309
43	2021-02-10 13:39:05.450971	\N	20200826140317_remove_orphaned_articles_by_user	2021-02-10 13:39:22.996576	2021-02-10 13:39:22.975996	2	2021-02-10 13:39:23.006459
34	2021-02-10 13:39:05.450971	\N	20200826140754_remove_orphaned_collections_by_user	2021-02-10 13:39:23.039699	2021-02-10 13:39:23.017103	2	2021-02-10 13:39:23.04728
60	2021-02-10 13:39:05.450971	\N	20200826141015_remove_orphaned_github_repos_by_user	2021-02-10 13:39:23.118967	2021-02-10 13:39:23.095946	2	2021-02-10 13:39:23.145141
65	2021-02-10 13:39:05.450971	\N	20200826141145_remove_orphaned_organization_memberships_by_user	2021-02-10 13:39:23.224128	2021-02-10 13:39:23.201154	2	2021-02-10 13:39:23.23332
6	2021-02-10 13:39:05.450971	\N	20200826141447_nullify_orphaned_page_views_by_user	2021-02-10 13:39:23.267142	2021-02-10 13:39:23.243615	2	2021-02-10 13:39:23.274284
55	2021-02-10 13:39:05.450971	\N	20200826141550_nullify_orphaned_rating_votes_by_user	2021-02-10 13:39:23.306454	2021-02-10 13:39:23.284854	2	2021-02-10 13:39:23.313098
7	2021-02-10 13:39:05.450971	\N	20200901040521_create_profile_fields	2021-02-10 13:39:23.616443	2021-02-10 13:39:23.363164	2	2021-02-10 13:39:23.624045
33	2021-02-10 13:39:05.450971	\N	20200901194251_reindex_reading_list_reactions	2021-02-10 13:39:23.701788	2021-02-10 13:39:23.684074	2	2021-02-10 13:39:23.709996
27	2021-02-10 13:39:05.450971	\N	20200904141057_cleanup_articles_with_invalid_feed_source_url	2021-02-10 13:39:23.799836	2021-02-10 13:39:23.764772	2	2021-02-10 13:39:23.807757
2	2021-02-10 13:39:05.450971	\N	20200910135958_remove_draft_articles_with_duplicate_user_id_title_body_markdown	2021-02-10 13:39:23.842383	2021-02-10 13:39:23.817957	2	2021-02-10 13:39:23.852355
17	2021-02-10 13:39:05.450971	\N	20200911045602_reindex_articles_with_videos	2021-02-10 13:39:23.946149	2021-02-10 13:39:23.915868	2	2021-02-10 13:39:23.953429
23	2021-02-10 13:39:05.450971	\N	20200914042434_reindex_users_for_profiles	2021-02-10 13:39:23.97801	2021-02-10 13:39:23.962404	2	2021-02-10 13:39:23.985445
31	2021-02-10 13:39:05.450971	\N	20200916202343_backfill_co_author_ids_for_articles	2021-02-10 13:39:24.035545	2021-02-10 13:39:23.996106	2	2021-02-10 13:39:24.043928
49	2021-02-10 13:39:05.450971	\N	20200917115821_backfill_listing_published_date	2021-02-10 13:39:24.868267	2021-02-10 13:39:24.053753	2	2021-02-10 13:39:24.876398
3	2021-02-10 13:39:05.450971	\N	20200917135847_nullify_orphan_rows_from_buffer_updates_by_composer_user_id	2021-02-10 13:39:24.910366	2021-02-10 13:39:24.887942	2	2021-02-10 13:39:24.917855
1	2021-02-10 13:39:05.450971	\N	20200917150808_nullify_orphaned_tags_by_mod_chat_channel_id	2021-02-10 13:39:24.952796	2021-02-10 13:39:24.927975	2	2021-02-10 13:39:24.960595
12	2021-02-10 13:39:05.450971	\N	20200922065307_fix_dribbble_url_profile_field	2021-02-10 13:39:25.034895	2021-02-10 13:39:25.010807	2	2021-02-10 13:39:25.043042
68	2021-02-10 13:39:05.450971	\N	20201015190914_update_article_main_image_path	2021-02-10 13:39:25.393306	2021-02-10 13:39:25.369478	2	2021-02-10 13:39:25.403258
40	2021-02-10 13:39:05.450971	\N	20201019163242_resave_articles_and_comments_for_imgproxy	2021-02-10 13:39:25.451716	2021-02-10 13:39:25.427606	2	2021-02-10 13:39:25.461475
64	2021-02-10 13:39:05.450971	\N	20201019192035_backfill_registered_for_users	2021-02-10 13:39:25.50748	2021-02-10 13:39:25.473746	2	2021-02-10 13:39:25.51745
41	2021-02-10 13:39:05.450971	\N	20201020215535_resave_articles_and_comments_for_imgproxy	2021-02-10 13:39:25.562388	2021-02-10 13:39:25.528555	2	2021-02-10 13:39:25.57067
53	2021-02-10 13:39:05.450971	\N	20201030015634_make_tags_with_mods_supported	2021-02-10 13:39:25.710971	2021-02-10 13:39:25.687433	2	2021-02-10 13:39:25.719932
30	2021-02-10 13:39:05.450971	\N	20201120001727_populate_explicit_follow_points	2021-02-10 13:39:25.971879	2021-02-10 13:39:25.943076	2	2021-02-10 13:39:25.978666
47	2021-02-10 13:39:05.450971	\N	20201209134953_touch_articles_with_capitalized_paths	2021-02-10 13:39:26.187974	2021-02-10 13:39:26.160401	2	2021-02-10 13:39:26.195867
59	2021-02-10 13:39:05.450971	\N	20201210163704_set_contact_email_address	2021-02-10 13:39:26.225534	2021-02-10 13:39:26.206704	2	2021-02-10 13:39:26.233815
19	2021-02-10 13:39:05.450971	\N	20201218173445_remove_collective_noun_from_config	2021-02-10 13:39:26.388041	2021-02-10 13:39:26.370598	2	2021-02-10 13:39:26.396093
9	2021-02-10 13:39:05.450971	\N	20201228194641_append_collective_noun_to_community_name	2021-02-10 13:39:26.439134	2021-02-10 13:39:26.40562	2	2021-02-10 13:39:26.446304
69	2021-02-10 13:39:05.450971	\N	20201229230456_remove_collective_noun_from_site_config	2021-02-10 13:39:26.47593	2021-02-10 13:39:26.45528	2	2021-02-10 13:39:26.483022
28	2021-02-10 13:39:05.450971	\N	20210107151449_remove_feeds_import_feature_flag	2021-02-10 13:39:30.429675	2021-02-10 13:39:30.382041	2	2021-02-10 13:39:30.439503
62	2021-02-10 13:39:05.450971	\N	20210114174504_update_user_update_rate_limit_default	2021-02-10 13:39:30.524281	2021-02-10 13:39:30.502963	2	2021-02-10 13:39:30.532683
16	2021-02-10 13:39:05.450971	\N	20210119060219_make_local_navigation_links_relative	2021-02-10 13:39:30.621415	2021-02-10 13:39:30.584967	2	2021-02-10 13:39:30.630137
58	2021-02-10 13:39:05.450971	\N	20200214171607_index_tags_to_elasticsearch	2021-02-10 13:39:05.550037	2021-02-10 13:39:05.531409	2	2021-02-10 13:39:05.558596
85	2021-02-10 13:39:05.450971	\N	20200821103305_nullify_orphaned_collections_by_organization	2021-02-10 13:39:22.343588	2021-02-10 13:39:22.322075	2	2021-02-10 13:39:22.35082
90	2021-02-10 13:39:05.450971	\N	20200218195023_index_chat_channel_memberships_to_elasticsearch	2021-02-10 13:39:15.026879	2021-02-10 13:39:05.639375	2	2021-02-10 13:39:15.03419
10	2021-02-10 13:39:05.450971	\N	20200910140109_cleanup_published_articles_with_duplicate_user_id_title_body_markdown	2021-02-10 13:39:23.896608	2021-02-10 13:39:23.863584	2	2021-02-10 13:39:23.904907
80	2021-02-10 13:39:05.450971	\N	20200225114328_update_tags_social_preview_templates	2021-02-10 13:39:15.090764	2021-02-10 13:39:15.042758	2	2021-02-10 13:39:15.100461
15	2021-02-10 13:39:05.450971	\N	20200226193303_backfill_column_for_broadcasts	2021-02-10 13:39:15.143071	2021-02-10 13:39:15.111564	2	2021-02-10 13:39:15.15078
93	2021-02-10 13:39:05.450971	\N	20200821103834_remove_orphaned_listings_by_organization	2021-02-10 13:39:22.468688	2021-02-10 13:39:22.445847	2	2021-02-10 13:39:22.479674
91	2021-02-10 13:39:05.450971	\N	20200305201642_index_feed_content_to_elasticsearch	2021-02-10 13:39:15.212993	2021-02-10 13:39:15.193579	2	2021-02-10 13:39:15.220408
83	2021-02-10 13:39:05.450971	\N	20200313123108_index_users_to_elasticsearch	2021-02-10 13:39:15.253301	2021-02-10 13:39:15.234185	2	2021-02-10 13:39:15.260554
100	2021-02-10 13:39:05.450971	\N	20200822082229_remove_orphaned_notifications_by_organization	2021-02-10 13:39:22.515525	2021-02-10 13:39:22.491035	2	2021-02-10 13:39:22.523377
94	2021-02-10 13:39:05.450971	\N	20200324133751_update_tag_hotness_scores	2021-02-10 13:39:16.129997	2021-02-10 13:39:15.269981	2	2021-02-10 13:39:16.137407
76	2021-02-10 13:39:05.450971	\N	20200917150838_nullify_orphaned_feedback_messages_by_reporter_id	2021-02-10 13:39:24.990445	2021-02-10 13:39:24.969555	2	2021-02-10 13:39:24.998053
101	2021-02-10 13:39:05.450971	\N	20200326145114_re_index_feed_content_to_elasticsearch	2021-02-10 13:39:16.165954	2021-02-10 13:39:16.147324	2	2021-02-10 13:39:16.174222
84	2021-02-10 13:39:05.450971	\N	20200822083050_remove_orphaned_sponsorships_by_organization	2021-02-10 13:39:22.560675	2021-02-10 13:39:22.535121	2	2021-02-10 13:39:22.569818
88	2021-02-10 13:39:05.450971	\N	20200503134234_remove_github_issues	2021-02-10 13:39:16.604033	2021-02-10 13:39:16.570849	2	2021-02-10 13:39:16.611292
54	2021-02-10 13:39:05.450971	\N	20200518173504_update_public_reactions_count_from_positive_reactions_count	2021-02-10 13:39:16.638452	2021-02-10 13:39:16.621651	2	2021-02-10 13:39:16.64598
21	2021-02-10 13:39:05.450971	\N	20200825102635_remove_orphaned_notification_subscriptions_by_article	2021-02-10 13:39:22.688568	2021-02-10 13:39:22.666011	2	2021-02-10 13:39:22.696248
78	2021-02-10 13:39:05.450971	\N	20200723070918_update_articles_cached_entities	2021-02-10 13:39:21.047855	2021-02-10 13:39:17.175479	2	2021-02-10 13:39:21.056033
106	2021-02-10 13:39:05.450971	\N	20201026155851_resave_to_bust_cache_for_imgproxy	2021-02-10 13:39:25.655165	2021-02-10 13:39:25.637663	2	2021-02-10 13:39:25.676362
87	2021-02-10 13:39:05.450971	\N	20200729120730_remove_orphaned_ahoy_events	2021-02-10 13:39:21.085839	2021-02-10 13:39:21.066222	2	2021-02-10 13:39:21.093594
26	2021-02-10 13:39:05.450971	\N	20200805171911_clean_up_language_settings	2021-02-10 13:39:21.831137	2021-02-10 13:39:21.797131	2	2021-02-10 13:39:21.841315
72	2021-02-10 13:39:05.450971	\N	20200818170433_remove_orphaned_poll_skips	2021-02-10 13:39:22.058291	2021-02-10 13:39:22.03064	2	2021-02-10 13:39:22.067625
96	2021-02-10 13:39:05.450971	\N	20200825103119_remove_orphaned_profile_pins_by_article	2021-02-10 13:39:22.775467	2021-02-10 13:39:22.749561	2	2021-02-10 13:39:22.785183
104	2021-02-10 13:39:05.450971	\N	20200820153340_insert_facebook_connect_broadcast_message	2021-02-10 13:39:22.266411	2021-02-10 13:39:22.243912	2	2021-02-10 13:39:22.273048
57	2021-02-10 13:39:05.450971	\N	20200821103125_nullify_orphaned_articles_by_organization	2021-02-10 13:39:22.304303	2021-02-10 13:39:22.282661	2	2021-02-10 13:39:22.311983
99	2021-02-10 13:39:05.450971	\N	20200922072907_backfill_profile_skills_languages	2021-02-10 13:39:25.102221	2021-02-10 13:39:25.053889	2	2021-02-10 13:39:25.109129
73	2021-02-10 13:39:05.450971	\N	20200826140924_remove_orphaned_credits_by_user	2021-02-10 13:39:23.078161	2021-02-10 13:39:23.057271	2	2021-02-10 13:39:23.085709
32	2021-02-10 13:39:05.450971	\N	20200924140813_remove_reaction_index_by_name	2021-02-10 13:39:25.151105	2021-02-10 13:39:25.119679	2	2021-02-10 13:39:25.159497
105	2021-02-10 13:39:05.450971	\N	20200826141105_remove_orphaned_mentions_by_user	2021-02-10 13:39:23.180992	2021-02-10 13:39:23.156823	2	2021-02-10 13:39:23.190575
35	2021-02-10 13:39:05.450971	\N	20200826141652_remove_orphaned_reactions_by_user	2021-02-10 13:39:23.344998	2021-02-10 13:39:23.322529	2	2021-02-10 13:39:23.3526
38	2021-02-10 13:39:05.450971	ActiveRecord::RecordNotUnique: PG::UniqueViolation: ERROR:  duplicate key value violates unique constraint "index_navigation_links_on_url_and_name"\nDETAIL:  Key (url, name)=(/readinglist, Reading List) already exists.\n	20201001173841_add_navigation_links	2021-02-10 13:39:25.244484	2021-02-10 13:39:25.169822	3	2021-02-10 13:39:25.251651
95	2021-02-10 13:39:05.450971	\N	20200901085230_remove_draft_articles_with_duplicate_canonical_url	2021-02-10 13:39:23.664484	2021-02-10 13:39:23.634777	2	2021-02-10 13:39:23.672891
81	2021-02-10 13:39:05.450971	\N	20201208151516_set_onboarding_profile_fields_for_existing_forems	2021-02-10 13:39:26.141908	2021-02-10 13:39:26.031337	2	2021-02-10 13:39:26.150247
79	2021-02-10 13:39:05.450971	\N	20200904132553_remove_draft_articles_with_duplicate_feed_source_url	2021-02-10 13:39:23.745114	2021-02-10 13:39:23.720253	2	2021-02-10 13:39:23.754451
86	2021-02-10 13:39:05.450971	\N	20201013205258_resave_articles_and_comments_for_imgproxy	2021-02-10 13:39:25.294934	2021-02-10 13:39:25.263891	2	2021-02-10 13:39:25.305066
75	2021-02-10 13:39:05.450971	\N	20201030134117_reindex_users_for_username_search	2021-02-10 13:39:25.762002	2021-02-10 13:39:25.731574	2	2021-02-10 13:39:25.770647
97	2021-02-10 13:39:05.450971	\N	20201014184856_resave_users_for_imgproxy	2021-02-10 13:39:25.345141	2021-02-10 13:39:25.318115	2	2021-02-10 13:39:25.35535
98	2021-02-10 13:39:05.450971	\N	20210108033107_remove_looking_for_work_profile_fields	2021-02-10 13:39:30.483111	2021-02-10 13:39:30.452154	2	2021-02-10 13:39:30.49233
82	2021-02-10 13:39:05.450971	\N	20201022161311_backfill_user_registrations_in_registrations_controller_path	2021-02-10 13:39:25.609116	2021-02-10 13:39:25.581015	2	2021-02-10 13:39:25.616072
74	2021-02-10 13:39:05.450971	\N	20201103050112_prepare_for_profile_column_drop	2021-02-10 13:39:25.800849	2021-02-10 13:39:25.781219	2	2021-02-10 13:39:25.811469
77	2021-02-10 13:39:05.450971	\N	20201217162454_cleanup_orphan_git_hub_repositories	2021-02-10 13:39:26.281105	2021-02-10 13:39:26.242554	2	2021-02-10 13:39:26.290541
102	2021-02-10 13:39:05.450971	\N	20201118141822_gradual_article_cache_bust	2021-02-10 13:39:25.925732	2021-02-10 13:39:25.823009	2	2021-02-10 13:39:25.932955
89	2021-02-10 13:39:05.450971	\N	20201130041949_remove_name_profile_field	2021-02-10 13:39:26.013755	2021-02-10 13:39:25.989078	2	2021-02-10 13:39:26.020935
92	2021-02-10 13:39:05.450971	\N	20201217184442_append_community_to_community_name	2021-02-10 13:39:26.319161	2021-02-10 13:39:26.300923	2	2021-02-10 13:39:26.327227
45	2021-02-10 13:39:05.450971	\N	20201218080343_update_default_email_addresses	2021-02-10 13:39:26.353443	2021-02-10 13:39:26.33634	2	2021-02-10 13:39:26.361459
36	2021-02-10 13:39:05.450971	\N	20210118194138_resync_unpublished_articles_comments_elasticsearch_document	2021-02-10 13:39:30.567893	2021-02-10 13:39:30.543001	2	2021-02-10 13:39:30.574866
103	2021-02-10 13:39:05.450971	\N	20210104170542_resave_articles_for_code_snippet_fullscreen_icon	2021-02-10 13:39:30.364315	2021-02-10 13:39:26.491818	2	2021-02-10 13:39:30.371618
\.


--
-- Data for Name: display_ad_events; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.display_ad_events (id, category, context_type, created_at, display_ad_id, updated_at, user_id) FROM stdin;
\.


--
-- Data for Name: display_ads; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.display_ads (id, approved, body_markdown, clicks_count, created_at, impressions_count, organization_id, placement_area, processed_html, published, success_rate, updated_at) FROM stdin;
\.


--
-- Data for Name: email_authorizations; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.email_authorizations (id, confirmation_token, created_at, json_data, type_of, updated_at, user_id, verified_at) FROM stdin;
\.


--
-- Data for Name: events; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.events (id, category, cover_image, created_at, description_html, description_markdown, ends_at, host_name, live_now, location_name, location_url, profile_image, published, slug, starts_at, title, updated_at) FROM stdin;
\.


--
-- Data for Name: feedback_messages; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.feedback_messages (id, affected_id, category, created_at, feedback_type, message, offender_id, reported_url, reporter_id, status, updated_at) FROM stdin;
2	\N	harassment	2021-02-10 13:39:02.132276	abuse-reports	Eveniet voluptatem qui iste.	\N	example.com	\N	Open	2021-02-10 13:39:02.132276
1	\N	spam	2021-02-10 13:39:02.113436	spam	Iure dolorem earum cupiditate.	\N	\N	\N	Open	2021-02-10 13:39:02.113436
\.


--
-- Data for Name: field_test_events; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.field_test_events (id, created_at, field_test_membership_id, name) FROM stdin;
\.


--
-- Data for Name: field_test_memberships; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.field_test_memberships (id, converted, created_at, experiment, participant_id, participant_type, variant) FROM stdin;
\.


--
-- Data for Name: flipper_features; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.flipper_features (id, created_at, key, updated_at) FROM stdin;
\.


--
-- Data for Name: flipper_gates; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.flipper_gates (id, created_at, feature_key, key, updated_at, value) FROM stdin;
\.


--
-- Data for Name: follows; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.follows (id, blocked, created_at, explicit_points, followable_id, followable_type, follower_id, follower_type, implicit_points, points, subscription_status, updated_at) FROM stdin;
\.


--
-- Data for Name: github_issues; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.github_issues (id, category, created_at, issue_serialized, processed_html, updated_at, url) FROM stdin;
\.


--
-- Data for Name: github_repos; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.github_repos (id, additional_note, bytes_size, created_at, description, featured, fork, github_id_code, info_hash, language, name, priority, stargazers_count, updated_at, url, user_id, watchers_count) FROM stdin;
\.


--
-- Data for Name: html_variant_successes; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.html_variant_successes (id, article_id, created_at, html_variant_id, updated_at) FROM stdin;
\.


--
-- Data for Name: html_variant_trials; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.html_variant_trials (id, article_id, created_at, html_variant_id, updated_at) FROM stdin;
\.


--
-- Data for Name: html_variants; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.html_variants (id, approved, created_at, "group", html, name, published, success_rate, target_tag, updated_at, user_id) FROM stdin;
\.


--
-- Data for Name: identities; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.identities (id, auth_data_dump, created_at, provider, secret, token, uid, updated_at, user_id) FROM stdin;
\.


--
-- Data for Name: mentions; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.mentions (id, created_at, mentionable_id, mentionable_type, updated_at, user_id) FROM stdin;
\.


--
-- Data for Name: messages; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.messages (id, chat_action, chat_channel_id, created_at, edited_at, message_html, message_markdown, updated_at, user_id) FROM stdin;
\.


--
-- Data for Name: navigation_links; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.navigation_links (id, created_at, display_only_when_signed_in, icon, name, "position", updated_at, url) FROM stdin;
1	2021-02-10 13:39:05.044617	t	<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 44 44" width="24" height="24">\n    <g class="nc-icon-wrapper">\n        <path fill="#67757F" d="M39 24c0 2.209-1.791 2-4 2H9c-2.209 0-4 .209-4-2l2-12c.125-1.917 1.791-4 4-4h22c2.209 0 3.791 2.208 4 4l2 12z"/>\n        <path fill="#CCD6DD" d="M32 17a2 2 0 01-2 2H14a2 2 0 01-2-2V9a2 2 0 012-2h16a2 2 0 012 2v8z"/>\n        <path fill="#E1E8ED" d="M34 21a2 2 0 01-2 2H12a2 2 0 01-2-2v-8a2 2 0 012-2h20a2 2 0 012 2v8z"/>\n        <path fill="#F5F8FA" d="M36 25a2 2 0 01-2 2H10a2 2 0 01-2-2v-8a2 2 0 012-2h24a2 2 0 012 2v8z"/>\n        <path fill="#9AAAB4" d="M39 35a4 4 0 01-4 4H9a4 4 0 01-4-4V24a4 4 0 014-4h26a4 4 0 014 4v11z"/>\n        <path fill="#67757F" d="M18 16zm0 0z"/>\n        <path fill="#FCAB40" d="M26 5h-5a2 2 0 00-2 2v1h4a2 2 0 012 2h1a2 2 0 002-2V7a2 2 0 00-2-2z"/>\n        <path fill="#5DADEC" d="M22 9h-5a2 2 0 00-2 2v1h4a2 2 0 012 2h1a2 2 0 002-2v-1a2 2 0 00-2-2z"/>\n        <path fill="#E75A70" d="M20 16a2 2 0 01-2 2h-5a2 2 0 01-2-2v-1a2 2 0 012-2h5a2 2 0 012 2v1z"/>\n        <path fill="#67757F" d="M29 32a2 2 0 01-2 2H17a2 2 0 01-2-2v-5a2 2 0 012-2h10a2 2 0 012 2v5zm-11-4z"/>\n        <path fill="#E1E8ED" d="M27 31a1 1 0 01-1 1h-8a1 1 0 01-1-1v-3a1 1 0 011-1h8a1 1 0 011 1v3z"/>\n    </g>\n</svg>\n	Reading List	0	2021-02-10 13:39:05.044617	/readinglist
2	2021-02-10 13:39:05.064579	f	<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 44 44" width="24" height="24">\n    <g class="nc-icon-wrapper">\n        <path fill="#FFD983" d="M36 4H14a4 4 0 00-4 4v24H8a4 4 0 000 8h24a4 4 0 004-4V12a4 4 0 000-8z"/>\n        <path fill="#E39F3D" d="M12 14h24v-2H14l-2-1z"/>\n        <path fill="#FFE8B6" d="M14 4a4 4 0 00-4 4v24.555A3.955 3.955 0 008 32a4 4 0 104 4V11.445c.59.344 1.268.555 2 .555a4 4 0 000-8z"/>\n        <path fill="#C1694F" d="M16 8a2 2 0 11-4.001-.001A2 2 0 0116 8m-6 28a2 2 0 11-4.001-.001A2 2 0 0110 36m24-17a1 1 0 01-1 1H15a1 1 0 010-2h18a1 1 0 011 1m0 4a1 1 0 01-1 1H15a1 1 0 110-2h18a1 1 0 011 1m0 4a1 1 0 01-1 1H15a1 1 0 110-2h18a1 1 0 011 1m0 4a1 1 0 01-1 1H15a1 1 0 110-2h18a1 1 0 011 1"/>\n    </g>\n</svg>\n	Listings	1	2021-02-10 13:39:05.064579	/listings
3	2021-02-10 13:39:05.087443	f	<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 44 44" width="24" height="24">\n    <g class="nc-icon-wrapper">\n        <path fill="#292F33" d="M10 19h24v2H10zm15 15c0 2.208-.792 4-3 4-2.209 0-3-1.792-3-4s.791-2 3-2c2.208 0 3-.208 3 2z"/>\n        <path fill="#66757F" d="M22 35c-6.627 0-10 1.343-10 3v2h20v-2c0-1.657-3.373-3-10-3z"/>\n        <path fill="#99AAB5" d="M22 4a9 9 0 00-9 9v7h18v-7a9 9 0 00-9-9z"/>\n        <g fill="#292F33" transform="translate(4 4)">\n            <circle cx="15.5" cy="2.5" r="1.5"/>\n            <circle cx="20.5" cy="2.5" r="1.5"/>\n            <circle cx="17.5" cy="6.5" r="1.5"/>\n            <circle cx="22.5" cy="6.5" r="1.5"/>\n            <circle cx="12.5" cy="6.5" r="1.5"/>\n            <circle cx="15.5" cy="10.5" r="1.5"/>\n            <circle cx="10.5" cy="10.5" r="1.5"/>\n            <circle cx="20.5" cy="10.5" r="1.5"/>\n            <circle cx="25.5" cy="10.5" r="1.5"/>\n            <circle cx="17.5" cy="14.5" r="1.5"/>\n            <circle cx="22.5" cy="14.5" r="1.5"/>\n            <circle cx="12.5" cy="14.5" r="1.5"/>\n        </g>\n        <path fill="#66757F" d="M13 19.062V21c0 4.971 4.029 9 9 9s9-4.029 9-9v-1.938H13z"/>\n        <path fill="#66757F" d="M34 18a1 1 0 00-1 1v2c0 6.074-4.925 11-11 11s-11-4.926-11-11v-2a1 1 0 00-2 0v2c0 7.18 5.82 13 13 13s13-5.82 13-13v-2a1 1 0 00-1-1z"/>\n    </g>\n</svg>\n	Podcasts	2	2021-02-10 13:39:05.087443	/pod
4	2021-02-10 13:39:05.112871	f	<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 44 44" width="24" height="24">\n    <g transform="translate(4 4)">\n        <path fill="#31373D" d="M34.074 18l-4.832 3H28v-4c0-.088-.02-.169-.026-.256C31.436 15.864 34 12.735 34 9a8 8 0 00-16.001 0c0 1.463.412 2.822 1.099 4H14.92c.047-.328.08-.66.08-1a7 7 0 10-14 0 6.995 6.995 0 004 6.317V29a4 4 0 004 4h15a4 4 0 004-4v-3h1.242l4.832 3H35V18h-.926zM28.727 3.977a5.713 5.713 0 012.984 4.961L28.18 8.35a2.276 2.276 0 00-.583-.982l1.13-3.391zm-.9 6.342l3.552.592a5.713 5.713 0 01-4.214 3.669 3.985 3.985 0 00-1.392-1.148l.625-2.19a2.425 2.425 0 001.429-.923zM26 3.285c.282 0 .557.027.828.067l-1.131 3.392c-.404.054-.772.21-1.081.446L21.42 5.592A5.703 5.703 0 0126 3.285zM20.285 9c0-.563.085-1.106.236-1.62l3.194 1.597-.002.023c0 .657.313 1.245.771 1.662L23.816 13h-1.871a5.665 5.665 0 01-1.66-4zm-9.088-.385A4.64 4.64 0 0112.667 12c0 .344-.043.677-.113 1H10.1c.145-.304.233-.641.233-1a2.32 2.32 0 00-.392-1.292l1.256-2.093zM8 7.333c.519 0 1.01.105 1.476.261L8.22 9.688c-.073-.007-.145-.022-.22-.022a2.32 2.32 0 00-1.292.392L4.615 8.803A4.64 4.64 0 018 7.333zM3.333 12c0-.519.105-1.01.261-1.477l2.095 1.257c-.007.073-.022.144-.022.22 0 .75.36 1.41.91 1.837a3.987 3.987 0 00-1.353 1.895C4.083 14.881 3.333 13.533 3.333 12z"/>\n        <circle fill="#8899A6" cx="24" cy="19" r="2"/>\n        <circle fill="#8899A6" cx="9" cy="19" r="2"/>\n        <path fill="#8899A6" d="M24 27a2 2 0 00-2-2H11a2 2 0 00-2 2v6a2 2 0 002 2h11a2 2 0 002-2v-6z"/>\n    </g>\n</svg>\n	Videos	3	2021-02-10 13:39:05.112871	/videos
5	2021-02-10 13:39:05.138289	f	<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 44 44" width="24" height="24">\n    <g class="nc-icon-wrapper">\n        <path fill="#FFD983" d="M36.017 24.181L21.345 9.746C20.687 9.087 19.823 9 18.96 9H8.883C7.029 9 6 10.029 6 11.883v10.082c0 .861.089 1.723.746 2.38L21.3 39.017a3.287 3.287 0 004.688 0l10.059-10.088c1.31-1.312 1.28-3.438-.03-4.748zm-23.596-8.76a1.497 1.497 0 11-2.118-2.117 1.497 1.497 0 012.118 2.117z"/>\n        <path fill="#D99E82" d="M13.952 11.772a3.66 3.66 0 00-5.179 0 3.663 3.663 0 105.18 5.18 3.664 3.664 0 00-.001-5.18zm-1.53 3.65a1.499 1.499 0 11-2.119-2.12 1.499 1.499 0 012.119 2.12z"/>\n        <path fill="#C1694F" d="M12.507 14.501a1 1 0 11-1.415-1.414l8.485-8.485a1 1 0 111.415 1.414l-8.485 8.485z"/>\n    </g>\n</svg>\n	Tags	4	2021-02-10 13:39:05.138289	/tags
6	2021-02-10 13:39:05.160616	f	<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 44 44" width="24" height="24">\n    <g class="nc-icon-wrapper">\n        <path fill="#FFDB5E" d="M38.956 21.916c0-.503-.12-.975-.321-1.404-1.341-4.326-7.619-4.01-16.549-4.221-1.493-.035-.639-1.798-.115-5.668.341-2.517-1.282-6.382-4.01-6.382-4.498 0-.171 3.548-4.148 12.322-2.125 4.688-6.875 2.062-6.875 6.771v10.719c0 1.833.18 3.595 2.758 3.885 2.499.281 1.937 2.062 5.542 2.062h18.044a3.337 3.337 0 003.333-3.334c0-.762-.267-1.456-.698-2.018 1.02-.571 1.72-1.649 1.72-2.899 0-.76-.266-1.454-.696-2.015 1.023-.57 1.725-1.649 1.725-2.901 0-.909-.368-1.733-.961-2.336a3.311 3.311 0 001.251-2.581z"/>\n        <path fill="#EE9547" d="M27.02 25.249h8.604c1.17 0 2.268-.626 2.866-1.633a.876.876 0 00-1.506-.892 1.588 1.588 0 01-1.361.775h-8.81c-.873 0-1.583-.71-1.583-1.583s.71-1.583 1.583-1.583H32.7a.875.875 0 000-1.75h-5.888a3.337 3.337 0 00-3.333 3.333c0 1.025.475 1.932 1.205 2.544a3.32 3.32 0 00-.998 2.373c0 1.028.478 1.938 1.212 2.549a3.318 3.318 0 00.419 5.08 3.305 3.305 0 00-.852 2.204 3.337 3.337 0 003.333 3.333h5.484a3.35 3.35 0 002.867-1.632.875.875 0 00-1.504-.894 1.594 1.594 0 01-1.363.776h-5.484c-.873 0-1.583-.71-1.583-1.583s.71-1.583 1.583-1.583h6.506a3.35 3.35 0 002.867-1.633.875.875 0 10-1.504-.894 1.572 1.572 0 01-1.363.777h-7.063a1.585 1.585 0 010-3.167h8.091a3.35 3.35 0 002.867-1.632.875.875 0 00-1.504-.894 1.573 1.573 0 01-1.363.776H27.02a1.585 1.585 0 010-3.167z"/>\n    </g>\n</svg>\n	Code of Conduct	5	2021-02-10 13:39:05.160616	/code-of-conduct
7	2021-02-10 13:39:05.182468	f	<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 44 44" width="24" height="24">\n    <g class="nc-icon-wrapper">\n        <path fill="#FFD983" d="M33 15.06c0 6.439-5 7.439-5 13.44 0 3.098-3.123 3.359-5.5 3.359-2.053 0-6.586-.779-6.586-3.361C15.914 22.5 11 21.5 11 15.06c0-6.031 5.285-10.92 11.083-10.92C27.883 4.14 33 9.029 33 15.06z"/>\n        <path fill="#CCD6DD" d="M26.167 36.5c0 .828-2.234 2.5-4.167 2.5-1.933 0-4.167-1.672-4.167-2.5 0-.828 2.233-.5 4.167-.5 1.933 0 4.167-.328 4.167.5z"/>\n        <path fill="#FFCC4D" d="M26.707 14.293a.999.999 0 00-1.414 0L22 17.586l-3.293-3.293a1 1 0 10-1.414 1.414L21 19.414V30a1 1 0 102 0V19.414l3.707-3.707a.999.999 0 000-1.414z"/>\n        <path fill="#99AAB5" d="M28 35a2 2 0 01-2 2h-8a2 2 0 01-2-2v-6h12v6z"/>\n        <path fill="#CCD6DD" d="M15.999 36a1 1 0 01-.163-1.986l12-2a.994.994 0 011.15.822.999.999 0 01-.822 1.15l-12 2a.927.927 0 01-.165.014zm0-4a1 1 0 01-.163-1.986l12-2a.995.995 0 011.15.822.999.999 0 01-.822 1.15l-12 2a.927.927 0 01-.165.014z"/>\n    </g>\n</svg>\n	FAQ	6	2021-02-10 13:39:05.182468	/faq
8	2021-02-10 13:39:05.206677	f	<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 44 44" width="24" height="24">\n    <g class="nc-icon-wrapper">\n        <path fill="#F4900C" d="M15 4a8 8 0 00-8 8v8h2v-8a6 6 0 0112 0v8h2v-8a8 8 0 00-8-8z"/>\n        <path fill="#DD2E44" d="M5 12l2 2 2-2 2 2 2-2 2 2 2-2 2 2 2-2 2 2 2-2v23H5z"/>\n        <path fill="#FFCC4D" d="M29 9a8 8 0 00-8 8v8h2v-8a6 6 0 0112 0v8h2v-8a8 8 0 00-8-8z"/>\n        <path fill="#744EAA" d="M19 17l2 2 2-2 2 2 2-2 2 2 2-2 2 2 2-2 2 2 2-2v23H19z"/>\n    </g>\n</svg>\n	DEV Shop	7	2021-02-10 13:39:05.206677	https://shop.dev.to/
9	2021-02-10 13:39:05.229683	f	<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 44 44" width="24" height="24">\n    <path fill="#DD2E44" d="M39.885 15.833c0-5.45-4.418-9.868-9.867-9.868-3.308 0-6.227 1.633-8.018 4.129-1.791-2.496-4.71-4.129-8.017-4.129-5.45 0-9.868 4.417-9.868 9.868 0 .772.098 1.52.266 2.241C5.751 26.587 15.216 35.568 22 38.034c6.783-2.466 16.249-11.447 17.617-19.959.17-.721.268-1.469.268-2.242z"/>\n</svg>\n	Sponsors	8	2021-02-10 13:39:05.229683	/sponsors
10	2021-02-10 13:39:05.251088	f	<svg viewBox="0 0 235 234" xmlns="http://www.w3.org/2000/svg" class="rainbow-logo" preserveAspectRatio="xMinYMin meet">\n    <g fill="none" fill-rule="evenodd">\n        <path fill="#88AEDC" d="M234.04 175.67l-75.69 58.28h47.18L234.04 212z"/>\n        <path d="M234.04 140.06l-121.93 93.89h.02l121.91-93.87zM133.25.95L.04 103.51v.02L133.27.95z"/>\n        <path fill="#F58F8E" fill-rule="nonzero" d="M.04.95v30.16L39.21.95z"/>\n        <path fill="#FEE18A" fill-rule="nonzero" d="M39.21.95L.04 31.11v35.9L85.84.95z"/>\n        <path fill="#F3F095" fill-rule="nonzero" d="M85.84.95L.04 67.01v36.5L133.25.95z"/>\n        <path fill="#55C1AE" fill-rule="nonzero" d="M133.27.95L.04 103.53v35.59L179.49.95z"/>\n        <path fill="#F7B3CE" fill-rule="nonzero" d="M234.04.95h-7.37L.04 175.45v35.93l234-180.18z"/>\n        <path fill="#88AEDC" fill-rule="nonzero" d="M179.49.95L.04 139.12v36.33L226.67.95z"/>\n        <path fill="#F58F8E" fill-rule="nonzero" d="M234.04 31.2L.04 211.38v22.57h18.03l215.97-166.3z"/>\n        <path fill="#FEE18A" fill-rule="nonzero" d="M234.04 67.65L18.07 233.95H64.7l169.34-130.39z"/>\n        <path fill="#F3F095" fill-rule="nonzero" d="M234.04 103.56L64.7 233.95h47.41l121.93-93.89z"/>\n        <path fill="#55C1AE" fill-rule="nonzero" d="M234.04 140.08l-121.91 93.87h46.22l75.69-58.28z"/>\n        <path fill="#F7B3CE" fill-rule="nonzero" d="M234.04 212l-28.51 21.95h28.51z"/>\n        <path d="M65.237 77.75c4.514.95 7.774 2.8 11.135 6.3 3.059 3.2 4.965 6.85 5.767 10.95.652 3.45.652 40.55 0 44.05-1.705 9.1-9.479 16.2-19.109 17.45-2.006.25-8.727.5-14.845.5H37V77h12.438c8.828 0 13.342.2 15.8.75zM51.545 117v25.6l5.166-.2c4.464-.15 5.417-.35 7.423-1.5 3.912-2.3 3.962-2.45 3.962-24.2 0-21.2 0-21.2-3.661-23.6-1.806-1.2-2.558-1.35-7.473-1.55l-5.417-.15V117zm79.245-32.75v7.25h-25.58v18h15.549V124H105.21l.1 9.1.15 9.15 12.69.15 12.638.1V157h-14.795c-16.451 0-19.009-.3-21.617-2.6-3.661-3.2-3.46-1.15-3.611-36.3-.1-21.9.05-32.25.401-33.65.702-2.6 3.661-5.8 6.27-6.7 1.554-.55 5.466-.7 17.704-.75h15.648v7.25zm31.647 20.85c3.712 14.25 6.821 25.6 6.922 25.25.15-.35 3.31-12.4 7.071-26.85l6.872-26.25 7.824-.15c5.918-.1 7.874.05 7.874.5s-17.354 66.2-18.357 69.5c-.702 2.3-4.463 7-6.57 8.25-2.658 1.5-6.57 1.75-8.978.5-2.156-1.1-5.015-4.4-6.47-7.5-.902-1.9-15.648-56-19.058-70l-.352-1.35h7.825c7.673 0 7.874 0 8.275 1.1.2.65 3.41 12.8 7.122 27z" fill="#FFF"/>\n    </g>\n</svg>\n	About	9	2021-02-10 13:39:05.251088	/about
11	2021-02-10 13:39:05.273058	f	<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 44 44" width="24" height="24">\n    <g transform="translate(4 4)">\n        <circle fill="#FFCC4D" cx="18" cy="18" r="18"/>\n        <path fill="#664500" d="M27.335 23.629a.501.501 0 00-.635-.029c-.039.029-3.922 2.9-8.7 2.9-4.766 0-8.662-2.871-8.7-2.9a.5.5 0 10-.729.657C8.7 24.472 11.788 29.5 18 29.5s9.301-5.028 9.429-5.243a.499.499 0 00-.094-.628z"/>\n        <path fill="#65471B" d="M18 26.591c-.148 0-.291-.011-.438-.016v4.516h.875v-4.517c-.145.005-.289.017-.437.017z"/>\n        <path fill="#FFF" d="M22 26c.016-.004-1.45.378-2.446.486-.366.042-.737.076-1.117.089v4.517H20c1.1 0 2-.9 2-2V26zm-8 0c-.016-.004 1.45.378 2.446.486.366.042.737.076 1.117.089v4.517H16c-1.1 0-2-.9-2-2V26z"/>\n        <path fill="#65471B" d="M27.335 23.629a.501.501 0 00-.635-.029c-.03.022-2.259 1.668-5.411 2.47-.443.113-1.864.43-3.286.431-1.424 0-2.849-.318-3.292-.431-3.152-.802-5.381-2.448-5.411-2.47a.501.501 0 00-.729.657c.097.162 1.885 3.067 5.429 4.481v-1.829c-.016-.004 1.45.378 2.446.486.366.042.737.076 1.117.089.146.005.289.016.437.016.148 0 .291-.011.438-.016.38-.013.751-.046 1.117-.089.996-.108 2.462-.49 2.446-.486v1.829c3.544-1.414 5.332-4.319 5.429-4.481a.5.5 0 00-.095-.628zm-.711-9.605c0 1.714-.938 3.104-2.096 3.104-1.157 0-2.096-1.39-2.096-3.104s.938-3.104 2.096-3.104c1.158 0 2.096 1.39 2.096 3.104zm-17.167 0c0 1.714.938 3.104 2.096 3.104 1.157 0 2.096-1.39 2.096-3.104s-.938-3.104-2.096-3.104c-1.158 0-2.096 1.39-2.096 3.104z"/>\n        <path fill="#292F33" d="M34.808 9.627c-.171-.166-1.267.274-2.376-.291-2.288-1.166-8.07-2.291-11.834.376-.403.285-2.087.333-2.558.313-.471.021-2.155-.027-2.558-.313-3.763-2.667-9.545-1.542-11.833-.376-1.109.565-2.205.125-2.376.291-.247.239-.247 1.196.001 1.436.246.239 1.477.515 1.722 1.232.247.718.249 4.958 2.213 6.424 1.839 1.372 6.129 1.785 8.848.238 2.372-1.349 2.289-4.189 2.724-5.881.155-.603.592-.907 1.26-.907s1.105.304 1.26.907c.435 1.691.351 4.532 2.724 5.881 2.719 1.546 7.009 1.133 8.847-.238 1.965-1.465 1.967-5.706 2.213-6.424.245-.717 1.476-.994 1.722-1.232.248-.24.249-1.197.001-1.436zm-20.194 3.65c-.077 1.105-.274 3.227-1.597 3.98-.811.462-1.868.743-2.974.743h-.001c-1.225 0-2.923-.347-3.587-.842-.83-.619-1.146-3.167-1.265-4.12-.076-.607-.28-2.09.388-2.318 1.06-.361 2.539-.643 4.052-.643.693 0 3.021.043 4.155.741 1.005.617.872 1.851.829 2.459zm16.278-.253c-.119.954-.435 3.515-1.265 4.134-.664.495-2.362.842-3.587.842h-.001c-1.107 0-2.163-.281-2.975-.743-1.323-.752-1.52-2.861-1.597-3.966-.042-.608-.176-1.851.829-2.468 1.135-.698 3.462-.746 4.155-.746 1.513 0 2.991.277 4.052.638.668.228.465 1.702.389 2.309z"/>\n    </g>\n</svg>\n	Privacy Policy	10	2021-02-10 13:39:05.273058	/privacy
12	2021-02-10 13:39:05.299592	f	<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 44 44" width="24" height="24">\n    <g transform="translate(4 4)">\n        <ellipse fill="#F5F8FA" cx="8.828" cy="18" rx="7.953" ry="13.281"/>\n        <path fill="#E1E8ED" d="M8.828 32.031C3.948 32.031.125 25.868.125 18S3.948 3.969 8.828 3.969 17.531 10.132 17.531 18s-3.823 14.031-8.703 14.031zm0-26.562C4.856 5.469 1.625 11.09 1.625 18s3.231 12.531 7.203 12.531S16.031 24.91 16.031 18 12.8 5.469 8.828 5.469z"/>\n        <circle fill="#8899A6" cx="6.594" cy="18" r="4.96"/>\n        <circle fill="#292F33" cx="6.594" cy="18" r="3.565"/>\n        <circle fill="#F5F8FA" cx="7.911" cy="15.443" r="1.426"/>\n        <ellipse fill="#F5F8FA" cx="27.234" cy="18" rx="7.953" ry="13.281"/>\n        <path fill="#E1E8ED" d="M27.234 32.031c-4.88 0-8.703-6.163-8.703-14.031s3.823-14.031 8.703-14.031S35.938 10.132 35.938 18s-3.824 14.031-8.704 14.031zm0-26.562c-3.972 0-7.203 5.622-7.203 12.531 0 6.91 3.231 12.531 7.203 12.531S34.438 24.91 34.438 18 31.206 5.469 27.234 5.469z"/>\n        <circle fill="#8899A6" cx="25" cy="18" r="4.96"/>\n        <circle fill="#292F33" cx="25" cy="18" r="3.565"/>\n        <circle fill="#F5F8FA" cx="26.317" cy="15.443" r="1.426"/>\n    </g>\n</svg>\n	Terms of use	11	2021-02-10 13:39:05.299592	/terms
13	2021-02-10 13:39:05.322165	f	<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 44 44" width="24" height="24">\n    <g class="nc-icon-wrapper">\n        <path fill="#FFAC33" d="M38.724 33.656c-1.239-.01-1.241 1.205-1.241 1.205H22.5c-5.246 0-9.5-4.254-9.5-9.5s4.254-9.5 9.5-9.5 9.5 4.254 9.5 9.5c0 3.062-1.6 5.897-3.852 7.633h5.434C35.022 30.849 36 28.139 36 25.361c0-7.456-6.045-13.5-13.5-13.5-7.456 0-13.5 6.044-13.5 13.5 0 7.455 6.044 13.5 13.5 13.5h14.982s-.003 1.127 1.241 1.139c1.238.012 1.228-1.245 1.228-1.245l.014-3.821s.001-1.267-1.241-1.278zM9 18.26a16.047 16.047 0 014-4.739V13c0-5 5-7 5-8s-1-1-1-1H5C4 4 4 5 4 5c0 1 5 3.333 5 7.69v5.57z"/>\n        <path fill="#BE1931" d="M17.091 33.166a9.487 9.487 0 01-4.045-8.72l-3.977-.461c-.046.452-.069.911-.069 1.376 0 4.573 2.28 8.608 5.76 11.051l2.331-3.246z"/>\n        <path fill="#BE1931" d="M10 29.924s-5.188-.812-5 1 5-1 5-1zm0 .312s-4.125 2.688-2.938 3.75S10 30.236 10 30.236z"/>\n    </g>\n</svg>\n	Contact	12	2021-02-10 13:39:05.322165	/contact
\.


--
-- Data for Name: notes; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.notes (id, author_id, content, created_at, noteable_id, noteable_type, reason, updated_at) FROM stdin;
\.


--
-- Data for Name: notification_subscriptions; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.notification_subscriptions (id, config, created_at, notifiable_id, notifiable_type, updated_at, user_id) FROM stdin;
2	all_comments	2021-02-15 14:21:39.370676	28	Article	2021-02-15 14:21:39.370676	1
3	all_comments	2021-02-15 16:09:46.040554	29	Article	2021-02-15 16:09:46.040554	1
4	all_comments	2021-02-15 19:12:24.008532	30	Article	2021-02-15 19:12:24.008532	1
5	all_comments	2021-02-15 19:20:19.9041	31	Article	2021-02-15 19:20:19.9041	1
8	all_comments	2021-02-17 21:38:30.958856	34	Article	2021-02-17 21:38:30.958856	1
9	all_comments	2021-02-17 21:43:06.182855	35	Article	2021-02-17 21:43:06.182855	1
10	all_comments	2021-02-17 21:46:22.481685	36	Article	2021-02-17 21:46:22.481685	1
11	all_comments	2021-02-17 21:51:43.979151	37	Article	2021-02-17 21:51:43.979151	1
12	all_comments	2021-02-17 21:56:43.80831	38	Article	2021-02-17 21:56:43.80831	1
13	all_comments	2021-02-17 22:02:34.694483	39	Article	2021-02-17 22:02:34.694483	1
14	all_comments	2021-02-17 22:07:32.005626	40	Article	2021-02-17 22:07:32.005626	1
15	all_comments	2021-02-17 22:09:29.173398	41	Article	2021-02-17 22:09:29.173398	1
16	all_comments	2021-02-17 22:14:50.19798	42	Article	2021-02-17 22:14:50.19798	1
17	all_comments	2021-02-17 22:28:00.356804	43	Article	2021-02-17 22:28:00.356804	1
18	all_comments	2021-02-18 21:27:33.389257	44	Article	2021-02-18 21:27:33.389257	1
19	all_comments	2021-02-18 21:34:27.754061	45	Article	2021-02-18 21:34:27.754061	1
20	all_comments	2021-02-18 21:37:48.751938	46	Article	2021-02-18 21:37:48.751938	1
21	all_comments	2021-02-19 20:56:27.968337	47	Article	2021-02-19 20:56:27.968337	1
22	all_comments	2021-02-20 12:37:19.732973	48	Article	2021-02-20 12:37:19.732973	1
23	all_comments	2021-02-20 13:04:12.609275	49	Article	2021-02-20 13:04:12.609275	1
24	all_comments	2021-02-20 13:15:29.940085	50	Article	2021-02-20 13:15:29.940085	1
25	all_comments	2021-02-20 13:53:49.961837	51	Article	2021-02-20 13:53:49.961837	1
26	all_comments	2021-02-20 18:28:28.3472	52	Article	2021-02-20 18:28:28.3472	1
27	all_comments	2021-02-21 07:19:51.592883	53	Article	2021-02-21 07:19:51.592883	1
28	all_comments	2021-02-21 08:08:33.122928	54	Article	2021-02-21 08:08:33.122928	1
29	all_comments	2021-02-21 16:24:40.208167	55	Article	2021-02-21 16:24:40.208167	1
30	all_comments	2021-02-22 06:28:48.289687	56	Article	2021-02-22 06:28:48.289687	1
31	all_comments	2021-02-22 06:46:34.501362	57	Article	2021-02-22 06:46:34.501362	1
32	all_comments	2021-02-22 07:08:57.43552	58	Article	2021-02-22 07:08:57.43552	1
33	all_comments	2021-02-22 07:59:39.077482	59	Article	2021-02-22 07:59:39.077482	1
34	all_comments	2021-02-22 19:44:11.501153	60	Article	2021-02-22 19:44:11.501153	1
35	all_comments	2021-02-22 20:22:13.606976	61	Article	2021-02-22 20:22:13.606976	1
36	all_comments	2021-02-23 11:20:12.513327	62	Article	2021-02-23 11:20:12.513327	1
37	all_comments	2021-02-23 11:43:06.457431	63	Article	2021-02-23 11:43:06.457431	1
38	all_comments	2021-02-24 10:34:14.006844	64	Article	2021-02-24 10:34:14.006844	1
39	all_comments	2021-02-24 10:47:57.668004	65	Article	2021-02-24 10:47:57.668004	1
40	all_comments	2021-02-25 06:15:20.579947	66	Article	2021-02-25 06:15:20.579947	1
\.


--
-- Data for Name: notifications; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.notifications (id, action, created_at, json_data, notifiable_id, notifiable_type, notified_at, organization_id, read, updated_at, user_id) FROM stdin;
\.


--
-- Data for Name: oauth_access_grants; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.oauth_access_grants (id, application_id, created_at, expires_in, redirect_uri, resource_owner_id, revoked_at, scopes, token) FROM stdin;
\.


--
-- Data for Name: oauth_access_tokens; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.oauth_access_tokens (id, application_id, created_at, expires_in, previous_refresh_token, refresh_token, resource_owner_id, revoked_at, scopes, token) FROM stdin;
\.


--
-- Data for Name: oauth_applications; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.oauth_applications (id, confidential, created_at, name, redirect_uri, scopes, secret, uid, updated_at) FROM stdin;
\.


--
-- Data for Name: organization_memberships; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.organization_memberships (id, created_at, organization_id, type_of_user, updated_at, user_id, user_title) FROM stdin;
\.


--
-- Data for Name: organizations; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.organizations (id, articles_count, bg_color_hex, company_size, created_at, credits_count, cta_body_markdown, cta_button_text, cta_button_url, cta_processed_html, dark_nav_image, email, github_username, last_article_at, latest_article_updated_at, location, name, nav_image, old_old_slug, old_slug, profile_image, profile_updated_at, proof, secret, slug, spent_credits_count, story, summary, tag_line, tech_stack, text_color_hex, twitter_username, unspent_credits_count, updated_at, url) FROM stdin;
\.


--
-- Data for Name: page_views; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.page_views (id, article_id, counts_for_number_of_views, created_at, domain, path, referrer, time_tracked_in_seconds, updated_at, user_agent, user_id) FROM stdin;
29	29	1	2021-02-16 07:31:28.626372	simplecoding.dev	/admin	https://api.simplecoding.dev:3000/admin	15	2021-02-16 07:31:28.626372	Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36	1
11	29	1	2021-02-15 16:09:52.280611	simplecoding.dev	/new	https://api.simplecoding.dev:3000/new	45	2021-02-15 16:09:52.280611	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
12	28	1	2021-02-15 19:04:26.668473	\N			15	2021-02-15 19:04:26.668473	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
13	29	1	2021-02-15 19:04:35.216982	\N			15	2021-02-15 19:04:35.216982	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
7	28	1	2021-02-15 14:21:44.566724	simplecoding.dev	/new	https://api.simplecoding.dev:3000/new	1545	2021-02-15 14:21:44.566724	Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36	1
14	29	1	2021-02-15 19:05:05.356293	simplecoding.dev	/nilmadhab/leetcode-1047-remove-all-adjacent-duplicates-in-string-solution-1a8d-temp-slug-7174285/edit	https://api.simplecoding.dev:3000/nilmadhab/leetcode-1047-remove-all-adjacent-duplicates-in-string-solution-1a8d-temp-slug-7174285/edit	45	2021-02-15 19:05:05.356293	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
15	30	1	2021-02-15 19:12:30.326174	simplecoding.dev	/new	https://api.simplecoding.dev:3000/new	15	2021-02-15 19:12:30.326174	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
8	28	1	2021-02-15 14:47:21.176994	simplecoding.dev	/nilmadhab/let-s-develop-an-online-code-editor-compiler-like-hackerrank-1al	https://api.simplecoding.dev:3000/nilmadhab/let-s-develop-an-online-code-editor-compiler-like-hackerrank-1al	60	2021-02-15 14:47:21.176994	Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36	1
21	29	1	2021-02-16 05:28:58.912342	\N			330	2021-02-16 05:28:58.912342	Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36	1
17	28	1	2021-02-15 19:27:50.392106	\N			660	2021-02-15 19:27:50.392106	Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36	1
19	28	1	2021-02-15 19:51:31.718398	\N			15	2021-02-15 19:51:31.718398	Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36	1
20	28	1	2021-02-15 19:51:42.076991	\N			15	2021-02-15 19:51:42.076991	Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36	1
9	28	1	2021-02-15 14:49:48.263004	\N			1800	2021-02-15 14:49:48.263004	Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36	1
10	28	1	2021-02-15 16:05:06.985465	\N			45	2021-02-15 16:05:06.985465	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
27	29	1	2021-02-16 07:28:39.154978	\N			45	2021-02-16 07:28:39.154978	Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36	1
28	29	1	2021-02-16 07:30:15.233808	\N			15	2021-02-16 07:30:15.233808	Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36	1
30	29	1	2021-02-16 07:39:46.562424	simplecoding.dev	/nilmadhab/leetcode-1047-remove-all-adjacent-duplicates-in-string-solution-3iia/edit	https://api.simplecoding.dev:3000/nilmadhab/leetcode-1047-remove-all-adjacent-duplicates-in-string-solution-3iia/edit	30	2021-02-16 07:39:46.562424	Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36	1
31	29	1	2021-02-16 07:40:11.459983	simplecoding.dev	/nilmadhab/leetcode-1047-remove-all-adjacent-duplicates-in-string-solution-3iia/edit	https://api.simplecoding.dev:3000/nilmadhab/leetcode-1047-remove-all-adjacent-duplicates-in-string-solution-3iia/edit	45	2021-02-16 07:40:11.459983	Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36	1
32	29	1	2021-02-16 07:40:51.867337	simplecoding.dev	/nilmadhab/leetcode-1047-remove-all-adjacent-duplicates-in-string-solution-3iia/edit	https://api.simplecoding.dev:3000/nilmadhab/leetcode-1047-remove-all-adjacent-duplicates-in-string-solution-3iia/edit	15	2021-02-16 07:40:51.867337	Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36	1
49	28	1	2021-02-17 12:58:02.546327	simplecoding.dev	/nilmadhab/let-s-develop-an-online-code-editor-compiler-like-hackerrank-1al/edit	https://api.simplecoding.dev:3000/nilmadhab/let-s-develop-an-online-code-editor-compiler-like-hackerrank-1al/edit	60	2021-02-17 12:58:02.546327	Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36	1
44	30	1	2021-02-17 08:29:18.842726	\N			15	2021-02-17 08:29:18.842726	Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36	1
33	28	1	2021-02-16 07:55:39.300221	\N			45	2021-02-16 07:55:39.300221	Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36	1
45	30	1	2021-02-17 12:54:38.740618	\N			30	2021-02-17 12:54:38.740618	Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36	1
46	30	1	2021-02-17 12:55:42.686861	\N			15	2021-02-17 12:55:42.686861	Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36	1
47	30	1	2021-02-17 12:56:56.209455	simplecoding.dev	/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-max-area-of-island-n80/edit	https://api.simplecoding.dev:3000/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-max-area-of-island-n80/edit	30	2021-02-17 12:56:56.209455	Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36	1
48	28	1	2021-02-17 12:57:30.713647	simplecoding.dev	/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-max-area-of-island-n80/edit	https://api.simplecoding.dev:3000/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-max-area-of-island-n80/edit	15	2021-02-17 12:57:30.713647	Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36	1
40	28	1	2021-02-16 08:03:00.630795	simplecoding.dev	/nilmadhab/let-s-develop-an-online-code-editor-compiler-like-hackerrank-1al/edit	https://api.simplecoding.dev:3000/nilmadhab/let-s-develop-an-online-code-editor-compiler-like-hackerrank-1al/edit	300	2021-02-16 08:03:00.630795	Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36	1
37	28	1	2021-02-16 07:59:09.952222	\N			30	2021-02-16 07:59:09.952222	Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36	1
38	28	1	2021-02-16 08:00:35.574361	simplecoding.dev	/nilmadhab/let-s-develop-an-online-code-editor-compiler-like-hackerrank-1al/edit	https://api.simplecoding.dev:3000/nilmadhab/let-s-develop-an-online-code-editor-compiler-like-hackerrank-1al/edit	15	2021-02-16 08:00:35.574361	Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36	1
50	29	1	2021-02-17 12:59:00.153323	simplecoding.dev	/nilmadhab/let-s-develop-an-online-code-editor-compiler-like-hackerrank-1al/edit	https://api.simplecoding.dev:3000/nilmadhab/let-s-develop-an-online-code-editor-compiler-like-hackerrank-1al/edit	30	2021-02-17 12:59:00.153323	Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36	1
39	28	1	2021-02-16 08:01:10.086108	simplecoding.dev	/nilmadhab/let-s-develop-an-online-code-editor-compiler-like-hackerrank-1al/edit	https://api.simplecoding.dev:3000/nilmadhab/let-s-develop-an-online-code-editor-compiler-like-hackerrank-1al/edit	90	2021-02-16 08:01:10.086108	Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36	1
56	34	1	2021-02-17 21:38:36.696834	simplecoding.dev	/new	https://api.simplecoding.dev:3000/new	15	2021-02-17 21:38:36.696834	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
51	29	1	2021-02-17 13:00:04.642266	simplecoding.dev	/nilmadhab/leetcode-1047-remove-all-adjacent-duplicates-in-string-solution-3iia/edit	https://api.simplecoding.dev:3000/nilmadhab/leetcode-1047-remove-all-adjacent-duplicates-in-string-solution-3iia/edit	915	2021-02-17 13:00:04.642266	Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36	1
57	28	1	2021-02-17 21:38:56.686376	simplecoding.dev	/new	https://api.simplecoding.dev:3000/new	15	2021-02-17 21:38:56.686376	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
58	34	1	2021-02-17 21:39:15.31728	simplecoding.dev	/new	https://api.simplecoding.dev:3000/new	15	2021-02-17 21:39:15.31728	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
53	28	1	2021-02-17 21:22:03.807125	\N			45	2021-02-17 21:22:03.807125	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
54	30	1	2021-02-17 21:22:40.654409	\N			45	2021-02-17 21:22:40.654409	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
55	30	1	2021-02-17 21:30:50.315877	simplecoding.dev	/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-max-area-of-island-n80/edit	https://api.simplecoding.dev:3000/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-max-area-of-island-n80/edit	15	2021-02-17 21:30:50.315877	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
59	37	1	2021-02-17 21:51:49.715822	simplecoding.dev	/new	https://api.simplecoding.dev:3000/new	45	2021-02-17 21:51:49.715822	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
60	36	1	2021-02-17 21:52:33.517734	simplecoding.dev	/new	https://api.simplecoding.dev:3000/new	15	2021-02-17 21:52:33.517734	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
61	34	1	2021-02-17 21:52:44.448377	simplecoding.dev	/new	https://api.simplecoding.dev:3000/new	60	2021-02-17 21:52:44.448377	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
62	36	1	2021-02-17 21:53:12.258318	simplecoding.dev	/new	https://api.simplecoding.dev:3000/new	210	2021-02-17 21:53:12.258318	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
81	34	1	2021-02-18 08:08:28.097048	simplecoding.dev	/nilmadhab/leetcode-weekly-contest-225-change-minimum-characters-to-satisfy-one-of-three-conditions-1p6b/edit	https://api.simplecoding.dev:3000/nilmadhab/leetcode-weekly-contest-225-change-minimum-characters-to-satisfy-one-of-three-conditions-1p6b/edit	15	2021-02-18 08:08:28.097048	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
66	40	10	2021-02-17 22:45:25.664329	\N			15	2021-02-17 22:45:25.664329	Mozilla/5.0 (iPad; CPU OS 14_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) CriOS/87.0.4280.77 Mobile/15E148 Safari/604.1	\N
67	43	1	2021-02-18 07:58:13.370231	\N			30	2021-02-18 07:58:13.370231	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
68	42	1	2021-02-18 07:59:18.564119	simplecoding.dev	/nilmadhab/creating-an-ecommerce-frontend-with-vue-js-3onh/edit	https://api.simplecoding.dev:3000/nilmadhab/creating-an-ecommerce-frontend-with-vue-js-3onh/edit	15	2021-02-18 07:59:18.564119	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
69	42	1	2021-02-18 07:59:43.707493	simplecoding.dev	/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-k-diff-pairs-in-an-array-146h/edit	https://api.simplecoding.dev:3000/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-k-diff-pairs-in-an-array-146h/edit	15	2021-02-18 07:59:43.707493	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
65	41	1	2021-02-17 22:09:40.466104	simplecoding.dev	/new	https://api.simplecoding.dev:3000/new	90	2021-02-17 22:09:40.466104	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
70	41	1	2021-02-18 07:59:58.922721	simplecoding.dev	/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-k-diff-pairs-in-an-array-146h/edit	https://api.simplecoding.dev:3000/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-k-diff-pairs-in-an-array-146h/edit	15	2021-02-18 07:59:58.922721	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
71	41	1	2021-02-18 08:04:38.720925	simplecoding.dev	/nilmadhab/let-s-build-a-video-chat-app-with-javascript-and-webrtc-1c16/edit	https://api.simplecoding.dev:3000/nilmadhab/let-s-build-a-video-chat-app-with-javascript-and-webrtc-1c16/edit	15	2021-02-18 08:04:38.720925	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
72	40	1	2021-02-18 08:04:59.102388	simplecoding.dev	/nilmadhab/let-s-build-a-video-chat-app-with-javascript-and-webrtc-1c16/edit	https://api.simplecoding.dev:3000/nilmadhab/let-s-build-a-video-chat-app-with-javascript-and-webrtc-1c16/edit	15	2021-02-18 08:04:59.102388	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
73	39	1	2021-02-18 08:05:51.64484	simplecoding.dev	/nilmadhab/let-s-build-a-video-chat-app-with-javascript-and-webrtc-29cd/edit	https://api.simplecoding.dev:3000/nilmadhab/let-s-build-a-video-chat-app-with-javascript-and-webrtc-29cd/edit	15	2021-02-18 08:05:51.64484	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
74	39	1	2021-02-18 08:06:19.98422	simplecoding.dev	/nilmadhab/creating-an-ecommerce-frontend-with-vue-js-part-3-wishlist-feature-4gcm/edit	https://api.simplecoding.dev:3000/nilmadhab/creating-an-ecommerce-frontend-with-vue-js-part-3-wishlist-feature-4gcm/edit	15	2021-02-18 08:06:19.98422	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
75	38	1	2021-02-18 08:06:30.587018	simplecoding.dev	/nilmadhab/creating-an-ecommerce-frontend-with-vue-js-part-3-wishlist-feature-4gcm/edit	https://api.simplecoding.dev:3000/nilmadhab/creating-an-ecommerce-frontend-with-vue-js-part-3-wishlist-feature-4gcm/edit	15	2021-02-18 08:06:30.587018	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
63	38	1	2021-02-17 21:56:53.80572	simplecoding.dev	/new	https://api.simplecoding.dev:3000/new	225	2021-02-17 21:56:53.80572	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
76	37	1	2021-02-18 08:07:00.625668	simplecoding.dev	/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-problem-202-happy-number-easy-41ml/edit	https://api.simplecoding.dev:3000/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-problem-202-happy-number-easy-41ml/edit	15	2021-02-18 08:07:00.625668	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
77	37	1	2021-02-18 08:07:16.246529	simplecoding.dev	/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-problem-14-longest-common-prefix-easy-38gf/edit	https://api.simplecoding.dev:3000/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-problem-14-longest-common-prefix-easy-38gf/edit	15	2021-02-18 08:07:16.246529	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
78	36	1	2021-02-18 08:07:28.872986	simplecoding.dev	/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-problem-14-longest-common-prefix-easy-38gf/edit	https://api.simplecoding.dev:3000/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-problem-14-longest-common-prefix-easy-38gf/edit	30	2021-02-18 08:07:28.872986	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
79	36	1	2021-02-18 08:07:51.524049	simplecoding.dev	/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-generate-parentheses-hmd/edit	https://api.simplecoding.dev:3000/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-generate-parentheses-hmd/edit	15	2021-02-18 08:07:51.524049	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
80	35	1	2021-02-18 08:07:58.266022	simplecoding.dev	/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-generate-parentheses-hmd/edit	https://api.simplecoding.dev:3000/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-generate-parentheses-hmd/edit	15	2021-02-18 08:07:58.266022	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
82	34	1	2021-02-18 08:12:20.787643	simplecoding.dev	/nilmadhab/let-s-deploy-our-online-code-executor-in-google-cloud-3o32/edit	https://api.simplecoding.dev:3000/nilmadhab/let-s-deploy-our-online-code-executor-in-google-cloud-3o32/edit	30	2021-02-18 08:12:20.787643	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
83	30	1	2021-02-18 08:12:57.488228	simplecoding.dev	/nilmadhab/let-s-deploy-our-online-code-executor-in-google-cloud-3o32/edit	https://api.simplecoding.dev:3000/nilmadhab/let-s-deploy-our-online-code-executor-in-google-cloud-3o32/edit	15	2021-02-18 08:12:57.488228	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
84	29	1	2021-02-18 08:13:24.121846	simplecoding.dev	/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-max-area-of-island-n80/edit	https://api.simplecoding.dev:3000/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-max-area-of-island-n80/edit	15	2021-02-18 08:13:24.121846	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
64	39	1	2021-02-17 22:02:48.312281	simplecoding.dev	/new	https://api.simplecoding.dev:3000/new	225	2021-02-17 22:02:48.312281	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
85	28	1	2021-02-18 08:15:06.451244	simplecoding.dev	/nilmadhab/leetcode-1047-remove-all-adjacent-duplicates-in-string-solution-3iia/edit	https://api.simplecoding.dev:3000/nilmadhab/leetcode-1047-remove-all-adjacent-duplicates-in-string-solution-3iia/edit	15	2021-02-18 08:15:06.451244	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
86	42	1	2021-02-18 08:39:00.382623	\N			15	2021-02-18 08:39:00.382623	Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36	1
87	42	1	2021-02-18 08:42:50.944075	\N			15	2021-02-18 08:42:50.944075	Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36	1
92	46	1	2021-02-19 15:03:13.846149	simplecoding.dev	/nilmadhab/let-s-develop-an-e-commerce-application-from-scratch-using-java-1ik9/edit	https://api.simplecoding.dev/nilmadhab/let-s-develop-an-e-commerce-application-from-scratch-using-java-1ik9/edit	195	2021-02-19 15:03:13.846149	Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36	1
93	44	1	2021-02-19 15:06:36.380739	simplecoding.dev	/nilmadhab/let-s-develop-an-e-commerce-application-from-scratch-using-java-1ik9/edit	https://api.simplecoding.dev/nilmadhab/let-s-develop-an-e-commerce-application-from-scratch-using-java-1ik9/edit	15	2021-02-19 15:06:36.380739	Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36	1
91	46	1	2021-02-19 15:00:54.972697	\N			135	2021-02-19 15:00:54.972697	Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36	1
88	42	1	2021-02-18 08:43:29.685728	simplecoding.dev	/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-k-diff-pairs-in-an-array-146h/edit	https://api.simplecoding.dev:3000/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-k-diff-pairs-in-an-array-146h/edit	720	2021-02-18 08:43:29.685728	Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36	1
94	44	1	2021-02-19 15:06:37.143864	simplecoding.dev	/	https://api.simplecoding.dev/	30	2021-02-19 15:06:37.143864	Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36	1
103	49	1	2021-02-20 13:04:19.248012	simplecoding.dev	/new	https://api.simplecoding.dev:3000/new	60	2021-02-20 13:04:19.248012	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
97	43	1	2021-02-19 15:06:43.675183	simplecoding.dev	/	https://api.simplecoding.dev/	90	2021-02-19 15:06:43.675183	Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36	1
98	44	1	2021-02-19 15:08:04.116919	simplecoding.dev	/nilmadhab/wishlist-feature-for-ecommerce-app-using-java-and-spring-boot-44oh/edit	https://api.simplecoding.dev/nilmadhab/wishlist-feature-for-ecommerce-app-using-java-and-spring-boot-44oh/edit	15	2021-02-19 15:08:04.116919	Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36	1
89	43	1	2021-02-18 14:51:18.816342	\N			825	2021-02-18 14:51:18.816342	Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36	1
96	40	1	2021-02-19 15:06:41.822647	simplecoding.dev	/	https://api.simplecoding.dev/	105	2021-02-19 15:06:41.822647	Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36	1
112	36	1	2021-02-20 13:27:38.144101	simplecoding.dev	/dashboard	https://api.simplecoding.dev/dashboard	15	2021-02-20 13:27:38.144101	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
106	50	1	2021-02-20 13:15:36.142914	simplecoding.dev	/new	https://api.simplecoding.dev/new	75	2021-02-20 13:15:36.142914	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
90	45	1	2021-02-18 21:34:34.406872	simplecoding.dev	/new	https://api.simplecoding.dev:3000/new	75	2021-02-18 21:34:34.406872	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
99	47	1	2021-02-20 10:39:25.879091	\N			150	2021-02-20 10:39:25.879091	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36	1
105	49	1	2021-02-20 13:11:03.171046	\N			2235	2021-02-20 13:11:03.171046	Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36	1
102	48	1	2021-02-20 12:51:48.458975	\N			300	2021-02-20 12:51:48.458975	Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36	1
95	42	1	2021-02-19 15:06:38.797204	simplecoding.dev	/	https://api.simplecoding.dev/	165	2021-02-19 15:06:38.797204	Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36	1
108	35	1	2021-02-20 13:17:40.444935	simplecoding.dev	/nilmadhab/leetcode-weekly-contest-225-change-minimum-characters-to-satisfy-one-of-three-conditions-1p6b/edit	https://api.simplecoding.dev/nilmadhab/leetcode-weekly-contest-225-change-minimum-characters-to-satisfy-one-of-three-conditions-1p6b/edit	255	2021-02-20 13:17:40.444935	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
100	48	1	2021-02-20 12:37:25.273959	simplecoding.dev	/new	https://api.simplecoding.dev:3000/new	75	2021-02-20 12:37:25.273959	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
101	48	1	2021-02-20 12:51:42.946126	\N			15	2021-02-20 12:51:42.946126	Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36	1
109	47	1	2021-02-20 13:22:40.501629	simplecoding.dev	/nilmadhab/leetcode-weekly-contest-225-change-minimum-characters-to-satisfy-one-of-three-conditions-1p6b/edit	https://api.simplecoding.dev/nilmadhab/leetcode-weekly-contest-225-change-minimum-characters-to-satisfy-one-of-three-conditions-1p6b/edit	15	2021-02-20 13:22:40.501629	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
104	49	1	2021-02-20 13:05:10.45462	\N			600	2021-02-20 13:05:10.45462	Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36	1
110	29	1	2021-02-20 13:23:22.256291	simplecoding.dev	/nilmadhab/leetcode-weekly-contest-225-change-minimum-characters-to-satisfy-one-of-three-conditions-1p6b/edit	https://api.simplecoding.dev/nilmadhab/leetcode-weekly-contest-225-change-minimum-characters-to-satisfy-one-of-three-conditions-1p6b/edit	75	2021-02-20 13:23:22.256291	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
107	35	1	2021-02-20 13:17:06.427028	simplecoding.dev	/new	https://api.simplecoding.dev/new	15	2021-02-20 13:17:06.427028	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
119	47	1	2021-02-20 13:34:33.606877	simplecoding.dev	/dashboard	https://api.simplecoding.dev/dashboard	30	2021-02-20 13:34:33.606877	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
120	47	1	2021-02-20 13:35:15.14173	simplecoding.dev	/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-4o3l/edit	https://api.simplecoding.dev/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-4o3l/edit?	15	2021-02-20 13:35:15.14173	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
126	30	1	2021-02-20 13:39:09.697605	simplecoding.dev	/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-k-diff-pairs-in-an-array-146h/edit	https://api.simplecoding.dev/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-k-diff-pairs-in-an-array-146h/edit	60	2021-02-20 13:39:09.697605	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
111	29	1	2021-02-20 13:25:14.965061	simplecoding.dev	/nilmadhab/leetcode-1047-remove-all-adjacent-duplicates-in-string-solution-3iia/edit	https://api.simplecoding.dev/nilmadhab/leetcode-1047-remove-all-adjacent-duplicates-in-string-solution-3iia/edit	120	2021-02-20 13:25:14.965061	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
125	42	1	2021-02-20 13:38:23.66978	simplecoding.dev	/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-k-diff-pairs-in-an-array-146h/edit	https://api.simplecoding.dev/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-k-diff-pairs-in-an-array-146h/edit	45	2021-02-20 13:38:23.66978	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
121	48	1	2021-02-20 13:35:29.993811	simplecoding.dev	/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-4o3l/edit	https://api.simplecoding.dev/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-4o3l/edit?	60	2021-02-20 13:35:29.993811	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
122	47	1	2021-02-20 13:36:27.604244	simplecoding.dev	/nilmadhab/how-to-get-a-free-domain-from-freenom-and-link-it-with-your-server-468i/edit	https://api.simplecoding.dev/nilmadhab/how-to-get-a-free-domain-from-freenom-and-link-it-with-your-server-468i/edit	15	2021-02-20 13:36:27.604244	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
123	46	1	2021-02-20 13:37:30.910581	simplecoding.dev	/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-4o3l/edit	https://api.simplecoding.dev/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-4o3l/edit	15	2021-02-20 13:37:30.910581	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
116	37	1	2021-02-20 13:31:13.051445	simplecoding.dev	/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-problem-14-longest-common-prefix-easy-38gf/edit	https://api.simplecoding.dev/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-problem-14-longest-common-prefix-easy-38gf/edit	165	2021-02-20 13:31:13.051445	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
117	37	1	2021-02-20 13:33:53.450279	simplecoding.dev	/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-problem-14-longest-common-prefix-easy-38gf/edit	https://api.simplecoding.dev/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-problem-14-longest-common-prefix-easy-38gf/edit	15	2021-02-20 13:33:53.450279	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
113	36	1	2021-02-20 13:28:06.673889	simplecoding.dev	/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-generate-parentheses-hmd/edit	https://api.simplecoding.dev/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-generate-parentheses-hmd/edit	120	2021-02-20 13:28:06.673889	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
114	37	1	2021-02-20 13:30:06.808926	simplecoding.dev	/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-generate-parentheses-hmd/edit	https://api.simplecoding.dev/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-generate-parentheses-hmd/edit	15	2021-02-20 13:30:06.808926	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
115	37	1	2021-02-20 13:30:38.846074	simplecoding.dev	/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-problem-14-longest-common-prefix-easy-38gf/edit	https://api.simplecoding.dev/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-problem-14-longest-common-prefix-easy-38gf/edit	15	2021-02-20 13:30:38.846074	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
118	37	1	2021-02-20 13:34:03.577063	\N			15	2021-02-20 13:34:03.577063	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
127	30	1	2021-02-20 13:39:43.054701	simplecoding.dev	/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-max-area-of-island-n80/edit	https://api.simplecoding.dev/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-max-area-of-island-n80/edit	15	2021-02-20 13:39:43.054701	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
124	42	1	2021-02-20 13:37:42.213622	simplecoding.dev	/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-4o3l/edit	https://api.simplecoding.dev/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-4o3l/edit	60	2021-02-20 13:37:42.213622	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
130	38	1	2021-02-20 13:41:18.068689	simplecoding.dev	/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-problem-202-happy-number-easy-41ml/edit	https://api.simplecoding.dev/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-problem-202-happy-number-easy-41ml/edit	240	2021-02-20 13:41:18.068689	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
128	30	1	2021-02-20 13:40:05.751936	simplecoding.dev	/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-max-area-of-island-n80/edit	https://api.simplecoding.dev/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-max-area-of-island-n80/edit	15	2021-02-20 13:40:05.751936	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
129	38	1	2021-02-20 13:40:24.425099	simplecoding.dev	/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-max-area-of-island-n80/edit	https://api.simplecoding.dev/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-max-area-of-island-n80/edit	45	2021-02-20 13:40:24.425099	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
152	56	1	2021-02-22 06:28:53.421536	simplecoding.dev	/new	https://api.simplecoding.dev/new	90	2021-02-22 06:28:53.421536	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36	1
153	50	1	2021-02-22 06:29:47.604041	simplecoding.dev	/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-309-best-time-to-buy-and-sell-stock-with-cooldown-jdc-temp-slug-7260801	https://api.simplecoding.dev/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-309-best-time-to-buy-and-sell-stock-with-cooldown-jdc-temp-slug-7260801?preview=731b03dd6b5f8ddf74d107a4f2bac38fe2e341f2157364611431febc221320638ff9e98413f0158e7a00d5003fdee40065309782061e080d23fa08c3	600	2021-02-22 06:29:47.604041	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36	1
132	51	1	2021-02-20 14:54:59.563304	\N			480	2021-02-20 14:54:59.563304	Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36	1
131	51	1	2021-02-20 13:53:55.587497	simplecoding.dev	/new	https://api.simplecoding.dev/new	75	2021-02-20 13:53:55.587497	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
133	52	1	2021-02-20 18:28:34.490651	simplecoding.dev	/new	https://api.simplecoding.dev/new	15	2021-02-20 18:28:34.490651	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
135	51	1	2021-02-21 04:28:33.789409	\N			420	2021-02-21 04:28:33.789409	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36	1
136	51	1	2021-02-21 05:50:36.835722	\N			15	2021-02-21 05:50:36.835722	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36	1
134	51	1	2021-02-21 04:27:40.600547	\N			60	2021-02-21 04:27:40.600547	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36	1
143	53	1	2021-02-21 07:19:56.887895	simplecoding.dev	/new	https://api.simplecoding.dev/new	75	2021-02-21 07:19:56.887895	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36	1
139	51	1	2021-02-21 05:55:11.249967	simplecoding.dev	/	https://api.simplecoding.dev/?signin=true	3435	2021-02-21 05:55:11.249967	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36	1
141	45	1	2021-02-21 06:38:25.088995	simplecoding.dev	/	https://api.simplecoding.dev/?signin=true	15	2021-02-21 06:38:25.088995	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36	1
142	45	1	2021-02-21 06:38:37.808906	simplecoding.dev	/	https://api.simplecoding.dev/?signin=true	1800	2021-02-21 06:38:37.808906	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36	1
140	50	1	2021-02-21 06:02:43.868098	simplecoding.dev	/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-find-all-duplicates-in-an-array-1cbe	https://api.simplecoding.dev/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-find-all-duplicates-in-an-array-1cbe	525	2021-02-21 06:02:43.868098	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36	1
144	54	1	2021-02-21 08:08:37.302482	simplecoding.dev	/new	https://api.simplecoding.dev/new	30	2021-02-21 08:08:37.302482	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36	1
145	53	1	2021-02-21 08:09:13.006108	simplecoding.dev	/new	https://api.simplecoding.dev/new	15	2021-02-21 08:09:13.006108	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36	1
138	45	1	2021-02-21 05:52:55.010039	simplecoding.dev	/	https://api.simplecoding.dev/?signin=true	135	2021-02-21 05:52:55.010039	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36	1
137	51	1	2021-02-21 05:50:46.544376	\N			60	2021-02-21 05:50:46.544376	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36	1
146	54	1	2021-02-21 08:09:29.245121	simplecoding.dev	/nilmadhab/let-s-link-products-with-category-for-our-e-commerce-app-5eap	https://api.simplecoding.dev/nilmadhab/let-s-link-products-with-category-for-our-e-commerce-app-5eap	15	2021-02-21 08:09:29.245121	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36	1
147	55	1	2021-02-21 16:24:44.074291	simplecoding.dev	/new	https://api.simplecoding.dev/new	15	2021-02-21 16:24:44.074291	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36	1
148	55	1	2021-02-21 16:24:58.573386	simplecoding.dev	/new	https://api.simplecoding.dev/new	30	2021-02-21 16:24:58.573386	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36	1
149	55	1	2021-02-21 16:25:07.463559	simplecoding.dev	/	https://api.simplecoding.dev/	15	2021-02-21 16:25:07.463559	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36	1
150	54	1	2021-02-21 16:25:15.979469	simplecoding.dev	/	https://api.simplecoding.dev/	15	2021-02-21 16:25:15.979469	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36	1
151	54	1	2021-02-21 16:25:23.970753	simplecoding.dev	/	https://api.simplecoding.dev/	15	2021-02-21 16:25:23.970753	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36	1
180	64	1	2021-02-24 10:34:19.735063	simplecoding.dev	/new	https://api.simplecoding.dev/new	120	2021-02-24 10:34:19.735063	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
154	56	1	2021-02-22 06:33:00.674374	simplecoding.dev	/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-309-best-time-to-buy-and-sell-stock-with-cooldown-jdc-temp-slug-7260801/edit	https://api.simplecoding.dev/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-309-best-time-to-buy-and-sell-stock-with-cooldown-jdc-temp-slug-7260801/edit	30	2021-02-22 06:33:00.674374	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36	1
155	50	1	2021-02-22 06:41:47.528006	simplecoding.dev	/	https://api.simplecoding.dev/	15	2021-02-22 06:41:47.528006	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36	1
156	57	1	2021-02-22 06:46:39.7256	simplecoding.dev	/new	https://api.simplecoding.dev/new	15	2021-02-22 06:46:39.7256	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36	1
157	57	1	2021-02-22 06:47:15.203834	simplecoding.dev	/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-first-unique-number-5c60-temp-slug-7305025/edit	https://api.simplecoding.dev/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-first-unique-number-5c60-temp-slug-7305025/edit	15	2021-02-22 06:47:15.203834	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36	1
158	51	1	2021-02-22 06:54:39.116251	simplecoding.dev	/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-first-unique-number-5c60-temp-slug-7305025/edit	https://api.simplecoding.dev/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-first-unique-number-5c60-temp-slug-7305025/edit	45	2021-02-22 06:54:39.116251	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36	1
167	56	1	2021-02-22 19:14:41.001918	simplecoding.dev	/nilmadhab/how-to-display-places-in-google-maps-on-android-like-airbnb-323-temp-slug-980346/edit	https://api.simplecoding.dev:3000/nilmadhab/how-to-display-places-in-google-maps-on-android-like-airbnb-323-temp-slug-980346/edit	540	2021-02-22 19:14:41.001918	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
166	52	1	2021-02-22 19:11:47.783078	simplecoding.dev	/nilmadhab/how-to-display-places-in-google-maps-on-android-like-airbnb-323-temp-slug-980346/edit	https://api.simplecoding.dev:3000/nilmadhab/how-to-display-places-in-google-maps-on-android-like-airbnb-323-temp-slug-980346/edit	165	2021-02-22 19:11:47.783078	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
159	57	1	2021-02-22 06:57:49.991695	simplecoding.dev	/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-first-unique-number-5c60-temp-slug-7305025/edit	https://api.simplecoding.dev/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-first-unique-number-5c60-temp-slug-7305025/edit	60	2021-02-22 06:57:49.991695	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36	1
160	58	1	2021-02-22 07:09:04.767506	simplecoding.dev	/new	https://api.simplecoding.dev/new	15	2021-02-22 07:09:04.767506	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36	1
161	59	1	2021-02-22 07:59:43.35937	simplecoding.dev	/new	https://api.simplecoding.dev/new	15	2021-02-22 07:59:43.35937	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36	1
162	59	1	2021-02-22 08:04:05.569492	simplecoding.dev	/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-simplify-path-5693-temp-slug-2235562/edit	https://api.simplecoding.dev/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-simplify-path-5693-temp-slug-2235562/edit	15	2021-02-22 08:04:05.569492	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36	1
163	59	1	2021-02-22 08:09:59.76699	\N			15	2021-02-22 08:09:59.76699	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36	1
164	56	1	2021-02-22 08:10:34.637526	\N			15	2021-02-22 08:10:34.637526	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36	1
165	52	1	2021-02-22 18:39:46.986162	\N			15	2021-02-22 18:39:46.986162	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
170	28	1	2021-02-23 07:12:54.112928	\N			30	2021-02-23 07:12:54.112928	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36	1
172	62	1	2021-02-23 11:23:23.687352	\N			45	2021-02-23 11:23:23.687352	Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36	1
168	60	1	2021-02-22 19:44:17.090676	simplecoding.dev	/new	https://api.simplecoding.dev:3000/new	195	2021-02-22 19:44:17.090676	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
177	41	1	2021-02-23 12:04:40.611762	\N			15	2021-02-23 12:04:40.611762	Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36	1
171	62	1	2021-02-23 11:20:18.668525	simplecoding.dev	/new	https://api.simplecoding.dev/new	180	2021-02-23 11:20:18.668525	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
174	62	1	2021-02-23 11:25:07.405118	\N			1935	2021-02-23 11:25:07.405118	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
169	61	1	2021-02-22 20:23:00.501317	\N			75	2021-02-22 20:23:00.501317	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
173	62	1	2021-02-23 11:24:05.289784	\N			135	2021-02-23 11:24:05.289784	Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36	1
175	62	1	2021-02-23 11:41:07.518954	simplecoding.dev	/nilmadhab/let-s-build-signup-signin-and-role-based-access-in-our-e-commerce-app-343d/edit	https://api.simplecoding.dev/nilmadhab/let-s-build-signup-signin-and-role-based-access-in-our-e-commerce-app-343d/edit	1815	2021-02-23 11:41:07.518954	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
176	41	1	2021-02-23 12:01:30.383065	\N			15	2021-02-23 12:01:30.383065	Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36	1
178	40	1	2021-02-23 12:04:49.795977	\N			120	2021-02-23 12:04:49.795977	Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36	1
179	61	10	2021-02-23 18:23:07.982466	\N			15	2021-02-23 18:23:07.982466	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36	\N
181	65	1	2021-02-24 10:48:11.238707	simplecoding.dev	/new	https://api.simplecoding.dev/new	15	2021-02-24 10:48:11.238707	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
182	65	1	2021-02-24 10:48:50.831055	simplecoding.dev	/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-number-of-enclaves-100o/edit	https://api.simplecoding.dev/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-number-of-enclaves-100o/edit	30	2021-02-24 10:48:50.831055	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
185	66	1	2021-02-25 06:35:36.027603	\N			180	2021-02-25 06:35:36.027603	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
183	65	1	2021-02-24 10:49:39.621211	simplecoding.dev	/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-number-of-enclaves-100o/edit	https://api.simplecoding.dev/nilmadhab/solve-leetcode-problems-and-get-offers-from-your-dream-companies-number-of-enclaves-100o/edit	1605	2021-02-24 10:49:39.621211	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
184	66	1	2021-02-25 06:16:23.611513	\N			60	2021-02-25 06:16:23.611513	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0	1
\.


--
-- Data for Name: pages; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.pages (id, body_html, body_json, body_markdown, created_at, description, is_top_level_path, processed_html, slug, social_image, template, title, updated_at) FROM stdin;
1	\N	\N	```ruby\nAut.\n```	2021-02-10 13:39:04.642403	My lord, I suspect an incredible secret has been kept on this planet: that the Fremen exist in vast numbers - vast. And it is they who control Arrakis.	f	<div class="highlight js-code-highlight">\n<pre class="highlight ruby"><code><span class="no">Aut</span><span class="o">.</span>\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n	architecto_distinctio	\N	full_within_layout	The HDD application is down, parse the primary driver so we can synthesize the RAM system!	2021-02-10 13:39:04.642403
2	\N	\N	##### Reprehenderit	2021-02-10 13:39:04.698685	Bring in that floating fat man, the Baron!	f	<h5>\n  <a name="reprehenderit" href="#reprehenderit" class="anchor">\n  </a>\n  Reprehenderit\n</h5>\n\n	quos_soluta	\N	full_within_layout	You can't index the microchip without quantifying the auxiliary RSS array!	2021-02-10 13:39:04.698685
3	\N	\N	_Incidunt_ omnis esse. Quidem dolore corporis. Ipsam dignissimos nisi.	2021-02-10 13:39:04.740887	The spice must flow	f	<p><em>Incidunt</em> omnis esse. Quidem dolore corporis. Ipsam dignissimos nisi.</p>\n\n	vel-assumenda	\N	full_within_layout	You can't bypass the card without generating the neural AI protocol!	2021-02-10 13:39:04.740887
4	\N	\N	0. Eos. \n1. Amet. \n2. Quia. \n	2021-02-10 13:39:04.788288	There is no escape — we pay for the violence of our ancestors.	f	<ol>\n<li>Eos. </li>\n<li>Amet. </li>\n<li>Quia. </li>\n</ol>\n\n	qui_maiores	\N	contained	If we navigate the capacitor, we can get to the EXE microchip through the open-source FTP monitor!	2021-02-10 13:39:04.788288
5	\N	\N	```ruby\nQuisquam.\n```	2021-02-10 13:39:04.841572	To save one from a mistake is a gift of paradise.	f	<div class="highlight js-code-highlight">\n<pre class="highlight ruby"><code><span class="no">Quisquam</span><span class="o">.</span>\n</code></pre>\n<div class="highlight__panel js-actions-panel">\n<div class="highlight__panel-action js-fullscreen-code-action">\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>\n    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"></path>\n</svg>\n\n    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>\n    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n	reiciendis_impedit	\N	contained	I'll synthesize the solid state SDD panel, that should application the JSON firewall!	2021-02-10 13:39:04.841572
\.


--
-- Data for Name: podcast_episode_appearances; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.podcast_episode_appearances (id, approved, created_at, featured_on_user_profile, podcast_episode_id, role, updated_at, user_id) FROM stdin;
\.


--
-- Data for Name: podcast_episodes; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.podcast_episodes (id, any_comments_hidden, body, comments_count, created_at, duration_in_seconds, guid, https, image, itunes_url, media_url, podcast_id, processed_html, published_at, quote, reachable, reactions_count, slug, social_image, status_notice, subtitle, summary, title, updated_at, website_url) FROM stdin;
\.


--
-- Data for Name: podcast_ownerships; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.podcast_ownerships (id, created_at, podcast_id, updated_at, user_id) FROM stdin;
\.


--
-- Data for Name: podcasts; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.podcasts (id, android_url, created_at, creator_id, description, feed_url, image, itunes_url, main_color_hex, overcast_url, pattern_image, published, reachable, slug, soundcloud_url, status_notice, title, twitter_username, "unique_website_url?", updated_at, website_url) FROM stdin;
\.


--
-- Data for Name: poll_options; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.poll_options (id, created_at, markdown, poll_id, poll_votes_count, processed_html, updated_at) FROM stdin;
\.


--
-- Data for Name: poll_skips; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.poll_skips (id, created_at, poll_id, updated_at, user_id) FROM stdin;
\.


--
-- Data for Name: poll_votes; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.poll_votes (id, created_at, poll_id, poll_option_id, updated_at, user_id) FROM stdin;
\.


--
-- Data for Name: polls; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.polls (id, article_id, created_at, poll_options_count, poll_skips_count, poll_votes_count, prompt_html, prompt_markdown, updated_at) FROM stdin;
\.


--
-- Data for Name: profile_field_groups; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.profile_field_groups (id, created_at, description, name, updated_at) FROM stdin;
1	2021-02-10 13:38:41.823269	\N	Basic	2021-02-10 13:38:41.823269
2	2021-02-10 13:38:42.028841	\N	Links	2021-02-10 13:38:42.028841
3	2021-02-10 13:38:42.452132	\N	Work	2021-02-10 13:38:42.452132
4	2021-02-10 13:38:42.631372	\N	Coding	2021-02-10 13:38:42.631372
5	2021-02-10 13:38:42.733923	\N	Branding	2021-02-10 13:38:42.733923
\.


--
-- Data for Name: profile_fields; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.profile_fields (id, attribute_name, created_at, description, display_area, input_type, label, placeholder_text, profile_field_group_id, show_in_onboarding, updated_at) FROM stdin;
1	display_email_on_profile	2021-02-10 13:38:41.884716	\N	2	2	Display email on profile	\N	1	f	2021-02-10 13:38:41.884716
2	website_url	2021-02-10 13:38:41.914716	\N	2	0	Website URL	https://yoursite.com	1	t	2021-02-10 13:38:41.914716
4	location	2021-02-10 13:38:42.008544	\N	0	0	Location	Halifax, Nova Scotia	1	t	2021-02-10 13:38:42.008544
5	facebook_url	2021-02-10 13:38:42.050925	\N	2	0	Facebook URL	https://facebook.com/...	2	f	2021-02-10 13:38:42.050925
6	youtube_url	2021-02-10 13:38:42.078469	\N	2	0	Youtube URL	https://www.youtube.com/channel/...	2	f	2021-02-10 13:38:42.078469
7	stack_overflow_url	2021-02-10 13:38:42.11135	\N	2	0	StackOverflow URL	https://stackoverflow.com/users/...	2	f	2021-02-10 13:38:42.11135
8	linked_in_url	2021-02-10 13:38:42.156161	\N	2	0	LinkedIn URL	https://www.linkedin.com/in/...	2	f	2021-02-10 13:38:42.156161
9	behance_url	2021-02-10 13:38:42.191138	\N	2	0	Behance URL	https://www.behance.net/...	2	f	2021-02-10 13:38:42.191138
10	dribbble_url	2021-02-10 13:38:42.228643	\N	2	0	Dribbble URL	https://dribbble.com/...	2	f	2021-02-10 13:38:42.228643
11	medium_url	2021-02-10 13:38:42.279944	\N	2	0	Medium URL	https://medium.com/@...	2	f	2021-02-10 13:38:42.279944
12	git_lab_url	2021-02-10 13:38:42.318951	\N	2	0	GitLab URL	https://gitlab.com/...	2	f	2021-02-10 13:38:42.318951
13	instagram_url	2021-02-10 13:38:42.357958	\N	2	0	Instagram URL	https://www.instagram.com/...	2	f	2021-02-10 13:38:42.357958
14	mastodon_url	2021-02-10 13:38:42.384523	\N	2	0	Mastodon URL	https://...	2	f	2021-02-10 13:38:42.384523
15	twitch_url	2021-02-10 13:38:42.42354	\N	2	0	Twitch URL	https://www.twitch.tv/...	2	f	2021-02-10 13:38:42.42354
16	education	2021-02-10 13:38:42.487522	\N	0	0	Education	\N	3	f	2021-02-10 13:38:42.487522
18	employer_url	2021-02-10 13:38:42.595481	\N	0	0	Employer URL	https://dev.com	3	f	2021-02-10 13:38:42.595481
20	skills_languages	2021-02-10 13:38:42.650171	What tools and languages are you most experienced with? Are you specialized or more of a generalist?	1	1	Skills/Languages	\N	4	f	2021-02-10 13:38:42.650171
21	currently_learning	2021-02-10 13:38:42.670939	What are you learning right now? What are the new tools and languages you're picking up right now?	1	1	Currently learning	\N	4	f	2021-02-10 13:38:42.670939
22	currently_hacking_on	2021-02-10 13:38:42.691118	What projects are currently occupying most of your time?	1	1	Currently hacking on	\N	4	f	2021-02-10 13:38:42.691118
23	available_for	2021-02-10 13:38:42.714832	What kinds of collaborations or discussions are you available for? What's a good reason to say Hey! to you these days?	1	1	Available for	\N	4	f	2021-02-10 13:38:42.714832
24	brand_color1	2021-02-10 13:38:42.752857	Used for backgrounds, borders etc.	2	3	Brand color 1	#000000	5	f	2021-02-10 13:38:42.752857
25	brand_color2	2021-02-10 13:38:42.776437	Used for texts (usually put on Brand color 1).	2	3	Brand color 2	#000000	5	f	2021-02-10 13:38:42.776437
3	summary	2021-02-10 13:38:41.963297	\N	2	1	Bio	A short bio...	1	t	2021-02-10 13:39:26.072301
19	employment_title	2021-02-10 13:38:42.613867	\N	0	0	Employer title	Junior Frontend Engineer	3	t	2021-02-10 13:39:26.110279
17	employer_name	2021-02-10 13:38:42.574483	\N	0	0	Employer name	Acme Inc.	3	t	2021-02-10 13:39:26.132808
26	summary	2021-02-10 13:39:31.018589	\N	0	1	Summary	A short bio...	1	t	2021-02-10 13:39:31.018589
\.


--
-- Data for Name: profile_pins; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.profile_pins (id, created_at, pinnable_id, pinnable_type, profile_id, profile_type, updated_at) FROM stdin;
\.


--
-- Data for Name: profiles; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.profiles (id, created_at, data, updated_at, user_id) FROM stdin;
12	2021-02-25 11:44:17.350875	{"custom_attributes": "{}"}	2021-02-25 11:44:17.350875	12
\.


--
-- Data for Name: rating_votes; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.rating_votes (id, article_id, context, created_at, "group", rating, updated_at, user_id) FROM stdin;
\.


--
-- Data for Name: reactions; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.reactions (id, category, created_at, points, reactable_id, reactable_type, status, updated_at, user_id) FROM stdin;
\.


--
-- Data for Name: response_templates; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.response_templates (id, content, content_type, created_at, title, type_of, updated_at, user_id) FROM stdin;
\.


--
-- Data for Name: roles; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.roles (id, created_at, name, resource_id, resource_type, updated_at) FROM stdin;
1	2021-02-10 13:38:43.682384	trusted	\N	\N	2021-02-10 13:38:43.682384
2	2021-02-10 13:38:44.372007	workshop_pass	\N	\N	2021-02-10 13:38:44.372007
3	2021-02-10 13:38:45.882564	chatroom_beta_tester	\N	\N	2021-02-10 13:38:45.882564
4	2021-02-10 13:38:49.54451	super_admin	\N	\N	2021-02-10 13:38:49.54451
5	2021-02-10 13:38:49.61321	single_resource_admin	\N	Config	2021-02-10 13:38:49.61321
\.


--
-- Data for Name: schema_migrations; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.schema_migrations (version) FROM stdin;
20210121102114
20151224175814
20151224180956
20151226205806
20151231095411
20151231102537
20160101145545
20160101170140
20160104220657
20160104221355
20160104222032
20160104223954
20160104225041
20160105211934
20160111153315
20160115190444
20160120012230
20160124203153
20160124205229
20160125202948
20160126145035
20160126152212
20160128215217
20160129154529
20160131213109
20160131213110
20160131213111
20160131213112
20160131213113
20160131234917
20160201001953
20160201002243
20160201012919
20160201014516
20160202211114
20160202214951
20160203005540
20160203011021
20160203233256
20160206011647
20160211170239
20160214023247
20160226193243
20160304000325
20160304010353
20160304011144
20160309155009
20160310024038
20160317190829
20160317190838
20160318195259
20160322214055
20160323233659
20160324231938
20160329004330
20160401203746
20160418001613
20160428002923
20160503004547
20160505014825
20160510022025
20160517144259
20160517144335
20160518202957
20160525190703
20160525192526
20160602140503
20160610135858
20160610145259
20160610155109
20160703135819
20160713202608
20160726230520
20160801212954
20160809182110
20160810191937
20160819025830
20160905190604
20160908145640
20160908151357
20160926154138
20160926164412
20161013195522
20161018201530
20161124212209
20161208193428
20161211234357
20161212161130
20161213212554
20161216165302
20161219173922
20161223053926
20161226180959
20161228210927
20161229054605
20170105141344
20170110154028
20170110170105
20170119193031
20170127194840
20170206214820
20170206220334
20170208152018
20170209164016
20170213183337
20170216145500
20170228174838
20170302152930
20170303171502
20170303180353
20170309162937
20170310003608
20170317171912
20170325040822
20170330184420
20170330222954
20170403135236
20170411145225
20170502162438
20170505210243
20170517172352
20170521154826
20170523210349
20170524160535
20170531150807
20170531151548
20170602152759
20170607191629
20170610142132
20170613193616
20170615172623
20170615172941
20170616191722
20170619151747
20170620145442
20170620212740
20170622191911
20170626211738
20170627205501
20170706212815
20170711195143
20170717214026
20170718150429
20170718174233
20170719184042
20170719211212
20170725171619
20170727002902
20170727153841
20170802204604
20170804193835
20170809182148
20170821154300
20170828165505
20170829164950
20170829190632
20170831180005
20170831200650
20170905170750
20170912012249
20170920160022
20170921205230
20170921221837
20171002180944
20171002195852
20171003191547
20171003222833
20171004025750
20171012215224
20171013180013
20171019152130
20171019215638
20171020160338
20171024171916
20171024193812
20171026214850
20171030214855
20171103165851
20171104014225
20171106203902
20171110215815
20171110223810
20171116191214
20171116203319
20171204171217
20171229192205
20180103183451
20180107004333
20180110012012
20180111170406
20180115221125
20180130192627
20180131183322
20180202171402
20180208210732
20180209174729
20180210161930
20180212153228
20180213165354
20180303210932
20180304151124
20180316143921
20180316164921
20180316174324
20180321170500
20180328194237
20180328194253
20180427160903
20180502152520
20180502152621
20180502160428
20180502174301
20180502213919
20180507191509
20180508165244
20180508170132
20180508200948
20180516173047
20180516184437
20180522195341
20180531194107
20180601145801
20180601195848
20180603160906
20180604200603
20180606155327
20180608195204
20180609191539
20180612214259
20180622173538
20180624230435
20180629201047
20180703142743
20180705194536
20180707162348
20180713180709
20180716182629
20180728201801
20180806142338
20180816165158
20180821204032
20180824191849
20180826174411
20180905013458
20180924201325
20180924204406
20180928161837
20180930015157
20181001225906
20181003173949
20181005180705
20181005200827
20181008174839
20181010204910
20181016181008
20181019195746
20181020195949
20181020195954
20181026112019
20181026214021
20181111040732
20181116223239
20181117145537
20181120170350
20181127173004
20181129222416
20181130224531
20181219215401
20181227192353
20190109212351
20190115155656
20190121172642
20190121191754
20190129173611
20190129190135
20190206164319
20190206222055
20190216185753
20190227163543
20190227163803
20190305221008
20190306082543
20190315151829
20190315222044
20190318223433
20190326085046
20190327090030
20190329103059
20190401100844
20190401100850
20190401193017
20190401213605
20190402224426
20190404102732
20190405190915
20190409123750
20190410124957
20190412093614
20190415194929
20190417171019
20190417171020
20190420000607
20190425210432
20190430123156
20190501141654
20190501180125
20190501191830
20190502165056
20190504015859
20190504131412
20190521190118
20190524214445
20190525233909
20190525233918
20190525233934
20190531085252
20190531094609
20190531094926
20190603190201
20190606202826
20190607110030
20190611102309
20190611102923
20190611144112
20190611195955
20190612095748
20190612095959
20190612174127
20190614093041
20190616024727
20190616053854
20190617101811
20190617102149
20190619153428
20190624093012
20190625143841
20190626022355
20190626221336
20190628123548
20190702194019
20190703003817
20190704082551
20190704091636
20190704105143
20190705111810
20190705114625
20190708105607
20190709192214
20190710081915
20190711070019
20190711093610
20190713213412
20190713225409
20190717220437
20190717224405
20190723094834
20190801083510
20190801132654
20190818191954
20190819104106
20190822162434
20190827163358
20190906193806
20190910153845
20190918104106
20190925171050
20190925193205
20191016135034
20191025185619
20191025202354
20191031131016
20191106095242
20191106102826
20191108153914
20191203114809
20191203160028
20191203171558
20191210144342
20191215145706
20191220120243
20191223202251
20191226202114
20191227113154
20191227114543
20200106074859
20200117135558
20200117135902
20200119214529
20200120053525
20200125204226
20200205225813
20200211192415
20200212164359
20200213182938
20200221170905
20200221184007
20200222164815
20200224153122
20200225104037
20200226081611
20200226192145
20200226205549
20200226210111
20200227214321
20200303222558
20200304164719
20200304220534
20200308144606
20200311170959
20200324113133
20200324170819
20200326110404
20200326111645
20200329103305
20200331155903
20200403203054
20200405103927
20200407081312
20200407083405
20200407083732
20200407084807
20200407090218
20200407090914
20200407091449
20200409043946
20200409050122
20200411085952
20200412194408
20200420130910
20200426124118
20200427094852
20200427233631
20200501032629
20200504075409
20200511224704
20200514162708
20200514163014
20200514212601
20200515085746
20200519220213
20200520091835
20200520092247
20200520092613
20200520092938
20200520092951
20200521103848
20200521103911
20200521103935
20200521103952
20200521153435
20200525115740
20200525120420
20200525120642
20200525125611
20200526144234
20200526145731
20200526151431
20200526151807
20200527161505
20200530084533
20200601121243
20200602174329
20200604133925
20200605170430
20200605183117
20200608175130
20200609191943
20200609192545
20200609195523
20200612140153
20200615213003
20200616200005
20200617014320
20200617014509
20200617183058
20200618212422
20200702143618
20200706184804
20200707170245
20200707173316
20200707173524
20200710174257
20200712150048
20200716125857
20200717203432
20200717220654
20200719205123
20200720143134
20200720213710
20200721213341
20200723180841
20200723203155
20200725215546
20200726215928
20200727052235
20200727163200
20200731033002
20200731041554
20200803193841
20200804035648
20200805050048
20200805100552
20200805102249
20200806052718
20200806193438
20200809200631
20200811044202
20200813031851
20200813042118
20200814142425
20200814142648
20200817205048
20200818101637
20200818101700
20200818163445
20200818163834
20200818202007
20200819162917
20200820055018
20200820093731
20200820093752
20200821035520
20200822092853
20200826072259
20200826072722
20200826131359
20200826132009
20200826132639
20200827073520
20200828032013
20200828045600
20200901084210
20200902132326
20200902204028
20200904040009
20200904151734
20200910155145
20200910205316
20200911140318
20200914143753
20200914144033
20200914144157
20200914145500
20200917114525
20200917141134
20200917141154
20200917154147
20200917154234
20200917154256
20200917154306
20200918200231
20200921160153
20201001154006
20201002102257
20201002102303
20201002104711
20201005181510
20201007085440
20201007091041
20201009040438
20201012072557
20201017160628
20201019012200
20201107111600
20201114130315
20201114151157
20201119153512
20201203063435
20201208195636
20210105183127
20210108031718
20210111045049
20210111151630
\.


--
-- Data for Name: site_configs; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.site_configs (id, created_at, updated_at, value, var) FROM stdin;
1	2021-02-10 13:38:38.151507	2021-02-10 13:38:38.151507	--- true\n...\n	public
2	2021-02-10 13:38:38.167531	2021-02-10 13:38:38.167531	--- false\n...\n	waiting_on_first_user
4	2021-02-10 13:39:30.669465	2021-02-10 13:39:30.669465	--- 7e87217407a860188d5c\n...\n	health_check_token
3	2021-02-10 13:39:26.428676	2021-02-10 14:31:27.207461	--- Simple Coding\n...\n	community_name
5	2021-02-10 14:31:27.234412	2021-02-10 14:31:27.234412	--- For Developers\n...\n	community_description
6	2021-02-10 14:31:27.265368	2021-02-10 14:31:27.265368	---\n- java\n	suggested_tags
7	2021-02-10 14:31:27.294581	2021-02-10 14:32:01.63569	---\n- nilmadhab1994@gmail.com\n	suggested_users
8	2021-02-10 14:31:27.546957	2021-02-10 14:32:01.832584	--- !ruby/object:ActiveSupport::TimeWithZone\nutc: &1 2021-02-10 14:32:01.828291953 Z\nzone: !ruby/object:ActiveSupport::TimeZone\n  name: Etc/UTC\ntime: *1\n	admin_action_taken_at
\.


--
-- Data for Name: sponsorships; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.sponsorships (id, blurb_html, created_at, expires_at, featured_number, instructions, instructions_updated_at, level, organization_id, sponsorable_id, sponsorable_type, status, tagline, updated_at, url, user_id) FROM stdin;
\.


--
-- Data for Name: tag_adjustments; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.tag_adjustments (id, adjustment_type, article_id, created_at, reason_for_adjustment, status, tag_id, tag_name, updated_at, user_id) FROM stdin;
\.


--
-- Data for Name: taggings; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.taggings (id, context, created_at, tag_id, taggable_id, taggable_type, tagger_id, tagger_type) FROM stdin;
1	tags	2021-02-10 13:38:50.7705	13	1	Article	\N	\N
2	tags	2021-02-10 13:38:50.790734	6	1	Article	\N	\N
3	tags	2021-02-10 13:38:50.809709	2	1	Article	\N	\N
4	tags	2021-02-10 13:38:50.831371	1	1	Article	\N	\N
5	tags	2021-02-10 13:38:51.118716	2	2	Article	\N	\N
6	tags	2021-02-10 13:38:51.136712	11	2	Article	\N	\N
7	tags	2021-02-10 13:38:51.15532	1	2	Article	\N	\N
8	tags	2021-02-10 13:38:51.307912	4	3	Article	\N	\N
9	tags	2021-02-10 13:38:51.329573	13	3	Article	\N	\N
10	tags	2021-02-10 13:38:51.350297	7	3	Article	\N	\N
11	tags	2021-02-10 13:38:51.52475	13	4	Article	\N	\N
12	tags	2021-02-10 13:38:51.545815	3	4	Article	\N	\N
13	tags	2021-02-10 13:38:51.566232	1	4	Article	\N	\N
14	tags	2021-02-10 13:38:51.711526	3	5	Article	\N	\N
15	tags	2021-02-10 13:38:51.733383	13	5	Article	\N	\N
16	tags	2021-02-10 13:38:51.755547	2	5	Article	\N	\N
17	tags	2021-02-10 13:38:51.961502	2	6	Article	\N	\N
18	tags	2021-02-10 13:38:51.982436	9	6	Article	\N	\N
19	tags	2021-02-10 13:38:52.003766	12	6	Article	\N	\N
20	tags	2021-02-10 13:38:52.174142	13	7	Article	\N	\N
21	tags	2021-02-10 13:38:52.195728	3	7	Article	\N	\N
22	tags	2021-02-10 13:38:52.213493	9	7	Article	\N	\N
23	tags	2021-02-10 13:38:52.233909	8	7	Article	\N	\N
24	tags	2021-02-10 13:38:52.386179	7	8	Article	\N	\N
25	tags	2021-02-10 13:38:52.406335	6	8	Article	\N	\N
26	tags	2021-02-10 13:38:52.428092	1	8	Article	\N	\N
27	tags	2021-02-10 13:38:52.602808	9	9	Article	\N	\N
28	tags	2021-02-10 13:38:52.62523	12	9	Article	\N	\N
29	tags	2021-02-10 13:38:52.648448	11	9	Article	\N	\N
30	tags	2021-02-10 13:38:52.85698	13	10	Article	\N	\N
31	tags	2021-02-10 13:38:52.888778	3	10	Article	\N	\N
32	tags	2021-02-10 13:38:52.921937	7	10	Article	\N	\N
33	tags	2021-02-10 13:38:52.952749	2	10	Article	\N	\N
34	tags	2021-02-10 13:38:53.132573	7	11	Article	\N	\N
35	tags	2021-02-10 13:38:53.15413	13	11	Article	\N	\N
36	tags	2021-02-10 13:38:53.17594	11	11	Article	\N	\N
37	tags	2021-02-10 13:38:53.389843	7	12	Article	\N	\N
38	tags	2021-02-10 13:38:53.415885	4	12	Article	\N	\N
39	tags	2021-02-10 13:38:53.438772	11	12	Article	\N	\N
40	tags	2021-02-10 13:38:53.635	13	13	Article	\N	\N
41	tags	2021-02-10 13:38:53.660244	2	13	Article	\N	\N
42	tags	2021-02-10 13:38:53.685865	1	13	Article	\N	\N
43	tags	2021-02-10 13:38:53.709174	7	13	Article	\N	\N
44	tags	2021-02-10 13:38:53.981531	6	14	Article	\N	\N
45	tags	2021-02-10 13:38:54.001156	5	14	Article	\N	\N
46	tags	2021-02-10 13:38:54.021984	12	14	Article	\N	\N
47	tags	2021-02-10 13:38:54.169741	2	15	Article	\N	\N
48	tags	2021-02-10 13:38:54.189413	6	15	Article	\N	\N
49	tags	2021-02-10 13:38:54.209535	8	15	Article	\N	\N
50	tags	2021-02-10 13:38:54.367243	13	16	Article	\N	\N
51	tags	2021-02-10 13:38:54.387572	7	16	Article	\N	\N
52	tags	2021-02-10 13:38:54.408919	12	16	Article	\N	\N
53	tags	2021-02-10 13:38:54.560468	12	17	Article	\N	\N
54	tags	2021-02-10 13:38:54.580653	13	17	Article	\N	\N
55	tags	2021-02-10 13:38:54.601413	5	17	Article	\N	\N
56	tags	2021-02-10 13:38:54.762501	6	18	Article	\N	\N
57	tags	2021-02-10 13:38:54.78043	4	18	Article	\N	\N
58	tags	2021-02-10 13:38:54.800133	2	18	Article	\N	\N
59	tags	2021-02-10 13:38:54.945024	13	19	Article	\N	\N
60	tags	2021-02-10 13:38:54.965468	2	19	Article	\N	\N
61	tags	2021-02-10 13:38:54.986404	9	19	Article	\N	\N
62	tags	2021-02-10 13:38:55.00707	3	19	Article	\N	\N
63	tags	2021-02-10 13:38:55.171975	2	20	Article	\N	\N
64	tags	2021-02-10 13:38:55.195992	9	20	Article	\N	\N
65	tags	2021-02-10 13:38:55.215766	6	20	Article	\N	\N
66	tags	2021-02-10 13:38:55.369938	1	21	Article	\N	\N
67	tags	2021-02-10 13:38:55.393181	8	21	Article	\N	\N
68	tags	2021-02-10 13:38:55.41458	5	21	Article	\N	\N
69	tags	2021-02-10 13:38:55.596051	13	22	Article	\N	\N
70	tags	2021-02-10 13:38:55.615271	4	22	Article	\N	\N
71	tags	2021-02-10 13:38:55.634045	7	22	Article	\N	\N
72	tags	2021-02-10 13:38:55.652975	3	22	Article	\N	\N
73	tags	2021-02-10 13:38:55.786794	9	23	Article	\N	\N
74	tags	2021-02-10 13:38:55.80154	4	23	Article	\N	\N
75	tags	2021-02-10 13:38:55.816118	1	23	Article	\N	\N
76	tags	2021-02-10 13:38:55.959741	13	24	Article	\N	\N
77	tags	2021-02-10 13:38:55.97937	7	24	Article	\N	\N
78	tags	2021-02-10 13:38:55.99758	4	24	Article	\N	\N
79	tags	2021-02-10 13:38:56.146159	13	25	Article	\N	\N
80	tags	2021-02-10 13:38:56.164706	9	25	Article	\N	\N
81	tags	2021-02-10 13:38:56.184271	12	25	Article	\N	\N
82	tags	2021-02-10 13:38:56.203258	10	25	Article	\N	\N
83	tags	2021-02-10 13:39:00.52622	14	26	Article	\N	\N
84	tags	2021-02-10 13:39:03.441112	4	1	Listing	\N	\N
85	tags	2021-02-10 13:39:03.461719	8	1	Listing	\N	\N
86	tags	2021-02-10 13:39:03.538391	3	2	Listing	\N	\N
87	tags	2021-02-10 13:39:03.559699	11	2	Listing	\N	\N
88	tags	2021-02-10 13:39:03.633679	3	3	Listing	\N	\N
89	tags	2021-02-10 13:39:03.648429	12	3	Listing	\N	\N
90	tags	2021-02-10 13:39:03.713111	4	4	Listing	\N	\N
91	tags	2021-02-10 13:39:03.735625	1	4	Listing	\N	\N
92	tags	2021-02-10 13:39:03.820549	9	5	Listing	\N	\N
93	tags	2021-02-10 13:39:03.846368	10	5	Listing	\N	\N
94	tags	2021-02-10 13:39:03.925617	3	6	Listing	\N	\N
95	tags	2021-02-10 13:39:03.945256	12	6	Listing	\N	\N
96	tags	2021-02-10 13:39:04.021441	4	7	Listing	\N	\N
97	tags	2021-02-10 13:39:04.042944	5	7	Listing	\N	\N
98	tags	2021-02-10 13:39:04.12141	6	8	Listing	\N	\N
99	tags	2021-02-10 13:39:04.167847	2	8	Listing	\N	\N
100	tags	2021-02-10 13:39:04.239	13	9	Listing	\N	\N
101	tags	2021-02-10 13:39:04.259982	8	9	Listing	\N	\N
102	tags	2021-02-10 13:39:04.33418	14	10	Listing	\N	\N
103	tags	2021-02-10 13:39:04.359048	3	10	Listing	\N	\N
104	tags	2021-02-10 13:39:04.434285	10	11	Listing	\N	\N
105	tags	2021-02-10 13:39:04.455836	13	11	Listing	\N	\N
106	tags	2021-02-10 13:39:04.536062	13	12	Listing	\N	\N
107	tags	2021-02-10 13:39:04.557039	5	12	Listing	\N	\N
112	tags	2021-02-15 19:12:23.694937	2	30	Article	\N	\N
113	tags	2021-02-15 19:12:23.748712	18	30	Article	\N	\N
114	tags	2021-02-15 19:12:23.788287	19	30	Article	\N	\N
116	tags	2021-02-15 19:20:19.789327	18	31	Article	\N	\N
117	tags	2021-02-15 19:20:19.808731	3	31	Article	\N	\N
118	tags	2021-02-15 19:20:19.826399	19	31	Article	\N	\N
119	tags	2021-02-15 19:20:19.844889	2	31	Article	\N	\N
126	tags	2021-02-17 21:43:06.087686	2	35	Article	\N	\N
127	tags	2021-02-17 21:43:06.10054	18	35	Article	\N	\N
129	tags	2021-02-17 21:43:06.124507	19	35	Article	\N	\N
130	tags	2021-02-17 21:46:22.359483	19	36	Article	\N	\N
132	tags	2021-02-17 21:46:22.380006	18	36	Article	\N	\N
133	tags	2021-02-17 21:46:22.388848	2	36	Article	\N	\N
134	tags	2021-02-17 21:51:43.880844	19	37	Article	\N	\N
135	tags	2021-02-17 21:51:43.889488	18	37	Article	\N	\N
137	tags	2021-02-17 21:56:43.698752	19	38	Article	\N	\N
138	tags	2021-02-17 21:56:43.712017	18	38	Article	\N	\N
139	tags	2021-02-17 21:56:43.724984	2	38	Article	\N	\N
141	tags	2021-02-17 22:02:34.617663	12	39	Article	\N	\N
143	tags	2021-02-17 22:02:34.635881	7	39	Article	\N	\N
144	tags	2021-02-17 22:02:34.644702	21	39	Article	\N	\N
153	tags	2021-02-17 22:14:50.145472	19	42	Article	\N	\N
154	tags	2021-02-17 22:14:50.154167	2	42	Article	\N	\N
155	tags	2021-02-17 22:28:00.243565	12	43	Article	\N	\N
156	tags	2021-02-17 22:28:00.24991	7	43	Article	\N	\N
159	tags	2021-02-18 07:59:02.34746	20	43	Article	\N	\N
160	tags	2021-02-18 07:59:02.358689	21	43	Article	\N	\N
161	tags	2021-02-18 07:59:39.426576	26	42	Article	\N	\N
162	tags	2021-02-18 08:04:33.105052	20	41	Article	\N	\N
163	tags	2021-02-18 08:04:33.115525	27	41	Article	\N	\N
164	tags	2021-02-18 08:04:33.125789	28	41	Article	\N	\N
165	tags	2021-02-18 08:04:33.135544	29	41	Article	\N	\N
166	tags	2021-02-18 08:05:39.594795	20	40	Article	\N	\N
167	tags	2021-02-18 08:05:39.605411	27	40	Article	\N	\N
168	tags	2021-02-18 08:05:39.614083	28	40	Article	\N	\N
169	tags	2021-02-18 08:05:39.622508	29	40	Article	\N	\N
170	tags	2021-02-18 08:06:15.484074	20	39	Article	\N	\N
171	tags	2021-02-18 08:06:46.462954	26	38	Article	\N	\N
172	tags	2021-02-18 08:07:11.853728	26	37	Article	\N	\N
173	tags	2021-02-18 08:07:47.052896	26	36	Article	\N	\N
174	tags	2021-02-18 08:08:08.755908	26	35	Article	\N	\N
175	tags	2021-02-18 08:12:15.133809	30	34	Article	\N	\N
176	tags	2021-02-18 08:12:15.141943	31	34	Article	\N	\N
177	tags	2021-02-18 08:13:07.048505	26	30	Article	\N	\N
178	tags	2021-02-18 08:14:18.374706	26	29	Article	\N	\N
179	tags	2021-02-18 08:14:18.386993	19	29	Article	\N	\N
180	tags	2021-02-18 08:14:18.395999	2	29	Article	\N	\N
181	tags	2021-02-18 08:14:18.402395	18	29	Article	\N	\N
182	tags	2021-02-18 08:15:26.4564	20	28	Article	\N	\N
183	tags	2021-02-18 08:15:26.466116	31	28	Article	\N	\N
184	tags	2021-02-18 21:27:33.250785	21	44	Article	\N	\N
185	tags	2021-02-18 21:27:33.26339	27	44	Article	\N	\N
186	tags	2021-02-18 21:27:33.276506	12	44	Article	\N	\N
187	tags	2021-02-18 21:34:27.65313	27	45	Article	\N	\N
188	tags	2021-02-18 21:34:27.663231	32	45	Article	\N	\N
189	tags	2021-02-18 21:34:27.672463	7	45	Article	\N	\N
190	tags	2021-02-18 21:34:27.68112	6	45	Article	\N	\N
192	tags	2021-02-18 21:37:48.680455	27	46	Article	\N	\N
193	tags	2021-02-18 21:37:48.691577	21	46	Article	\N	\N
194	tags	2021-02-19 20:56:27.881315	19	47	Article	\N	\N
195	tags	2021-02-19 20:56:27.892061	26	47	Article	\N	\N
196	tags	2021-02-20 12:37:19.637279	27	48	Article	\N	\N
197	tags	2021-02-20 12:37:19.647561	33	48	Article	\N	\N
198	tags	2021-02-20 12:37:19.657601	34	48	Article	\N	\N
199	tags	2021-02-20 13:04:12.53109	19	49	Article	\N	\N
200	tags	2021-02-20 13:04:12.542582	26	49	Article	\N	\N
201	tags	2021-02-20 13:15:29.884934	26	50	Article	\N	\N
202	tags	2021-02-20 13:15:29.893927	19	50	Article	\N	\N
203	tags	2021-02-20 13:53:49.891718	26	51	Article	\N	\N
204	tags	2021-02-20 13:53:49.901212	19	51	Article	\N	\N
205	tags	2021-02-21 07:19:51.48967	20	53	Article	\N	\N
206	tags	2021-02-21 07:19:51.500044	21	53	Article	\N	\N
207	tags	2021-02-21 07:19:51.511146	35	53	Article	\N	\N
208	tags	2021-02-21 08:08:33.059328	36	54	Article	\N	\N
209	tags	2021-02-21 08:08:33.068585	21	54	Article	\N	\N
210	tags	2021-02-21 16:24:40.137086	36	55	Article	\N	\N
211	tags	2021-02-21 16:24:40.145701	6	55	Article	\N	\N
212	tags	2021-02-21 16:24:40.153743	21	55	Article	\N	\N
213	tags	2021-02-22 06:28:48.227304	19	56	Article	\N	\N
214	tags	2021-02-22 06:28:48.236412	26	56	Article	\N	\N
215	tags	2021-02-22 06:46:34.455757	19	57	Article	\N	\N
216	tags	2021-02-22 06:46:34.464842	26	57	Article	\N	\N
217	tags	2021-02-22 07:08:57.384896	19	58	Article	\N	\N
218	tags	2021-02-22 07:08:57.394764	26	58	Article	\N	\N
219	tags	2021-02-22 07:59:39.01522	19	59	Article	\N	\N
220	tags	2021-02-22 07:59:39.024529	26	59	Article	\N	\N
221	tags	2021-02-22 19:11:41.517369	37	52	Article	\N	\N
222	tags	2021-02-22 19:11:41.524079	36	52	Article	\N	\N
223	tags	2021-02-22 19:11:41.530399	38	52	Article	\N	\N
224	tags	2021-02-22 19:44:11.427193	19	60	Article	\N	\N
225	tags	2021-02-22 19:44:11.438021	26	60	Article	\N	\N
226	tags	2021-02-22 20:22:13.512125	39	61	Article	\N	\N
227	tags	2021-02-22 20:22:13.522474	40	61	Article	\N	\N
228	tags	2021-02-22 20:22:13.532729	30	61	Article	\N	\N
229	tags	2021-02-22 20:22:13.541482	41	61	Article	\N	\N
230	tags	2021-02-23 11:20:12.447227	27	62	Article	\N	\N
231	tags	2021-02-23 11:20:12.456103	21	62	Article	\N	\N
232	tags	2021-02-23 11:45:46.112059	21	63	Article	\N	\N
233	tags	2021-02-23 11:45:46.123368	27	63	Article	\N	\N
234	tags	2021-02-24 10:34:13.594049	19	64	Article	\N	\N
235	tags	2021-02-24 10:34:13.662872	26	64	Article	\N	\N
236	tags	2021-02-24 10:48:45.20428	19	65	Article	\N	\N
237	tags	2021-02-24 10:48:45.225098	26	65	Article	\N	\N
238	tags	2021-02-25 06:15:20.447242	21	66	Article	\N	\N
239	tags	2021-02-25 06:15:20.473525	27	66	Article	\N	\N
\.


--
-- Data for Name: tags; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.tags (id, alias_for, badge_id, bg_color_hex, buffer_profile_id_code, category, created_at, hotness_score, keywords_for_search, mod_chat_channel_id, name, pretty_name, profile_image, requires_approval, rules_html, rules_markdown, short_summary, social_image, social_preview_template, submission_template, supported, taggings_count, text_color_hex, updated_at, wiki_body_html, wiki_body_markdown) FROM stdin;
34	\N	\N	\N	\N	uncategorized	2021-02-20 12:37:19.622707	0	\N	\N	server	\N	\N	f	\N	\N	\N	\N	article	\N	f	1	\N	2021-02-20 12:37:19.622707	\N	\N
21	\N	\N	\N	\N	uncategorized	2021-02-17 14:53:05.17272	0	\N	\N	ecommerce	\N	\N	f	\N	\N	\N	\N	article	\N	f	10	\N	2021-02-17 14:53:05.17272	\N	\N
27	\N	\N	\N	\N	uncategorized	2021-02-18 08:04:33.060308	0	\N	\N	backend	\N	\N	f	\N	\N	\N	\N	article	\N	f	9	\N	2021-02-18 08:04:33.060308	\N	\N
39	\N	\N	\N	\N	uncategorized	2021-02-22 20:22:13.490728	0	\N	\N	cloudservices	\N	\N	f	\N	\N	\N	\N	article	\N	f	1	\N	2021-02-22 20:22:13.490728	\N	\N
40	\N	\N	\N	\N	uncategorized	2021-02-22 20:22:13.494751	0	\N	\N	springboot	\N	\N	f	\N	\N	\N	\N	article	\N	f	1	\N	2021-02-22 20:22:13.494751	\N	\N
30	\N	\N	\N	\N	uncategorized	2021-02-18 08:12:15.09901	0	\N	\N	devops	\N	\N	f	\N	\N	\N	\N	article	\N	f	2	\N	2021-02-18 08:12:15.09901	\N	\N
41	\N	\N	\N	\N	uncategorized	2021-02-22 20:22:13.498813	0	\N	\N	deployment	\N	\N	f	\N	\N	\N	\N	article	\N	f	1	\N	2021-02-22 20:22:13.498813	\N	\N
1	\N	\N	#61997b	\N	uncategorized	2021-02-10 13:38:49.788005	0	\N	\N	beginners	\N	\N	f	\N	\N	\N	\N	article	\N	t	8	#8845a8	2021-02-26 00:25:02.573932	\N	\N
2	\N	\N	#a98d63	\N	uncategorized	2021-02-10 13:38:49.823055	0	\N	\N	career	\N	\N	f	\N	\N	\N	\N	article	\N	t	18	#07b782	2021-02-26 00:25:02.63881	\N	\N
25	\N	\N	\N	\N	uncategorized	2021-02-17 22:28:00.235502	0	\N	\N	vue	\N	\N	f	\N	\N	\N	\N	article	\N	f	0	\N	2021-02-17 22:28:00.235502	\N	\N
3	\N	\N	#62820b	\N	uncategorized	2021-02-10 13:38:49.84671	0	\N	\N	computerscience	\N	\N	f	\N	\N	\N	\N	article	\N	t	11	#e75d45	2021-02-26 00:25:02.741255	\N	\N
15	\N	\N	\N	\N	uncategorized	2021-02-11 04:40:48.546484	0	\N	\N	ruby	\N	\N	f	\N	\N	\N	\N	article	\N	f	0	\N	2021-02-11 04:40:48.546484	\N	\N
16	\N	\N	\N	\N	uncategorized	2021-02-11 04:40:48.559132	0	\N	\N	rails	\N	\N	f	\N	\N	\N	\N	article	\N	f	0	\N	2021-02-11 04:40:48.559132	\N	\N
4	\N	\N	#827376	\N	uncategorized	2021-02-10 13:38:49.876457	0	\N	\N	git	\N	\N	f	\N	\N	\N	\N	article	\N	t	9	#128265	2021-02-26 00:25:02.815684	\N	\N
13	\N	\N	\N	\N	uncategorized	2021-02-10 13:38:50.738004	346	\N	\N	discuss	\N	\N	f	\N	\N	\N	\N	article	\N	f	17	\N	2021-02-10 13:39:16.07412	\N	\N
14	\N	\N	\N	\N	uncategorized	2021-02-10 13:39:00.474006	2	\N	\N	welcome	\N	\N	f	\N	\N	\N	\N	article	\N	f	2	\N	2021-02-10 13:39:16.110599	\N	\N
5	\N	\N	#30c178	\N	uncategorized	2021-02-10 13:38:49.908294	0	\N	\N	go	\N	\N	f	\N	\N	\N	\N	article	\N	t	5	#d7bfd4	2021-02-26 00:25:02.884671	\N	\N
6	\N	\N	#e3cca0	\N	uncategorized	2021-02-10 13:38:49.93958	6	\N	\N	java	\N	\N	f	\N	\N	\N	\N	article	\N	t	9	#a3f13a	2021-02-26 00:25:03.118285	\N	\N
7	\N	\N	#855441	\N	uncategorized	2021-02-10 13:38:49.970174	0	\N	\N	javascript	\N	\N	f	\N	\N	\N	\N	article	\N	t	12	#2060ed	2021-02-26 00:25:03.184838	\N	\N
8	\N	\N	#395910	\N	uncategorized	2021-02-10 13:38:50.033477	0	\N	\N	linux	\N	\N	f	\N	\N	\N	\N	article	\N	t	5	#6fad55	2021-02-26 00:25:03.250939	\N	\N
19	\N	\N	\N	\N	uncategorized	2021-02-15 19:12:23.650066	0	\N	\N	algorithms	\N	\N	f	\N	\N	\N	\N	article	\N	f	19	\N	2021-02-15 19:12:23.650066	\N	\N
9	\N	\N	#ba014a	\N	uncategorized	2021-02-10 13:38:50.066355	0	\N	\N	productivity	\N	\N	f	\N	\N	\N	\N	article	\N	t	8	#e68570	2021-02-26 00:25:03.313829	\N	\N
26	\N	\N	\N	\N	uncategorized	2021-02-18 07:59:39.412224	0	\N	\N	leetcode	\N	\N	f	\N	\N	\N	\N	article	\N	f	18	\N	2021-02-18 07:59:39.412224	\N	\N
20	\N	\N	\N	\N	uncategorized	2021-02-17 14:53:05.169062	0	\N	\N	frontend	\N	\N	f	\N	\N	\N	\N	article	\N	f	6	\N	2021-02-17 14:53:05.169062	\N	\N
18	\N	\N	\N	\N	uncategorized	2021-02-15 19:12:23.634485	0	\N	\N	programming	\N	\N	f	\N	\N	\N	\N	article	\N	f	7	\N	2021-02-15 19:12:23.634485	\N	\N
17	\N	\N	\N	\N	uncategorized	2021-02-15 14:21:39.195689	0	\N	\N	code	\N	\N	f	\N	\N	\N	\N	article	\N	f	0	\N	2021-02-15 14:21:39.195689	\N	\N
10	\N	\N	#3a2464	\N	uncategorized	2021-02-10 13:38:50.0979	0	\N	\N	python	\N	\N	f	\N	\N	\N	\N	article	\N	t	3	#c819b1	2021-02-26 00:25:03.38369	\N	\N
31	\N	\N	\N	\N	uncategorized	2021-02-18 08:12:15.102526	0	\N	\N	onlinecompiler	\N	\N	f	\N	\N	\N	\N	article	\N	f	2	\N	2021-02-18 08:12:15.102526	\N	\N
11	\N	\N	#fe92e7	\N	uncategorized	2021-02-10 13:38:50.136268	0	\N	\N	security	\N	\N	f	\N	\N	\N	\N	article	\N	t	5	#7d1f07	2021-02-26 00:25:03.452909	\N	\N
12	\N	\N	#f377ee	\N	uncategorized	2021-02-10 13:38:50.181728	0	\N	\N	webdev	\N	\N	f	\N	\N	\N	\N	article	\N	t	11	#64dc1b	2021-02-26 00:25:03.523901	\N	\N
24	\N	\N	\N	\N	uncategorized	2021-02-17 22:07:31.870288	0	\N	\N	tutorial	\N	\N	f	\N	\N	\N	\N	article	\N	f	0	\N	2021-02-17 22:07:31.870288	\N	\N
35	\N	\N	\N	\N	uncategorized	2021-02-21 07:19:51.475563	0	\N	\N	vuejs	\N	\N	f	\N	\N	\N	\N	article	\N	f	1	\N	2021-02-21 07:19:51.475563	\N	\N
28	\N	\N	\N	\N	uncategorized	2021-02-18 08:04:33.064316	0	\N	\N	webrtc	\N	\N	f	\N	\N	\N	\N	article	\N	f	2	\N	2021-02-18 08:04:33.064316	\N	\N
29	\N	\N	\N	\N	uncategorized	2021-02-18 08:04:33.068077	0	\N	\N	videochat	\N	\N	f	\N	\N	\N	\N	article	\N	f	2	\N	2021-02-18 08:04:33.068077	\N	\N
32	\N	\N	\N	\N	uncategorized	2021-02-18 21:34:27.638385	0	\N	\N	fileupload	\N	\N	f	\N	\N	\N	\N	article	\N	f	1	\N	2021-02-18 21:34:27.638385	\N	\N
23	\N	\N	\N	\N	uncategorized	2021-02-17 22:02:34.605193	0	\N	\N	showdev	\N	\N	f	\N	\N	\N	\N	article	\N	f	0	\N	2021-02-17 22:02:34.605193	\N	\N
37	\N	\N	\N	\N	uncategorized	2021-02-22 19:11:41.507123	0	\N	\N	googlemaps	\N	\N	f	\N	\N	\N	\N	article	\N	f	1	\N	2021-02-22 19:11:41.507123	\N	\N
22	\N	\N	\N	\N	uncategorized	2021-02-17 21:51:43.869922	0	\N	\N	codenewbie	\N	\N	f	\N	\N	\N	\N	article	\N	f	0	\N	2021-02-17 21:51:43.869922	\N	\N
36	\N	\N	\N	\N	uncategorized	2021-02-21 08:08:33.047733	0	\N	\N	android	\N	\N	f	\N	\N	\N	\N	article	\N	f	3	\N	2021-02-21 08:08:33.047733	\N	\N
38	\N	\N	\N	\N	uncategorized	2021-02-22 19:11:41.509762	0	\N	\N	airbnb	\N	\N	f	\N	\N	\N	\N	article	\N	f	1	\N	2021-02-22 19:11:41.509762	\N	\N
33	\N	\N	\N	\N	uncategorized	2021-02-20 12:37:19.618125	0	\N	\N	freedomain	\N	\N	f	\N	\N	\N	\N	article	\N	f	1	\N	2021-02-20 12:37:19.618125	\N	\N
\.


--
-- Data for Name: tweets; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.tweets (id, created_at, extended_entities_serialized, favorite_count, full_fetched_object_serialized, hashtags_serialized, in_reply_to_status_id_code, in_reply_to_user_id_code, in_reply_to_username, is_quote_status, last_fetched_at, media_serialized, mentioned_usernames_serialized, profile_image, quoted_tweet_id_code, retweet_count, source, text, tweeted_at, twitter_id_code, twitter_name, twitter_uid, twitter_user_followers_count, twitter_user_following_count, twitter_username, updated_at, urls_serialized, user_id, user_is_verified) FROM stdin;
\.


--
-- Data for Name: user_blocks; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.user_blocks (id, blocked_id, blocker_id, config, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: user_subscriptions; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.user_subscriptions (id, author_id, created_at, subscriber_email, subscriber_id, updated_at, user_subscription_sourceable_id, user_subscription_sourceable_type) FROM stdin;
\.


--
-- Data for Name: users; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.users (id, apple_created_at, apple_username, articles_count, available_for, badge_achievements_count, behance_url, bg_color_hex, blocked_by_count, blocking_others_count, checked_code_of_conduct, checked_terms_and_conditions, comments_count, config_font, config_navbar, config_theme, confirmation_sent_at, confirmation_token, confirmed_at, created_at, credits_count, current_sign_in_at, current_sign_in_ip, currently_hacking_on, currently_learning, display_announcements, display_sponsors, dribbble_url, editor_version, education, email, email_badge_notifications, email_comment_notifications, email_community_mod_newsletter, email_connect_messages, email_digest_periodic, email_follower_notifications, email_membership_newsletter, email_mention_notifications, email_newsletter, email_public, email_tag_mod_newsletter, email_unread_notifications, employer_name, employer_url, employment_title, encrypted_password, experience_level, export_requested, exported_at, facebook_created_at, facebook_url, facebook_username, failed_attempts, feed_admin_publish_permission, feed_fetched_at, feed_mark_canonical, feed_referential_link, feed_url, following_orgs_count, following_tags_count, following_users_count, github_created_at, github_repos_updated_at, github_username, gitlab_url, inbox_guidelines, inbox_type, instagram_url, invitation_accepted_at, invitation_created_at, invitation_limit, invitation_sent_at, invitation_token, invitations_count, invited_by_id, invited_by_type, language_settings, last_article_at, last_comment_at, last_followed_at, last_moderation_notification, last_notification_activity, last_onboarding_page, last_reacted_at, last_sign_in_at, last_sign_in_ip, latest_article_updated_at, linkedin_url, location, locked_at, mastodon_url, medium_url, mobile_comment_notifications, mod_roundrobin_notifications, monthly_dues, mostly_work_with, name, old_old_username, old_username, onboarding_package_requested, organization_info_updated_at, payment_pointer, permit_adjacent_sponsors, profile_image, profile_updated_at, rating_votes_count, reaction_notifications, reactions_count, registered, registered_at, remember_created_at, remember_token, reputation_modifier, reset_password_sent_at, reset_password_token, saw_onboarding, score, secret, sign_in_count, signup_cta_variant, spent_credits_count, stackoverflow_url, stripe_id_code, subscribed_to_user_subscriptions_count, summary, text_color_hex, twitch_url, twitter_created_at, twitter_followers_count, twitter_following_count, twitter_username, unconfirmed_email, unlock_token, unspent_credits_count, updated_at, username, website_url, welcome_notifications, workshop_expiration, youtube_url) FROM stdin;
12	\N	\N	0	\N	0	\N	\N	0	0	f	f	0	default	default	default	2021-02-25 11:44:16.296209	QBDr-KXYBqB22KTB8D3H	\N	2021-02-25 11:44:16.295371	0	\N	\N	\N	\N	t	t	\N	v1	\N	shivam.agrawal.2000@gmail.com	t	t	f	t	f	t	f	t	f	f	f	t	\N	\N	\N	$2a$10$RNiFvUJ4J8snCE4bzBOK3uxM3EP/EpkWDWIR8u8G9GEgklsz2G7aG	\N	f	\N	\N	\N	\N	0	t	2017-01-01 05:00:00	f	t	\N	0	0	0	\N	2017-01-01 05:00:00	\N	\N	\N	private	\N	\N	\N	\N	\N	\N	0	\N	\N	{"preferred_languages": ["en"], "estimated_default_language": null}	2017-01-01 05:00:00	2017-01-01 05:00:00	\N	2017-01-01 00:00:00	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	t	t	0	\N	Shivam Agarwal	\N	\N	f	\N	\N	t	\N	2017-01-01 05:00:00	0	t	0	t	\N	\N	\N	1	\N	\N	t	0	\N	0	\N	0	\N	\N	0	\N	\N	\N	\N	\N	\N	\N	\N	\N	0	2021-02-25 11:44:16.295371	shivamag00	\N	t	\N	\N
2	\N	\N	0	\N	0	\N	\N	0	0	f	f	0	default	default	default	\N	\N	2021-01-30 13:09:29.300645	2021-01-30 13:09:29.368505	0	\N	\N	\N	\N	t	t	\N	v1	\N	mascot@forem.com	t	t	f	t	f	t	f	t	f	f	f	t	\N	\N	\N	$2a$10$nWGOUn.VSyPNhA21WDn1EO2RwwEdCaKoJOyhBfEzeCeNp0vA5DuY.	\N	f	\N	\N	\N	\N	0	t	2017-01-01 05:00:00	f	t	\N	0	0	0	\N	2017-01-01 05:00:00	\N	\N	\N	private	\N	\N	\N	\N	\N	\N	0	\N	\N	{"preferred_languages": ["en"], "estimated_default_language": null}	2017-01-01 05:00:00	2017-01-01 05:00:00	\N	2017-01-01 00:00:00	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	t	t	0	\N	Mascot	\N	\N	f	\N	\N	t	\N	2017-01-01 05:00:00	0	t	0	t	2021-01-30 13:09:29.300654	\N	\N	1	\N	\N	t	0	\N	0	\N	0	\N	\N	0	\N	\N	\N	\N	\N	\N	\N	\N	\N	0	2021-01-30 13:09:29.368505	mascot	\N	t	\N	\N
1	\N	\N	38	\N	0	\N	\N	0	0	t	t	0	default	default	default	2021-01-30 13:09:27.483255	oie39erEEkLxc_Qc9SNH	2021-01-30 13:09:27.483255	2021-01-30 13:09:27.482885	0	\N	\N	\N	\N	t	t	\N	v2	\N	nilmadhab1994@gmail.com	t	t	f	t	f	t	f	t	f	f	f	t	\N	\N	\N	$2a$10$r/s7jFbQ5khd6cfULVmdM.HdWd8xqxuUisxYAWGE6Gj1t7hQtaTmy	\N	f	\N	\N	\N	\N	0	t	2017-01-01 05:00:00	f	t	\N	0	0	1	\N	2017-01-01 05:00:00	\N	\N	\N	private	\N	\N	\N	\N	\N	\N	0	\N	\N	{"preferred_languages": ["en"], "estimated_default_language": null}	2021-02-25 06:15:20.385322	2017-01-01 05:00:00	2021-01-30 13:13:09.876199	2017-01-01 00:00:00	\N	v2: email preferences form	\N	\N	\N	2021-02-25 06:15:20.489774	\N	\N	\N	\N	\N	t	t	0	\N	nilmadhab mondal	\N	\N	f	\N	\N	t	d9b0e3b7-ad59-45d5-b516-4e8ffd0a6958.jpeg	2021-01-30 13:13:09.781449	0	t	0	t	2021-01-30 13:09:27.312823	2021-02-22 06:21:40.728694	ACswAUaHUAaHG1ghPXP2	1	\N	\N	t	0	\N	0	\N	0	\N	\N	0	\N	\N	\N	\N	\N	\N	\N	\N	\N	0	2021-02-25 06:15:20.489774	nilmadhab	\N	t	\N	\N
\.


--
-- Data for Name: users_gdpr_delete_requests; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.users_gdpr_delete_requests (id, created_at, email, updated_at, user_id, username) FROM stdin;
\.


--
-- Data for Name: users_roles; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.users_roles (role_id, user_id) FROM stdin;
4	1
\.


--
-- Data for Name: webhook_endpoints; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.webhook_endpoints (id, created_at, events, oauth_application_id, source, target_url, updated_at, user_id) FROM stdin;
\.


--
-- Data for Name: welcome_notifications; Type: TABLE DATA; Schema: public; Owner: contact_webtutsplus
--

COPY public.welcome_notifications (id, created_at, updated_at) FROM stdin;
\.


--
-- Name: ahoy_events_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.ahoy_events_id_seq', 1, false);


--
-- Name: ahoy_messages_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.ahoy_messages_id_seq', 17, true);


--
-- Name: ahoy_visits_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.ahoy_visits_id_seq', 1, false);


--
-- Name: announcements_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.announcements_id_seq', 1, false);


--
-- Name: api_secrets_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.api_secrets_id_seq', 1, false);


--
-- Name: articles_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.articles_id_seq', 66, true);


--
-- Name: audit_logs_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.audit_logs_id_seq', 10, true);


--
-- Name: badge_achievements_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.badge_achievements_id_seq', 10, true);


--
-- Name: badges_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.badges_id_seq', 5, true);


--
-- Name: banished_users_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.banished_users_id_seq', 1, false);


--
-- Name: blazer_audits_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.blazer_audits_id_seq', 1, false);


--
-- Name: blazer_checks_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.blazer_checks_id_seq', 1, false);


--
-- Name: blazer_dashboard_queries_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.blazer_dashboard_queries_id_seq', 1, false);


--
-- Name: blazer_dashboards_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.blazer_dashboards_id_seq', 1, false);


--
-- Name: blazer_queries_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.blazer_queries_id_seq', 1, false);


--
-- Name: broadcasts_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.broadcasts_id_seq', 11, true);


--
-- Name: buffer_updates_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.buffer_updates_id_seq', 1, false);


--
-- Name: chat_channel_memberships_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.chat_channel_memberships_id_seq', 9, true);


--
-- Name: chat_channels_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.chat_channels_id_seq', 3, true);


--
-- Name: classified_listing_categories_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.classified_listing_categories_id_seq', 6, true);


--
-- Name: classified_listings_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.classified_listings_id_seq', 12, true);


--
-- Name: collections_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.collections_id_seq', 1, false);


--
-- Name: comments_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.comments_id_seq', 30, true);


--
-- Name: credits_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.credits_id_seq', 827, true);


--
-- Name: custom_profile_fields_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.custom_profile_fields_id_seq', 1, false);


--
-- Name: data_update_scripts_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.data_update_scripts_id_seq', 106, true);


--
-- Name: display_ad_events_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.display_ad_events_id_seq', 1, false);


--
-- Name: display_ads_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.display_ads_id_seq', 1, false);


--
-- Name: email_authorizations_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.email_authorizations_id_seq', 1, false);


--
-- Name: events_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.events_id_seq', 1, false);


--
-- Name: feedback_messages_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.feedback_messages_id_seq', 2, true);


--
-- Name: field_test_events_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.field_test_events_id_seq', 1, false);


--
-- Name: field_test_memberships_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.field_test_memberships_id_seq', 1, false);


--
-- Name: flipper_features_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.flipper_features_id_seq', 1, false);


--
-- Name: flipper_gates_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.flipper_gates_id_seq', 1, false);


--
-- Name: follows_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.follows_id_seq', 1, false);


--
-- Name: github_issues_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.github_issues_id_seq', 1, false);


--
-- Name: github_repos_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.github_repos_id_seq', 1, false);


--
-- Name: html_variant_successes_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.html_variant_successes_id_seq', 1, false);


--
-- Name: html_variant_trials_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.html_variant_trials_id_seq', 1, false);


--
-- Name: html_variants_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.html_variants_id_seq', 1, true);


--
-- Name: identities_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.identities_id_seq', 9, true);


--
-- Name: mentions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.mentions_id_seq', 1, false);


--
-- Name: messages_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.messages_id_seq', 1, false);


--
-- Name: navigation_links_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.navigation_links_id_seq', 14, true);


--
-- Name: notes_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.notes_id_seq', 1, false);


--
-- Name: notification_subscriptions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.notification_subscriptions_id_seq', 40, true);


--
-- Name: notifications_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.notifications_id_seq', 12, true);


--
-- Name: oauth_access_grants_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.oauth_access_grants_id_seq', 1, false);


--
-- Name: oauth_access_tokens_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.oauth_access_tokens_id_seq', 1, false);


--
-- Name: oauth_applications_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.oauth_applications_id_seq', 1, false);


--
-- Name: organization_memberships_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.organization_memberships_id_seq', 9, true);


--
-- Name: organizations_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.organizations_id_seq', 3, true);


--
-- Name: page_views_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.page_views_id_seq', 185, true);


--
-- Name: pages_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.pages_id_seq', 5, true);


--
-- Name: podcast_episode_appearances_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.podcast_episode_appearances_id_seq', 1, false);


--
-- Name: podcast_episodes_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.podcast_episodes_id_seq', 1, false);


--
-- Name: podcast_ownerships_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.podcast_ownerships_id_seq', 1, false);


--
-- Name: podcasts_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.podcasts_id_seq', 4, true);


--
-- Name: poll_options_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.poll_options_id_seq', 1, false);


--
-- Name: poll_skips_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.poll_skips_id_seq', 1, false);


--
-- Name: poll_votes_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.poll_votes_id_seq', 1, false);


--
-- Name: polls_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.polls_id_seq', 1, false);


--
-- Name: profile_field_groups_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.profile_field_groups_id_seq', 5, true);


--
-- Name: profile_fields_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.profile_fields_id_seq', 26, true);


--
-- Name: profile_pins_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.profile_pins_id_seq', 1, false);


--
-- Name: profiles_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.profiles_id_seq', 17, true);


--
-- Name: rating_votes_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.rating_votes_id_seq', 1, false);


--
-- Name: reactions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.reactions_id_seq', 34, true);


--
-- Name: response_templates_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.response_templates_id_seq', 1, false);


--
-- Name: roles_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.roles_id_seq', 5, true);


--
-- Name: site_configs_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.site_configs_id_seq', 8, true);


--
-- Name: sponsorships_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.sponsorships_id_seq', 3, true);


--
-- Name: tag_adjustments_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.tag_adjustments_id_seq', 1, false);


--
-- Name: taggings_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.taggings_id_seq', 239, true);


--
-- Name: tags_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.tags_id_seq', 41, true);


--
-- Name: tweets_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.tweets_id_seq', 1, false);


--
-- Name: user_blocks_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.user_blocks_id_seq', 1, false);


--
-- Name: user_subscriptions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.user_subscriptions_id_seq', 1, false);


--
-- Name: users_gdpr_delete_requests_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.users_gdpr_delete_requests_id_seq', 1, false);


--
-- Name: users_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.users_id_seq', 17, true);


--
-- Name: webhook_endpoints_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.webhook_endpoints_id_seq', 1, false);


--
-- Name: welcome_notifications_id_seq; Type: SEQUENCE SET; Schema: public; Owner: contact_webtutsplus
--

SELECT pg_catalog.setval('public.welcome_notifications_id_seq', 1, false);


--
-- Name: ahoy_events ahoy_events_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.ahoy_events
    ADD CONSTRAINT ahoy_events_pkey PRIMARY KEY (id);


--
-- Name: ahoy_messages ahoy_messages_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.ahoy_messages
    ADD CONSTRAINT ahoy_messages_pkey PRIMARY KEY (id);


--
-- Name: ahoy_visits ahoy_visits_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.ahoy_visits
    ADD CONSTRAINT ahoy_visits_pkey PRIMARY KEY (id);


--
-- Name: announcements announcements_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.announcements
    ADD CONSTRAINT announcements_pkey PRIMARY KEY (id);


--
-- Name: api_secrets api_secrets_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.api_secrets
    ADD CONSTRAINT api_secrets_pkey PRIMARY KEY (id);


--
-- Name: ar_internal_metadata ar_internal_metadata_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.ar_internal_metadata
    ADD CONSTRAINT ar_internal_metadata_pkey PRIMARY KEY (key);


--
-- Name: articles articles_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.articles
    ADD CONSTRAINT articles_pkey PRIMARY KEY (id);


--
-- Name: audit_logs audit_logs_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.audit_logs
    ADD CONSTRAINT audit_logs_pkey PRIMARY KEY (id);


--
-- Name: badge_achievements badge_achievements_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.badge_achievements
    ADD CONSTRAINT badge_achievements_pkey PRIMARY KEY (id);


--
-- Name: badges badges_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.badges
    ADD CONSTRAINT badges_pkey PRIMARY KEY (id);


--
-- Name: banished_users banished_users_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.banished_users
    ADD CONSTRAINT banished_users_pkey PRIMARY KEY (id);


--
-- Name: blazer_audits blazer_audits_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.blazer_audits
    ADD CONSTRAINT blazer_audits_pkey PRIMARY KEY (id);


--
-- Name: blazer_checks blazer_checks_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.blazer_checks
    ADD CONSTRAINT blazer_checks_pkey PRIMARY KEY (id);


--
-- Name: blazer_dashboard_queries blazer_dashboard_queries_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.blazer_dashboard_queries
    ADD CONSTRAINT blazer_dashboard_queries_pkey PRIMARY KEY (id);


--
-- Name: blazer_dashboards blazer_dashboards_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.blazer_dashboards
    ADD CONSTRAINT blazer_dashboards_pkey PRIMARY KEY (id);


--
-- Name: blazer_queries blazer_queries_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.blazer_queries
    ADD CONSTRAINT blazer_queries_pkey PRIMARY KEY (id);


--
-- Name: broadcasts broadcasts_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.broadcasts
    ADD CONSTRAINT broadcasts_pkey PRIMARY KEY (id);


--
-- Name: buffer_updates buffer_updates_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.buffer_updates
    ADD CONSTRAINT buffer_updates_pkey PRIMARY KEY (id);


--
-- Name: chat_channel_memberships chat_channel_memberships_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.chat_channel_memberships
    ADD CONSTRAINT chat_channel_memberships_pkey PRIMARY KEY (id);


--
-- Name: chat_channels chat_channels_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.chat_channels
    ADD CONSTRAINT chat_channels_pkey PRIMARY KEY (id);


--
-- Name: classified_listing_categories classified_listing_categories_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.classified_listing_categories
    ADD CONSTRAINT classified_listing_categories_pkey PRIMARY KEY (id);


--
-- Name: classified_listings classified_listings_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.classified_listings
    ADD CONSTRAINT classified_listings_pkey PRIMARY KEY (id);


--
-- Name: collections collections_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.collections
    ADD CONSTRAINT collections_pkey PRIMARY KEY (id);


--
-- Name: comments comments_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.comments
    ADD CONSTRAINT comments_pkey PRIMARY KEY (id);


--
-- Name: credits credits_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.credits
    ADD CONSTRAINT credits_pkey PRIMARY KEY (id);


--
-- Name: custom_profile_fields custom_profile_fields_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.custom_profile_fields
    ADD CONSTRAINT custom_profile_fields_pkey PRIMARY KEY (id);


--
-- Name: data_update_scripts data_update_scripts_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.data_update_scripts
    ADD CONSTRAINT data_update_scripts_pkey PRIMARY KEY (id);


--
-- Name: display_ad_events display_ad_events_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.display_ad_events
    ADD CONSTRAINT display_ad_events_pkey PRIMARY KEY (id);


--
-- Name: display_ads display_ads_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.display_ads
    ADD CONSTRAINT display_ads_pkey PRIMARY KEY (id);


--
-- Name: email_authorizations email_authorizations_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.email_authorizations
    ADD CONSTRAINT email_authorizations_pkey PRIMARY KEY (id);


--
-- Name: events events_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.events
    ADD CONSTRAINT events_pkey PRIMARY KEY (id);


--
-- Name: feedback_messages feedback_messages_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.feedback_messages
    ADD CONSTRAINT feedback_messages_pkey PRIMARY KEY (id);


--
-- Name: field_test_events field_test_events_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.field_test_events
    ADD CONSTRAINT field_test_events_pkey PRIMARY KEY (id);


--
-- Name: field_test_memberships field_test_memberships_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.field_test_memberships
    ADD CONSTRAINT field_test_memberships_pkey PRIMARY KEY (id);


--
-- Name: flipper_features flipper_features_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.flipper_features
    ADD CONSTRAINT flipper_features_pkey PRIMARY KEY (id);


--
-- Name: flipper_gates flipper_gates_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.flipper_gates
    ADD CONSTRAINT flipper_gates_pkey PRIMARY KEY (id);


--
-- Name: follows follows_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.follows
    ADD CONSTRAINT follows_pkey PRIMARY KEY (id);


--
-- Name: github_issues github_issues_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.github_issues
    ADD CONSTRAINT github_issues_pkey PRIMARY KEY (id);


--
-- Name: github_repos github_repos_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.github_repos
    ADD CONSTRAINT github_repos_pkey PRIMARY KEY (id);


--
-- Name: html_variant_successes html_variant_successes_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.html_variant_successes
    ADD CONSTRAINT html_variant_successes_pkey PRIMARY KEY (id);


--
-- Name: html_variant_trials html_variant_trials_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.html_variant_trials
    ADD CONSTRAINT html_variant_trials_pkey PRIMARY KEY (id);


--
-- Name: html_variants html_variants_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.html_variants
    ADD CONSTRAINT html_variants_pkey PRIMARY KEY (id);


--
-- Name: identities identities_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.identities
    ADD CONSTRAINT identities_pkey PRIMARY KEY (id);


--
-- Name: mentions mentions_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.mentions
    ADD CONSTRAINT mentions_pkey PRIMARY KEY (id);


--
-- Name: messages messages_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.messages
    ADD CONSTRAINT messages_pkey PRIMARY KEY (id);


--
-- Name: navigation_links navigation_links_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.navigation_links
    ADD CONSTRAINT navigation_links_pkey PRIMARY KEY (id);


--
-- Name: notes notes_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.notes
    ADD CONSTRAINT notes_pkey PRIMARY KEY (id);


--
-- Name: notification_subscriptions notification_subscriptions_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.notification_subscriptions
    ADD CONSTRAINT notification_subscriptions_pkey PRIMARY KEY (id);


--
-- Name: notifications notifications_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.notifications
    ADD CONSTRAINT notifications_pkey PRIMARY KEY (id);


--
-- Name: oauth_access_grants oauth_access_grants_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.oauth_access_grants
    ADD CONSTRAINT oauth_access_grants_pkey PRIMARY KEY (id);


--
-- Name: oauth_access_tokens oauth_access_tokens_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.oauth_access_tokens
    ADD CONSTRAINT oauth_access_tokens_pkey PRIMARY KEY (id);


--
-- Name: oauth_applications oauth_applications_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.oauth_applications
    ADD CONSTRAINT oauth_applications_pkey PRIMARY KEY (id);


--
-- Name: organization_memberships organization_memberships_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.organization_memberships
    ADD CONSTRAINT organization_memberships_pkey PRIMARY KEY (id);


--
-- Name: organizations organizations_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.organizations
    ADD CONSTRAINT organizations_pkey PRIMARY KEY (id);


--
-- Name: page_views page_views_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.page_views
    ADD CONSTRAINT page_views_pkey PRIMARY KEY (id);


--
-- Name: pages pages_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.pages
    ADD CONSTRAINT pages_pkey PRIMARY KEY (id);


--
-- Name: podcast_episode_appearances podcast_episode_appearances_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.podcast_episode_appearances
    ADD CONSTRAINT podcast_episode_appearances_pkey PRIMARY KEY (id);


--
-- Name: podcast_episodes podcast_episodes_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.podcast_episodes
    ADD CONSTRAINT podcast_episodes_pkey PRIMARY KEY (id);


--
-- Name: podcast_ownerships podcast_ownerships_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.podcast_ownerships
    ADD CONSTRAINT podcast_ownerships_pkey PRIMARY KEY (id);


--
-- Name: podcasts podcasts_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.podcasts
    ADD CONSTRAINT podcasts_pkey PRIMARY KEY (id);


--
-- Name: poll_options poll_options_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.poll_options
    ADD CONSTRAINT poll_options_pkey PRIMARY KEY (id);


--
-- Name: poll_skips poll_skips_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.poll_skips
    ADD CONSTRAINT poll_skips_pkey PRIMARY KEY (id);


--
-- Name: poll_votes poll_votes_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.poll_votes
    ADD CONSTRAINT poll_votes_pkey PRIMARY KEY (id);


--
-- Name: polls polls_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.polls
    ADD CONSTRAINT polls_pkey PRIMARY KEY (id);


--
-- Name: profile_field_groups profile_field_groups_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.profile_field_groups
    ADD CONSTRAINT profile_field_groups_pkey PRIMARY KEY (id);


--
-- Name: profile_fields profile_fields_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.profile_fields
    ADD CONSTRAINT profile_fields_pkey PRIMARY KEY (id);


--
-- Name: profile_pins profile_pins_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.profile_pins
    ADD CONSTRAINT profile_pins_pkey PRIMARY KEY (id);


--
-- Name: profiles profiles_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.profiles
    ADD CONSTRAINT profiles_pkey PRIMARY KEY (id);


--
-- Name: rating_votes rating_votes_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.rating_votes
    ADD CONSTRAINT rating_votes_pkey PRIMARY KEY (id);


--
-- Name: reactions reactions_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.reactions
    ADD CONSTRAINT reactions_pkey PRIMARY KEY (id);


--
-- Name: response_templates response_templates_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.response_templates
    ADD CONSTRAINT response_templates_pkey PRIMARY KEY (id);


--
-- Name: roles roles_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.roles
    ADD CONSTRAINT roles_pkey PRIMARY KEY (id);


--
-- Name: schema_migrations schema_migrations_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.schema_migrations
    ADD CONSTRAINT schema_migrations_pkey PRIMARY KEY (version);


--
-- Name: site_configs site_configs_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.site_configs
    ADD CONSTRAINT site_configs_pkey PRIMARY KEY (id);


--
-- Name: sponsorships sponsorships_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.sponsorships
    ADD CONSTRAINT sponsorships_pkey PRIMARY KEY (id);


--
-- Name: tag_adjustments tag_adjustments_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.tag_adjustments
    ADD CONSTRAINT tag_adjustments_pkey PRIMARY KEY (id);


--
-- Name: taggings taggings_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.taggings
    ADD CONSTRAINT taggings_pkey PRIMARY KEY (id);


--
-- Name: tags tags_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.tags
    ADD CONSTRAINT tags_pkey PRIMARY KEY (id);


--
-- Name: tweets tweets_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.tweets
    ADD CONSTRAINT tweets_pkey PRIMARY KEY (id);


--
-- Name: user_blocks user_blocks_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.user_blocks
    ADD CONSTRAINT user_blocks_pkey PRIMARY KEY (id);


--
-- Name: user_subscriptions user_subscriptions_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.user_subscriptions
    ADD CONSTRAINT user_subscriptions_pkey PRIMARY KEY (id);


--
-- Name: users_gdpr_delete_requests users_gdpr_delete_requests_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.users_gdpr_delete_requests
    ADD CONSTRAINT users_gdpr_delete_requests_pkey PRIMARY KEY (id);


--
-- Name: users users_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.users
    ADD CONSTRAINT users_pkey PRIMARY KEY (id);


--
-- Name: webhook_endpoints webhook_endpoints_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.webhook_endpoints
    ADD CONSTRAINT webhook_endpoints_pkey PRIMARY KEY (id);


--
-- Name: welcome_notifications welcome_notifications_pkey; Type: CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.welcome_notifications
    ADD CONSTRAINT welcome_notifications_pkey PRIMARY KEY (id);


--
-- Name: fk_followables; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX fk_followables ON public.follows USING btree (followable_id, followable_type);


--
-- Name: fk_follows; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX fk_follows ON public.follows USING btree (follower_id, follower_type);


--
-- Name: idx_notification_subs_on_user_id_notifiable_type_notifiable_id; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE UNIQUE INDEX idx_notification_subs_on_user_id_notifiable_type_notifiable_id ON public.notification_subscriptions USING btree (user_id, notifiable_type, notifiable_id);


--
-- Name: idx_pins_on_pinnable_id_profile_id_profile_type_pinnable_type; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE UNIQUE INDEX idx_pins_on_pinnable_id_profile_id_profile_type_pinnable_type ON public.profile_pins USING btree (pinnable_id, profile_id, profile_type, pinnable_type);


--
-- Name: idx_response_templates_on_content_user_id_type_of_content_type; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE UNIQUE INDEX idx_response_templates_on_content_user_id_type_of_content_type ON public.response_templates USING btree (content, user_id, type_of, content_type);


--
-- Name: index_ahoy_events_on_name_and_time; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_ahoy_events_on_name_and_time ON public.ahoy_events USING btree (name, "time");


--
-- Name: index_ahoy_events_on_properties; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_ahoy_events_on_properties ON public.ahoy_events USING gin (properties jsonb_path_ops);


--
-- Name: index_ahoy_events_on_user_id; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_ahoy_events_on_user_id ON public.ahoy_events USING btree (user_id);


--
-- Name: index_ahoy_events_on_visit_id; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_ahoy_events_on_visit_id ON public.ahoy_events USING btree (visit_id);


--
-- Name: index_ahoy_messages_on_to; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_ahoy_messages_on_to ON public.ahoy_messages USING btree ("to");


--
-- Name: index_ahoy_messages_on_token; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_ahoy_messages_on_token ON public.ahoy_messages USING btree (token);


--
-- Name: index_ahoy_messages_on_user_id_and_mailer; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_ahoy_messages_on_user_id_and_mailer ON public.ahoy_messages USING btree (user_id, mailer);


--
-- Name: index_ahoy_messages_on_user_id_and_user_type; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_ahoy_messages_on_user_id_and_user_type ON public.ahoy_messages USING btree (user_id, user_type);


--
-- Name: index_ahoy_visits_on_user_id; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_ahoy_visits_on_user_id ON public.ahoy_visits USING btree (user_id);


--
-- Name: index_ahoy_visits_on_visit_token; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE UNIQUE INDEX index_ahoy_visits_on_visit_token ON public.ahoy_visits USING btree (visit_token);


--
-- Name: index_api_secrets_on_secret; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE UNIQUE INDEX index_api_secrets_on_secret ON public.api_secrets USING btree (secret);


--
-- Name: index_api_secrets_on_user_id; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_api_secrets_on_user_id ON public.api_secrets USING btree (user_id);


--
-- Name: index_articles_on_boost_states; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_articles_on_boost_states ON public.articles USING gin (boost_states);


--
-- Name: index_articles_on_canonical_url; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE UNIQUE INDEX index_articles_on_canonical_url ON public.articles USING btree (canonical_url);


--
-- Name: index_articles_on_comment_score; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_articles_on_comment_score ON public.articles USING btree (comment_score);


--
-- Name: index_articles_on_featured_number; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_articles_on_featured_number ON public.articles USING btree (featured_number);


--
-- Name: index_articles_on_feed_source_url; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE UNIQUE INDEX index_articles_on_feed_source_url ON public.articles USING btree (feed_source_url);


--
-- Name: index_articles_on_hotness_score; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_articles_on_hotness_score ON public.articles USING btree (hotness_score);


--
-- Name: index_articles_on_path; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_articles_on_path ON public.articles USING btree (path);


--
-- Name: index_articles_on_public_reactions_count; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_articles_on_public_reactions_count ON public.articles USING btree (public_reactions_count DESC);


--
-- Name: index_articles_on_published; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_articles_on_published ON public.articles USING btree (published);


--
-- Name: index_articles_on_published_at; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_articles_on_published_at ON public.articles USING btree (published_at);


--
-- Name: index_articles_on_slug_and_user_id; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE UNIQUE INDEX index_articles_on_slug_and_user_id ON public.articles USING btree (slug, user_id);


--
-- Name: index_articles_on_user_id; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_articles_on_user_id ON public.articles USING btree (user_id);


--
-- Name: index_articles_on_user_id_and_title_and_digest_body_markdown; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE UNIQUE INDEX index_articles_on_user_id_and_title_and_digest_body_markdown ON public.articles USING btree (user_id, title, public.digest(body_markdown, 'sha512'::text));


--
-- Name: index_audit_logs_on_data; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_audit_logs_on_data ON public.audit_logs USING gin (data);


--
-- Name: index_audit_logs_on_user_id; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_audit_logs_on_user_id ON public.audit_logs USING btree (user_id);


--
-- Name: index_badge_achievements_on_badge_id_and_user_id; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE UNIQUE INDEX index_badge_achievements_on_badge_id_and_user_id ON public.badge_achievements USING btree (badge_id, user_id);


--
-- Name: index_badge_achievements_on_user_id_and_badge_id; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_badge_achievements_on_user_id_and_badge_id ON public.badge_achievements USING btree (user_id, badge_id);


--
-- Name: index_badges_on_slug; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE UNIQUE INDEX index_badges_on_slug ON public.badges USING btree (slug);


--
-- Name: index_badges_on_title; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE UNIQUE INDEX index_badges_on_title ON public.badges USING btree (title);


--
-- Name: index_banished_users_on_banished_by_id; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_banished_users_on_banished_by_id ON public.banished_users USING btree (banished_by_id);


--
-- Name: index_banished_users_on_username; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE UNIQUE INDEX index_banished_users_on_username ON public.banished_users USING btree (username);


--
-- Name: index_blazer_audits_on_query_id; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_blazer_audits_on_query_id ON public.blazer_audits USING btree (query_id);


--
-- Name: index_blazer_audits_on_user_id; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_blazer_audits_on_user_id ON public.blazer_audits USING btree (user_id);


--
-- Name: index_blazer_checks_on_creator_id; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_blazer_checks_on_creator_id ON public.blazer_checks USING btree (creator_id);


--
-- Name: index_blazer_checks_on_query_id; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_blazer_checks_on_query_id ON public.blazer_checks USING btree (query_id);


--
-- Name: index_blazer_dashboard_queries_on_dashboard_id; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_blazer_dashboard_queries_on_dashboard_id ON public.blazer_dashboard_queries USING btree (dashboard_id);


--
-- Name: index_blazer_dashboard_queries_on_query_id; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_blazer_dashboard_queries_on_query_id ON public.blazer_dashboard_queries USING btree (query_id);


--
-- Name: index_blazer_dashboards_on_creator_id; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_blazer_dashboards_on_creator_id ON public.blazer_dashboards USING btree (creator_id);


--
-- Name: index_blazer_queries_on_creator_id; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_blazer_queries_on_creator_id ON public.blazer_queries USING btree (creator_id);


--
-- Name: index_broadcasts_on_broadcastable_type_and_broadcastable_id; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE UNIQUE INDEX index_broadcasts_on_broadcastable_type_and_broadcastable_id ON public.broadcasts USING btree (broadcastable_type, broadcastable_id);


--
-- Name: index_broadcasts_on_title_and_type_of; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE UNIQUE INDEX index_broadcasts_on_title_and_type_of ON public.broadcasts USING btree (title, type_of);


--
-- Name: index_chat_channel_memberships_on_chat_channel_id_and_user_id; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE UNIQUE INDEX index_chat_channel_memberships_on_chat_channel_id_and_user_id ON public.chat_channel_memberships USING btree (chat_channel_id, user_id);


--
-- Name: index_chat_channel_memberships_on_user_id_and_chat_channel_id; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_chat_channel_memberships_on_user_id_and_chat_channel_id ON public.chat_channel_memberships USING btree (user_id, chat_channel_id);


--
-- Name: index_chat_channels_on_slug; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE UNIQUE INDEX index_chat_channels_on_slug ON public.chat_channels USING btree (slug);


--
-- Name: index_classified_listing_categories_on_name; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE UNIQUE INDEX index_classified_listing_categories_on_name ON public.classified_listing_categories USING btree (name);


--
-- Name: index_classified_listing_categories_on_slug; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE UNIQUE INDEX index_classified_listing_categories_on_slug ON public.classified_listing_categories USING btree (slug);


--
-- Name: index_classified_listings_on_classified_listing_category_id; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_classified_listings_on_classified_listing_category_id ON public.classified_listings USING btree (classified_listing_category_id);


--
-- Name: index_classified_listings_on_organization_id; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_classified_listings_on_organization_id ON public.classified_listings USING btree (organization_id);


--
-- Name: index_classified_listings_on_user_id; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_classified_listings_on_user_id ON public.classified_listings USING btree (user_id);


--
-- Name: index_collections_on_organization_id; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_collections_on_organization_id ON public.collections USING btree (organization_id);


--
-- Name: index_collections_on_slug_and_user_id; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE UNIQUE INDEX index_collections_on_slug_and_user_id ON public.collections USING btree (slug, user_id);


--
-- Name: index_collections_on_user_id; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_collections_on_user_id ON public.collections USING btree (user_id);


--
-- Name: index_comments_on_ancestry; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_comments_on_ancestry ON public.comments USING btree (ancestry);


--
-- Name: index_comments_on_body_markdown_user_ancestry_commentable; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE UNIQUE INDEX index_comments_on_body_markdown_user_ancestry_commentable ON public.comments USING btree (public.digest(body_markdown, 'sha512'::text), user_id, ancestry, commentable_id, commentable_type);


--
-- Name: index_comments_on_commentable_id_and_commentable_type; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_comments_on_commentable_id_and_commentable_type ON public.comments USING btree (commentable_id, commentable_type);


--
-- Name: index_comments_on_created_at; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_comments_on_created_at ON public.comments USING btree (created_at);


--
-- Name: index_comments_on_score; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_comments_on_score ON public.comments USING btree (score);


--
-- Name: index_comments_on_user_id; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_comments_on_user_id ON public.comments USING btree (user_id);


--
-- Name: index_credits_on_purchase_id_and_purchase_type; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_credits_on_purchase_id_and_purchase_type ON public.credits USING btree (purchase_id, purchase_type);


--
-- Name: index_credits_on_spent; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_credits_on_spent ON public.credits USING btree (spent);


--
-- Name: index_custom_profile_fields_on_label_and_profile_id; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE UNIQUE INDEX index_custom_profile_fields_on_label_and_profile_id ON public.custom_profile_fields USING btree (label, profile_id);


--
-- Name: index_custom_profile_fields_on_profile_id; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_custom_profile_fields_on_profile_id ON public.custom_profile_fields USING btree (profile_id);


--
-- Name: index_data_update_scripts_on_file_name; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE UNIQUE INDEX index_data_update_scripts_on_file_name ON public.data_update_scripts USING btree (file_name);


--
-- Name: index_display_ad_events_on_display_ad_id; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_display_ad_events_on_display_ad_id ON public.display_ad_events USING btree (display_ad_id);


--
-- Name: index_display_ad_events_on_user_id; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_display_ad_events_on_user_id ON public.display_ad_events USING btree (user_id);


--
-- Name: index_email_authorizations_on_user_id; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_email_authorizations_on_user_id ON public.email_authorizations USING btree (user_id);


--
-- Name: index_feedback_messages_on_affected_id; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_feedback_messages_on_affected_id ON public.feedback_messages USING btree (affected_id);


--
-- Name: index_feedback_messages_on_offender_id; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_feedback_messages_on_offender_id ON public.feedback_messages USING btree (offender_id);


--
-- Name: index_feedback_messages_on_reporter_id; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_feedback_messages_on_reporter_id ON public.feedback_messages USING btree (reporter_id);


--
-- Name: index_field_test_events_on_field_test_membership_id; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_field_test_events_on_field_test_membership_id ON public.field_test_events USING btree (field_test_membership_id);


--
-- Name: index_field_test_memberships_on_experiment_and_created_at; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_field_test_memberships_on_experiment_and_created_at ON public.field_test_memberships USING btree (experiment, created_at);


--
-- Name: index_field_test_memberships_on_participant; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE UNIQUE INDEX index_field_test_memberships_on_participant ON public.field_test_memberships USING btree (participant_type, participant_id, experiment);


--
-- Name: index_flipper_features_on_key; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE UNIQUE INDEX index_flipper_features_on_key ON public.flipper_features USING btree (key);


--
-- Name: index_flipper_gates_on_feature_key_and_key_and_value; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE UNIQUE INDEX index_flipper_gates_on_feature_key_and_key_and_value ON public.flipper_gates USING btree (feature_key, key, value);


--
-- Name: index_follows_on_created_at; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_follows_on_created_at ON public.follows USING btree (created_at);


--
-- Name: index_follows_on_followable_and_follower; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE UNIQUE INDEX index_follows_on_followable_and_follower ON public.follows USING btree (followable_id, followable_type, follower_id, follower_type);


--
-- Name: index_github_issues_on_url; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE UNIQUE INDEX index_github_issues_on_url ON public.github_issues USING btree (url);


--
-- Name: index_github_repos_on_github_id_code; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE UNIQUE INDEX index_github_repos_on_github_id_code ON public.github_repos USING btree (github_id_code);


--
-- Name: index_github_repos_on_url; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE UNIQUE INDEX index_github_repos_on_url ON public.github_repos USING btree (url);


--
-- Name: index_html_variant_successes_on_html_variant_id_and_article_id; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_html_variant_successes_on_html_variant_id_and_article_id ON public.html_variant_successes USING btree (html_variant_id, article_id);


--
-- Name: index_html_variant_trials_on_html_variant_id_and_article_id; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_html_variant_trials_on_html_variant_id_and_article_id ON public.html_variant_trials USING btree (html_variant_id, article_id);


--
-- Name: index_html_variants_on_name; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE UNIQUE INDEX index_html_variants_on_name ON public.html_variants USING btree (name);


--
-- Name: index_identities_on_provider_and_uid; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE UNIQUE INDEX index_identities_on_provider_and_uid ON public.identities USING btree (provider, uid);


--
-- Name: index_identities_on_provider_and_user_id; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE UNIQUE INDEX index_identities_on_provider_and_user_id ON public.identities USING btree (provider, user_id);


--
-- Name: index_mentions_on_user_id_and_mentionable_id_mentionable_type; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE UNIQUE INDEX index_mentions_on_user_id_and_mentionable_id_mentionable_type ON public.mentions USING btree (user_id, mentionable_id, mentionable_type);


--
-- Name: index_messages_on_chat_channel_id; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_messages_on_chat_channel_id ON public.messages USING btree (chat_channel_id);


--
-- Name: index_messages_on_user_id; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_messages_on_user_id ON public.messages USING btree (user_id);


--
-- Name: index_navigation_links_on_url_and_name; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE UNIQUE INDEX index_navigation_links_on_url_and_name ON public.navigation_links USING btree (url, name);


--
-- Name: index_notification_subscriptions_on_notifiable_and_config; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_notification_subscriptions_on_notifiable_and_config ON public.notification_subscriptions USING btree (notifiable_id, notifiable_type, config);


--
-- Name: index_notifications_on_created_at; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_notifications_on_created_at ON public.notifications USING btree (created_at);


--
-- Name: index_notifications_on_notifiable_id_notifiable_type_and_action; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_notifications_on_notifiable_id_notifiable_type_and_action ON public.notifications USING btree (notifiable_id, notifiable_type, action);


--
-- Name: index_notifications_on_notifiable_type; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_notifications_on_notifiable_type ON public.notifications USING btree (notifiable_type);


--
-- Name: index_notifications_on_notified_at; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_notifications_on_notified_at ON public.notifications USING btree (notified_at);


--
-- Name: index_notifications_on_org_notifiable_action_is_null; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE UNIQUE INDEX index_notifications_on_org_notifiable_action_is_null ON public.notifications USING btree (organization_id, notifiable_id, notifiable_type) WHERE (action IS NULL);


--
-- Name: index_notifications_on_org_notifiable_and_action_not_null; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE UNIQUE INDEX index_notifications_on_org_notifiable_and_action_not_null ON public.notifications USING btree (organization_id, notifiable_id, notifiable_type, action) WHERE (action IS NOT NULL);


--
-- Name: index_notifications_on_user_notifiable_action_is_null; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE UNIQUE INDEX index_notifications_on_user_notifiable_action_is_null ON public.notifications USING btree (user_id, notifiable_id, notifiable_type) WHERE (action IS NULL);


--
-- Name: index_notifications_on_user_notifiable_and_action_not_null; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE UNIQUE INDEX index_notifications_on_user_notifiable_and_action_not_null ON public.notifications USING btree (user_id, notifiable_id, notifiable_type, action) WHERE (action IS NOT NULL);


--
-- Name: index_notifications_user_id_organization_id_notifiable_action; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE UNIQUE INDEX index_notifications_user_id_organization_id_notifiable_action ON public.notifications USING btree (user_id, organization_id, notifiable_id, notifiable_type, action);


--
-- Name: index_oauth_access_grants_on_application_id; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_oauth_access_grants_on_application_id ON public.oauth_access_grants USING btree (application_id);


--
-- Name: index_oauth_access_grants_on_resource_owner_id; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_oauth_access_grants_on_resource_owner_id ON public.oauth_access_grants USING btree (resource_owner_id);


--
-- Name: index_oauth_access_grants_on_token; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE UNIQUE INDEX index_oauth_access_grants_on_token ON public.oauth_access_grants USING btree (token);


--
-- Name: index_oauth_access_tokens_on_application_id; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_oauth_access_tokens_on_application_id ON public.oauth_access_tokens USING btree (application_id);


--
-- Name: index_oauth_access_tokens_on_refresh_token; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE UNIQUE INDEX index_oauth_access_tokens_on_refresh_token ON public.oauth_access_tokens USING btree (refresh_token);


--
-- Name: index_oauth_access_tokens_on_resource_owner_id; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_oauth_access_tokens_on_resource_owner_id ON public.oauth_access_tokens USING btree (resource_owner_id);


--
-- Name: index_oauth_access_tokens_on_token; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE UNIQUE INDEX index_oauth_access_tokens_on_token ON public.oauth_access_tokens USING btree (token);


--
-- Name: index_oauth_applications_on_uid; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE UNIQUE INDEX index_oauth_applications_on_uid ON public.oauth_applications USING btree (uid);


--
-- Name: index_on_user_subscription_sourcebable_type_and_id; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_on_user_subscription_sourcebable_type_and_id ON public.user_subscriptions USING btree (user_subscription_sourceable_type, user_subscription_sourceable_id);


--
-- Name: index_organization_memberships_on_user_id_and_organization_id; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE UNIQUE INDEX index_organization_memberships_on_user_id_and_organization_id ON public.organization_memberships USING btree (user_id, organization_id);


--
-- Name: index_organizations_on_secret; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE UNIQUE INDEX index_organizations_on_secret ON public.organizations USING btree (secret);


--
-- Name: index_organizations_on_slug; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE UNIQUE INDEX index_organizations_on_slug ON public.organizations USING btree (slug);


--
-- Name: index_page_views_on_article_id; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_page_views_on_article_id ON public.page_views USING btree (article_id);


--
-- Name: index_page_views_on_created_at; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_page_views_on_created_at ON public.page_views USING btree (created_at);


--
-- Name: index_page_views_on_user_id; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_page_views_on_user_id ON public.page_views USING btree (user_id);


--
-- Name: index_pages_on_slug; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE UNIQUE INDEX index_pages_on_slug ON public.pages USING btree (slug);


--
-- Name: index_pod_episode_appearances_on_podcast_episode_id_and_user_id; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE UNIQUE INDEX index_pod_episode_appearances_on_podcast_episode_id_and_user_id ON public.podcast_episode_appearances USING btree (podcast_episode_id, user_id);


--
-- Name: index_podcast_episodes_on_guid; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE UNIQUE INDEX index_podcast_episodes_on_guid ON public.podcast_episodes USING btree (guid);


--
-- Name: index_podcast_episodes_on_media_url; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE UNIQUE INDEX index_podcast_episodes_on_media_url ON public.podcast_episodes USING btree (media_url);


--
-- Name: index_podcast_episodes_on_podcast_id; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_podcast_episodes_on_podcast_id ON public.podcast_episodes USING btree (podcast_id);


--
-- Name: index_podcast_episodes_on_title; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_podcast_episodes_on_title ON public.podcast_episodes USING btree (title);


--
-- Name: index_podcast_episodes_on_website_url; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_podcast_episodes_on_website_url ON public.podcast_episodes USING btree (website_url);


--
-- Name: index_podcast_ownerships_on_podcast_id_and_user_id; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE UNIQUE INDEX index_podcast_ownerships_on_podcast_id_and_user_id ON public.podcast_ownerships USING btree (podcast_id, user_id);


--
-- Name: index_podcasts_on_creator_id; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_podcasts_on_creator_id ON public.podcasts USING btree (creator_id);


--
-- Name: index_podcasts_on_feed_url; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE UNIQUE INDEX index_podcasts_on_feed_url ON public.podcasts USING btree (feed_url);


--
-- Name: index_podcasts_on_slug; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE UNIQUE INDEX index_podcasts_on_slug ON public.podcasts USING btree (slug);


--
-- Name: index_poll_skips_on_poll_and_user; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE UNIQUE INDEX index_poll_skips_on_poll_and_user ON public.poll_skips USING btree (poll_id, user_id);


--
-- Name: index_poll_votes_on_poll_id_and_user_id; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE UNIQUE INDEX index_poll_votes_on_poll_id_and_user_id ON public.poll_votes USING btree (poll_id, user_id);


--
-- Name: index_poll_votes_on_poll_option_and_user; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE UNIQUE INDEX index_poll_votes_on_poll_option_and_user ON public.poll_votes USING btree (poll_option_id, user_id);


--
-- Name: index_profile_field_groups_on_name; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE UNIQUE INDEX index_profile_field_groups_on_name ON public.profile_field_groups USING btree (name);


--
-- Name: index_profile_fields_on_label; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE UNIQUE INDEX index_profile_fields_on_label ON public.profile_fields USING btree (label);


--
-- Name: index_profile_fields_on_profile_field_group_id; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_profile_fields_on_profile_field_group_id ON public.profile_fields USING btree (profile_field_group_id);


--
-- Name: index_profile_pins_on_profile_id; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_profile_pins_on_profile_id ON public.profile_pins USING btree (profile_id);


--
-- Name: index_profiles_on_user_id; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE UNIQUE INDEX index_profiles_on_user_id ON public.profiles USING btree (user_id);


--
-- Name: index_rating_votes_on_article_id; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_rating_votes_on_article_id ON public.rating_votes USING btree (article_id);


--
-- Name: index_rating_votes_on_user_id_and_article_id_and_context; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE UNIQUE INDEX index_rating_votes_on_user_id_and_article_id_and_context ON public.rating_votes USING btree (user_id, article_id, context);


--
-- Name: index_reactions_on_category; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_reactions_on_category ON public.reactions USING btree (category);


--
-- Name: index_reactions_on_created_at; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_reactions_on_created_at ON public.reactions USING btree (created_at);


--
-- Name: index_reactions_on_points; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_reactions_on_points ON public.reactions USING btree (points);


--
-- Name: index_reactions_on_reactable_id_and_reactable_type; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_reactions_on_reactable_id_and_reactable_type ON public.reactions USING btree (reactable_id, reactable_type);


--
-- Name: index_reactions_on_reactable_type; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_reactions_on_reactable_type ON public.reactions USING btree (reactable_type);


--
-- Name: index_reactions_on_user_id_reactable_id_reactable_type_category; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE UNIQUE INDEX index_reactions_on_user_id_reactable_id_reactable_type_category ON public.reactions USING btree (user_id, reactable_id, reactable_type, category);


--
-- Name: index_response_templates_on_type_of; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_response_templates_on_type_of ON public.response_templates USING btree (type_of);


--
-- Name: index_response_templates_on_user_id_and_type_of; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_response_templates_on_user_id_and_type_of ON public.response_templates USING btree (user_id, type_of);


--
-- Name: index_roles_on_name; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_roles_on_name ON public.roles USING btree (name);


--
-- Name: index_roles_on_name_and_resource_type_and_resource_id; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_roles_on_name_and_resource_type_and_resource_id ON public.roles USING btree (name, resource_type, resource_id);


--
-- Name: index_site_configs_on_var; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE UNIQUE INDEX index_site_configs_on_var ON public.site_configs USING btree (var);


--
-- Name: index_sponsorships_on_level; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_sponsorships_on_level ON public.sponsorships USING btree (level);


--
-- Name: index_sponsorships_on_organization_id; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_sponsorships_on_organization_id ON public.sponsorships USING btree (organization_id);


--
-- Name: index_sponsorships_on_sponsorable_id_and_sponsorable_type; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_sponsorships_on_sponsorable_id_and_sponsorable_type ON public.sponsorships USING btree (sponsorable_id, sponsorable_type);


--
-- Name: index_sponsorships_on_status; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_sponsorships_on_status ON public.sponsorships USING btree (status);


--
-- Name: index_sponsorships_on_user_id; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_sponsorships_on_user_id ON public.sponsorships USING btree (user_id);


--
-- Name: index_subscriber_id_and_email_with_user_subscription_source; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE UNIQUE INDEX index_subscriber_id_and_email_with_user_subscription_source ON public.user_subscriptions USING btree (subscriber_id, subscriber_email, user_subscription_sourceable_type, user_subscription_sourceable_id);


--
-- Name: index_tag_adjustments_on_tag_name_and_article_id; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE UNIQUE INDEX index_tag_adjustments_on_tag_name_and_article_id ON public.tag_adjustments USING btree (tag_name, article_id);


--
-- Name: index_taggings_on_context; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_taggings_on_context ON public.taggings USING btree (context);


--
-- Name: index_taggings_on_tag_id; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_taggings_on_tag_id ON public.taggings USING btree (tag_id);


--
-- Name: index_taggings_on_taggable_id; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_taggings_on_taggable_id ON public.taggings USING btree (taggable_id);


--
-- Name: index_taggings_on_taggable_id_and_taggable_type_and_context; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_taggings_on_taggable_id_and_taggable_type_and_context ON public.taggings USING btree (taggable_id, taggable_type, context);


--
-- Name: index_taggings_on_taggable_type; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_taggings_on_taggable_type ON public.taggings USING btree (taggable_type);


--
-- Name: index_taggings_on_tagger_id; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_taggings_on_tagger_id ON public.taggings USING btree (tagger_id);


--
-- Name: index_taggings_on_tagger_id_and_tagger_type; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_taggings_on_tagger_id_and_tagger_type ON public.taggings USING btree (tagger_id, tagger_type);


--
-- Name: index_tags_on_name; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE UNIQUE INDEX index_tags_on_name ON public.tags USING btree (name);


--
-- Name: index_tags_on_social_preview_template; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_tags_on_social_preview_template ON public.tags USING btree (social_preview_template);


--
-- Name: index_user_blocks_on_blocked_id_and_blocker_id; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE UNIQUE INDEX index_user_blocks_on_blocked_id_and_blocker_id ON public.user_blocks USING btree (blocked_id, blocker_id);


--
-- Name: index_user_subscriptions_on_author_id; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_user_subscriptions_on_author_id ON public.user_subscriptions USING btree (author_id);


--
-- Name: index_user_subscriptions_on_subscriber_email; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_user_subscriptions_on_subscriber_email ON public.user_subscriptions USING btree (subscriber_email);


--
-- Name: index_users_on_apple_username; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_users_on_apple_username ON public.users USING btree (apple_username);


--
-- Name: index_users_on_confirmation_token; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE UNIQUE INDEX index_users_on_confirmation_token ON public.users USING btree (confirmation_token);


--
-- Name: index_users_on_created_at; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_users_on_created_at ON public.users USING btree (created_at);


--
-- Name: index_users_on_email; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE UNIQUE INDEX index_users_on_email ON public.users USING btree (email);


--
-- Name: index_users_on_facebook_username; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_users_on_facebook_username ON public.users USING btree (facebook_username);


--
-- Name: index_users_on_feed_fetched_at; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_users_on_feed_fetched_at ON public.users USING btree (feed_fetched_at);


--
-- Name: index_users_on_feed_url; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_users_on_feed_url ON public.users USING btree (feed_url) WHERE ((COALESCE(feed_url, ''::character varying))::text <> ''::text);


--
-- Name: index_users_on_github_username; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE UNIQUE INDEX index_users_on_github_username ON public.users USING btree (github_username);


--
-- Name: index_users_on_invitation_token; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE UNIQUE INDEX index_users_on_invitation_token ON public.users USING btree (invitation_token);


--
-- Name: index_users_on_invitations_count; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_users_on_invitations_count ON public.users USING btree (invitations_count);


--
-- Name: index_users_on_invited_by_id; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_users_on_invited_by_id ON public.users USING btree (invited_by_id);


--
-- Name: index_users_on_invited_by_type_and_invited_by_id; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_users_on_invited_by_type_and_invited_by_id ON public.users USING btree (invited_by_type, invited_by_id);


--
-- Name: index_users_on_language_settings; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_users_on_language_settings ON public.users USING gin (language_settings);


--
-- Name: index_users_on_old_old_username; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_users_on_old_old_username ON public.users USING btree (old_old_username);


--
-- Name: index_users_on_reset_password_token; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE UNIQUE INDEX index_users_on_reset_password_token ON public.users USING btree (reset_password_token);


--
-- Name: index_users_on_twitter_username; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE UNIQUE INDEX index_users_on_twitter_username ON public.users USING btree (twitter_username);


--
-- Name: index_users_on_username; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE UNIQUE INDEX index_users_on_username ON public.users USING btree (username);


--
-- Name: index_users_roles_on_user_id_and_role_id; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_users_roles_on_user_id_and_role_id ON public.users_roles USING btree (user_id, role_id);


--
-- Name: index_webhook_endpoints_on_events; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_webhook_endpoints_on_events ON public.webhook_endpoints USING btree (events);


--
-- Name: index_webhook_endpoints_on_oauth_application_id; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_webhook_endpoints_on_oauth_application_id ON public.webhook_endpoints USING btree (oauth_application_id);


--
-- Name: index_webhook_endpoints_on_target_url; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE UNIQUE INDEX index_webhook_endpoints_on_target_url ON public.webhook_endpoints USING btree (target_url);


--
-- Name: index_webhook_endpoints_on_user_id; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX index_webhook_endpoints_on_user_id ON public.webhook_endpoints USING btree (user_id);


--
-- Name: taggings_idx; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE UNIQUE INDEX taggings_idx ON public.taggings USING btree (tag_id, taggable_id, taggable_type, context, tagger_id, tagger_type);


--
-- Name: taggings_idy; Type: INDEX; Schema: public; Owner: contact_webtutsplus
--

CREATE INDEX taggings_idy ON public.taggings USING btree (taggable_id, taggable_type, tagger_id, context);


--
-- Name: tweets fk_rails_003928b7f5; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.tweets
    ADD CONSTRAINT fk_rails_003928b7f5 FOREIGN KEY (user_id) REFERENCES public.users(id) ON DELETE SET NULL;


--
-- Name: page_views fk_rails_00f38b1a99; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.page_views
    ADD CONSTRAINT fk_rails_00f38b1a99 FOREIGN KEY (article_id) REFERENCES public.articles(id) ON DELETE CASCADE;


--
-- Name: comments fk_rails_03de2dc08c; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.comments
    ADD CONSTRAINT fk_rails_03de2dc08c FOREIGN KEY (user_id) REFERENCES public.users(id) ON DELETE CASCADE;


--
-- Name: webhook_endpoints fk_rails_083276d374; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.webhook_endpoints
    ADD CONSTRAINT fk_rails_083276d374 FOREIGN KEY (oauth_application_id) REFERENCES public.oauth_applications(id);


--
-- Name: podcast_episode_appearances fk_rails_09327c8b91; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.podcast_episode_appearances
    ADD CONSTRAINT fk_rails_09327c8b91 FOREIGN KEY (user_id) REFERENCES public.users(id);


--
-- Name: buffer_updates fk_rails_0b84f8076f; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.buffer_updates
    ADD CONSTRAINT fk_rails_0b84f8076f FOREIGN KEY (tag_id) REFERENCES public.tags(id) ON DELETE SET NULL;


--
-- Name: messages fk_rails_1321992401; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.messages
    ADD CONSTRAINT fk_rails_1321992401 FOREIGN KEY (chat_channel_id) REFERENCES public.chat_channels(id);


--
-- Name: page_views fk_rails_13a4e75c00; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.page_views
    ADD CONSTRAINT fk_rails_13a4e75c00 FOREIGN KEY (user_id) REFERENCES public.users(id) ON DELETE SET NULL;


--
-- Name: banished_users fk_rails_153ba6df7a; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.banished_users
    ADD CONSTRAINT fk_rails_153ba6df7a FOREIGN KEY (banished_by_id) REFERENCES public.users(id) ON DELETE SET NULL;


--
-- Name: display_ad_events fk_rails_1821fcc2c7; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.display_ad_events
    ADD CONSTRAINT fk_rails_1821fcc2c7 FOREIGN KEY (display_ad_id) REFERENCES public.display_ads(id) ON DELETE CASCADE;


--
-- Name: mentions fk_rails_1b711e94aa; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.mentions
    ADD CONSTRAINT fk_rails_1b711e94aa FOREIGN KEY (user_id) REFERENCES public.users(id) ON DELETE CASCADE;


--
-- Name: user_subscriptions fk_rails_1ed776f5d9; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.user_subscriptions
    ADD CONSTRAINT fk_rails_1ed776f5d9 FOREIGN KEY (subscriber_id) REFERENCES public.users(id);


--
-- Name: audit_logs fk_rails_1f26bc34ae; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.audit_logs
    ADD CONSTRAINT fk_rails_1f26bc34ae FOREIGN KEY (user_id) REFERENCES public.users(id);


--
-- Name: collections fk_rails_217eef6689; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.collections
    ADD CONSTRAINT fk_rails_217eef6689 FOREIGN KEY (organization_id) REFERENCES public.organizations(id) ON DELETE SET NULL;


--
-- Name: podcasts fk_rails_23fc7f8ed6; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.podcasts
    ADD CONSTRAINT fk_rails_23fc7f8ed6 FOREIGN KEY (creator_id) REFERENCES public.users(id);


--
-- Name: classified_listings fk_rails_2571500d9c; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.classified_listings
    ADD CONSTRAINT fk_rails_2571500d9c FOREIGN KEY (organization_id) REFERENCES public.organizations(id) ON DELETE CASCADE;


--
-- Name: messages fk_rails_273a25a7a6; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.messages
    ADD CONSTRAINT fk_rails_273a25a7a6 FOREIGN KEY (user_id) REFERENCES public.users(id);


--
-- Name: badge_achievements fk_rails_27820f58ce; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.badge_achievements
    ADD CONSTRAINT fk_rails_27820f58ce FOREIGN KEY (badge_id) REFERENCES public.badges(id);


--
-- Name: articles fk_rails_2b371e3029; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.articles
    ADD CONSTRAINT fk_rails_2b371e3029 FOREIGN KEY (collection_id) REFERENCES public.collections(id) ON DELETE SET NULL;


--
-- Name: notification_subscriptions fk_rails_2bf71acda7; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.notification_subscriptions
    ADD CONSTRAINT fk_rails_2bf71acda7 FOREIGN KEY (user_id) REFERENCES public.users(id) ON DELETE CASCADE;


--
-- Name: oauth_access_grants fk_rails_330c32d8d9; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.oauth_access_grants
    ADD CONSTRAINT fk_rails_330c32d8d9 FOREIGN KEY (resource_owner_id) REFERENCES public.users(id);


--
-- Name: notes fk_rails_36c9deba43; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.notes
    ADD CONSTRAINT fk_rails_36c9deba43 FOREIGN KEY (author_id) REFERENCES public.users(id) ON DELETE SET NULL;


--
-- Name: podcast_ownerships fk_rails_3710d65292; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.podcast_ownerships
    ADD CONSTRAINT fk_rails_3710d65292 FOREIGN KEY (podcast_id) REFERENCES public.podcasts(id);


--
-- Name: notifications fk_rails_394d9847aa; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.notifications
    ADD CONSTRAINT fk_rails_394d9847aa FOREIGN KEY (organization_id) REFERENCES public.organizations(id) ON DELETE CASCADE;


--
-- Name: articles fk_rails_3d31dad1cc; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.articles
    ADD CONSTRAINT fk_rails_3d31dad1cc FOREIGN KEY (user_id) REFERENCES public.users(id) ON DELETE CASCADE;


--
-- Name: poll_skips fk_rails_4046c49c05; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.poll_skips
    ADD CONSTRAINT fk_rails_4046c49c05 FOREIGN KEY (user_id) REFERENCES public.users(id) ON DELETE CASCADE;


--
-- Name: polls fk_rails_48d9b585ee; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.polls
    ADD CONSTRAINT fk_rails_48d9b585ee FOREIGN KEY (article_id) REFERENCES public.articles(id) ON DELETE CASCADE;


--
-- Name: badge_achievements fk_rails_4a2e48ca67; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.badge_achievements
    ADD CONSTRAINT fk_rails_4a2e48ca67 FOREIGN KEY (user_id) REFERENCES public.users(id);


--
-- Name: users_roles fk_rails_4a41696df6; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.users_roles
    ADD CONSTRAINT fk_rails_4a41696df6 FOREIGN KEY (user_id) REFERENCES public.users(id) ON DELETE CASCADE;


--
-- Name: chat_channel_memberships fk_rails_4ba367990a; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.chat_channel_memberships
    ADD CONSTRAINT fk_rails_4ba367990a FOREIGN KEY (user_id) REFERENCES public.users(id);


--
-- Name: html_variants fk_rails_4bb9f66719; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.html_variants
    ADD CONSTRAINT fk_rails_4bb9f66719 FOREIGN KEY (user_id) REFERENCES public.users(id) ON DELETE CASCADE;


--
-- Name: identities fk_rails_5373344100; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.identities
    ADD CONSTRAINT fk_rails_5373344100 FOREIGN KEY (user_id) REFERENCES public.users(id) ON DELETE CASCADE;


--
-- Name: credits fk_rails_5628a713de; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.credits
    ADD CONSTRAINT fk_rails_5628a713de FOREIGN KEY (organization_id) REFERENCES public.organizations(id) ON DELETE RESTRICT;


--
-- Name: podcast_ownerships fk_rails_574aee0ec6; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.podcast_ownerships
    ADD CONSTRAINT fk_rails_574aee0ec6 FOREIGN KEY (user_id) REFERENCES public.users(id);


--
-- Name: organization_memberships fk_rails_57cf70d280; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.organization_memberships
    ADD CONSTRAINT fk_rails_57cf70d280 FOREIGN KEY (user_id) REFERENCES public.users(id) ON DELETE CASCADE;


--
-- Name: ahoy_messages fk_rails_5894d6c55a; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.ahoy_messages
    ADD CONSTRAINT fk_rails_5894d6c55a FOREIGN KEY (user_id) REFERENCES public.users(id) ON DELETE CASCADE;


--
-- Name: html_variant_successes fk_rails_58c8775ab2; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.html_variant_successes
    ADD CONSTRAINT fk_rails_58c8775ab2 FOREIGN KEY (article_id) REFERENCES public.articles(id) ON DELETE SET NULL;


--
-- Name: user_subscriptions fk_rails_59b0197af7; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.user_subscriptions
    ADD CONSTRAINT fk_rails_59b0197af7 FOREIGN KEY (author_id) REFERENCES public.users(id);


--
-- Name: html_variant_successes fk_rails_5b92043d3f; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.html_variant_successes
    ADD CONSTRAINT fk_rails_5b92043d3f FOREIGN KEY (html_variant_id) REFERENCES public.html_variants(id) ON DELETE CASCADE;


--
-- Name: custom_profile_fields fk_rails_701e08633d; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.custom_profile_fields
    ADD CONSTRAINT fk_rails_701e08633d FOREIGN KEY (profile_id) REFERENCES public.profiles(id) ON DELETE CASCADE;


--
-- Name: organization_memberships fk_rails_715ab7f4fe; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.organization_memberships
    ADD CONSTRAINT fk_rails_715ab7f4fe FOREIGN KEY (organization_id) REFERENCES public.organizations(id) ON DELETE CASCADE;


--
-- Name: oauth_access_tokens fk_rails_732cb83ab7; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.oauth_access_tokens
    ADD CONSTRAINT fk_rails_732cb83ab7 FOREIGN KEY (application_id) REFERENCES public.oauth_applications(id);


--
-- Name: sponsorships fk_rails_778bb453b1; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.sponsorships
    ADD CONSTRAINT fk_rails_778bb453b1 FOREIGN KEY (organization_id) REFERENCES public.organizations(id);


--
-- Name: articles fk_rails_7809a1a57d; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.articles
    ADD CONSTRAINT fk_rails_7809a1a57d FOREIGN KEY (organization_id) REFERENCES public.organizations(id) ON DELETE SET NULL;


--
-- Name: webhook_endpoints fk_rails_819fdd0983; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.webhook_endpoints
    ADD CONSTRAINT fk_rails_819fdd0983 FOREIGN KEY (user_id) REFERENCES public.users(id);


--
-- Name: html_variant_trials fk_rails_823a31b2cf; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.html_variant_trials
    ADD CONSTRAINT fk_rails_823a31b2cf FOREIGN KEY (html_variant_id) REFERENCES public.html_variants(id) ON DELETE CASCADE;


--
-- Name: poll_votes fk_rails_848ece0184; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.poll_votes
    ADD CONSTRAINT fk_rails_848ece0184 FOREIGN KEY (poll_option_id) REFERENCES public.poll_options(id) ON DELETE CASCADE;


--
-- Name: feedback_messages fk_rails_887c5f31ff; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.feedback_messages
    ADD CONSTRAINT fk_rails_887c5f31ff FOREIGN KEY (reporter_id) REFERENCES public.users(id) ON DELETE SET NULL;


--
-- Name: podcast_episodes fk_rails_893fc9044f; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.podcast_episodes
    ADD CONSTRAINT fk_rails_893fc9044f FOREIGN KEY (podcast_id) REFERENCES public.podcasts(id) ON DELETE CASCADE;


--
-- Name: classified_listings fk_rails_8ec4e83da0; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.classified_listings
    ADD CONSTRAINT fk_rails_8ec4e83da0 FOREIGN KEY (user_id) REFERENCES public.users(id) ON DELETE CASCADE;


--
-- Name: credits fk_rails_9001739776; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.credits
    ADD CONSTRAINT fk_rails_9001739776 FOREIGN KEY (user_id) REFERENCES public.users(id) ON DELETE CASCADE;


--
-- Name: user_blocks fk_rails_9457ce6a10; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.user_blocks
    ADD CONSTRAINT fk_rails_9457ce6a10 FOREIGN KEY (blocked_id) REFERENCES public.users(id);


--
-- Name: poll_skips fk_rails_97ff88c452; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.poll_skips
    ADD CONSTRAINT fk_rails_97ff88c452 FOREIGN KEY (poll_id) REFERENCES public.polls(id) ON DELETE CASCADE;


--
-- Name: api_secrets fk_rails_9aaa384ac8; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.api_secrets
    ADD CONSTRAINT fk_rails_9aaa384ac8 FOREIGN KEY (user_id) REFERENCES public.users(id) ON DELETE CASCADE;


--
-- Name: collections fk_rails_9b33697360; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.collections
    ADD CONSTRAINT fk_rails_9b33697360 FOREIGN KEY (user_id) REFERENCES public.users(id) ON DELETE CASCADE;


--
-- Name: reactions fk_rails_9f02fc96a0; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.reactions
    ADD CONSTRAINT fk_rails_9f02fc96a0 FOREIGN KEY (user_id) REFERENCES public.users(id) ON DELETE CASCADE;


--
-- Name: taggings fk_rails_9fcd2e236b; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.taggings
    ADD CONSTRAINT fk_rails_9fcd2e236b FOREIGN KEY (tag_id) REFERENCES public.tags(id) ON DELETE CASCADE;


--
-- Name: ahoy_events fk_rails_a0df956a8d; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.ahoy_events
    ADD CONSTRAINT fk_rails_a0df956a8d FOREIGN KEY (visit_id) REFERENCES public.ahoy_visits(id) ON DELETE CASCADE;


--
-- Name: rating_votes fk_rails_a3fec5b316; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.rating_votes
    ADD CONSTRAINT fk_rails_a3fec5b316 FOREIGN KEY (article_id) REFERENCES public.articles(id) ON DELETE CASCADE;


--
-- Name: rating_votes fk_rails_a47bf2c1e2; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.rating_votes
    ADD CONSTRAINT fk_rails_a47bf2c1e2 FOREIGN KEY (user_id) REFERENCES public.users(id) ON DELETE SET NULL;


--
-- Name: tag_adjustments fk_rails_a49150b7b2; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.tag_adjustments
    ADD CONSTRAINT fk_rails_a49150b7b2 FOREIGN KEY (article_id) REFERENCES public.articles(id) ON DELETE CASCADE;


--
-- Name: buffer_updates fk_rails_a4b9858400; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.buffer_updates
    ADD CONSTRAINT fk_rails_a4b9858400 FOREIGN KEY (article_id) REFERENCES public.articles(id) ON DELETE CASCADE;


--
-- Name: poll_votes fk_rails_a6e6974b7e; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.poll_votes
    ADD CONSTRAINT fk_rails_a6e6974b7e FOREIGN KEY (poll_id) REFERENCES public.polls(id) ON DELETE CASCADE;


--
-- Name: response_templates fk_rails_a8702c6917; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.response_templates
    ADD CONSTRAINT fk_rails_a8702c6917 FOREIGN KEY (user_id) REFERENCES public.users(id);


--
-- Name: tags fk_rails_a9dc141dc9; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.tags
    ADD CONSTRAINT fk_rails_a9dc141dc9 FOREIGN KEY (mod_chat_channel_id) REFERENCES public.chat_channels(id) ON DELETE SET NULL;


--
-- Name: poll_options fk_rails_aa85becb42; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.poll_options
    ADD CONSTRAINT fk_rails_aa85becb42 FOREIGN KEY (poll_id) REFERENCES public.polls(id) ON DELETE CASCADE;


--
-- Name: notifications fk_rails_b080fb4855; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.notifications
    ADD CONSTRAINT fk_rails_b080fb4855 FOREIGN KEY (user_id) REFERENCES public.users(id) ON DELETE CASCADE;


--
-- Name: chat_channel_memberships fk_rails_b2bb73e339; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.chat_channel_memberships
    ADD CONSTRAINT fk_rails_b2bb73e339 FOREIGN KEY (chat_channel_id) REFERENCES public.chat_channels(id);


--
-- Name: sponsorships fk_rails_b3190c5fc6; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.sponsorships
    ADD CONSTRAINT fk_rails_b3190c5fc6 FOREIGN KEY (user_id) REFERENCES public.users(id);


--
-- Name: oauth_access_grants fk_rails_b4b53e07b8; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.oauth_access_grants
    ADD CONSTRAINT fk_rails_b4b53e07b8 FOREIGN KEY (application_id) REFERENCES public.oauth_applications(id);


--
-- Name: poll_votes fk_rails_b64de9b025; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.poll_votes
    ADD CONSTRAINT fk_rails_b64de9b025 FOREIGN KEY (user_id) REFERENCES public.users(id) ON DELETE CASCADE;


--
-- Name: html_variant_trials fk_rails_ba2bd12f4d; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.html_variant_trials
    ADD CONSTRAINT fk_rails_ba2bd12f4d FOREIGN KEY (article_id) REFERENCES public.articles(id) ON DELETE SET NULL;


--
-- Name: github_repos fk_rails_bbb82bb7f1; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.github_repos
    ADD CONSTRAINT fk_rails_bbb82bb7f1 FOREIGN KEY (user_id) REFERENCES public.users(id) ON DELETE CASCADE;


--
-- Name: feedback_messages fk_rails_c15ceb2839; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.feedback_messages
    ADD CONSTRAINT fk_rails_c15ceb2839 FOREIGN KEY (offender_id) REFERENCES public.users(id) ON DELETE SET NULL;


--
-- Name: tag_adjustments fk_rails_c4e50e84fd; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.tag_adjustments
    ADD CONSTRAINT fk_rails_c4e50e84fd FOREIGN KEY (tag_id) REFERENCES public.tags(id) ON DELETE CASCADE;


--
-- Name: display_ad_events fk_rails_c692cbd6e1; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.display_ad_events
    ADD CONSTRAINT fk_rails_c692cbd6e1 FOREIGN KEY (user_id) REFERENCES public.users(id) ON DELETE CASCADE;


--
-- Name: buffer_updates fk_rails_c8c6d97c30; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.buffer_updates
    ADD CONSTRAINT fk_rails_c8c6d97c30 FOREIGN KEY (composer_user_id) REFERENCES public.users(id) ON DELETE SET NULL;


--
-- Name: display_ads fk_rails_ca571cb23e; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.display_ads
    ADD CONSTRAINT fk_rails_ca571cb23e FOREIGN KEY (organization_id) REFERENCES public.organizations(id) ON DELETE CASCADE;


--
-- Name: tags fk_rails_d11c10a859; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.tags
    ADD CONSTRAINT fk_rails_d11c10a859 FOREIGN KEY (badge_id) REFERENCES public.badges(id) ON DELETE SET NULL;


--
-- Name: user_blocks fk_rails_d1bf232861; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.user_blocks
    ADD CONSTRAINT fk_rails_d1bf232861 FOREIGN KEY (blocker_id) REFERENCES public.users(id);


--
-- Name: podcast_episode_appearances fk_rails_d9250101ef; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.podcast_episode_appearances
    ADD CONSTRAINT fk_rails_d9250101ef FOREIGN KEY (podcast_episode_id) REFERENCES public.podcast_episodes(id);


--
-- Name: badge_achievements fk_rails_da1af2d63c; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.badge_achievements
    ADD CONSTRAINT fk_rails_da1af2d63c FOREIGN KEY (rewarder_id) REFERENCES public.users(id) ON DELETE SET NULL;


--
-- Name: ahoy_visits fk_rails_db648022ad; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.ahoy_visits
    ADD CONSTRAINT fk_rails_db648022ad FOREIGN KEY (user_id) REFERENCES public.users(id) ON DELETE CASCADE;


--
-- Name: profile_fields fk_rails_df1b1bea83; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.profile_fields
    ADD CONSTRAINT fk_rails_df1b1bea83 FOREIGN KEY (profile_field_group_id) REFERENCES public.profile_field_groups(id);


--
-- Name: buffer_updates fk_rails_dfc43a0422; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.buffer_updates
    ADD CONSTRAINT fk_rails_dfc43a0422 FOREIGN KEY (approver_user_id) REFERENCES public.users(id) ON DELETE SET NULL;


--
-- Name: profiles fk_rails_e424190865; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.profiles
    ADD CONSTRAINT fk_rails_e424190865 FOREIGN KEY (user_id) REFERENCES public.users(id) ON DELETE CASCADE;


--
-- Name: feedback_messages fk_rails_e81fc50c33; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.feedback_messages
    ADD CONSTRAINT fk_rails_e81fc50c33 FOREIGN KEY (affected_id) REFERENCES public.users(id) ON DELETE SET NULL;


--
-- Name: tag_adjustments fk_rails_e8f5a32807; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.tag_adjustments
    ADD CONSTRAINT fk_rails_e8f5a32807 FOREIGN KEY (user_id) REFERENCES public.users(id) ON DELETE CASCADE;


--
-- Name: ahoy_messages fk_rails_eb7709e291; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.ahoy_messages
    ADD CONSTRAINT fk_rails_eb7709e291 FOREIGN KEY (feedback_message_id) REFERENCES public.feedback_messages(id) ON DELETE SET NULL;


--
-- Name: users_roles fk_rails_eb7b4658f8; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.users_roles
    ADD CONSTRAINT fk_rails_eb7b4658f8 FOREIGN KEY (role_id) REFERENCES public.roles(id) ON DELETE CASCADE;


--
-- Name: oauth_access_tokens fk_rails_ee63f25419; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.oauth_access_tokens
    ADD CONSTRAINT fk_rails_ee63f25419 FOREIGN KEY (resource_owner_id) REFERENCES public.users(id);


--
-- Name: ahoy_events fk_rails_f1ed9fc4a0; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.ahoy_events
    ADD CONSTRAINT fk_rails_f1ed9fc4a0 FOREIGN KEY (user_id) REFERENCES public.users(id) ON DELETE CASCADE;


--
-- Name: email_authorizations fk_rails_faf7e663d1; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.email_authorizations
    ADD CONSTRAINT fk_rails_faf7e663d1 FOREIGN KEY (user_id) REFERENCES public.users(id) ON DELETE CASCADE;


--
-- Name: classified_listings fk_rails_fd32b9b45f; Type: FK CONSTRAINT; Schema: public; Owner: contact_webtutsplus
--

ALTER TABLE ONLY public.classified_listings
    ADD CONSTRAINT fk_rails_fd32b9b45f FOREIGN KEY (classified_listing_category_id) REFERENCES public.classified_listing_categories(id);


--
-- PostgreSQL database dump complete
--

