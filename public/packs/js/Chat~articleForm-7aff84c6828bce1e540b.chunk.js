(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["Chat~articleForm"],{

/***/ "./app/javascript/article-form/actions.js":
/*!************************************************!*\
  !*** ./app/javascript/article-form/actions.js ***!
  \************************************************/
/*! exports provided: previewArticle, getArticle, submitArticle, generateMainImage, processImageUpload */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"previewArticle\", function() { return previewArticle; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getArticle\", function() { return getArticle; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"submitArticle\", function() { return submitArticle; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"generateMainImage\", function() { return generateMainImage; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"processImageUpload\", function() { return processImageUpload; });\n/* harmony import */ var _packs_validateFileInputs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../packs/validateFileInputs */ \"./app/javascript/packs/validateFileInputs.js\");\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\nfunction previewArticle(payload, successCb, failureCb) {\n  fetch('/articles/preview', {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'X-CSRF-Token': window.csrfToken,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      article_body: payload\n    }),\n    credentials: 'same-origin'\n  }).then(function (response) {\n    return response.json();\n  }).then(successCb)[\"catch\"](failureCb);\n}\nfunction getArticle() {}\n\nfunction processPayload(payload) {\n  var previewShowing = payload.previewShowing,\n      helpShowing = payload.helpShowing,\n      previewResponse = payload.previewResponse,\n      helpHTML = payload.helpHTML,\n      imageManagementShowing = payload.imageManagementShowing,\n      moreConfigShowing = payload.moreConfigShowing,\n      errors = payload.errors,\n      neededPayload = _objectWithoutProperties(payload, [\"previewShowing\", \"helpShowing\", \"previewResponse\", \"helpHTML\", \"imageManagementShowing\", \"moreConfigShowing\", \"errors\"]);\n\n  return neededPayload;\n}\n\nfunction submitArticle(payload, clearStorage, errorCb, failureCb) {\n  var method = payload.id ? 'PUT' : 'POST';\n  var url = payload.id ? \"/articles/\".concat(payload.id) : '/articles';\n  fetch(url, {\n    method: method,\n    headers: {\n      Accept: 'application/json',\n      'X-CSRF-Token': window.csrfToken,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      article: processPayload(payload)\n    }),\n    credentials: 'same-origin'\n  }).then(function (response) {\n    return response.json();\n  }).then(function (response) {\n    if (response.current_state_path) {\n      clearStorage();\n      window.location.replace(response.current_state_path);\n    } else {\n      // If there is an error and the method is POST, we know they are trying to publish.\n      errorCb(response, method === 'POST');\n    }\n  })[\"catch\"](failureCb);\n}\n\nfunction generateUploadFormdata(payload) {\n  var token = window.csrfToken;\n  var formData = new FormData();\n  formData.append('authenticity_token', token);\n  Object.entries(payload.image).forEach(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        _ = _ref2[0],\n        value = _ref2[1];\n\n    return formData.append('image[]', value);\n  });\n  return formData;\n}\n\nfunction generateMainImage(payload, successCb, failureCb) {\n  fetch('/image_uploads', {\n    method: 'POST',\n    headers: {\n      'X-CSRF-Token': window.csrfToken\n    },\n    body: generateUploadFormdata(payload),\n    credentials: 'same-origin'\n  }).then(function (response) {\n    return response.json();\n  }).then(function (json) {\n    if (json.error) {\n      throw new Error(json.error);\n    }\n\n    var links = json.links;\n    var image = payload.image;\n    return successCb({\n      links: links,\n      image: image\n    });\n  })[\"catch\"](failureCb);\n}\n/**\n * Processes images for upload.\n *\n * @param {FileList} images Images to be uploaded.\n * @param {Function} handleImageSuccess The handler that runs when the image is uploaded successfully.\n * @param {Function} handleImageFailure The handler that runs when the image upload fails.\n */\n\nfunction processImageUpload(images, handleImageSuccess, handleImageFailure) {\n  // Currently only one image is supported for upload.\n  if (images.length > 0 && Object(_packs_validateFileInputs__WEBPACK_IMPORTED_MODULE_0__[\"validateFileInputs\"])()) {\n    var payload = {\n      image: images\n    };\n    generateMainImage(payload, handleImageSuccess, handleImageFailure);\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./app/javascript/article-form/actions.js\n");

/***/ }),

/***/ "./app/javascript/packs/validateFileInputs.js":
/*!****************************************************!*\
  !*** ./app/javascript/packs/validateFileInputs.js ***!
  \****************************************************/
/*! exports provided: validateFileInputs */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"validateFileInputs\", function() { return validateFileInputs; });\n/**\n * @file Manages logic to validate file uploads client-side. In general, the\n * validations work by looping over input form fields with a type of file and\n * checking the size and format of the files upload by the user.\n */\n\n/**\n * An object containing the top level MIME type as the key and the max file\n * size in MB for the value. To use a different value than these defaults,\n * simply add a data-max-file-mb attribute to the input form field with the\n * max file size in MB. If that attribute is found, it takes priority over these\n * defaults.\n *\n * @constant {Object.<string, number>}\n */\nvar MAX_FILE_SIZE_MB = Object.freeze({\n  image: 25,\n  video: 50\n});\n/**\n * Permitted file types using the top level MIME type (i.e. image for\n * image/png). To specify permitted file types, simply add a\n * data-permitted-file-types attribute to the input form field as an Array of\n * strings specifying the top level MIME types that are permitted.\n *\n * @constant {string[]}\n */\n\nvar PERMITTED_FILE_TYPES = ['image'];\n/**\n * The maximum length of the file name to prevent errors on the backend when a\n * file name is too long.\n *\n * @constant {number}\n */\n\nvar MAX_FILE_NAME_LENGTH = 250;\n/**\n * Removes any pre-existing error messages from the DOM related to file\n * validation.\n *\n * @param {HTMLElement} fileInput - An input form field with type of file\n */\n\nfunction removeErrorMessage(fileInput) {\n  var errorMessage = fileInput.parentNode.querySelector('div.file-upload-error');\n\n  if (errorMessage) {\n    errorMessage.remove();\n  }\n}\n/**\n * Adds error messages in the form of a div with red text.\n *\n * @param {HTMLElement} fileInput - An input form field with type of file\n * @param {string} msg - The error message to be displayed to the user\n *\n * @returns {HTMLElement} The error element that was added to the DOM\n */\n\n\nfunction addErrorMessage(fileInput, msg) {\n  var fileInputField = fileInput;\n  var error = document.createElement('div');\n  error.style.color = 'red';\n  error.innerHTML = msg;\n  error.classList.add('file-upload-error');\n  fileInputField.parentNode.append(error);\n}\n/**\n * Handles errors for files that are too large.\n *\n * @param {object} fileSizeErrorHandler - A custom function to be ran after the default error handling\n * @param {HTMLElement} fileInput - An input form field with type of file\n * @param {number} fileSizeMb - The size of the file in MB\n * @param {?number} maxFileSizeMb - The max file size limit in MB\n */\n\n\nfunction handleFileSizeError(fileSizeErrorHandler, fileInput, fileSizeMb, maxFileSizeMb) {\n  var fileInputField = fileInput;\n  fileInputField.value = null;\n\n  if (fileSizeErrorHandler) {\n    fileSizeErrorHandler();\n  } else {\n    var errorMessage = \"File size too large (\".concat(fileSizeMb, \" MB).\"); // If a user uploads a file type that we haven't defined a max size limit for then maxFileSizeMb\n    // could be NaN\n\n    if (maxFileSizeMb >= 0) {\n      errorMessage += \" The limit is \".concat(maxFileSizeMb, \" MB.\");\n    }\n\n    addErrorMessage(fileInput, errorMessage);\n  }\n}\n/**\n * Handles errors for files that are not a valid format.\n *\n * @param {object} fileSizeErrorHandler - A custom function to be ran after the default error handling\n * @param {HTMLElement} fileInput - An input form field with type of file\n * @param {string} fileType - The top level file type (i.e. image for image/png)\n * @param {string[]} permittedFileTypes - The top level file types (i.e. image for image/png) that are permitted\n */\n\n\nfunction handleFileTypeError(fileTypeErrorHandler, fileInput, fileType, permittedFileTypes) {\n  var fileInputField = fileInput;\n  fileInputField.value = null;\n\n  if (fileTypeErrorHandler) {\n    fileTypeErrorHandler();\n  } else {\n    var errorMessage = \"Invalid file format (\".concat(fileType, \"). Only \").concat(permittedFileTypes.join(', '), \" files are permitted.\");\n    addErrorMessage(fileInput, errorMessage);\n  }\n}\n/**\n * Handles errors for files with names that are too long.\n *\n * @param {object} fileNameLengthErrorHandler - A custom function to be ran after the default error handling\n * @param {HTMLElement} fileInput - An input form field with type of file\n * @param {number} maxFileNameLength - The max number of characters permitted for a file name\n */\n\n\nfunction handleFileNameLengthError(fileNameLengthErrorHandler, fileInput, maxFileNameLength) {\n  var fileInputField = fileInput;\n  fileInputField.value = null;\n\n  if (fileNameLengthErrorHandler) {\n    fileNameLengthErrorHandler();\n  } else {\n    var errorMessage = \"File name is too long. It can't be longer than \".concat(maxFileNameLength, \" characters.\");\n    addErrorMessage(fileInput, errorMessage);\n  }\n}\n/**\n * Validates the file size and handles the error if it's invalid.\n *\n * @external File\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/File File}\n *\n * @param {File} file - The file attached by the user\n * @param {string} fileType - The top level file type (i.e. image for image/png)\n * @param {HTMLElement} fileInput - An input form field with type of file\n *\n * @returns {Boolean} Returns false if the file is too big. Otherwise, returns true.\n */\n\n\nfunction validateFileSize(file, fileType, fileInput) {\n  var maxFileSizeMb = fileInput.dataset.maxFileSizeMb;\n  var fileSizeErrorHandler = fileInput.dataset.fileSizeErrorHandler;\n  var fileSizeMb = (file.size / (1024 * 1024)).toFixed(2);\n  maxFileSizeMb = Number(maxFileSizeMb || MAX_FILE_SIZE_MB[fileType]);\n  var isValidFileSize = fileSizeMb <= maxFileSizeMb;\n\n  if (!isValidFileSize) {\n    handleFileSizeError(fileSizeErrorHandler, fileInput, fileSizeMb, maxFileSizeMb);\n  }\n\n  return isValidFileSize;\n}\n/**\n * Validates the file type and handles the error if it's invalid.\n *\n * @external File\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/File File}\n *\n * @param {File} file - The file attached by the user\n * @param {string} fileType - The top level file type (i.e. image for image/png)\n * @param {HTMLElement} fileInput - An input form field with type of file\n *\n * @returns {Boolean} Returns false if the files is an invalid format. Otherwise, returns true.\n */\n\n\nfunction validateFileType(file, fileType, fileInput) {\n  var permittedFileTypes = fileInput.dataset.permittedFileTypes;\n\n  if (permittedFileTypes) {\n    permittedFileTypes = JSON.parse(permittedFileTypes);\n  }\n\n  permittedFileTypes = permittedFileTypes || PERMITTED_FILE_TYPES;\n  var fileTypeErrorHandler = fileInput.dataset.fileTypeErrorHandler;\n  var isValidFileType = permittedFileTypes.includes(fileType);\n\n  if (!isValidFileType) {\n    handleFileTypeError(fileTypeErrorHandler, fileInput, fileType, permittedFileTypes);\n  }\n\n  return isValidFileType;\n}\n/**\n * Validates the length of the file name and handles the error if it's invalid.\n *\n * @external File\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/File File}\n *\n * @param {File} file - The file attached by the user\n * @param {HTMLElement} fileInput - An input form field with type of file\n *\n * @returns {Boolean} Returns false if the file name is too long. Otherwise, returns true.\n */\n\n\nfunction validateFileNameLength(file, fileInput) {\n  var maxFileNameLength = fileInput.dataset.maxFileNameLength;\n  maxFileNameLength = Number(maxFileNameLength || MAX_FILE_NAME_LENGTH);\n  var fileNameLengthErrorHandler = fileInput.dataset.fileNameLengthErrorHandler;\n  var isValidFileNameLength = file.name.length <= maxFileNameLength;\n\n  if (!isValidFileNameLength) {\n    handleFileNameLengthError(fileNameLengthErrorHandler, fileInput, maxFileNameLength);\n  }\n\n  return isValidFileNameLength;\n}\n/**\n * This is the core function to handle validations of uploaded files. It loops\n * through all the uploaded files for the given fileInput and checks the file\n * size, file format, and file name length. If a file fails a validation, the\n * error is handled.\n *\n * @param {HTMLElement} fileInput - An input form field with type of file\n *\n * @returns {Boolean} Returns false if any files failed validations. Otherwise, returns true.\n */\n\n\nfunction validateFileInput(fileInput) {\n  var isValidFileInput = true;\n  removeErrorMessage(fileInput);\n  var files = Array.from(fileInput.files);\n\n  for (var i = 0; i < files.length; i += 1) {\n    var file = files[i];\n    var fileType = file.type.split('/')[0];\n    var isValidFileSize = validateFileSize(file, fileType, fileInput);\n\n    if (!isValidFileSize) {\n      isValidFileInput = false;\n      break;\n    }\n\n    var isValidFileType = validateFileType(file, fileType, fileInput);\n\n    if (!isValidFileType) {\n      isValidFileInput = false;\n      break;\n    }\n\n    var isValidFileNameLength = validateFileNameLength(file, fileInput);\n\n    if (!isValidFileNameLength) {\n      isValidFileInput = false;\n      break;\n    }\n  }\n\n  return isValidFileInput;\n}\n/**\n * This function is designed to be exported in areas where we are doing more\n * custom implementations of file uploading using Preact. It can then be used\n * in Preact event handlers. It loops through all file input fields on the DOM\n * and validates any attached files.\n *\n * @returns {Boolean} Returns false if any files failed validations. Otherwise, returns true.\n */\n\n\nfunction validateFileInputs() {\n  var validFileInputs = true;\n  var fileInputs = document.querySelectorAll('input[type=\"file\"]');\n\n  for (var i = 0; i < fileInputs.length; i += 1) {\n    var fileInput = fileInputs[i];\n    var validFileInput = validateFileInput(fileInput);\n\n    if (!validFileInput) {\n      validFileInputs = false;\n      break;\n    }\n  }\n\n  return validFileInputs;\n} // This is written so that it works automagically by just including this pack\n// in a view.\n\nvar fileInputs = document.querySelectorAll('input[type=\"file\"]');\nfileInputs.forEach(function (fileInput) {\n  fileInput.addEventListener('change', function () {\n    validateFileInput(fileInput);\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./app/javascript/packs/validateFileInputs.js\n");

/***/ }),

/***/ "./app/javascript/utilities/dragAndDrop.js":
/*!*************************************************!*\
  !*** ./app/javascript/utilities/dragAndDrop.js ***!
  \*************************************************/
/*! exports provided: useDragAndDrop, DragAndDropZone */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"useDragAndDrop\", function() { return useDragAndDrop; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DragAndDropZone\", function() { return DragAndDropZone; });\n/* harmony import */ var preact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! preact */ \"./node_modules/preact/dist/preact.module.js\");\n/* harmony import */ var preact_hooks__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! preact/hooks */ \"./node_modules/preact/hooks/dist/hooks.module.js\");\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n/**\n * A custom Preact hook used to attach drag and drop functionality to a DOM element.\n * @example\n * function SomeComponent(props) {\n *   const { setElement } = useDragAndDrop({\n *     onDrop: someDropHandler,\n *     onDragOver: someDragOverHandler,\n *     onDragExit: someDragExitHandler\n *   });\n *\n *  const someDomRef = useRef(null);\n *\n *  useEffect(() => {\n *    if (someDomRef.current) {\n *      setElement(someDomRef.current);\n *    }\n *  });\n *\n *  return <textarea ref={someDomRef}>I'm a text area</textarea>;\n * };\n *\n * @param {object} props\n * @param {Function} props.onDragOver The handler that runs when the dragover event is fired.\n * @param {Function} props.onDragExit The handler that runs when the dragexit/dragleave events are fired.\n * @param {Function} props.onDrop The handler that runs when the drop event is fired.\n */\n\nfunction useDragAndDrop(_ref) {\n  var onDragOver = _ref.onDragOver,\n      onDragExit = _ref.onDragExit,\n      onDrop = _ref.onDrop;\n\n  var _useState = Object(preact_hooks__WEBPACK_IMPORTED_MODULE_1__[\"useState\"])(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      element = _useState2[0],\n      setElement = _useState2[1];\n\n  Object(preact_hooks__WEBPACK_IMPORTED_MODULE_1__[\"useEffect\"])(function () {\n    if (!element) {\n      return;\n    }\n\n    var noDragAndDropHandler = function noDragAndDropHandler(event) {\n      return event.preventDefault();\n    };\n\n    document.addEventListener('dragover', noDragAndDropHandler);\n    document.addEventListener('drop', noDragAndDropHandler);\n    element.addEventListener('dragover', onDragOver);\n    element.addEventListener('dragexit', onDragExit);\n    element.addEventListener('dragleave', onDragExit);\n    element.addEventListener('drop', onDrop);\n    return function () {\n      document.removeEventListener('dragover', noDragAndDropHandler);\n      document.removeEventListener('drop', noDragAndDropHandler);\n      element.removeEventListener('dragover', onDragOver);\n      element.removeEventListener('dragexit', onDragExit);\n      element.removeEventListener('dragleave', onDragExit);\n      element.removeEventListener('drop', onDrop);\n    };\n  }, [element, onDragOver, onDragExit, onDrop]);\n  return {\n    setElement: setElement\n  };\n}\n/**\n * Registers drag and drop events for the child element that is wrapped by this component.\n *\n * @example\n * <DragAndDropZone\n *     onDragOver={someDragOverHandler}\n *     onDragExit={someDragExitHandler}\n *     onDrop={someDropHandler}\n *     >\n *    <textarea>I'm a text area</textarea>\n * <DragAndDropZone>\n *\n * @param {object} props\n * @param {JSX.Element} props.children The React element that will register it's DOM counterpart with drag and drop events.\n * @param {Function} props.onDragOver The handler that runs when the dragover event is fired.\n * @param {Function} props.onDragExit The handler that runs when the dragexit/dragleave events are fired.\n * @param {Function} props.onDrop The handler that runs when the drop event is fired.\n */\n\nfunction DragAndDropZone(_ref2) {\n  var children = _ref2.children,\n      onDragOver = _ref2.onDragOver,\n      onDragExit = _ref2.onDragExit,\n      onDrop = _ref2.onDrop;\n\n  if (!children) {\n    throw new Error('The <DragAndDropZone /> component children prop is null or was not specified.');\n  }\n\n  var _useDragAndDrop = useDragAndDrop({\n    onDragOver: onDragOver,\n    onDragExit: onDragExit,\n    onDrop: onDrop\n  }),\n      setElement = _useDragAndDrop.setElement;\n\n  var dropZoneRef = Object(preact_hooks__WEBPACK_IMPORTED_MODULE_1__[\"useRef\"])(null);\n\n  if (dropZoneRef.current) {\n    setElement(dropZoneRef.current);\n  }\n\n  return Object(preact__WEBPACK_IMPORTED_MODULE_0__[\"cloneElement\"])(children, {\n    ref: dropZoneRef\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvamF2YXNjcmlwdC91dGlsaXRpZXMvZHJhZ0FuZERyb3AuanM/YjViMyJdLCJuYW1lcyI6WyJ1c2VEcmFnQW5kRHJvcCIsIm9uRHJhZ092ZXIiLCJvbkRyYWdFeGl0Iiwib25Ecm9wIiwidXNlU3RhdGUiLCJlbGVtZW50Iiwic2V0RWxlbWVudCIsInVzZUVmZmVjdCIsIm5vRHJhZ0FuZERyb3BIYW5kbGVyIiwiZXZlbnQiLCJwcmV2ZW50RGVmYXVsdCIsImRvY3VtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJEcmFnQW5kRHJvcFpvbmUiLCJjaGlsZHJlbiIsIkVycm9yIiwiZHJvcFpvbmVSZWYiLCJ1c2VSZWYiLCJjdXJyZW50IiwiY2xvbmVFbGVtZW50IiwicmVmIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNPLFNBQVNBLGNBQVQsT0FBNEQ7QUFBQSxNQUFsQ0MsVUFBa0MsUUFBbENBLFVBQWtDO0FBQUEsTUFBdEJDLFVBQXNCLFFBQXRCQSxVQUFzQjtBQUFBLE1BQVZDLE1BQVUsUUFBVkEsTUFBVTs7QUFBQSxrQkFDbkNDLDZEQUFRLENBQUMsSUFBRCxDQUQyQjtBQUFBO0FBQUEsTUFDMURDLE9BRDBEO0FBQUEsTUFDakRDLFVBRGlEOztBQUdqRUMsZ0VBQVMsQ0FBQyxZQUFNO0FBQ2QsUUFBSSxDQUFDRixPQUFMLEVBQWM7QUFDWjtBQUNEOztBQUVELFFBQU1HLG9CQUFvQixHQUFHLFNBQXZCQSxvQkFBdUIsQ0FBQ0MsS0FBRDtBQUFBLGFBQVdBLEtBQUssQ0FBQ0MsY0FBTixFQUFYO0FBQUEsS0FBN0I7O0FBRUFDLFlBQVEsQ0FBQ0MsZ0JBQVQsQ0FBMEIsVUFBMUIsRUFBc0NKLG9CQUF0QztBQUNBRyxZQUFRLENBQUNDLGdCQUFULENBQTBCLE1BQTFCLEVBQWtDSixvQkFBbEM7QUFFQUgsV0FBTyxDQUFDTyxnQkFBUixDQUF5QixVQUF6QixFQUFxQ1gsVUFBckM7QUFDQUksV0FBTyxDQUFDTyxnQkFBUixDQUF5QixVQUF6QixFQUFxQ1YsVUFBckM7QUFDQUcsV0FBTyxDQUFDTyxnQkFBUixDQUF5QixXQUF6QixFQUFzQ1YsVUFBdEM7QUFDQUcsV0FBTyxDQUFDTyxnQkFBUixDQUF5QixNQUF6QixFQUFpQ1QsTUFBakM7QUFFQSxXQUFPLFlBQU07QUFDWFEsY0FBUSxDQUFDRSxtQkFBVCxDQUE2QixVQUE3QixFQUF5Q0wsb0JBQXpDO0FBQ0FHLGNBQVEsQ0FBQ0UsbUJBQVQsQ0FBNkIsTUFBN0IsRUFBcUNMLG9CQUFyQztBQUVBSCxhQUFPLENBQUNRLG1CQUFSLENBQTRCLFVBQTVCLEVBQXdDWixVQUF4QztBQUNBSSxhQUFPLENBQUNRLG1CQUFSLENBQTRCLFVBQTVCLEVBQXdDWCxVQUF4QztBQUNBRyxhQUFPLENBQUNRLG1CQUFSLENBQTRCLFdBQTVCLEVBQXlDWCxVQUF6QztBQUNBRyxhQUFPLENBQUNRLG1CQUFSLENBQTRCLE1BQTVCLEVBQW9DVixNQUFwQztBQUNELEtBUkQ7QUFTRCxHQXhCUSxFQXdCTixDQUFDRSxPQUFELEVBQVVKLFVBQVYsRUFBc0JDLFVBQXRCLEVBQWtDQyxNQUFsQyxDQXhCTSxDQUFUO0FBMEJBLFNBQU87QUFBRUcsY0FBVSxFQUFWQTtBQUFGLEdBQVA7QUFDRDtBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDTyxTQUFTUSxlQUFULFFBQXVFO0FBQUEsTUFBNUNDLFFBQTRDLFNBQTVDQSxRQUE0QztBQUFBLE1BQWxDZCxVQUFrQyxTQUFsQ0EsVUFBa0M7QUFBQSxNQUF0QkMsVUFBc0IsU0FBdEJBLFVBQXNCO0FBQUEsTUFBVkMsTUFBVSxTQUFWQSxNQUFVOztBQUM1RSxNQUFJLENBQUNZLFFBQUwsRUFBZTtBQUNiLFVBQU0sSUFBSUMsS0FBSixDQUNKLCtFQURJLENBQU47QUFHRDs7QUFMMkUsd0JBT3JEaEIsY0FBYyxDQUFDO0FBQUVDLGNBQVUsRUFBVkEsVUFBRjtBQUFjQyxjQUFVLEVBQVZBLFVBQWQ7QUFBMEJDLFVBQU0sRUFBTkE7QUFBMUIsR0FBRCxDQVB1QztBQUFBLE1BT3BFRyxVQVBvRSxtQkFPcEVBLFVBUG9FOztBQVE1RSxNQUFNVyxXQUFXLEdBQUdDLDJEQUFNLENBQUMsSUFBRCxDQUExQjs7QUFFQSxNQUFJRCxXQUFXLENBQUNFLE9BQWhCLEVBQXlCO0FBQ3ZCYixjQUFVLENBQUNXLFdBQVcsQ0FBQ0UsT0FBYixDQUFWO0FBQ0Q7O0FBRUQsU0FBT0MsMkRBQVksQ0FBQ0wsUUFBRCxFQUFXO0FBQzVCTSxPQUFHLEVBQUVKO0FBRHVCLEdBQVgsQ0FBbkI7QUFHRCIsImZpbGUiOiIuL2FwcC9qYXZhc2NyaXB0L3V0aWxpdGllcy9kcmFnQW5kRHJvcC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNsb25lRWxlbWVudCB9IGZyb20gJ3ByZWFjdCc7XG5pbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVJlZiwgdXNlU3RhdGUgfSBmcm9tICdwcmVhY3QvaG9va3MnO1xuXG4vKipcbiAqIEEgY3VzdG9tIFByZWFjdCBob29rIHVzZWQgdG8gYXR0YWNoIGRyYWcgYW5kIGRyb3AgZnVuY3Rpb25hbGl0eSB0byBhIERPTSBlbGVtZW50LlxuICogQGV4YW1wbGVcbiAqIGZ1bmN0aW9uIFNvbWVDb21wb25lbnQocHJvcHMpIHtcbiAqICAgY29uc3QgeyBzZXRFbGVtZW50IH0gPSB1c2VEcmFnQW5kRHJvcCh7XG4gKiAgICAgb25Ecm9wOiBzb21lRHJvcEhhbmRsZXIsXG4gKiAgICAgb25EcmFnT3Zlcjogc29tZURyYWdPdmVySGFuZGxlcixcbiAqICAgICBvbkRyYWdFeGl0OiBzb21lRHJhZ0V4aXRIYW5kbGVyXG4gKiAgIH0pO1xuICpcbiAqICBjb25zdCBzb21lRG9tUmVmID0gdXNlUmVmKG51bGwpO1xuICpcbiAqICB1c2VFZmZlY3QoKCkgPT4ge1xuICogICAgaWYgKHNvbWVEb21SZWYuY3VycmVudCkge1xuICogICAgICBzZXRFbGVtZW50KHNvbWVEb21SZWYuY3VycmVudCk7XG4gKiAgICB9XG4gKiAgfSk7XG4gKlxuICogIHJldHVybiA8dGV4dGFyZWEgcmVmPXtzb21lRG9tUmVmfT5JJ20gYSB0ZXh0IGFyZWE8L3RleHRhcmVhPjtcbiAqIH07XG4gKlxuICogQHBhcmFtIHtvYmplY3R9IHByb3BzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcm9wcy5vbkRyYWdPdmVyIFRoZSBoYW5kbGVyIHRoYXQgcnVucyB3aGVuIHRoZSBkcmFnb3ZlciBldmVudCBpcyBmaXJlZC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByb3BzLm9uRHJhZ0V4aXQgVGhlIGhhbmRsZXIgdGhhdCBydW5zIHdoZW4gdGhlIGRyYWdleGl0L2RyYWdsZWF2ZSBldmVudHMgYXJlIGZpcmVkLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcHJvcHMub25Ecm9wIFRoZSBoYW5kbGVyIHRoYXQgcnVucyB3aGVuIHRoZSBkcm9wIGV2ZW50IGlzIGZpcmVkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlRHJhZ0FuZERyb3AoeyBvbkRyYWdPdmVyLCBvbkRyYWdFeGl0LCBvbkRyb3AgfSkge1xuICBjb25zdCBbZWxlbWVudCwgc2V0RWxlbWVudF0gPSB1c2VTdGF0ZShudWxsKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICghZWxlbWVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IG5vRHJhZ0FuZERyb3BIYW5kbGVyID0gKGV2ZW50KSA9PiBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignZHJhZ292ZXInLCBub0RyYWdBbmREcm9wSGFuZGxlcik7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignZHJvcCcsIG5vRHJhZ0FuZERyb3BIYW5kbGVyKTtcblxuICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignZHJhZ292ZXInLCBvbkRyYWdPdmVyKTtcbiAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdleGl0Jywgb25EcmFnRXhpdCk7XG4gICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdkcmFnbGVhdmUnLCBvbkRyYWdFeGl0KTtcbiAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2Ryb3AnLCBvbkRyb3ApO1xuXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2RyYWdvdmVyJywgbm9EcmFnQW5kRHJvcEhhbmRsZXIpO1xuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignZHJvcCcsIG5vRHJhZ0FuZERyb3BIYW5kbGVyKTtcblxuICAgICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdkcmFnb3ZlcicsIG9uRHJhZ092ZXIpO1xuICAgICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdkcmFnZXhpdCcsIG9uRHJhZ0V4aXQpO1xuICAgICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdkcmFnbGVhdmUnLCBvbkRyYWdFeGl0KTtcbiAgICAgIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignZHJvcCcsIG9uRHJvcCk7XG4gICAgfTtcbiAgfSwgW2VsZW1lbnQsIG9uRHJhZ092ZXIsIG9uRHJhZ0V4aXQsIG9uRHJvcF0pO1xuXG4gIHJldHVybiB7IHNldEVsZW1lbnQgfTtcbn1cblxuLyoqXG4gKiBSZWdpc3RlcnMgZHJhZyBhbmQgZHJvcCBldmVudHMgZm9yIHRoZSBjaGlsZCBlbGVtZW50IHRoYXQgaXMgd3JhcHBlZCBieSB0aGlzIGNvbXBvbmVudC5cbiAqXG4gKiBAZXhhbXBsZVxuICogPERyYWdBbmREcm9wWm9uZVxuICogICAgIG9uRHJhZ092ZXI9e3NvbWVEcmFnT3ZlckhhbmRsZXJ9XG4gKiAgICAgb25EcmFnRXhpdD17c29tZURyYWdFeGl0SGFuZGxlcn1cbiAqICAgICBvbkRyb3A9e3NvbWVEcm9wSGFuZGxlcn1cbiAqICAgICA+XG4gKiAgICA8dGV4dGFyZWE+SSdtIGEgdGV4dCBhcmVhPC90ZXh0YXJlYT5cbiAqIDxEcmFnQW5kRHJvcFpvbmU+XG4gKlxuICogQHBhcmFtIHtvYmplY3R9IHByb3BzXG4gKiBAcGFyYW0ge0pTWC5FbGVtZW50fSBwcm9wcy5jaGlsZHJlbiBUaGUgUmVhY3QgZWxlbWVudCB0aGF0IHdpbGwgcmVnaXN0ZXIgaXQncyBET00gY291bnRlcnBhcnQgd2l0aCBkcmFnIGFuZCBkcm9wIGV2ZW50cy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByb3BzLm9uRHJhZ092ZXIgVGhlIGhhbmRsZXIgdGhhdCBydW5zIHdoZW4gdGhlIGRyYWdvdmVyIGV2ZW50IGlzIGZpcmVkLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcHJvcHMub25EcmFnRXhpdCBUaGUgaGFuZGxlciB0aGF0IHJ1bnMgd2hlbiB0aGUgZHJhZ2V4aXQvZHJhZ2xlYXZlIGV2ZW50cyBhcmUgZmlyZWQuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcm9wcy5vbkRyb3AgVGhlIGhhbmRsZXIgdGhhdCBydW5zIHdoZW4gdGhlIGRyb3AgZXZlbnQgaXMgZmlyZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBEcmFnQW5kRHJvcFpvbmUoeyBjaGlsZHJlbiwgb25EcmFnT3Zlciwgb25EcmFnRXhpdCwgb25Ecm9wIH0pIHtcbiAgaWYgKCFjaGlsZHJlbikge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdUaGUgPERyYWdBbmREcm9wWm9uZSAvPiBjb21wb25lbnQgY2hpbGRyZW4gcHJvcCBpcyBudWxsIG9yIHdhcyBub3Qgc3BlY2lmaWVkLicsXG4gICAgKTtcbiAgfVxuXG4gIGNvbnN0IHsgc2V0RWxlbWVudCB9ID0gdXNlRHJhZ0FuZERyb3AoeyBvbkRyYWdPdmVyLCBvbkRyYWdFeGl0LCBvbkRyb3AgfSk7XG4gIGNvbnN0IGRyb3Bab25lUmVmID0gdXNlUmVmKG51bGwpO1xuXG4gIGlmIChkcm9wWm9uZVJlZi5jdXJyZW50KSB7XG4gICAgc2V0RWxlbWVudChkcm9wWm9uZVJlZi5jdXJyZW50KTtcbiAgfVxuXG4gIHJldHVybiBjbG9uZUVsZW1lbnQoY2hpbGRyZW4sIHtcbiAgICByZWY6IGRyb3Bab25lUmVmLFxuICB9KTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./app/javascript/utilities/dragAndDrop.js\n");

/***/ })

}]);