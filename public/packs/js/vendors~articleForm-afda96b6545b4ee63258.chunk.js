(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["vendors~articleForm"],{

/***/ "./node_modules/linkstate/dist/linkstate.module.js":
/*!*********************************************************!*\
  !*** ./node_modules/linkstate/dist/linkstate.module.js ***!
  \*********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nvar t,r=(function(t,r){t.exports=function(t,r,e,n,o){for(r=r.split?r.split(\".\"):r,n=0;n<r.length;n++)t=t?t[r[n]]:o;return t===o?e:t}}(t={path:void 0,exports:{},require:function(t,r){return function(){throw new Error(\"Dynamic requires are not currently supported by @rollup/plugin-commonjs\")}()}}),t.exports);/* harmony default export */ __webpack_exports__[\"default\"] = (function(t,e,n){var o=e.split(\".\"),u=t.__lsc||(t.__lsc={});return u[e+n]||(u[e+n]=function(e){for(var u=e&&e.target||this,i={},c=i,s=\"string\"==typeof n?r(e,n):u&&u.nodeName?u.type.match(/^che|rad/)?u.checked:u.value:e,a=0;a<o.length-1;a++)c=c[o[a]]||(c[o[a]]=!a&&t.state[o[a]]||{});c[o[a]]=s,t.setState(i)})});\n//# sourceMappingURL=linkstate.module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbGlua3N0YXRlL2Rpc3QvbGlua3N0YXRlLm1vZHVsZS5qcz9iMjlmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUEsdUJBQXVCLDhCQUE4QixpQ0FBaUMsV0FBVyxrQkFBa0Isa0JBQWtCLElBQUksc0JBQXNCLHVCQUF1QixrQkFBa0IsMkZBQTJGLElBQUksYUFBNEIsK0VBQWdCLHlDQUF5QyxFQUFFLG1DQUFtQyxnQ0FBZ0MsZ0dBQWdHLGFBQWEsNkNBQTZDLEVBQUUsd0JBQXdCLEVBQUU7QUFDdm5CIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2xpbmtzdGF0ZS9kaXN0L2xpbmtzdGF0ZS5tb2R1bGUuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgdCxyPShmdW5jdGlvbih0LHIpe3QuZXhwb3J0cz1mdW5jdGlvbih0LHIsZSxuLG8pe2ZvcihyPXIuc3BsaXQ/ci5zcGxpdChcIi5cIik6cixuPTA7bjxyLmxlbmd0aDtuKyspdD10P3RbcltuXV06bztyZXR1cm4gdD09PW8/ZTp0fX0odD17cGF0aDp2b2lkIDAsZXhwb3J0czp7fSxyZXF1aXJlOmZ1bmN0aW9uKHQscil7cmV0dXJuIGZ1bmN0aW9uKCl7dGhyb3cgbmV3IEVycm9yKFwiRHluYW1pYyByZXF1aXJlcyBhcmUgbm90IGN1cnJlbnRseSBzdXBwb3J0ZWQgYnkgQHJvbGx1cC9wbHVnaW4tY29tbW9uanNcIil9KCl9fSksdC5leHBvcnRzKTtleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih0LGUsbil7dmFyIG89ZS5zcGxpdChcIi5cIiksdT10Ll9fbHNjfHwodC5fX2xzYz17fSk7cmV0dXJuIHVbZStuXXx8KHVbZStuXT1mdW5jdGlvbihlKXtmb3IodmFyIHU9ZSYmZS50YXJnZXR8fHRoaXMsaT17fSxjPWkscz1cInN0cmluZ1wiPT10eXBlb2Ygbj9yKGUsbik6dSYmdS5ub2RlTmFtZT91LnR5cGUubWF0Y2goL15jaGV8cmFkLyk/dS5jaGVja2VkOnUudmFsdWU6ZSxhPTA7YTxvLmxlbmd0aC0xO2ErKyljPWNbb1thXV18fChjW29bYV1dPSFhJiZ0LnN0YXRlW29bYV1dfHx7fSk7Y1tvW2FdXT1zLHQuc2V0U3RhdGUoaSl9KX1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxpbmtzdGF0ZS5tb2R1bGUuanMubWFwXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/linkstate/dist/linkstate.module.js\n");

/***/ }),

/***/ "./node_modules/postscribe/dist/postscribe.js":
/*!****************************************************!*\
  !*** ./node_modules/postscribe/dist/postscribe.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/**\n * @file postscribe\n * @description Asynchronously write javascript, even with document.write.\n * @version v2.0.8\n * @see {@link https://krux.github.io/postscribe}\n * @license MIT\n * @author Derek Brans\n * @copyright 2016 Krux Digital, Inc\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory();\n\telse {}\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _postscribe = __webpack_require__(1);\n\t\n\tvar _postscribe2 = _interopRequireDefault(_postscribe);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tmodule.exports = _postscribe2['default'];\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\t\n\texports['default'] = postscribe;\n\t\n\tvar _writeStream = __webpack_require__(2);\n\t\n\tvar _writeStream2 = _interopRequireDefault(_writeStream);\n\t\n\tvar _utils = __webpack_require__(4);\n\t\n\tvar utils = _interopRequireWildcard(_utils);\n\t\n\tfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\t/**\n\t * A function that intentionally does nothing.\n\t */\n\tfunction doNothing() {}\n\t\n\t/**\n\t * Available options and defaults.\n\t *\n\t * @type {Object}\n\t */\n\tvar OPTIONS = {\n\t  /**\n\t   * Called when an async script has loaded.\n\t   */\n\t  afterAsync: doNothing,\n\t\n\t  /**\n\t   * Called immediately before removing from the write queue.\n\t   */\n\t  afterDequeue: doNothing,\n\t\n\t  /**\n\t   * Called sync after a stream's first thread release.\n\t   */\n\t  afterStreamStart: doNothing,\n\t\n\t  /**\n\t   * Called after writing buffered document.write calls.\n\t   */\n\t  afterWrite: doNothing,\n\t\n\t  /**\n\t   * Allows disabling the autoFix feature of prescribe\n\t   */\n\t  autoFix: true,\n\t\n\t  /**\n\t   * Called immediately before adding to the write queue.\n\t   */\n\t  beforeEnqueue: doNothing,\n\t\n\t  /**\n\t   * Called before writing a token.\n\t   *\n\t   * @param {Object} tok The token\n\t   */\n\t  beforeWriteToken: function beforeWriteToken(tok) {\n\t    return tok;\n\t  },\n\t\n\t  /**\n\t   * Called before writing buffered document.write calls.\n\t   *\n\t   * @param {String} str The string\n\t   */\n\t  beforeWrite: function beforeWrite(str) {\n\t    return str;\n\t  },\n\t\n\t  /**\n\t   * Called when evaluation is finished.\n\t   */\n\t  done: doNothing,\n\t\n\t  /**\n\t   * Called when a write results in an error.\n\t   *\n\t   * @param {Error} e The error\n\t   */\n\t  error: function error(e) {\n\t    throw new Error(e.msg);\n\t  },\n\t\n\t\n\t  /**\n\t   * Whether to let scripts w/ async attribute set fall out of the queue.\n\t   */\n\t  releaseAsync: false\n\t};\n\t\n\tvar nextId = 0;\n\tvar queue = [];\n\tvar active = null;\n\t\n\tfunction nextStream() {\n\t  var args = queue.shift();\n\t  if (args) {\n\t    var options = utils.last(args);\n\t\n\t    options.afterDequeue();\n\t    args.stream = runStream.apply(undefined, args);\n\t    options.afterStreamStart();\n\t  }\n\t}\n\t\n\tfunction runStream(el, html, options) {\n\t  active = new _writeStream2['default'](el, options);\n\t\n\t  // Identify this stream.\n\t  active.id = nextId++;\n\t  active.name = options.name || active.id;\n\t  postscribe.streams[active.name] = active;\n\t\n\t  // Override document.write.\n\t  var doc = el.ownerDocument;\n\t\n\t  var stash = {\n\t    close: doc.close,\n\t    open: doc.open,\n\t    write: doc.write,\n\t    writeln: doc.writeln\n\t  };\n\t\n\t  function _write(str) {\n\t    str = options.beforeWrite(str);\n\t    active.write(str);\n\t    options.afterWrite(str);\n\t  }\n\t\n\t  _extends(doc, {\n\t    close: doNothing,\n\t    open: doNothing,\n\t    write: function write() {\n\t      for (var _len = arguments.length, str = Array(_len), _key = 0; _key < _len; _key++) {\n\t        str[_key] = arguments[_key];\n\t      }\n\t\n\t      return _write(str.join(''));\n\t    },\n\t    writeln: function writeln() {\n\t      for (var _len2 = arguments.length, str = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n\t        str[_key2] = arguments[_key2];\n\t      }\n\t\n\t      return _write(str.join('') + '\\n');\n\t    }\n\t  });\n\t\n\t  // Override window.onerror\n\t  var oldOnError = active.win.onerror || doNothing;\n\t\n\t  // This works together with the try/catch around WriteStream::insertScript\n\t  // In modern browsers, exceptions in tag scripts go directly to top level\n\t  active.win.onerror = function (msg, url, line) {\n\t    options.error({ msg: msg + ' - ' + url + ': ' + line });\n\t    oldOnError.apply(active.win, [msg, url, line]);\n\t  };\n\t\n\t  // Write to the stream\n\t  active.write(html, function () {\n\t    // restore document.write\n\t    _extends(doc, stash);\n\t\n\t    // restore window.onerror\n\t    active.win.onerror = oldOnError;\n\t\n\t    options.done();\n\t    active = null;\n\t    nextStream();\n\t  });\n\t\n\t  return active;\n\t}\n\t\n\tfunction postscribe(el, html, options) {\n\t  if (utils.isFunction(options)) {\n\t    options = { done: options };\n\t  } else if (options === 'clear') {\n\t    queue = [];\n\t    active = null;\n\t    nextId = 0;\n\t    return;\n\t  }\n\t\n\t  options = utils.defaults(options, OPTIONS);\n\t\n\t  // id selector\n\t  if (/^#/.test(el)) {\n\t    el = window.document.getElementById(el.substr(1));\n\t  } else {\n\t    el = el.jquery ? el[0] : el;\n\t  }\n\t\n\t  var args = [el, html, options];\n\t\n\t  el.postscribe = {\n\t    cancel: function cancel() {\n\t      if (args.stream) {\n\t        args.stream.abort();\n\t      } else {\n\t        args[1] = doNothing;\n\t      }\n\t    }\n\t  };\n\t\n\t  options.beforeEnqueue(args);\n\t  queue.push(args);\n\t\n\t  if (!active) {\n\t    nextStream();\n\t  }\n\t\n\t  return el.postscribe;\n\t}\n\t\n\t_extends(postscribe, {\n\t  // Streams by name.\n\t  streams: {},\n\t  // Queue of streams.\n\t  queue: queue,\n\t  // Expose internal classes.\n\t  WriteStream: _writeStream2['default']\n\t});\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\t\n\tvar _prescribe = __webpack_require__(3);\n\t\n\tvar _prescribe2 = _interopRequireDefault(_prescribe);\n\t\n\tvar _utils = __webpack_require__(4);\n\t\n\tvar utils = _interopRequireWildcard(_utils);\n\t\n\tfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/**\n\t * Turn on to debug how each chunk affected the DOM.\n\t * @type {boolean}\n\t */\n\tvar DEBUG_CHUNK = false;\n\t\n\t/**\n\t * Prefix for data attributes on DOM elements.\n\t * @type {string}\n\t */\n\tvar BASEATTR = 'data-ps-';\n\t\n\t/**\n\t * ID for the style proxy\n\t * @type {string}\n\t */\n\tvar PROXY_STYLE = 'ps-style';\n\t\n\t/**\n\t * ID for the script proxy\n\t * @type {string}\n\t */\n\tvar PROXY_SCRIPT = 'ps-script';\n\t\n\t/**\n\t * Get data attributes\n\t *\n\t * @param {Object} el The DOM element.\n\t * @param {String} name The attribute name.\n\t * @returns {String}\n\t */\n\tfunction getData(el, name) {\n\t  var attr = BASEATTR + name;\n\t\n\t  var val = el.getAttribute(attr);\n\t\n\t  // IE 8 returns a number if it's a number\n\t  return !utils.existy(val) ? val : String(val);\n\t}\n\t\n\t/**\n\t * Set data attributes\n\t *\n\t * @param {Object} el The DOM element.\n\t * @param {String} name The attribute name.\n\t * @param {null|*} value The attribute value.\n\t */\n\tfunction setData(el, name) {\n\t  var value = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\t\n\t  var attr = BASEATTR + name;\n\t\n\t  if (utils.existy(value) && value !== '') {\n\t    el.setAttribute(attr, value);\n\t  } else {\n\t    el.removeAttribute(attr);\n\t  }\n\t}\n\t\n\t/**\n\t * Stream static html to an element, where \"static html\" denotes \"html\n\t * without scripts\".\n\t *\n\t * This class maintains a *history of writes devoid of any attributes* or\n\t * \"proxy history\".\n\t *\n\t * Injecting the proxy history into a temporary div has no side-effects,\n\t * other than to create proxy elements for previously written elements.\n\t *\n\t * Given the `staticHtml` of a new write, a `tempDiv`'s innerHTML is set to\n\t * `proxy_history + staticHtml`.\n\t * The *structure* of `tempDiv`'s contents, (i.e., the placement of new nodes\n\t * beside or inside of proxy elements), reflects the DOM structure that would\n\t * have resulted if all writes had been squashed into a single write.\n\t *\n\t * For each descendent `node` of `tempDiv` whose parentNode is a *proxy*,\n\t * `node` is appended to the corresponding *real* element within the DOM.\n\t *\n\t * Proxy elements are mapped to *actual* elements in the DOM by injecting a\n\t * `data-id` attribute into each start tag in `staticHtml`.\n\t *\n\t */\n\t\n\tvar WriteStream = function () {\n\t  /**\n\t   * Constructor.\n\t   *\n\t   * @param {Object} root The root element\n\t   * @param {?Object} options The options\n\t   */\n\t  function WriteStream(root) {\n\t    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\t\n\t    _classCallCheck(this, WriteStream);\n\t\n\t    this.root = root;\n\t    this.options = options;\n\t    this.doc = root.ownerDocument;\n\t    this.win = this.doc.defaultView || this.doc.parentWindow;\n\t    this.parser = new _prescribe2['default']('', { autoFix: options.autoFix });\n\t\n\t    // Actual elements by id.\n\t    this.actuals = [root];\n\t\n\t    // Embodies the \"structure\" of what's been written so far,\n\t    // devoid of attributes.\n\t    this.proxyHistory = '';\n\t\n\t    // Create a proxy of the root element.\n\t    this.proxyRoot = this.doc.createElement(root.nodeName);\n\t\n\t    this.scriptStack = [];\n\t    this.writeQueue = [];\n\t\n\t    setData(this.proxyRoot, 'proxyof', 0);\n\t  }\n\t\n\t  /**\n\t   * Writes the given strings.\n\t   *\n\t   * @param {...String} str The strings to write\n\t   */\n\t\n\t\n\t  WriteStream.prototype.write = function write() {\n\t    var _writeQueue;\n\t\n\t    (_writeQueue = this.writeQueue).push.apply(_writeQueue, arguments);\n\t\n\t    // Process writes\n\t    // When new script gets pushed or pending this will stop\n\t    // because new writeQueue gets pushed\n\t    while (!this.deferredRemote && this.writeQueue.length) {\n\t      var arg = this.writeQueue.shift();\n\t\n\t      if (utils.isFunction(arg)) {\n\t        this._callFunction(arg);\n\t      } else {\n\t        this._writeImpl(arg);\n\t      }\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Calls the given function.\n\t   *\n\t   * @param {Function} fn The function to call\n\t   * @private\n\t   */\n\t\n\t\n\t  WriteStream.prototype._callFunction = function _callFunction(fn) {\n\t    var tok = { type: 'function', value: fn.name || fn.toString() };\n\t    this._onScriptStart(tok);\n\t    fn.call(this.win, this.doc);\n\t    this._onScriptDone(tok);\n\t  };\n\t\n\t  /**\n\t   * The write implementation\n\t   *\n\t   * @param {String} html The HTML to write.\n\t   * @private\n\t   */\n\t\n\t\n\t  WriteStream.prototype._writeImpl = function _writeImpl(html) {\n\t    this.parser.append(html);\n\t\n\t    var tok = void 0;\n\t    var script = void 0;\n\t    var style = void 0;\n\t    var tokens = [];\n\t\n\t    // stop if we see a script token\n\t    while ((tok = this.parser.readToken()) && !(script = utils.isScript(tok)) && !(style = utils.isStyle(tok))) {\n\t      tok = this.options.beforeWriteToken(tok);\n\t\n\t      if (tok) {\n\t        tokens.push(tok);\n\t      }\n\t    }\n\t\n\t    if (tokens.length > 0) {\n\t      this._writeStaticTokens(tokens);\n\t    }\n\t\n\t    if (script) {\n\t      this._handleScriptToken(tok);\n\t    }\n\t\n\t    if (style) {\n\t      this._handleStyleToken(tok);\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Write contiguous non-script tokens (a chunk)\n\t   *\n\t   * @param {Array<Object>} tokens The tokens\n\t   * @returns {{tokens, raw, actual, proxy}|null}\n\t   * @private\n\t   */\n\t\n\t\n\t  WriteStream.prototype._writeStaticTokens = function _writeStaticTokens(tokens) {\n\t    var chunk = this._buildChunk(tokens);\n\t\n\t    if (!chunk.actual) {\n\t      // e.g., no tokens, or a noscript that got ignored\n\t      return null;\n\t    }\n\t\n\t    chunk.html = this.proxyHistory + chunk.actual;\n\t    this.proxyHistory += chunk.proxy;\n\t    this.proxyRoot.innerHTML = chunk.html;\n\t\n\t    if (DEBUG_CHUNK) {\n\t      chunk.proxyInnerHTML = this.proxyRoot.innerHTML;\n\t    }\n\t\n\t    this._walkChunk();\n\t\n\t    if (DEBUG_CHUNK) {\n\t      chunk.actualInnerHTML = this.root.innerHTML;\n\t    }\n\t\n\t    return chunk;\n\t  };\n\t\n\t  /**\n\t   * Build a chunk.\n\t   *\n\t   * @param {Array<Object>} tokens The tokens to use.\n\t   * @returns {{tokens: *, raw: string, actual: string, proxy: string}}\n\t   * @private\n\t   */\n\t\n\t\n\t  WriteStream.prototype._buildChunk = function _buildChunk(tokens) {\n\t    var nextId = this.actuals.length;\n\t\n\t    // The raw html of this chunk.\n\t    var raw = [];\n\t\n\t    // The html to create the nodes in the tokens (with id's injected).\n\t    var actual = [];\n\t\n\t    // Html that can later be used to proxy the nodes in the tokens.\n\t    var proxy = [];\n\t\n\t    var len = tokens.length;\n\t    for (var i = 0; i < len; i++) {\n\t      var tok = tokens[i];\n\t      var tokenRaw = tok.toString();\n\t\n\t      raw.push(tokenRaw);\n\t\n\t      if (tok.attrs) {\n\t        // tok.attrs <==> startTag or atomicTag or cursor\n\t        // Ignore noscript tags. They are atomic, so we don't have to worry about children.\n\t        if (!/^noscript$/i.test(tok.tagName)) {\n\t          var id = nextId++;\n\t\n\t          // Actual: inject id attribute: replace '>' at end of start tag with id attribute + '>'\n\t          actual.push(tokenRaw.replace(/(\\/?>)/, ' ' + BASEATTR + 'id=' + id + ' $1'));\n\t\n\t          // Don't proxy scripts: they have no bearing on DOM structure.\n\t          if (tok.attrs.id !== PROXY_SCRIPT && tok.attrs.id !== PROXY_STYLE) {\n\t            // Proxy: strip all attributes and inject proxyof attribute\n\t            proxy.push(\n\t            // ignore atomic tags (e.g., style): they have no \"structural\" effect\n\t            tok.type === 'atomicTag' ? '' : '<' + tok.tagName + ' ' + BASEATTR + 'proxyof=' + id + (tok.unary ? ' />' : '>'));\n\t          }\n\t        }\n\t      } else {\n\t        // Visit any other type of token\n\t        // Actual: append.\n\t        actual.push(tokenRaw);\n\t\n\t        // Proxy: append endTags. Ignore everything else.\n\t        proxy.push(tok.type === 'endTag' ? tokenRaw : '');\n\t      }\n\t    }\n\t\n\t    return {\n\t      tokens: tokens,\n\t      raw: raw.join(''),\n\t      actual: actual.join(''),\n\t      proxy: proxy.join('')\n\t    };\n\t  };\n\t\n\t  /**\n\t   * Walk the chunks.\n\t   *\n\t   * @private\n\t   */\n\t\n\t\n\t  WriteStream.prototype._walkChunk = function _walkChunk() {\n\t    var node = void 0;\n\t    var stack = [this.proxyRoot];\n\t\n\t    // use shift/unshift so that children are walked in document order\n\t    while (utils.existy(node = stack.shift())) {\n\t      var isElement = node.nodeType === 1;\n\t      var isProxy = isElement && getData(node, 'proxyof');\n\t\n\t      // Ignore proxies\n\t      if (!isProxy) {\n\t        if (isElement) {\n\t          // New actual element: register it and remove the the id attr.\n\t          this.actuals[getData(node, 'id')] = node;\n\t          setData(node, 'id');\n\t        }\n\t\n\t        // Is node's parent a proxy?\n\t        var parentIsProxyOf = node.parentNode && getData(node.parentNode, 'proxyof');\n\t        if (parentIsProxyOf) {\n\t          // Move node under actual parent.\n\t          this.actuals[parentIsProxyOf].appendChild(node);\n\t        }\n\t      }\n\t\n\t      // prepend childNodes to stack\n\t      stack.unshift.apply(stack, utils.toArray(node.childNodes));\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Handles Script tokens\n\t   *\n\t   * @param {Object} tok The token\n\t   */\n\t\n\t\n\t  WriteStream.prototype._handleScriptToken = function _handleScriptToken(tok) {\n\t    var _this = this;\n\t\n\t    var remainder = this.parser.clear();\n\t\n\t    if (remainder) {\n\t      // Write remainder immediately behind this script.\n\t      this.writeQueue.unshift(remainder);\n\t    }\n\t\n\t    tok.src = tok.attrs.src || tok.attrs.SRC;\n\t\n\t    tok = this.options.beforeWriteToken(tok);\n\t    if (!tok) {\n\t      // User has removed this token\n\t      return;\n\t    }\n\t\n\t    if (tok.src && this.scriptStack.length) {\n\t      // Defer this script until scriptStack is empty.\n\t      // Assumption 1: This script will not start executing until\n\t      // scriptStack is empty.\n\t      this.deferredRemote = tok;\n\t    } else {\n\t      this._onScriptStart(tok);\n\t    }\n\t\n\t    // Put the script node in the DOM.\n\t    this._writeScriptToken(tok, function () {\n\t      _this._onScriptDone(tok);\n\t    });\n\t  };\n\t\n\t  /**\n\t   * Handles style tokens\n\t   *\n\t   * @param {Object} tok The token\n\t   */\n\t\n\t\n\t  WriteStream.prototype._handleStyleToken = function _handleStyleToken(tok) {\n\t    var remainder = this.parser.clear();\n\t\n\t    if (remainder) {\n\t      // Write remainder immediately behind this style.\n\t      this.writeQueue.unshift(remainder);\n\t    }\n\t\n\t    tok.type = tok.attrs.type || tok.attrs.TYPE || 'text/css';\n\t\n\t    tok = this.options.beforeWriteToken(tok);\n\t\n\t    if (tok) {\n\t      // Put the style node in the DOM.\n\t      this._writeStyleToken(tok);\n\t    }\n\t\n\t    if (remainder) {\n\t      this.write();\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Build a style and insert it into the DOM.\n\t   *\n\t   * @param {Object} tok The token\n\t   */\n\t\n\t\n\t  WriteStream.prototype._writeStyleToken = function _writeStyleToken(tok) {\n\t    var el = this._buildStyle(tok);\n\t\n\t    this._insertCursor(el, PROXY_STYLE);\n\t\n\t    // Set content\n\t    if (tok.content) {\n\t      if (el.styleSheet && !el.sheet) {\n\t        el.styleSheet.cssText = tok.content;\n\t      } else {\n\t        el.appendChild(this.doc.createTextNode(tok.content));\n\t      }\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Build a style element from an atomic style token.\n\t   *\n\t   * @param {Object} tok The token\n\t   * @returns {Element}\n\t   */\n\t\n\t\n\t  WriteStream.prototype._buildStyle = function _buildStyle(tok) {\n\t    var el = this.doc.createElement(tok.tagName);\n\t\n\t    el.setAttribute('type', tok.type);\n\t\n\t    // Set attributes\n\t    utils.eachKey(tok.attrs, function (name, value) {\n\t      el.setAttribute(name, value);\n\t    });\n\t\n\t    return el;\n\t  };\n\t\n\t  /**\n\t   * Append a span to the stream. That span will act as a cursor\n\t   * (i.e. insertion point) for the element.\n\t   *\n\t   * @param {Object} el The element\n\t   * @param {string} which The type of proxy element\n\t   */\n\t\n\t\n\t  WriteStream.prototype._insertCursor = function _insertCursor(el, which) {\n\t    this._writeImpl('<span id=\"' + which + '\"/>');\n\t\n\t    var cursor = this.doc.getElementById(which);\n\t\n\t    if (cursor) {\n\t      cursor.parentNode.replaceChild(el, cursor);\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Called when a script is started.\n\t   *\n\t   * @param {Object} tok The token\n\t   * @private\n\t   */\n\t\n\t\n\t  WriteStream.prototype._onScriptStart = function _onScriptStart(tok) {\n\t    tok.outerWrites = this.writeQueue;\n\t    this.writeQueue = [];\n\t    this.scriptStack.unshift(tok);\n\t  };\n\t\n\t  /**\n\t   * Called when a script is done.\n\t   *\n\t   * @param {Object} tok The token\n\t   * @private\n\t   */\n\t\n\t\n\t  WriteStream.prototype._onScriptDone = function _onScriptDone(tok) {\n\t    // Pop script and check nesting.\n\t    if (tok !== this.scriptStack[0]) {\n\t      this.options.error({ msg: 'Bad script nesting or script finished twice' });\n\t      return;\n\t    }\n\t\n\t    this.scriptStack.shift();\n\t\n\t    // Append outer writes to queue and process them.\n\t    this.write.apply(this, tok.outerWrites);\n\t\n\t    // Check for pending remote\n\t\n\t    // Assumption 2: if remote_script1 writes remote_script2 then\n\t    // the we notice remote_script1 finishes before remote_script2 starts.\n\t    // I think this is equivalent to assumption 1\n\t    if (!this.scriptStack.length && this.deferredRemote) {\n\t      this._onScriptStart(this.deferredRemote);\n\t      this.deferredRemote = null;\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Build a script and insert it into the DOM.\n\t   * Done is called once script has executed.\n\t   *\n\t   * @param {Object} tok The token\n\t   * @param {Function} done The callback when complete\n\t   */\n\t\n\t\n\t  WriteStream.prototype._writeScriptToken = function _writeScriptToken(tok, done) {\n\t    var el = this._buildScript(tok);\n\t    var asyncRelease = this._shouldRelease(el);\n\t    var afterAsync = this.options.afterAsync;\n\t\n\t    if (tok.src) {\n\t      // Fix for attribute \"SRC\" (capitalized). IE does not recognize it.\n\t      el.src = tok.src;\n\t      this._scriptLoadHandler(el, !asyncRelease ? function () {\n\t        done();\n\t        afterAsync();\n\t      } : afterAsync);\n\t    }\n\t\n\t    try {\n\t      this._insertCursor(el, PROXY_SCRIPT);\n\t      if (!el.src || asyncRelease) {\n\t        done();\n\t      }\n\t    } catch (e) {\n\t      this.options.error(e);\n\t      done();\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Build a script element from an atomic script token.\n\t   *\n\t   * @param {Object} tok The token\n\t   * @returns {Element}\n\t   */\n\t\n\t\n\t  WriteStream.prototype._buildScript = function _buildScript(tok) {\n\t    var el = this.doc.createElement(tok.tagName);\n\t\n\t    // Set attributes\n\t    utils.eachKey(tok.attrs, function (name, value) {\n\t      el.setAttribute(name, value);\n\t    });\n\t\n\t    // Set content\n\t    if (tok.content) {\n\t      el.text = tok.content;\n\t    }\n\t\n\t    return el;\n\t  };\n\t\n\t  /**\n\t   * Setup the script load handler on an element.\n\t   *\n\t   * @param {Object} el The element\n\t   * @param {Function} done The callback\n\t   * @private\n\t   */\n\t\n\t\n\t  WriteStream.prototype._scriptLoadHandler = function _scriptLoadHandler(el, done) {\n\t    function cleanup() {\n\t      el = el.onload = el.onreadystatechange = el.onerror = null;\n\t    }\n\t\n\t    var error = this.options.error;\n\t\n\t    function success() {\n\t      cleanup();\n\t      if (done != null) {\n\t        done();\n\t      }\n\t      done = null;\n\t    }\n\t\n\t    function failure(err) {\n\t      cleanup();\n\t      error(err);\n\t      if (done != null) {\n\t        done();\n\t      }\n\t      done = null;\n\t    }\n\t\n\t    function reattachEventListener(el, evt) {\n\t      var handler = el['on' + evt];\n\t      if (handler != null) {\n\t        el['_on' + evt] = handler;\n\t      }\n\t    }\n\t\n\t    reattachEventListener(el, 'load');\n\t    reattachEventListener(el, 'error');\n\t\n\t    _extends(el, {\n\t      onload: function onload() {\n\t        if (el._onload) {\n\t          try {\n\t            el._onload.apply(this, Array.prototype.slice.call(arguments, 0));\n\t          } catch (err) {\n\t            failure({ msg: 'onload handler failed ' + err + ' @ ' + el.src });\n\t          }\n\t        }\n\t        success();\n\t      },\n\t      onerror: function onerror() {\n\t        if (el._onerror) {\n\t          try {\n\t            el._onerror.apply(this, Array.prototype.slice.call(arguments, 0));\n\t          } catch (err) {\n\t            failure({ msg: 'onerror handler failed ' + err + ' @ ' + el.src });\n\t            return;\n\t          }\n\t        }\n\t        failure({ msg: 'remote script failed ' + el.src });\n\t      },\n\t      onreadystatechange: function onreadystatechange() {\n\t        if (/^(loaded|complete)$/.test(el.readyState)) {\n\t          success();\n\t        }\n\t      }\n\t    });\n\t  };\n\t\n\t  /**\n\t   * Determines whether to release.\n\t   *\n\t   * @param {Object} el The element\n\t   * @returns {boolean}\n\t   * @private\n\t   */\n\t\n\t\n\t  WriteStream.prototype._shouldRelease = function _shouldRelease(el) {\n\t    var isScript = /^script$/i.test(el.nodeName);\n\t    return !isScript || !!(this.options.releaseAsync && el.src && el.hasAttribute('async'));\n\t  };\n\t\n\t  return WriteStream;\n\t}();\n\t\n\texports['default'] = WriteStream;\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * @file prescribe\n\t * @description Tiny, forgiving HTML parser\n\t * @version vundefined\n\t * @see {@link https://github.com/krux/prescribe/}\n\t * @license MIT\n\t * @author Derek Brans\n\t * @copyright 2016 Krux Digital, Inc\n\t */\n\t(function webpackUniversalModuleDefinition(root, factory) {\n\t\tif(true)\n\t\t\tmodule.exports = factory();\n\t\telse {}\n\t})(this, function() {\n\treturn /******/ (function(modules) { // webpackBootstrap\n\t/******/ \t// The module cache\n\t/******/ \tvar installedModules = {};\n\t\n\t/******/ \t// The require function\n\t/******/ \tfunction __webpack_require__(moduleId) {\n\t\n\t/******/ \t\t// Check if module is in cache\n\t/******/ \t\tif(installedModules[moduleId])\n\t/******/ \t\t\treturn installedModules[moduleId].exports;\n\t\n\t/******/ \t\t// Create a new module (and put it into the cache)\n\t/******/ \t\tvar module = installedModules[moduleId] = {\n\t/******/ \t\t\texports: {},\n\t/******/ \t\t\tid: moduleId,\n\t/******/ \t\t\tloaded: false\n\t/******/ \t\t};\n\t\n\t/******/ \t\t// Execute the module function\n\t/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\t\n\t/******/ \t\t// Flag the module as loaded\n\t/******/ \t\tmodule.loaded = true;\n\t\n\t/******/ \t\t// Return the exports of the module\n\t/******/ \t\treturn module.exports;\n\t/******/ \t}\n\t\n\t\n\t/******/ \t// expose the modules object (__webpack_modules__)\n\t/******/ \t__webpack_require__.m = modules;\n\t\n\t/******/ \t// expose the module cache\n\t/******/ \t__webpack_require__.c = installedModules;\n\t\n\t/******/ \t// __webpack_public_path__\n\t/******/ \t__webpack_require__.p = \"\";\n\t\n\t/******/ \t// Load entry module and return exports\n\t/******/ \treturn __webpack_require__(0);\n\t/******/ })\n\t/************************************************************************/\n\t/******/ ([\n\t/* 0 */\n\t/***/ function(module, exports, __webpack_require__) {\n\t\n\t\t'use strict';\n\t\n\t\tvar _HtmlParser = __webpack_require__(1);\n\t\n\t\tvar _HtmlParser2 = _interopRequireDefault(_HtmlParser);\n\t\n\t\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\t\tmodule.exports = _HtmlParser2['default'];\n\t\n\t/***/ },\n\t/* 1 */\n\t/***/ function(module, exports, __webpack_require__) {\n\t\n\t\t'use strict';\n\t\n\t\texports.__esModule = true;\n\t\n\t\tvar _supports = __webpack_require__(2);\n\t\n\t\tvar supports = _interopRequireWildcard(_supports);\n\t\n\t\tvar _streamReaders = __webpack_require__(3);\n\t\n\t\tvar streamReaders = _interopRequireWildcard(_streamReaders);\n\t\n\t\tvar _fixedReadTokenFactory = __webpack_require__(6);\n\t\n\t\tvar _fixedReadTokenFactory2 = _interopRequireDefault(_fixedReadTokenFactory);\n\t\n\t\tvar _utils = __webpack_require__(5);\n\t\n\t\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\t\tfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }\n\t\n\t\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t\t/**\n\t\t * Detection regular expressions.\n\t\t *\n\t\t * Order of detection matters: detection of one can only\n\t\t * succeed if detection of previous didn't\n\t\n\t\t * @type {Object}\n\t\t */\n\t\tvar detect = {\n\t\t  comment: /^<!--/,\n\t\t  endTag: /^<\\//,\n\t\t  atomicTag: /^<\\s*(script|style|noscript|iframe|textarea)[\\s\\/>]/i,\n\t\t  startTag: /^</,\n\t\t  chars: /^[^<]/\n\t\t};\n\t\n\t\t/**\n\t\t * HtmlParser provides the capability to parse HTML and return tokens\n\t\t * representing the tags and content.\n\t\t */\n\t\n\t\tvar HtmlParser = function () {\n\t\t  /**\n\t\t   * Constructor.\n\t\t   *\n\t\t   * @param {string} stream The initial parse stream contents.\n\t\t   * @param {Object} options The options\n\t\t   * @param {boolean} options.autoFix Set to true to automatically fix errors\n\t\t   */\n\t\t  function HtmlParser() {\n\t\t    var _this = this;\n\t\n\t\t    var stream = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\t\t    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\t\n\t\t    _classCallCheck(this, HtmlParser);\n\t\n\t\t    this.stream = stream;\n\t\n\t\t    var fix = false;\n\t\t    var fixedTokenOptions = {};\n\t\n\t\t    for (var key in supports) {\n\t\t      if (supports.hasOwnProperty(key)) {\n\t\t        if (options.autoFix) {\n\t\t          fixedTokenOptions[key + 'Fix'] = true; // !supports[key];\n\t\t        }\n\t\t        fix = fix || fixedTokenOptions[key + 'Fix'];\n\t\t      }\n\t\t    }\n\t\n\t\t    if (fix) {\n\t\t      this._readToken = (0, _fixedReadTokenFactory2['default'])(this, fixedTokenOptions, function () {\n\t\t        return _this._readTokenImpl();\n\t\t      });\n\t\t      this._peekToken = (0, _fixedReadTokenFactory2['default'])(this, fixedTokenOptions, function () {\n\t\t        return _this._peekTokenImpl();\n\t\t      });\n\t\t    } else {\n\t\t      this._readToken = this._readTokenImpl;\n\t\t      this._peekToken = this._peekTokenImpl;\n\t\t    }\n\t\t  }\n\t\n\t\t  /**\n\t\t   * Appends the given string to the parse stream.\n\t\t   *\n\t\t   * @param {string} str The string to append\n\t\t   */\n\t\n\t\n\t\t  HtmlParser.prototype.append = function append(str) {\n\t\t    this.stream += str;\n\t\t  };\n\t\n\t\t  /**\n\t\t   * Prepends the given string to the parse stream.\n\t\t   *\n\t\t   * @param {string} str The string to prepend\n\t\t   */\n\t\n\t\n\t\t  HtmlParser.prototype.prepend = function prepend(str) {\n\t\t    this.stream = str + this.stream;\n\t\t  };\n\t\n\t\t  /**\n\t\t   * The implementation of the token reading.\n\t\t   *\n\t\t   * @private\n\t\t   * @returns {?Token}\n\t\t   */\n\t\n\t\n\t\t  HtmlParser.prototype._readTokenImpl = function _readTokenImpl() {\n\t\t    var token = this._peekTokenImpl();\n\t\t    if (token) {\n\t\t      this.stream = this.stream.slice(token.length);\n\t\t      return token;\n\t\t    }\n\t\t  };\n\t\n\t\t  /**\n\t\t   * The implementation of token peeking.\n\t\t   *\n\t\t   * @returns {?Token}\n\t\t   */\n\t\n\t\n\t\t  HtmlParser.prototype._peekTokenImpl = function _peekTokenImpl() {\n\t\t    for (var type in detect) {\n\t\t      if (detect.hasOwnProperty(type)) {\n\t\t        if (detect[type].test(this.stream)) {\n\t\t          var token = streamReaders[type](this.stream);\n\t\n\t\t          if (token) {\n\t\t            if (token.type === 'startTag' && /script|style/i.test(token.tagName)) {\n\t\t              return null;\n\t\t            } else {\n\t\t              token.text = this.stream.substr(0, token.length);\n\t\t              return token;\n\t\t            }\n\t\t          }\n\t\t        }\n\t\t      }\n\t\t    }\n\t\t  };\n\t\n\t\t  /**\n\t\t   * The public token peeking interface.  Delegates to the basic token peeking\n\t\t   * or a version that performs fixups depending on the `autoFix` setting in\n\t\t   * options.\n\t\t   *\n\t\t   * @returns {object}\n\t\t   */\n\t\n\t\n\t\t  HtmlParser.prototype.peekToken = function peekToken() {\n\t\t    return this._peekToken();\n\t\t  };\n\t\n\t\t  /**\n\t\t   * The public token reading interface.  Delegates to the basic token reading\n\t\t   * or a version that performs fixups depending on the `autoFix` setting in\n\t\t   * options.\n\t\t   *\n\t\t   * @returns {object}\n\t\t   */\n\t\n\t\n\t\t  HtmlParser.prototype.readToken = function readToken() {\n\t\t    return this._readToken();\n\t\t  };\n\t\n\t\t  /**\n\t\t   * Read tokens and hand to the given handlers.\n\t\t   *\n\t\t   * @param {Object} handlers The handlers to use for the different tokens.\n\t\t   */\n\t\n\t\n\t\t  HtmlParser.prototype.readTokens = function readTokens(handlers) {\n\t\t    var tok = void 0;\n\t\t    while (tok = this.readToken()) {\n\t\t      // continue until we get an explicit \"false\" return\n\t\t      if (handlers[tok.type] && handlers[tok.type](tok) === false) {\n\t\t        return;\n\t\t      }\n\t\t    }\n\t\t  };\n\t\n\t\t  /**\n\t\t   * Clears the parse stream.\n\t\t   *\n\t\t   * @returns {string} The contents of the parse stream before clearing.\n\t\t   */\n\t\n\t\n\t\t  HtmlParser.prototype.clear = function clear() {\n\t\t    var rest = this.stream;\n\t\t    this.stream = '';\n\t\t    return rest;\n\t\t  };\n\t\n\t\t  /**\n\t\t   * Returns the rest of the parse stream.\n\t\t   *\n\t\t   * @returns {string} The contents of the parse stream.\n\t\t   */\n\t\n\t\n\t\t  HtmlParser.prototype.rest = function rest() {\n\t\t    return this.stream;\n\t\t  };\n\t\n\t\t  return HtmlParser;\n\t\t}();\n\t\n\t\texports['default'] = HtmlParser;\n\t\n\t\n\t\tHtmlParser.tokenToString = function (tok) {\n\t\t  return tok.toString();\n\t\t};\n\t\n\t\tHtmlParser.escapeAttributes = function (attrs) {\n\t\t  var escapedAttrs = {};\n\t\n\t\t  for (var name in attrs) {\n\t\t    if (attrs.hasOwnProperty(name)) {\n\t\t      escapedAttrs[name] = (0, _utils.escapeQuotes)(attrs[name], null);\n\t\t    }\n\t\t  }\n\t\n\t\t  return escapedAttrs;\n\t\t};\n\t\n\t\tHtmlParser.supports = supports;\n\t\n\t\tfor (var key in supports) {\n\t\t  if (supports.hasOwnProperty(key)) {\n\t\t    HtmlParser.browserHasFlaw = HtmlParser.browserHasFlaw || !supports[key] && key;\n\t\t  }\n\t\t}\n\t\n\t/***/ },\n\t/* 2 */\n\t/***/ function(module, exports) {\n\t\n\t\t'use strict';\n\t\n\t\texports.__esModule = true;\n\t\tvar tagSoup = false;\n\t\tvar selfClose = false;\n\t\n\t\tvar work = window.document.createElement('div');\n\t\n\t\ttry {\n\t\t  var html = '<P><I></P></I>';\n\t\t  work.innerHTML = html;\n\t\t  exports.tagSoup = tagSoup = work.innerHTML !== html;\n\t\t} catch (e) {\n\t\t  exports.tagSoup = tagSoup = false;\n\t\t}\n\t\n\t\ttry {\n\t\t  work.innerHTML = '<P><i><P></P></i></P>';\n\t\t  exports.selfClose = selfClose = work.childNodes.length === 2;\n\t\t} catch (e) {\n\t\t  exports.selfClose = selfClose = false;\n\t\t}\n\t\n\t\twork = null;\n\t\n\t\texports.tagSoup = tagSoup;\n\t\texports.selfClose = selfClose;\n\t\n\t/***/ },\n\t/* 3 */\n\t/***/ function(module, exports, __webpack_require__) {\n\t\n\t\t'use strict';\n\t\n\t\texports.__esModule = true;\n\t\n\t\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\t\n\t\texports.comment = comment;\n\t\texports.chars = chars;\n\t\texports.startTag = startTag;\n\t\texports.atomicTag = atomicTag;\n\t\texports.endTag = endTag;\n\t\n\t\tvar _tokens = __webpack_require__(4);\n\t\n\t\t/**\n\t\t * Regular Expressions for parsing tags and attributes\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tvar REGEXES = {\n\t\t  startTag: /^<([\\-A-Za-z0-9_]+)((?:\\s+[\\w\\-]+(?:\\s*=?\\s*(?:(?:\"[^\"]*\")|(?:'[^']*')|[^>\\s]+))?)*)\\s*(\\/?)>/,\n\t\t  endTag: /^<\\/([\\-A-Za-z0-9_]+)[^>]*>/,\n\t\t  attr: /(?:([\\-A-Za-z0-9_]+)\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|([^>\\s]+)))|(?:([\\-A-Za-z0-9_]+)(\\s|$)+)/g,\n\t\t  fillAttr: /^(checked|compact|declare|defer|disabled|ismap|multiple|nohref|noresize|noshade|nowrap|readonly|selected)$/i\n\t\t};\n\t\n\t\t/**\n\t\t * Reads a comment token\n\t\t *\n\t\t * @param {string} stream The input stream\n\t\t * @returns {CommentToken}\n\t\t */\n\t\tfunction comment(stream) {\n\t\t  var index = stream.indexOf('-->');\n\t\t  if (index >= 0) {\n\t\t    return new _tokens.CommentToken(stream.substr(4, index - 1), index + 3);\n\t\t  }\n\t\t}\n\t\n\t\t/**\n\t\t * Reads non-tag characters.\n\t\t *\n\t\t * @param {string} stream The input stream\n\t\t * @returns {CharsToken}\n\t\t */\n\t\tfunction chars(stream) {\n\t\t  var index = stream.indexOf('<');\n\t\t  return new _tokens.CharsToken(index >= 0 ? index : stream.length);\n\t\t}\n\t\n\t\t/**\n\t\t * Reads start tag token.\n\t\t *\n\t\t * @param {string} stream The input stream\n\t\t * @returns {StartTagToken}\n\t\t */\n\t\tfunction startTag(stream) {\n\t\t  var endTagIndex = stream.indexOf('>');\n\t\t  if (endTagIndex !== -1) {\n\t\t    var match = stream.match(REGEXES.startTag);\n\t\t    if (match) {\n\t\t      var _ret = function () {\n\t\t        var attrs = {};\n\t\t        var booleanAttrs = {};\n\t\t        var rest = match[2];\n\t\n\t\t        match[2].replace(REGEXES.attr, function (match, name) {\n\t\t          if (!(arguments[2] || arguments[3] || arguments[4] || arguments[5])) {\n\t\t            attrs[name] = '';\n\t\t          } else if (arguments[5]) {\n\t\t            attrs[arguments[5]] = '';\n\t\t            booleanAttrs[arguments[5]] = true;\n\t\t          } else {\n\t\t            attrs[name] = arguments[2] || arguments[3] || arguments[4] || REGEXES.fillAttr.test(name) && name || '';\n\t\t          }\n\t\n\t\t          rest = rest.replace(match, '');\n\t\t        });\n\t\n\t\t        return {\n\t\t          v: new _tokens.StartTagToken(match[1], match[0].length, attrs, booleanAttrs, !!match[3], rest.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, ''))\n\t\t        };\n\t\t      }();\n\t\n\t\t      if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === \"object\") return _ret.v;\n\t\t    }\n\t\t  }\n\t\t}\n\t\n\t\t/**\n\t\t * Reads atomic tag token.\n\t\t *\n\t\t * @param {string} stream The input stream\n\t\t * @returns {AtomicTagToken}\n\t\t */\n\t\tfunction atomicTag(stream) {\n\t\t  var start = startTag(stream);\n\t\t  if (start) {\n\t\t    var rest = stream.slice(start.length);\n\t\t    // for optimization, we check first just for the end tag\n\t\t    if (rest.match(new RegExp('<\\/\\\\s*' + start.tagName + '\\\\s*>', 'i'))) {\n\t\t      // capturing the content is inefficient, so we do it inside the if\n\t\t      var match = rest.match(new RegExp('([\\\\s\\\\S]*?)<\\/\\\\s*' + start.tagName + '\\\\s*>', 'i'));\n\t\t      if (match) {\n\t\t        return new _tokens.AtomicTagToken(start.tagName, match[0].length + start.length, start.attrs, start.booleanAttrs, match[1]);\n\t\t      }\n\t\t    }\n\t\t  }\n\t\t}\n\t\n\t\t/**\n\t\t * Reads an end tag token.\n\t\t *\n\t\t * @param {string} stream The input stream\n\t\t * @returns {EndTagToken}\n\t\t */\n\t\tfunction endTag(stream) {\n\t\t  var match = stream.match(REGEXES.endTag);\n\t\t  if (match) {\n\t\t    return new _tokens.EndTagToken(match[1], match[0].length);\n\t\t  }\n\t\t}\n\t\n\t/***/ },\n\t/* 4 */\n\t/***/ function(module, exports, __webpack_require__) {\n\t\n\t\t'use strict';\n\t\n\t\texports.__esModule = true;\n\t\texports.EndTagToken = exports.AtomicTagToken = exports.StartTagToken = exports.TagToken = exports.CharsToken = exports.CommentToken = exports.Token = undefined;\n\t\n\t\tvar _utils = __webpack_require__(5);\n\t\n\t\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t\t/**\n\t\t * Token is a base class for all token types parsed.  Note we don't actually\n\t\t * use intheritance due to IE8's non-existent ES5 support.\n\t\t */\n\t\tvar Token =\n\t\t/**\n\t\t * Constructor.\n\t\t *\n\t\t * @param {string} type The type of the Token.\n\t\t * @param {Number} length The length of the Token text.\n\t\t */\n\t\texports.Token = function Token(type, length) {\n\t\t  _classCallCheck(this, Token);\n\t\n\t\t  this.type = type;\n\t\t  this.length = length;\n\t\t  this.text = '';\n\t\t};\n\t\n\t\t/**\n\t\t * CommentToken represents comment tags.\n\t\t */\n\t\n\t\n\t\tvar CommentToken = exports.CommentToken = function () {\n\t\t  /**\n\t\t   * Constructor.\n\t\t   *\n\t\t   * @param {string} content The content of the comment\n\t\t   * @param {Number} length The length of the Token text.\n\t\t   */\n\t\t  function CommentToken(content, length) {\n\t\t    _classCallCheck(this, CommentToken);\n\t\n\t\t    this.type = 'comment';\n\t\t    this.length = length || (content ? content.length : 0);\n\t\t    this.text = '';\n\t\t    this.content = content;\n\t\t  }\n\t\n\t\t  CommentToken.prototype.toString = function toString() {\n\t\t    return '<!--' + this.content;\n\t\t  };\n\t\n\t\t  return CommentToken;\n\t\t}();\n\t\n\t\t/**\n\t\t * CharsToken represents non-tag characters.\n\t\t */\n\t\n\t\n\t\tvar CharsToken = exports.CharsToken = function () {\n\t\t  /**\n\t\t   * Constructor.\n\t\t   *\n\t\t   * @param {Number} length The length of the Token text.\n\t\t   */\n\t\t  function CharsToken(length) {\n\t\t    _classCallCheck(this, CharsToken);\n\t\n\t\t    this.type = 'chars';\n\t\t    this.length = length;\n\t\t    this.text = '';\n\t\t  }\n\t\n\t\t  CharsToken.prototype.toString = function toString() {\n\t\t    return this.text;\n\t\t  };\n\t\n\t\t  return CharsToken;\n\t\t}();\n\t\n\t\t/**\n\t\t * TagToken is a base class for all tag-based Tokens.\n\t\t */\n\t\n\t\n\t\tvar TagToken = exports.TagToken = function () {\n\t\t  /**\n\t\t   * Constructor.\n\t\t   *\n\t\t   * @param {string} type The type of the token.\n\t\t   * @param {string} tagName The tag name.\n\t\t   * @param {Number} length The length of the Token text.\n\t\t   * @param {Object} attrs The dictionary of attributes and values\n\t\t   * @param {Object} booleanAttrs If an entry has 'true' then the attribute\n\t\t   *                              is a boolean attribute\n\t\t   */\n\t\t  function TagToken(type, tagName, length, attrs, booleanAttrs) {\n\t\t    _classCallCheck(this, TagToken);\n\t\n\t\t    this.type = type;\n\t\t    this.length = length;\n\t\t    this.text = '';\n\t\t    this.tagName = tagName;\n\t\t    this.attrs = attrs;\n\t\t    this.booleanAttrs = booleanAttrs;\n\t\t    this.unary = false;\n\t\t    this.html5Unary = false;\n\t\t  }\n\t\n\t\t  /**\n\t\t   * Formats the given token tag.\n\t\t   *\n\t\t   * @param {TagToken} tok The TagToken to format.\n\t\t   * @param {?string} [content=null] The content of the token.\n\t\t   * @returns {string} The formatted tag.\n\t\t   */\n\t\n\t\n\t\t  TagToken.formatTag = function formatTag(tok) {\n\t\t    var content = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\t\n\t\t    var str = '<' + tok.tagName;\n\t\t    for (var key in tok.attrs) {\n\t\t      if (tok.attrs.hasOwnProperty(key)) {\n\t\t        str += ' ' + key;\n\t\n\t\t        var val = tok.attrs[key];\n\t\t        if (typeof tok.booleanAttrs === 'undefined' || typeof tok.booleanAttrs[key] === 'undefined') {\n\t\t          str += '=\"' + (0, _utils.escapeQuotes)(val) + '\"';\n\t\t        }\n\t\t      }\n\t\t    }\n\t\n\t\t    if (tok.rest) {\n\t\t      str += ' ' + tok.rest;\n\t\t    }\n\t\n\t\t    if (tok.unary && !tok.html5Unary) {\n\t\t      str += '/>';\n\t\t    } else {\n\t\t      str += '>';\n\t\t    }\n\t\n\t\t    if (content !== undefined && content !== null) {\n\t\t      str += content + '</' + tok.tagName + '>';\n\t\t    }\n\t\n\t\t    return str;\n\t\t  };\n\t\n\t\t  return TagToken;\n\t\t}();\n\t\n\t\t/**\n\t\t * StartTagToken represents a start token.\n\t\t */\n\t\n\t\n\t\tvar StartTagToken = exports.StartTagToken = function () {\n\t\t  /**\n\t\t   * Constructor.\n\t\t   *\n\t\t   * @param {string} tagName The tag name.\n\t\t   * @param {Number} length The length of the Token text\n\t\t   * @param {Object} attrs The dictionary of attributes and values\n\t\t   * @param {Object} booleanAttrs If an entry has 'true' then the attribute\n\t\t   *                              is a boolean attribute\n\t\t   * @param {boolean} unary True if the tag is a unary tag\n\t\t   * @param {string} rest The rest of the content.\n\t\t   */\n\t\t  function StartTagToken(tagName, length, attrs, booleanAttrs, unary, rest) {\n\t\t    _classCallCheck(this, StartTagToken);\n\t\n\t\t    this.type = 'startTag';\n\t\t    this.length = length;\n\t\t    this.text = '';\n\t\t    this.tagName = tagName;\n\t\t    this.attrs = attrs;\n\t\t    this.booleanAttrs = booleanAttrs;\n\t\t    this.html5Unary = false;\n\t\t    this.unary = unary;\n\t\t    this.rest = rest;\n\t\t  }\n\t\n\t\t  StartTagToken.prototype.toString = function toString() {\n\t\t    return TagToken.formatTag(this);\n\t\t  };\n\t\n\t\t  return StartTagToken;\n\t\t}();\n\t\n\t\t/**\n\t\t * AtomicTagToken represents an atomic tag.\n\t\t */\n\t\n\t\n\t\tvar AtomicTagToken = exports.AtomicTagToken = function () {\n\t\t  /**\n\t\t   * Constructor.\n\t\t   *\n\t\t   * @param {string} tagName The name of the tag.\n\t\t   * @param {Number} length The length of the tag text.\n\t\t   * @param {Object} attrs The attributes.\n\t\t   * @param {Object} booleanAttrs If an entry has 'true' then the attribute\n\t\t   *                              is a boolean attribute\n\t\t   * @param {string} content The content of the tag.\n\t\t   */\n\t\t  function AtomicTagToken(tagName, length, attrs, booleanAttrs, content) {\n\t\t    _classCallCheck(this, AtomicTagToken);\n\t\n\t\t    this.type = 'atomicTag';\n\t\t    this.length = length;\n\t\t    this.text = '';\n\t\t    this.tagName = tagName;\n\t\t    this.attrs = attrs;\n\t\t    this.booleanAttrs = booleanAttrs;\n\t\t    this.unary = false;\n\t\t    this.html5Unary = false;\n\t\t    this.content = content;\n\t\t  }\n\t\n\t\t  AtomicTagToken.prototype.toString = function toString() {\n\t\t    return TagToken.formatTag(this, this.content);\n\t\t  };\n\t\n\t\t  return AtomicTagToken;\n\t\t}();\n\t\n\t\t/**\n\t\t * EndTagToken represents an end tag.\n\t\t */\n\t\n\t\n\t\tvar EndTagToken = exports.EndTagToken = function () {\n\t\t  /**\n\t\t   * Constructor.\n\t\t   *\n\t\t   * @param {string} tagName The name of the tag.\n\t\t   * @param {Number} length The length of the tag text.\n\t\t   */\n\t\t  function EndTagToken(tagName, length) {\n\t\t    _classCallCheck(this, EndTagToken);\n\t\n\t\t    this.type = 'endTag';\n\t\t    this.length = length;\n\t\t    this.text = '';\n\t\t    this.tagName = tagName;\n\t\t  }\n\t\n\t\t  EndTagToken.prototype.toString = function toString() {\n\t\t    return '</' + this.tagName + '>';\n\t\t  };\n\t\n\t\t  return EndTagToken;\n\t\t}();\n\t\n\t/***/ },\n\t/* 5 */\n\t/***/ function(module, exports) {\n\t\n\t\t'use strict';\n\t\n\t\texports.__esModule = true;\n\t\texports.escapeQuotes = escapeQuotes;\n\t\n\t\t/**\n\t\t * Escape quotes in the given value.\n\t\t *\n\t\t * @param {string} value The value to escape.\n\t\t * @param {string} [defaultValue=''] The default value to return if value is falsy.\n\t\t * @returns {string}\n\t\t */\n\t\tfunction escapeQuotes(value) {\n\t\t  var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\t\n\t\t  // There's no lookback in JS, so /(^|[^\\\\])\"/ only matches the first of two `\"`s.\n\t\t  // Instead, just match anything before a double-quote and escape if it's not already escaped.\n\t\t  return !value ? defaultValue : value.replace(/([^\"]*)\"/g, function (_, prefix) {\n\t\t    return (/\\\\/.test(prefix) ? prefix + '\"' : prefix + '\\\\\"'\n\t\t    );\n\t\t  });\n\t\t}\n\t\n\t/***/ },\n\t/* 6 */\n\t/***/ function(module, exports) {\n\t\n\t\t'use strict';\n\t\n\t\texports.__esModule = true;\n\t\texports['default'] = fixedReadTokenFactory;\n\t\t/**\n\t\t * Empty Elements - HTML 4.01\n\t\t *\n\t\t * @type {RegExp}\n\t\t */\n\t\tvar EMPTY = /^(AREA|BASE|BASEFONT|BR|COL|FRAME|HR|IMG|INPUT|ISINDEX|LINK|META|PARAM|EMBED)$/i;\n\t\n\t\t/**\n\t\t * Elements that you can intentionally leave open (and which close themselves)\n\t\t *\n\t\t * @type {RegExp}\n\t\t */\n\t\tvar CLOSESELF = /^(COLGROUP|DD|DT|LI|OPTIONS|P|TD|TFOOT|TH|THEAD|TR)$/i;\n\t\n\t\t/**\n\t\t * Corrects a token.\n\t\t *\n\t\t * @param {Token} tok The token to correct\n\t\t * @returns {Token} The corrected token\n\t\t */\n\t\tfunction correct(tok) {\n\t\t  if (tok && tok.type === 'startTag') {\n\t\t    tok.unary = EMPTY.test(tok.tagName) || tok.unary;\n\t\t    tok.html5Unary = !/\\/>$/.test(tok.text);\n\t\t  }\n\t\t  return tok;\n\t\t}\n\t\n\t\t/**\n\t\t * Peeks at the next token in the parser.\n\t\t *\n\t\t * @param {HtmlParser} parser The parser\n\t\t * @param {Function} readTokenImpl The underlying readToken implementation\n\t\t * @returns {Token} The next token\n\t\t */\n\t\tfunction peekToken(parser, readTokenImpl) {\n\t\t  var tmp = parser.stream;\n\t\t  var tok = correct(readTokenImpl());\n\t\t  parser.stream = tmp;\n\t\t  return tok;\n\t\t}\n\t\n\t\t/**\n\t\t * Closes the last token.\n\t\t *\n\t\t * @param {HtmlParser} parser The parser\n\t\t * @param {Array<Token>} stack The stack\n\t\t */\n\t\tfunction closeLast(parser, stack) {\n\t\t  var tok = stack.pop();\n\t\n\t\t  // prepend close tag to stream.\n\t\t  parser.prepend('</' + tok.tagName + '>');\n\t\t}\n\t\n\t\t/**\n\t\t * Create a new token stack.\n\t\t *\n\t\t * @returns {Array<Token>}\n\t\t */\n\t\tfunction newStack() {\n\t\t  var stack = [];\n\t\n\t\t  stack.last = function () {\n\t\t    return this[this.length - 1];\n\t\t  };\n\t\n\t\t  stack.lastTagNameEq = function (tagName) {\n\t\t    var last = this.last();\n\t\t    return last && last.tagName && last.tagName.toUpperCase() === tagName.toUpperCase();\n\t\t  };\n\t\n\t\t  stack.containsTagName = function (tagName) {\n\t\t    for (var i = 0, tok; tok = this[i]; i++) {\n\t\t      if (tok.tagName === tagName) {\n\t\t        return true;\n\t\t      }\n\t\t    }\n\t\t    return false;\n\t\t  };\n\t\n\t\t  return stack;\n\t\t}\n\t\n\t\t/**\n\t\t * Return a readToken implementation that fixes input.\n\t\t *\n\t\t * @param {HtmlParser} parser The parser\n\t\t * @param {Object} options Options for fixing\n\t\t * @param {boolean} options.tagSoupFix True to fix tag soup scenarios\n\t\t * @param {boolean} options.selfCloseFix True to fix self-closing tags\n\t\t * @param {Function} readTokenImpl The underlying readToken implementation\n\t\t * @returns {Function}\n\t\t */\n\t\tfunction fixedReadTokenFactory(parser, options, readTokenImpl) {\n\t\t  var stack = newStack();\n\t\n\t\t  var handlers = {\n\t\t    startTag: function startTag(tok) {\n\t\t      var tagName = tok.tagName;\n\t\n\t\t      if (tagName.toUpperCase() === 'TR' && stack.lastTagNameEq('TABLE')) {\n\t\t        parser.prepend('<TBODY>');\n\t\t        prepareNextToken();\n\t\t      } else if (options.selfCloseFix && CLOSESELF.test(tagName) && stack.containsTagName(tagName)) {\n\t\t        if (stack.lastTagNameEq(tagName)) {\n\t\t          closeLast(parser, stack);\n\t\t        } else {\n\t\t          parser.prepend('</' + tok.tagName + '>');\n\t\t          prepareNextToken();\n\t\t        }\n\t\t      } else if (!tok.unary) {\n\t\t        stack.push(tok);\n\t\t      }\n\t\t    },\n\t\t    endTag: function endTag(tok) {\n\t\t      var last = stack.last();\n\t\t      if (last) {\n\t\t        if (options.tagSoupFix && !stack.lastTagNameEq(tok.tagName)) {\n\t\t          // cleanup tag soup\n\t\t          closeLast(parser, stack);\n\t\t        } else {\n\t\t          stack.pop();\n\t\t        }\n\t\t      } else if (options.tagSoupFix) {\n\t\t        // cleanup tag soup part 2: skip this token\n\t\t        readTokenImpl();\n\t\t        prepareNextToken();\n\t\t      }\n\t\t    }\n\t\t  };\n\t\n\t\t  function prepareNextToken() {\n\t\t    var tok = peekToken(parser, readTokenImpl);\n\t\t    if (tok && handlers[tok.type]) {\n\t\t      handlers[tok.type](tok);\n\t\t    }\n\t\t  }\n\t\n\t\t  return function fixedReadToken() {\n\t\t    prepareNextToken();\n\t\t    return correct(readTokenImpl());\n\t\t  };\n\t\t}\n\t\n\t/***/ }\n\t/******/ ])\n\t});\n\t;\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\t\n\texports.existy = existy;\n\texports.isFunction = isFunction;\n\texports.each = each;\n\texports.eachKey = eachKey;\n\texports.defaults = defaults;\n\texports.toArray = toArray;\n\texports.last = last;\n\texports.isTag = isTag;\n\texports.isScript = isScript;\n\texports.isStyle = isStyle;\n\t/**\n\t * Determine if the thing is not undefined and not null.\n\t *\n\t * @param {*} thing The thing to test\n\t * @returns {boolean} True if the thing is not undefined and not null.\n\t */\n\tfunction existy(thing) {\n\t  return thing !== void 0 && thing !== null;\n\t}\n\t\n\t/**\n\t * Is this a function?\n\t *\n\t * @param {*} x The variable to test\n\t * @returns {boolean} True if the variable is a function\n\t */\n\tfunction isFunction(x) {\n\t  return 'function' === typeof x;\n\t}\n\t\n\t/**\n\t * Loop over each item in an array-like value.\n\t *\n\t * @param {Array<*>} arr The array to loop over\n\t * @param {Function} fn The function to call\n\t * @param {?Object} target The object to bind to the function\n\t */\n\tfunction each(arr, fn, target) {\n\t  var i = void 0;\n\t  var len = arr && arr.length || 0;\n\t  for (i = 0; i < len; i++) {\n\t    fn.call(target, arr[i], i);\n\t  }\n\t}\n\t\n\t/**\n\t * Loop over each key/value pair in a hash.\n\t *\n\t * @param {Object} obj The object\n\t * @param {Function} fn The function to call\n\t * @param {?Object} target The object to bind to the function\n\t */\n\tfunction eachKey(obj, fn, target) {\n\t  for (var key in obj) {\n\t    if (obj.hasOwnProperty(key)) {\n\t      fn.call(target, key, obj[key]);\n\t    }\n\t  }\n\t}\n\t\n\t/**\n\t * Set default options where some option was not specified.\n\t *\n\t * @param {Object} options The destination\n\t * @param {Object} _defaults The defaults\n\t * @returns {Object}\n\t */\n\tfunction defaults(options, _defaults) {\n\t  options = options || {};\n\t  eachKey(_defaults, function (key, val) {\n\t    if (!existy(options[key])) {\n\t      options[key] = val;\n\t    }\n\t  });\n\t  return options;\n\t}\n\t\n\t/**\n\t * Convert value (e.g., a NodeList) to an array.\n\t *\n\t * @param {*} obj The object\n\t * @returns {Array<*>}\n\t */\n\tfunction toArray(obj) {\n\t  try {\n\t    return Array.prototype.slice.call(obj);\n\t  } catch (e) {\n\t    var _ret = function () {\n\t      var ret = [];\n\t      each(obj, function (val) {\n\t        ret.push(val);\n\t      });\n\t      return {\n\t        v: ret\n\t      };\n\t    }();\n\t\n\t    if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === \"object\") return _ret.v;\n\t  }\n\t}\n\t\n\t/**\n\t * Get the last item in an array\n\t *\n\t * @param {Array<*>} array The array\n\t * @returns {*} The last item in the array\n\t */\n\tfunction last(array) {\n\t  return array[array.length - 1];\n\t}\n\t\n\t/**\n\t * Test if token is a script tag.\n\t *\n\t * @param {Object} tok The token\n\t * @param {String} tag The tag name\n\t * @returns {boolean} True if the token is a script tag\n\t */\n\tfunction isTag(tok, tag) {\n\t  return !tok || !(tok.type === 'startTag' || tok.type === 'atomicTag') || !('tagName' in tok) ? !1 : !!~tok.tagName.toLowerCase().indexOf(tag);\n\t}\n\t\n\t/**\n\t * Test if token is a script tag.\n\t *\n\t * @param {Object} tok The token\n\t * @returns {boolean} True if the token is a script tag\n\t */\n\tfunction isScript(tok) {\n\t  return isTag(tok, 'script');\n\t}\n\t\n\t/**\n\t * Test if token is a style tag.\n\t *\n\t * @param {Object} tok The token\n\t * @returns {boolean} True if the token is a style tag\n\t */\n\tfunction isStyle(tok) {\n\t  return isTag(tok, 'style');\n\t}\n\n/***/ }\n/******/ ])\n});\n;\n//# sourceMappingURL=postscribe.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/postscribe/dist/postscribe.js\n");

/***/ })

}]);