(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["validateFileInputs"],{

/***/ "./app/javascript/packs/validateFileInputs.js":
/*!****************************************************!*\
  !*** ./app/javascript/packs/validateFileInputs.js ***!
  \****************************************************/
/*! exports provided: validateFileInputs */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"validateFileInputs\", function() { return validateFileInputs; });\n/**\n * @file Manages logic to validate file uploads client-side. In general, the\n * validations work by looping over input form fields with a type of file and\n * checking the size and format of the files upload by the user.\n */\n\n/**\n * An object containing the top level MIME type as the key and the max file\n * size in MB for the value. To use a different value than these defaults,\n * simply add a data-max-file-mb attribute to the input form field with the\n * max file size in MB. If that attribute is found, it takes priority over these\n * defaults.\n *\n * @constant {Object.<string, number>}\n */\nvar MAX_FILE_SIZE_MB = Object.freeze({\n  image: 25,\n  video: 50\n});\n/**\n * Permitted file types using the top level MIME type (i.e. image for\n * image/png). To specify permitted file types, simply add a\n * data-permitted-file-types attribute to the input form field as an Array of\n * strings specifying the top level MIME types that are permitted.\n *\n * @constant {string[]}\n */\n\nvar PERMITTED_FILE_TYPES = ['image'];\n/**\n * The maximum length of the file name to prevent errors on the backend when a\n * file name is too long.\n *\n * @constant {number}\n */\n\nvar MAX_FILE_NAME_LENGTH = 250;\n/**\n * Removes any pre-existing error messages from the DOM related to file\n * validation.\n *\n * @param {HTMLElement} fileInput - An input form field with type of file\n */\n\nfunction removeErrorMessage(fileInput) {\n  var errorMessage = fileInput.parentNode.querySelector('div.file-upload-error');\n\n  if (errorMessage) {\n    errorMessage.remove();\n  }\n}\n/**\n * Adds error messages in the form of a div with red text.\n *\n * @param {HTMLElement} fileInput - An input form field with type of file\n * @param {string} msg - The error message to be displayed to the user\n *\n * @returns {HTMLElement} The error element that was added to the DOM\n */\n\n\nfunction addErrorMessage(fileInput, msg) {\n  var fileInputField = fileInput;\n  var error = document.createElement('div');\n  error.style.color = 'red';\n  error.innerHTML = msg;\n  error.classList.add('file-upload-error');\n  fileInputField.parentNode.append(error);\n}\n/**\n * Handles errors for files that are too large.\n *\n * @param {object} fileSizeErrorHandler - A custom function to be ran after the default error handling\n * @param {HTMLElement} fileInput - An input form field with type of file\n * @param {number} fileSizeMb - The size of the file in MB\n * @param {?number} maxFileSizeMb - The max file size limit in MB\n */\n\n\nfunction handleFileSizeError(fileSizeErrorHandler, fileInput, fileSizeMb, maxFileSizeMb) {\n  var fileInputField = fileInput;\n  fileInputField.value = null;\n\n  if (fileSizeErrorHandler) {\n    fileSizeErrorHandler();\n  } else {\n    var errorMessage = \"File size too large (\".concat(fileSizeMb, \" MB).\"); // If a user uploads a file type that we haven't defined a max size limit for then maxFileSizeMb\n    // could be NaN\n\n    if (maxFileSizeMb >= 0) {\n      errorMessage += \" The limit is \".concat(maxFileSizeMb, \" MB.\");\n    }\n\n    addErrorMessage(fileInput, errorMessage);\n  }\n}\n/**\n * Handles errors for files that are not a valid format.\n *\n * @param {object} fileSizeErrorHandler - A custom function to be ran after the default error handling\n * @param {HTMLElement} fileInput - An input form field with type of file\n * @param {string} fileType - The top level file type (i.e. image for image/png)\n * @param {string[]} permittedFileTypes - The top level file types (i.e. image for image/png) that are permitted\n */\n\n\nfunction handleFileTypeError(fileTypeErrorHandler, fileInput, fileType, permittedFileTypes) {\n  var fileInputField = fileInput;\n  fileInputField.value = null;\n\n  if (fileTypeErrorHandler) {\n    fileTypeErrorHandler();\n  } else {\n    var errorMessage = \"Invalid file format (\".concat(fileType, \"). Only \").concat(permittedFileTypes.join(', '), \" files are permitted.\");\n    addErrorMessage(fileInput, errorMessage);\n  }\n}\n/**\n * Handles errors for files with names that are too long.\n *\n * @param {object} fileNameLengthErrorHandler - A custom function to be ran after the default error handling\n * @param {HTMLElement} fileInput - An input form field with type of file\n * @param {number} maxFileNameLength - The max number of characters permitted for a file name\n */\n\n\nfunction handleFileNameLengthError(fileNameLengthErrorHandler, fileInput, maxFileNameLength) {\n  var fileInputField = fileInput;\n  fileInputField.value = null;\n\n  if (fileNameLengthErrorHandler) {\n    fileNameLengthErrorHandler();\n  } else {\n    var errorMessage = \"File name is too long. It can't be longer than \".concat(maxFileNameLength, \" characters.\");\n    addErrorMessage(fileInput, errorMessage);\n  }\n}\n/**\n * Validates the file size and handles the error if it's invalid.\n *\n * @external File\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/File File}\n *\n * @param {File} file - The file attached by the user\n * @param {string} fileType - The top level file type (i.e. image for image/png)\n * @param {HTMLElement} fileInput - An input form field with type of file\n *\n * @returns {Boolean} Returns false if the file is too big. Otherwise, returns true.\n */\n\n\nfunction validateFileSize(file, fileType, fileInput) {\n  var maxFileSizeMb = fileInput.dataset.maxFileSizeMb;\n  var fileSizeErrorHandler = fileInput.dataset.fileSizeErrorHandler;\n  var fileSizeMb = (file.size / (1024 * 1024)).toFixed(2);\n  maxFileSizeMb = Number(maxFileSizeMb || MAX_FILE_SIZE_MB[fileType]);\n  var isValidFileSize = fileSizeMb <= maxFileSizeMb;\n\n  if (!isValidFileSize) {\n    handleFileSizeError(fileSizeErrorHandler, fileInput, fileSizeMb, maxFileSizeMb);\n  }\n\n  return isValidFileSize;\n}\n/**\n * Validates the file type and handles the error if it's invalid.\n *\n * @external File\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/File File}\n *\n * @param {File} file - The file attached by the user\n * @param {string} fileType - The top level file type (i.e. image for image/png)\n * @param {HTMLElement} fileInput - An input form field with type of file\n *\n * @returns {Boolean} Returns false if the files is an invalid format. Otherwise, returns true.\n */\n\n\nfunction validateFileType(file, fileType, fileInput) {\n  var permittedFileTypes = fileInput.dataset.permittedFileTypes;\n\n  if (permittedFileTypes) {\n    permittedFileTypes = JSON.parse(permittedFileTypes);\n  }\n\n  permittedFileTypes = permittedFileTypes || PERMITTED_FILE_TYPES;\n  var fileTypeErrorHandler = fileInput.dataset.fileTypeErrorHandler;\n  var isValidFileType = permittedFileTypes.includes(fileType);\n\n  if (!isValidFileType) {\n    handleFileTypeError(fileTypeErrorHandler, fileInput, fileType, permittedFileTypes);\n  }\n\n  return isValidFileType;\n}\n/**\n * Validates the length of the file name and handles the error if it's invalid.\n *\n * @external File\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/File File}\n *\n * @param {File} file - The file attached by the user\n * @param {HTMLElement} fileInput - An input form field with type of file\n *\n * @returns {Boolean} Returns false if the file name is too long. Otherwise, returns true.\n */\n\n\nfunction validateFileNameLength(file, fileInput) {\n  var maxFileNameLength = fileInput.dataset.maxFileNameLength;\n  maxFileNameLength = Number(maxFileNameLength || MAX_FILE_NAME_LENGTH);\n  var fileNameLengthErrorHandler = fileInput.dataset.fileNameLengthErrorHandler;\n  var isValidFileNameLength = file.name.length <= maxFileNameLength;\n\n  if (!isValidFileNameLength) {\n    handleFileNameLengthError(fileNameLengthErrorHandler, fileInput, maxFileNameLength);\n  }\n\n  return isValidFileNameLength;\n}\n/**\n * This is the core function to handle validations of uploaded files. It loops\n * through all the uploaded files for the given fileInput and checks the file\n * size, file format, and file name length. If a file fails a validation, the\n * error is handled.\n *\n * @param {HTMLElement} fileInput - An input form field with type of file\n *\n * @returns {Boolean} Returns false if any files failed validations. Otherwise, returns true.\n */\n\n\nfunction validateFileInput(fileInput) {\n  var isValidFileInput = true;\n  removeErrorMessage(fileInput);\n  var files = Array.from(fileInput.files);\n\n  for (var i = 0; i < files.length; i += 1) {\n    var file = files[i];\n    var fileType = file.type.split('/')[0];\n    var isValidFileSize = validateFileSize(file, fileType, fileInput);\n\n    if (!isValidFileSize) {\n      isValidFileInput = false;\n      break;\n    }\n\n    var isValidFileType = validateFileType(file, fileType, fileInput);\n\n    if (!isValidFileType) {\n      isValidFileInput = false;\n      break;\n    }\n\n    var isValidFileNameLength = validateFileNameLength(file, fileInput);\n\n    if (!isValidFileNameLength) {\n      isValidFileInput = false;\n      break;\n    }\n  }\n\n  return isValidFileInput;\n}\n/**\n * This function is designed to be exported in areas where we are doing more\n * custom implementations of file uploading using Preact. It can then be used\n * in Preact event handlers. It loops through all file input fields on the DOM\n * and validates any attached files.\n *\n * @returns {Boolean} Returns false if any files failed validations. Otherwise, returns true.\n */\n\n\nfunction validateFileInputs() {\n  var validFileInputs = true;\n  var fileInputs = document.querySelectorAll('input[type=\"file\"]');\n\n  for (var i = 0; i < fileInputs.length; i += 1) {\n    var fileInput = fileInputs[i];\n    var validFileInput = validateFileInput(fileInput);\n\n    if (!validFileInput) {\n      validFileInputs = false;\n      break;\n    }\n  }\n\n  return validFileInputs;\n} // This is written so that it works automagically by just including this pack\n// in a view.\n\nvar fileInputs = document.querySelectorAll('input[type=\"file\"]');\nfileInputs.forEach(function (fileInput) {\n  fileInput.addEventListener('change', function () {\n    validateFileInput(fileInput);\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./app/javascript/packs/validateFileInputs.js\n");

/***/ })

},[["./app/javascript/packs/validateFileInputs.js","runtime~validateFileInputs"]]]);