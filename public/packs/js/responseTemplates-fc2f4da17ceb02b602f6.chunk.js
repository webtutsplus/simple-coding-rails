(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["responseTemplates"],{

/***/ "./app/javascript/packs/responseTemplates.js":
/*!***************************************************!*\
  !*** ./app/javascript/packs/responseTemplates.js ***!
  \***************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _responseTemplates_responseTemplates__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../responseTemplates/responseTemplates */ \"./app/javascript/responseTemplates/responseTemplates.js\");\n\nwindow.InstantClick.on('change', function () {\n  Object(_responseTemplates_responseTemplates__WEBPACK_IMPORTED_MODULE_0__[\"loadResponseTemplates\"])();\n});\nObject(_responseTemplates_responseTemplates__WEBPACK_IMPORTED_MODULE_0__[\"loadResponseTemplates\"])();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvamF2YXNjcmlwdC9wYWNrcy9yZXNwb25zZVRlbXBsYXRlcy5qcz82NmRkIl0sIm5hbWVzIjpbIndpbmRvdyIsIkluc3RhbnRDbGljayIsIm9uIiwibG9hZFJlc3BvbnNlVGVtcGxhdGVzIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFFQUEsTUFBTSxDQUFDQyxZQUFQLENBQW9CQyxFQUFwQixDQUF1QixRQUF2QixFQUFpQyxZQUFNO0FBQ3JDQyxvR0FBcUI7QUFDdEIsQ0FGRDtBQUlBQSxrR0FBcUIiLCJmaWxlIjoiLi9hcHAvamF2YXNjcmlwdC9wYWNrcy9yZXNwb25zZVRlbXBsYXRlcy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGxvYWRSZXNwb25zZVRlbXBsYXRlcyB9IGZyb20gJy4uL3Jlc3BvbnNlVGVtcGxhdGVzL3Jlc3BvbnNlVGVtcGxhdGVzJztcblxud2luZG93Lkluc3RhbnRDbGljay5vbignY2hhbmdlJywgKCkgPT4ge1xuICBsb2FkUmVzcG9uc2VUZW1wbGF0ZXMoKTtcbn0pO1xuXG5sb2FkUmVzcG9uc2VUZW1wbGF0ZXMoKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./app/javascript/packs/responseTemplates.js\n");

/***/ }),

/***/ "./app/javascript/responseTemplates/responseTemplates.js":
/*!***************************************************************!*\
  !*** ./app/javascript/responseTemplates/responseTemplates.js ***!
  \***************************************************************/
/*! exports provided: loadResponseTemplates */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"loadResponseTemplates\", function() { return loadResponseTemplates; });\n/* eslint-disable no-alert */\n\n/* eslint-disable no-restricted-globals */\nfunction toggleTemplateTypeButton(form, e) {\n  var targetType = e.target.dataset.targetType;\n  var activeType = targetType === 'personal' ? 'moderator' : 'personal';\n  e.target.classList.toggle('active');\n  form.getElementsByClassName(\"\".concat(activeType, \"-template-button\"))[0].classList.toggle('active');\n  form.getElementsByClassName(\"\".concat(targetType, \"-responses-container\"))[0].classList.toggle('hidden');\n  form.getElementsByClassName(\"\".concat(activeType, \"-responses-container\"))[0].classList.toggle('hidden');\n}\n\nvar noResponsesHTML = \"\\n<div class=\\\"mod-response-wrapper mod-response-wrapper-empty\\\">\\n  <p>\\uD83E\\uDD14... It looks like you don't have any templates yet.</p>\\n</div>\\n\";\n\nfunction buildHTML(response, typeOf) {\n  if (response.length === 0 && typeOf === 'personal_comment') {\n    return noResponsesHTML;\n  }\n\n  if (typeOf === 'personal_comment') {\n    return response.map(function (obj) {\n      return \"\\n          <div class=\\\"mod-response-wrapper flex mb-4\\\">\\n            <div class=\\\"flex-1\\\">\\n              <h4>\".concat(obj.title, \"</h4>\\n              <p>\").concat(obj.content, \"</p>\\n            </div>\\n            <div class=\\\"pl-2\\\">\\n              <button class=\\\"crayons-btn crayons-btn--secondary crayons-btn--s insert-template-button\\\" type=\\\"button\\\" data-content=\\\"\").concat(obj.content, \"\\\">Insert</button>\\n            </div>\\n          </div>\\n        \");\n    }).join('');\n  }\n\n  if (typeOf === 'mod_comment') {\n    return response.map(function (obj) {\n      return \"\\n            <div class=\\\"mod-response-wrapper mb-4 flex\\\">\\n              <div class=\\\"flex-1\\\">\\n                <h4>\".concat(obj.title, \"</h4>\\n                <p>\").concat(obj.content, \"</p>\\n              </div>\\n              <div class=\\\"flex flex-nowrap pl-2\\\">\\n                <button class=\\\"crayons-btn crayons-btn--s crayons-btn--secondary moderator-submit-button\\\" type=\\\"submit\\\" data-response-template-id=\\\"\").concat(obj.id, \"\\\">Send as Mod</button>\\n                <button class=\\\"crayons-btn crayons-btn--s crayons-btn--outlined insert-template-button\\\" type=\\\"button\\\" data-content=\\\"\").concat(obj.content, \"\\\">Insert</button>\\n              </div>\\n            </div>\\n          \");\n    }).join('');\n  }\n\n  return \"Error \\uD83D\\uDE1E\";\n}\n\nfunction submitAsModerator(responseTemplateId, parentId) {\n  var commentableId = document.getElementById('comment_commentable_id').value;\n  fetch(\"/comments/moderator_create\", {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'X-CSRF-Token': window.csrfToken,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      response_template: {\n        id: responseTemplateId\n      },\n      comment: {\n        body_markdown: '',\n        commentable_id: commentableId,\n        commentable_type: 'Article',\n        parent_id: parentId\n      }\n    })\n  }).then(function (response) {\n    return response.json();\n  }).then(function (response) {\n    if (response.status === 'created') {\n      window.location.pathname = response.path;\n    } else if (response.status === 'comment already exists') {\n      alert('This comment already exists.');\n    } else if (response.error === 'error') {\n      alert(\"There was a problem submitting this comment: \".concat(response.status));\n    }\n  });\n}\n\nvar confirmMsg = \"\\nAre you sure you want to submit this comment as Sloan?\\n\\nIt will be sent immediately and users will be notified.\\n\\nMake sure this is the appropriate comment for the situation.\\n\\nThis action is not reversible.\";\n\nfunction addClickListeners(form) {\n  var responsesContainer = form.getElementsByClassName('response-templates-container')[0];\n  var parentCommentId = form.id !== 'new_comment' && !form.id.includes('edit_comment');\n  var insertButtons = Array.from(responsesContainer.getElementsByClassName('insert-template-button'));\n  var moderatorSubmitButtons = Array.from(responsesContainer.getElementsByClassName('moderator-submit-button'));\n  insertButtons.forEach(function (button) {\n    button.addEventListener('click', function (e) {\n      var content = e.target.dataset.content;\n      var textArea = form.getElementsByTagName('textarea')[0];\n      var textAreaReplaceable = textArea.value === null || textArea.value === '' || confirm('Are you sure you want to replace your current comment draft?');\n\n      if (textAreaReplaceable) {\n        textArea.value = content;\n        textArea.focus();\n        responsesContainer.classList.toggle('hidden');\n      }\n    });\n  });\n  moderatorSubmitButtons.forEach(function (button) {\n    button.addEventListener('click', function (e) {\n      e.preventDefault();\n\n      if (confirm(confirmMsg)) {\n        submitAsModerator(e.target.dataset.responseTemplateId, parentCommentId);\n      }\n    });\n  });\n}\n\nfunction fetchResponseTemplates(typeOf, formId) {\n  var form = document.getElementById(formId);\n  var dataContainer;\n\n  if (typeOf === 'personal_comment') {\n    dataContainer = form.getElementsByClassName('personal-responses-container')[0];\n  } else if (typeOf === 'mod_comment') {\n    dataContainer = form.getElementsByClassName('moderator-responses-container')[0];\n  }\n  /* eslint-disable-next-line no-undef */\n\n\n  fetch(\"/response_templates?type_of=\".concat(typeOf), {\n    method: 'GET',\n    headers: {\n      Accept: 'application/json',\n      'X-CSRF-Token': window.csrfToken,\n      'Content-Type': 'application/json'\n    }\n  }).then(function (response) {\n    return response.json();\n  }).then(function (response) {\n    form.querySelector('img.loading-img').classList.toggle('hidden');\n    dataContainer.innerHTML = buildHTML(response, typeOf);\n    var topLevelData = document.getElementById('response-templates-data');\n    topLevelData.innerHTML = dataContainer.parentElement.innerHTML;\n    addClickListeners(form);\n  });\n}\n\nfunction prepareHeaderButtons(form) {\n  var personalTemplateButton = form.getElementsByClassName('personal-template-button')[0];\n  var modTemplateButton = form.getElementsByClassName('moderator-template-button')[0];\n  personalTemplateButton.addEventListener('click', function (e) {\n    toggleTemplateTypeButton(form, e);\n  });\n  modTemplateButton.addEventListener('click', function (e) {\n    toggleTemplateTypeButton(form, e);\n  });\n  modTemplateButton.classList.remove('hidden');\n  modTemplateButton.addEventListener('click', function () {\n    var topLevelData = document.getElementById('response-templates-data');\n    var modDataNotFetched = topLevelData.innerHTML !== '' ? topLevelData.getElementsByClassName('moderator-responses-container')[0].childElementCount === 0 : false;\n\n    if (modDataNotFetched) {\n      form.querySelector('img.loading-img').classList.toggle('hidden');\n      fetchResponseTemplates('mod_comment', form.id);\n    }\n  }, {\n    once: true\n  });\n}\n\nfunction copyData(responsesContainer) {\n  responsesContainer.innerHTML = document.getElementById('response-templates-data').innerHTML;\n}\n\nfunction loadData(form) {\n  form.querySelector('img.loading-img').classList.toggle('hidden');\n  fetchResponseTemplates('personal_comment', form.id);\n}\n\nfunction openButtonCallback(form) {\n  var responsesContainer = form.getElementsByClassName('response-templates-container')[0];\n  var dataFetched = document.getElementById('response-templates-data').innerHTML !== '';\n  responsesContainer.classList.toggle('hidden');\n  var containerHidden = responsesContainer.classList.contains('hidden');\n\n  if (dataFetched && !containerHidden) {\n    copyData(responsesContainer);\n    addClickListeners(form);\n  } else if (!dataFetched && !containerHidden) {\n    loadData(form);\n  }\n  /* eslint-disable-next-line no-undef */\n\n\n  if (userData().moderator_for_tags.length > 0) {\n    prepareHeaderButtons(form);\n  } else {\n    form.getElementsByClassName('personal-template-button')[0].classList.add('hidden');\n  }\n}\n\nfunction prepareOpenButton(form) {\n  var button = form.getElementsByClassName('response-templates-button')[0];\n\n  if (!button) {\n    return;\n  }\n\n  button.addEventListener('click', function () {\n    openButtonCallback(form);\n  });\n  button.dataset.hasListener = 'true';\n}\n\nfunction observeForReplyClick() {\n  var config = {\n    childList: true,\n    subtree: true\n  };\n\n  var callback = function callback(mutations) {\n    var form = Array.from(mutations[0].addedNodes).filter(function (node) {\n      return node.nodeName === 'FORM';\n    });\n\n    if (form.length > 0) {\n      prepareOpenButton(form[0]);\n    }\n  };\n\n  var observer = new MutationObserver(callback);\n  var commentTree = document.getElementById('comment-trees-container');\n\n  if (commentTree) {\n    observer.observe(commentTree, config);\n  }\n\n  window.addEventListener('beforeunload', function () {\n    observer.disconnect();\n  });\n  window.InstantClick.on('change', function () {\n    observer.disconnect();\n  });\n}\n\nfunction handleLoggedOut() {\n  var _document$getElements;\n\n  // global method from app/assets/javascripts/utilities/showModal.js\n  (_document$getElements = document.getElementsByClassName('response-templates-button')[0]) === null || _document$getElements === void 0 ? void 0 : _document$getElements.addEventListener('click', showModal);\n  /* eslint-disable-line no-undef */\n}\n/* eslint-enable no-alert */\n\n/* eslint-enable no-restricted-globals */\n\n\nfunction loadResponseTemplates() {\n  var userStatus = document.body.dataset.userStatus;\n  var form = document.getElementsByClassName('comment-form')[0];\n\n  if (document.getElementById('response-templates-data')) {\n    if (userStatus === 'logged-out') {\n      handleLoggedOut();\n    }\n\n    if (form && form.getElementsByClassName('response-templates-button')[0].dataset.hasListener === 'false') {\n      prepareOpenButton(form);\n    }\n\n    observeForReplyClick();\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./app/javascript/responseTemplates/responseTemplates.js\n");

/***/ })

},[["./app/javascript/packs/responseTemplates.js","runtime~responseTemplates"]]]);